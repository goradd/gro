// Code generated by goradd-orm. DO NOT EDIT.

package goradd_unit

import (
	"bytes"
	"context"
	"encoding/gob"
	"encoding/json"
	"fmt"
	"unicode/utf8"

	"github.com/goradd/anyutil"
	"github.com/goradd/maps"
	"github.com/goradd/orm/_test/gen/orm/goradd_unit/node"
	"github.com/goradd/orm/pkg/broadcast"
	"github.com/goradd/orm/pkg/db"
	"github.com/goradd/orm/pkg/op"
	"github.com/goradd/orm/pkg/query"
)

// LeafNlBase is embedded in a LeafNl object and provides the ORM access to the database.
// The member variables of the structure are private and should not normally be accessed by the LeafNl embedder.
// Instead, use the accessor functions.
type leafNlBase struct {
	id               string
	idIsLoaded       bool
	idIsDirty        bool
	name             string
	nameIsLoaded     bool
	nameIsDirty      bool
	groLock          int64
	groLockIsLoaded  bool
	rootNlID         string
	rootNlIDIsNull   bool
	rootNlIDIsLoaded bool
	rootNlIDIsDirty  bool

	// References
	rootNl *RootNl

	// Many-Many references
	leaf2s        maps.SliceMap[string, *LeafNl]
	leaf2sPks     []string // Primary keys to associate at Save time
	leaf2sIsDirty bool
	leaf1s        maps.SliceMap[string, *LeafNl]
	leaf1sPks     []string // Primary keys to associate at Save time
	leaf1sIsDirty bool

	// Custom aliases, if specified
	_aliases map[string]any

	// Indicates whether this is a new object, or one loaded from the database. Used by Save to know whether to Insert or Update.
	_restored bool

	_originalPK string
}

// IDs used to access the LeafNl object fields by name using the Get function.
// doc: type=LeafNl
const (
	LeafNlIDField       = `id`
	LeafNlNameField     = `name`
	LeafNlGroLockField  = `groLock`
	LeafNlRootNlIDField = `rootNlID`
	LeafNlRootNlField   = `rootNl`
	LeafNlLeaf2sField   = `leaf2s`
	LeafNlLeaf1sField   = `leaf1s`
)

const LeafNlIDMaxLength = 32       // The number of runes the column can hold
const LeafNlNameMaxLength = 100    // The number of runes the column can hold
const LeafNlRootNlIDMaxLength = 32 // The number of runes the column can hold

// Initialize or re-initialize a LeafNl database object to default values.
// The primary key will get a temporary unique value which will be replaced when the object is saved.
func (o *leafNlBase) Initialize() {
	o.id = db.TemporaryPrimaryKey()
	o.idIsLoaded = true
	o.idIsDirty = false

	o.name = ""
	o.nameIsLoaded = false
	o.nameIsDirty = false

	o.groLock = 0
	o.groLockIsLoaded = false

	o.rootNlID = ""
	o.rootNlIDIsNull = true
	o.rootNlIDIsLoaded = false
	o.rootNlIDIsDirty = false

	// Many-Many reference objects.
	o.leaf2s.Clear()
	o.leaf2sPks = nil
	o.leaf2sIsDirty = false
	o.leaf1s.Clear()
	o.leaf1sPks = nil
	o.leaf1sIsDirty = false

	o._aliases = nil
	o._restored = false
}

// Copy copies most fields to a new LeafNl object.
// Forward reference ids will be copied, but reverse and many-many references will not.
// Attached objects will not be included in the copy.
// Automatically generated fields will not be included in the copy.
// The primary key field will not be copied, since it is normally auto-generated.
// Call Save() on the new object to save it into the database.
// Copy might panic if any fields in the database were set to a size larger than the
// maximum size through a process that accessed the database outside of the ORM.
func (o *leafNlBase) Copy() (newObject *LeafNl) {
	newObject = NewLeafNl()
	if o.idIsLoaded {
		newObject.SetID(o.id)
	}
	if o.nameIsLoaded {
		newObject.SetName(o.name)
	}
	if o.rootNlIDIsLoaded {
		newObject.SetRootNlID(o.rootNlID)
	}
	return
}

// OriginalPrimaryKey returns the value of the primary key that was originally loaded into the object when it was
// read from the database.
func (o *leafNlBase) OriginalPrimaryKey() string {
	return o._originalPK
}

// PrimaryKey returns the value of the primary key of the record.
func (o *leafNlBase) PrimaryKey() string {
	if o._restored && !o.idIsLoaded {
		panic("ID was not selected in the last query and has not been set, and so PrimaryKey is not valid")
	}
	return o.id
}

// SetPrimaryKey sets the value of the primary key in the object, to be saved later in the database using the Save() function.
// Normally you will not need to call this function, since the primary key value is automatically generated by the
// database driver. Exceptions might include importing data to a new database, or correcting primary key conflicts when
// merging data.
// You cannot change a primary key for a record that has been written to the database. While SQL databases will
// allow it, NoSql databases will not. Save a copy and delete this one instead.
func (o *leafNlBase) SetPrimaryKey(v string) {
	o.SetID(v)
}

// ID returns the loaded value of the id field in the database.
func (o *leafNlBase) ID() string {
	if o._restored && !o.idIsLoaded {
		panic("ID was not selected in the last query and has not been set, and so is not valid")
	}
	return o.id
}

// IDIsLoaded returns true if the value was loaded from the database or has been set.
func (o *leafNlBase) IDIsLoaded() bool {
	return o.idIsLoaded
}

// SetID sets the value of ID in the object, to be saved later in the database using the Save() function.
// Normally you will not need to call this function, since the ID value is automatically generated by the
// database driver. Exceptions might include importing data to a new database, or correcting primary key conflicts when
// merging data.
// You cannot change a primary key for a record that has been written to the database. While SQL databases will
// allow it, NoSql databases will not. Save a copy and delete this one instead.
func (o *leafNlBase) SetID(v string) {
	if o._restored {
		panic("error: Do not change a primary key for a record that has been saved. Instead, save a copy and delete the original.")
	}
	if utf8.RuneCountInString(v) > LeafNlIDMaxLength {
		panic("attempted to set LeafNl.ID to a value larger than its maximum length in runes")
	}
	o.idIsLoaded = true
	o.idIsDirty = true
	o.id = v
}

// Name returns the value of the loaded name field in the database.
func (o *leafNlBase) Name() string {
	if o._restored && !o.nameIsLoaded {
		panic("Name was not selected in the last query and has not been set, and so is not valid")
	}
	return o.name
}

// NameIsLoaded returns true if the value was loaded from the database or has been set.
func (o *leafNlBase) NameIsLoaded() bool {
	return o.nameIsLoaded
}

// SetName sets the value of Name in the object, to be saved later in the database using the Save() function.
func (o *leafNlBase) SetName(v string) {
	if utf8.RuneCountInString(v) > LeafNlNameMaxLength {
		panic("attempted to set LeafNl.Name to a value larger than its maximum length in runes")
	}
	if o._restored &&
		o.nameIsLoaded && // if it was not selected, then make sure it gets set, since our end comparison won't be valid
		o.name == v {
		// no change
		return
	}

	o.nameIsLoaded = true
	o.name = v
	o.nameIsDirty = true
}

// GroLock returns the value of the loaded gro_lock field in the database.
func (o *leafNlBase) GroLock() int64 {
	if o._restored && !o.groLockIsLoaded {
		panic("GroLock was not selected in the last query and has not been set, and so is not valid")
	}
	return o.groLock
}

// GroLockIsLoaded returns true if the value was loaded from the database or has been set.
func (o *leafNlBase) GroLockIsLoaded() bool {
	return o.groLockIsLoaded
}

// RootNlID returns the value of the loaded root_nl_id field in the database.
func (o *leafNlBase) RootNlID() string {
	if o._restored && !o.rootNlIDIsLoaded {
		panic("RootNlID was not selected in the last query and has not been set, and so is not valid")
	}
	return o.rootNlID
}

// RootNlIDIsLoaded returns true if the value was loaded from the database or has been set.
func (o *leafNlBase) RootNlIDIsLoaded() bool {
	return o.rootNlIDIsLoaded
}

// RootNlIDIsNull returns true if the related database value is null.
func (o *leafNlBase) RootNlIDIsNull() bool {
	return o.rootNlIDIsNull
}

// SetRootNlID sets the value of RootNlID in the object, to be saved later in the database using the Save() function.
func (o *leafNlBase) SetRootNlID(v string) {
	if utf8.RuneCountInString(v) > LeafNlRootNlIDMaxLength {
		panic("attempted to set LeafNl.RootNlID to a value larger than its maximum length in runes")
	}
	if o._restored &&
		o.rootNlIDIsLoaded && // if it was not selected, then make sure it gets set, since our end comparison won't be valid
		!o.rootNlIDIsNull && // if the db value is null, force a set of value
		o.rootNlID == v {
		// no change
		return
	}

	o.rootNlIDIsLoaded = true
	o.rootNlID = v
	o.rootNlIDIsDirty = true
	o.rootNlIDIsNull = false
	if o.rootNl != nil &&
		o.rootNlID != o.rootNl.PrimaryKey() {
		o.rootNl = nil
	}
}

// SetRootNlIDToNull() will set the root_nl_id value in the database to NULL.
// RootNlID() will return the column's default value after this.
// Will also set the attached o.RootNl to nil.
func (o *leafNlBase) SetRootNlIDToNull() {
	if !o.rootNlIDIsLoaded || !o.rootNlIDIsNull {
		// If we know it is null in the database, don't save it
		o.rootNlIDIsDirty = true
	}
	o.rootNlIDIsLoaded = true
	o.rootNlIDIsNull = true
	o.rootNlID = ""
	o.rootNl = nil
}

// RootNl returns the current value of the loaded RootNl, and nil if its not loaded.
func (o *leafNlBase) RootNl() *RootNl {
	return o.rootNl
}

// LoadRootNl returns the related RootNl. If it is not already loaded,
// it will attempt to load it, provided the RootNlID column has been loaded first.
func (o *leafNlBase) LoadRootNl(ctx context.Context) (*RootNl, error) {
	var err error

	if o.rootNl == nil {
		if !o.rootNlIDIsLoaded {
			panic("RootNlID must be selected in the previous query")
		}
		// Load and cache
		o.rootNl, err = LoadRootNl(ctx, o.rootNlID)
	}
	return o.rootNl, err
}

// SetRootNl will set the reference to rootNl. The referenced object
// will be saved when LeafNl is saved. Pass nil to break the connection.
func (o *leafNlBase) SetRootNl(rootNl *RootNl) {
	o.rootNlIDIsLoaded = true
	if rootNl == nil {
		if !o.rootNlIDIsNull || !o._restored {
			o.rootNlIDIsNull = true
			o.rootNlIDIsDirty = true
			o.rootNlID = ""
			o.rootNl = nil
		}
	} else {
		o.rootNl = rootNl
		if o.rootNlIDIsNull || !o._restored || o.rootNlID != rootNl.PrimaryKey() {
			o.rootNlIDIsNull = false
			o.rootNlID = rootNl.PrimaryKey()
			o.rootNlIDIsDirty = true
		}
	}
}

// GetAlias returns the value for the Alias node aliasKey that was returned in the most
// recent query.
func (o *leafNlBase) GetAlias(aliasKey string) query.AliasValue {
	if a, ok := o._aliases[aliasKey]; ok {
		return query.NewAliasValue(a)
	} else {
		panic("Alias " + aliasKey + " not found.")
	}
}

// IsNew returns true if the object will create a new record when saved.
func (o *leafNlBase) IsNew() bool {
	return !o._restored
}

// Leaf2 returns a single LeafNl object by primary key pk, if one was loaded.
// Otherwise, it will return nil.
func (o *leafNlBase) Leaf2(pk string) *LeafNl {
	return o.leaf2s.Get(pk)
}

// Leaf2s returns a slice of LeafNl objects if loaded. If not loaded, will return nil.
// The values will be ordered by the latest query or in the order they were assigned.
func (o *leafNlBase) Leaf2s() []*LeafNl {
	return o.leaf2s.Values()
}

// SetLeaf2s sets the associated objects to the given slice of LeafNl objects
// in preparation for saving. The associations will not be updated until Save() is called.
// Objects that are modified or are new will be saved before completing the association.
func (o *leafNlBase) SetLeaf2s(objs ...*LeafNl) {
	o.leaf2s.Clear()
	o.leaf2sIsDirty = true
	o.leaf2sPks = nil
	for _, obj := range objs {
		o.leaf2s.Set(obj.PrimaryKey(), obj)
	}
}

// SetLeaf2sByID prepares to associate LeafNl objects by
// the primary keys in ids.
// If objects are currently loaded, they will be unloaded.
// The association does not take place until Save() is called. Calling Load before calling
// Save will load the items that will be associated in the database after the Save call.
// After calling Save, the objects will be unloaded, and you must call Load again if you want
// them loaded.
func (o *leafNlBase) SetLeaf2sByID(ids ...string) {
	o.leaf2s.Clear()
	o.leaf2sPks = ids
	o.leaf2sIsDirty = true
}

// LoadLeaf2s loads the LeafNl objects associated through the Leaf2-Leaf1 relationship.
func (o *leafNlBase) LoadLeaf2s(ctx context.Context) ([]*LeafNl, error) {
	if o.leaf2sIsDirty && o.leaf2sPks == nil {
		panic("dirty many-many relationships cannot be loaded; call Save() first")
	}

	var objs []*LeafNl
	var err error

	if o.leaf2sPks != nil {
		// Load the objects that will be associated after a Save
		objs, err = QueryLeafNls(ctx).
			Where(op.In(node.LeafNl().PrimaryKeys()[0], o.leaf2sPks...)).
			Load()
	} else {
		objs, err = QueryLeafNls(ctx).
			Where(op.Equal(node.LeafNl().Leaf1s().PrimaryKey(), o.PrimaryKey())).
			Load()
	}
	if err != nil {
		return nil, err
	}

	o.leaf2s.Clear()
	for _, obj := range objs {
		o.leaf2s.Set(obj.PrimaryKey(), obj)
	}
	return o.leaf2s.Values(), err
}

// CountLeaf2s counts the number of associated leaf2s objects in the database.
// Note that this returns what is reflected by the database at that instant, and not what
// is the count of the loaded objects.
func (o *leafNlBase) CountLeaf2s(ctx context.Context) (int, error) {
	return QueryLeafNls(ctx).
		Where(op.Equal(node.LeafNl().Leaf1s(), o.PrimaryKey())).
		Count()

}

// Leaf1 returns a single LeafNl object by primary key pk, if one was loaded.
// Otherwise, it will return nil.
func (o *leafNlBase) Leaf1(pk string) *LeafNl {
	return o.leaf1s.Get(pk)
}

// Leaf1s returns a slice of LeafNl objects if loaded. If not loaded, will return nil.
// The values will be ordered by the latest query or in the order they were assigned.
func (o *leafNlBase) Leaf1s() []*LeafNl {
	return o.leaf1s.Values()
}

// SetLeaf1s sets the associated objects to the given slice of LeafNl objects
// in preparation for saving. The associations will not be updated until Save() is called.
// Objects that are modified or are new will be saved before completing the association.
func (o *leafNlBase) SetLeaf1s(objs ...*LeafNl) {
	o.leaf1s.Clear()
	o.leaf1sIsDirty = true
	o.leaf1sPks = nil
	for _, obj := range objs {
		o.leaf1s.Set(obj.PrimaryKey(), obj)
	}
}

// SetLeaf1sByID prepares to associate LeafNl objects by
// the primary keys in ids.
// If objects are currently loaded, they will be unloaded.
// The association does not take place until Save() is called. Calling Load before calling
// Save will load the items that will be associated in the database after the Save call.
// After calling Save, the objects will be unloaded, and you must call Load again if you want
// them loaded.
func (o *leafNlBase) SetLeaf1sByID(ids ...string) {
	o.leaf1s.Clear()
	o.leaf1sPks = ids
	o.leaf1sIsDirty = true
}

// LoadLeaf1s loads the LeafNl objects associated through the Leaf1-Leaf2 relationship.
func (o *leafNlBase) LoadLeaf1s(ctx context.Context) ([]*LeafNl, error) {
	if o.leaf1sIsDirty && o.leaf1sPks == nil {
		panic("dirty many-many relationships cannot be loaded; call Save() first")
	}

	var objs []*LeafNl
	var err error

	if o.leaf1sPks != nil {
		// Load the objects that will be associated after a Save
		objs, err = QueryLeafNls(ctx).
			Where(op.In(node.LeafNl().PrimaryKeys()[0], o.leaf1sPks...)).
			Load()
	} else {
		objs, err = QueryLeafNls(ctx).
			Where(op.Equal(node.LeafNl().Leaf2s().PrimaryKey(), o.PrimaryKey())).
			Load()
	}
	if err != nil {
		return nil, err
	}

	o.leaf1s.Clear()
	for _, obj := range objs {
		o.leaf1s.Set(obj.PrimaryKey(), obj)
	}
	return o.leaf1s.Values(), err
}

// CountLeaf1s counts the number of associated leaf1s objects in the database.
// Note that this returns what is reflected by the database at that instant, and not what
// is the count of the loaded objects.
func (o *leafNlBase) CountLeaf1s(ctx context.Context) (int, error) {
	return QueryLeafNls(ctx).
		Where(op.Equal(node.LeafNl().Leaf2s(), o.PrimaryKey())).
		Count()

}

// LoadLeafNl returns a LeafNl from the database.
// selectNodes lets you provide nodes for selecting specific fields or additional fields from related tables.
// See [LeafNlsBuilder.Select] for more info.
func LoadLeafNl(ctx context.Context, pk string, selectNodes ...query.Node) (*LeafNl, error) {
	return queryLeafNls(ctx).
		Where(op.Equal(node.LeafNl().ID(), pk)).
		Select(selectNodes...).
		Get()
}

// HasLeafNl returns true if a LeafNl with the given primary key exists in the database.
// doc: type=LeafNl
func HasLeafNl(ctx context.Context, pk string) (bool, error) {
	v, err := queryLeafNls(ctx).
		Where(op.Equal(node.LeafNl().ID(), pk)).
		Count()
	return v > 0, err
}

// LoadLeafNlsByRootNlID queries LeafNl objects by the given index values.
// selectNodes optionally let you provide nodes for joining to other tables or selecting specific fields.
// See [LeafNlsBuilder.Select].
// If you need a more elaborate query, use QueryLeafNls() to start a query builder.
func LoadLeafNlsByRootNlID(ctx context.Context, rootNlID interface{}, selectNodes ...query.Node) ([]*LeafNl, error) {
	q := queryLeafNls(ctx)
	if rootNlID == nil {
		q = q.Where(op.IsNull(node.LeafNl().RootNlID()))
	} else {
		q = q.Where(op.Equal(node.LeafNl().RootNlID(), rootNlID))
	}
	return q.Select(selectNodes...).Load()
}

// HasLeafNlByRootNlID returns true if the
// given index values exist in the database.
// doc: type=LeafNl
func HasLeafNlByRootNlID(ctx context.Context, rootNlID interface{}) (bool, error) {
	q := queryLeafNls(ctx)
	if rootNlID == nil {
		q = q.Where(op.IsNull(node.LeafNl().RootNlID()))
	} else {
		q = q.Where(op.Equal(node.LeafNl().RootNlID(), rootNlID))
	}
	v, err := q.Count()
	return v > 0, err
}

// The LeafNlBuilder uses a builder pattern to create a query on the database.
// Create a LeafNlBuilder by calling QueryLeafNls, which will select all
// the LeafNl object in the database. Then filter and arrange those objects
// by calling Where, Select, etc.
// End a query by calling either Load, LoadI, LoadCursor, Get, or Count.
// A LeafNlBuilder stores the context it will use to perform the query, and thus is
// meant to be a short-lived object. You should not save it for later use.
type LeafNlBuilder struct {
	builder *query.Builder
	ctx     context.Context
}

func newLeafNlBuilder(ctx context.Context) *LeafNlBuilder {
	b := LeafNlBuilder{
		builder: query.NewBuilder(node.LeafNl()),
		ctx:     ctx,
	}
	return &b
}

// Load terminates the query builder, performs the query, and returns a slice of LeafNl objects.
// If there are any errors, nil is returned and the specific error is stored in the context.
// If no results come back from the query, it will return a non-nil empty slice.
func (b *LeafNlBuilder) Load() (leafNls []*LeafNl, err error) {
	b.builder.Command = query.BuilderCommandLoad
	database := db.GetDatabase("goradd_unit")
	var results any

	ctx := b.ctx
	results, err = database.BuilderQuery(ctx, b.builder)
	if results == nil || err != nil {
		return
	}
	for _, item := range results.([]map[string]any) {
		o := new(LeafNl)
		o.unpack(item, o)
		leafNls = append(leafNls, o)
	}
	return
}

// LoadI terminates the query builder, performs the query, and returns a slice of interfaces.
// This can then satisfy a variety of interfaces that load arrays of objects, including KeyLabeler.
// If there are any errors, nil is returned and the specific error is stored in the context.
// If no results come back from the query, it will return a non-nil empty slice.
func (b *LeafNlBuilder) LoadI() (leafNls []query.OrmObj, err error) {
	b.builder.Command = query.BuilderCommandLoad
	database := db.GetDatabase("goradd_unit")
	var results any

	ctx := b.ctx
	results, err = database.BuilderQuery(ctx, b.builder)
	if results == nil || err != nil {
		return
	}
	for _, item := range results.([]map[string]any) {
		o := new(LeafNl)
		o.unpack(item, o)
		leafNls = append(leafNls, o)
	}
	return
}

// LoadCursor terminates the query builder, performs the query, and returns a cursor to the query.
//
// A query cursor is useful for dealing with large amounts of query results. However, there are some
// limitations to its use. When working with SQL databases, you cannot use a cursor while querying
// many-to-many or reverse relationships that will create an array of values.
//
// Call Next() on the returned cursor object to step through the results. Make sure you call Close
// on the cursor object when you are done. You should use
//
//	defer cursor.Close()
//
// to make sure the cursor gets closed.
func (b *LeafNlBuilder) LoadCursor() (leafNlsCursor, error) {
	b.builder.Command = query.BuilderCommandLoadCursor
	database := db.GetDatabase("goradd_unit")
	result, err := database.BuilderQuery(b.ctx, b.builder)
	var cursor query.CursorI
	if result != nil {
		cursor = result.(query.CursorI)
	}
	return leafNlsCursor{cursor}, err
}

type leafNlsCursor struct {
	query.CursorI
}

// Next returns the current LeafNl object and moves the cursor to the next one.
//
// If there are no more records, it returns nil.
func (c leafNlsCursor) Next() (*LeafNl, error) {
	if c.CursorI == nil {
		return nil, nil
	}

	row, err := c.CursorI.Next()
	if row == nil || err != nil {
		return nil, err
	}
	o := new(LeafNl)
	o.unpack(row, o)
	return o, nil
}

// Get is a convenience method to return only the first item found in a query.
// The entire query is performed, so you should generally use this only if you know
// you are selecting on one or very few items.
// If an error occurs, or no results are found, a nil is returned.
func (b *LeafNlBuilder) Get() (*LeafNl, error) {
	results, err := b.Load()
	if err != nil || len(results) == 0 {
		return nil, err
	}
	return results[0], nil
}

// Where adds a condition to filter what gets selected.
// Calling Where multiple times will AND the conditions together.
func (b *LeafNlBuilder) Where(c query.Node) *LeafNlBuilder {
	b.builder.Where(c)
	return b
}

// OrderBy specifies how the resulting data should be sorted.
// By default, the given nodes are sorted in ascending order.
// Add Descending() to the node to specify that it should be sorted in descending order.
func (b *LeafNlBuilder) OrderBy(nodes ...query.Sorter) *LeafNlBuilder {
	b.builder.OrderBy(nodes...)
	return b
}

// Limit will return a subset of the data, limited to the offset and number of rows specified.
// For large data sets and specific types of queries, this can be slow, because it will perform
// the entire query before computing the limit.
// You cannot limit a query that has embedded arrays.
func (b *LeafNlBuilder) Limit(maxRowCount int, offset int) *LeafNlBuilder {
	b.builder.Limit(maxRowCount, offset)
	return b
}

// Select specifies what specific columns will be loaded with data.
// By default, all the columns of the leaf_nl table will be queried and loaded.
// If nodes contains columns from the leaf_nl table, that will limit the columns queried and loaded to only those columns.
// If related tables are specified, then all the columns from those tables are queried, selected and joined to the result.
// If columns in related tables are specified, then only those columns will be queried and loaded.
// Depending on the query, additional columns may automatically be added to the query. In particular, primary key columns
// will be added in most situations. The exception to this would be in distinct queries, group by queries, or subqueries.
func (b *LeafNlBuilder) Select(nodes ...query.Node) *LeafNlBuilder {
	b.builder.Select(nodes...)
	return b
}

// Calculation adds operation as an aliased value onto base.
// After the query, you can read the data by passing alias to GetAlias on the returned object.
func (b *LeafNlBuilder) Calculation(base query.TableNodeI, alias string, operation query.OperationNodeI) *LeafNlBuilder {
	b.builder.Calculation(base, alias, operation)
	return b
}

// Distinct removes duplicates from the results of the query.
// Adding a Select() is usually required.
func (b *LeafNlBuilder) Distinct() *LeafNlBuilder {
	b.builder.Distinct()
	return b
}

// GroupBy controls how results are grouped when using aggregate functions with Calculation.
func (b *LeafNlBuilder) GroupBy(nodes ...query.Node) *LeafNlBuilder {
	b.builder.GroupBy(nodes...)
	return b
}

// Having does additional filtering on the results of the query after the query is performed.
func (b *LeafNlBuilder) Having(node query.Node) *LeafNlBuilder {
	b.builder.Having(node)
	return b
}

// Count terminates a query and returns just the number of items in the result.
// If you have Select or Calculation columns in the query, it will count NULL results as well.
// To not count NULL values, use Where in the builder with a NotNull operation.
// To count distinct combinations of items, call Distinct() on the builder.
func (b *LeafNlBuilder) Count() (int, error) {
	b.builder.Command = query.BuilderCommandCount
	database := db.GetDatabase("goradd_unit")

	ctx := b.ctx
	results, err := database.BuilderQuery(ctx, b.builder)
	if results == nil || err != nil {
		return 0, err
	}
	return results.(int), nil
}

// CountLeafNls returns the total number of items in the leaf_nl table.
func CountLeafNls(ctx context.Context) (int, error) {
	return QueryLeafNls(ctx).Count()
}

// CountLeafNlsByRootNlID queries the database and returns the number of LeafNl objects that
// have rootNlID.
// doc: type=LeafNl
func CountLeafNlsByRootNlID(ctx context.Context, rootNlID string) (int, error) {
	v_rootNlID := rootNlID
	return QueryLeafNls(ctx).
		Where(op.Equal(node.LeafNl().RootNlID(), v_rootNlID)).
		Count()
}

// unpack recursively transforms data coming from the database into ORM objects.
func (o *leafNlBase) unpack(m map[string]interface{}, objThis *LeafNl) {

	if v, ok := m["id"]; ok && v != nil {
		if o.id, ok = v.(string); ok {
			o.idIsLoaded = true
			o.idIsDirty = false
			o._originalPK = o.id
		} else {
			panic("Wrong type found for id.")
		}
	} else {
		o.idIsLoaded = false
		o.id = ""
		o.idIsDirty = false
	}

	if v, ok := m["name"]; ok && v != nil {
		if o.name, ok = v.(string); ok {
			o.nameIsLoaded = true
			o.nameIsDirty = false
		} else {
			panic("Wrong type found for name.")
		}
	} else {
		o.nameIsLoaded = false
		o.name = ""
		o.nameIsDirty = false
	}

	if v, ok := m["groLock"]; ok && v != nil {
		if o.groLock, ok = v.(int64); ok {
			o.groLockIsLoaded = true
		} else {
			panic("Wrong type found for groLock.")
		}
	} else {
		o.groLockIsLoaded = false
		o.groLock = 0
	}

	if v, ok := m["rootNlID"]; ok {
		if v == nil {
			o.rootNlID = ""
			o.rootNlIDIsNull = true
			o.rootNlIDIsLoaded = true
			o.rootNlIDIsDirty = false
		} else if o.rootNlID, ok = v.(string); ok {
			o.rootNlIDIsNull = false
			o.rootNlIDIsLoaded = true
			o.rootNlIDIsDirty = false
		} else {
			panic("Wrong type found for rootNlID.")
		}
	} else {
		o.rootNlIDIsLoaded = false
		o.rootNlIDIsNull = true
		o.rootNlID = ""
		o.rootNlIDIsDirty = false
	}

	if v, ok := m["rootNl"]; ok {
		if rootNl, ok2 := v.(map[string]any); ok2 {
			o.rootNl = new(RootNl)
			o.rootNl.unpack(rootNl, o.rootNl)
			// mirror foreign key with loaded object
			o.rootNlID = o.rootNl.PrimaryKey()
			o.rootNlIDIsNull = false
			o.rootNlIDIsLoaded = true
			o.rootNlIDIsDirty = false
		} else {
			panic("Wrong type found for RootNl object.")
		}
	} else {
		o.rootNl = nil
	}

	// Many-Many references

	if v, ok := m["leaf2s"]; ok {
		if v2, ok2 := v.([]map[string]any); ok2 {
			o.leaf2s.Clear()

			for _, v3 := range v2 {
				obj := new(LeafNl)
				obj.unpack(v3, obj)
				o.leaf2s.Set(obj.PrimaryKey(), obj)
			}
			o.leaf2sPks = nil
		} else {
			panic("Wrong type found for leaf2s object.")
		}
	} else {
		o.leaf2s.Clear()
		o.leaf2sPks = nil
	}

	if v, ok := m["leaf1s"]; ok {
		if v2, ok2 := v.([]map[string]any); ok2 {
			o.leaf1s.Clear()

			for _, v3 := range v2 {
				obj := new(LeafNl)
				obj.unpack(v3, obj)
				o.leaf1s.Set(obj.PrimaryKey(), obj)
			}
			o.leaf1sPks = nil
		} else {
			panic("Wrong type found for leaf1s object.")
		}
	} else {
		o.leaf1s.Clear()
		o.leaf1sPks = nil
	}

	if v, ok := m["aliases_"]; ok {
		o._aliases = v.(map[string]any)
	}

	o._restored = true

}

// save will update or insert the object, depending on the state of the object.
func (o *leafNlBase) save(ctx context.Context) error {
	if o._restored {
		return o.update(ctx)
	} else {
		return o.insert(ctx)
	}
}

// update will update the values in the database, saving any changed values.
// If the table has auto-generated values, those will be updated automatically.
func (o *leafNlBase) update(ctx context.Context) error {
	if !o._restored {
		panic("cannot update a record that was not originally read from the database.")
	}
	if !o.IsDirty() {
		return nil // nothing to save
	}

	var modifiedFields map[string]interface{}

	d := Database()
	err := db.WithTransaction(ctx, d, func(ctx context.Context) error {
		// Save loaded RootNl object to get its new pk and update it here.
		if o.rootNl != nil {
			if err := o.rootNl.Save(ctx); err != nil {
				return err
			}
			o.SetRootNlID(o.rootNl.PrimaryKey())
		}

		modifiedFields = getLeafNlUpdateFields(o)
		if len(modifiedFields) != 0 {
			err2 := d.Update(ctx, "leaf_nl",
				map[string]any{
					"id": o._originalPK,
				},
				modifiedFields,
				"gro_lock",
				o.GroLock(),
			)
			if err2 != nil {
				return err2
			}
		}

		{
			keys := o.leaf2s.Keys() // Make a copy of the keys, since we will change the slicemap while iterating
			for i, k := range keys {
				obj := o.leaf2s.Get(k)
				if err := obj.Save(ctx); err != nil {
					return err
				}
				if obj.PrimaryKey() != k {
					// update key in the slice map without changing the order
					o.leaf2s.Delete(k)
					o.leaf2s.SetAt(i, obj.PrimaryKey(), obj)
				}
			}
			if o.leaf2sIsDirty {
				if len(o.leaf2sPks) != 0 {
					if err := db.AssociateOnly(ctx,
						d,
						"leaf_nl_assn",
						"leaf_1_id",
						o.PrimaryKey(),
						"leaf_2_id",
						o.leaf2sPks); err != nil {
						return err
					}
				} else {
					if err := db.AssociateOnly(ctx,
						d,
						"leaf_nl_assn",
						"leaf_1_id",
						o.PrimaryKey(),
						"leaf_2_id",
						o.leaf2s.Keys()); err != nil {
						return err
					}
				}
			}
		}

		{
			keys := o.leaf1s.Keys() // Make a copy of the keys, since we will change the slicemap while iterating
			for i, k := range keys {
				obj := o.leaf1s.Get(k)
				if err := obj.Save(ctx); err != nil {
					return err
				}
				if obj.PrimaryKey() != k {
					// update key in the slice map without changing the order
					o.leaf1s.Delete(k)
					o.leaf1s.SetAt(i, obj.PrimaryKey(), obj)
				}
			}
			if o.leaf1sIsDirty {
				if len(o.leaf1sPks) != 0 {
					if err := db.AssociateOnly(ctx,
						d,
						"leaf_nl_assn",
						"leaf_2_id",
						o.PrimaryKey(),
						"leaf_1_id",
						o.leaf1sPks); err != nil {
						return err
					}
				} else {
					if err := db.AssociateOnly(ctx,
						d,
						"leaf_nl_assn",
						"leaf_2_id",
						o.PrimaryKey(),
						"leaf_1_id",
						o.leaf1s.Keys()); err != nil {
						return err
					}
				}
			}
		}

		return nil
	}) // transaction
	if err != nil {
		return err
	}
	// update generated lock value
	if l, ok := modifiedFields["gro_lock"]; ok {
		o.groLock = l.(int64)
		o.groLockIsLoaded = true
	}

	o.resetDirtyStatus()
	if len(modifiedFields) != 0 {
		broadcast.Update(ctx, "goradd_unit", "leaf_nl", o._originalPK, anyutil.SortedKeys(modifiedFields)...)
	}

	return nil
}

// insert will insert the object into the database. Related items will be saved.
func (o *leafNlBase) insert(ctx context.Context) (err error) {
	var insertFields map[string]interface{}
	d := Database()
	err = db.WithTransaction(ctx, d, func(ctx context.Context) error {
		// Save loaded RootNl object to get its new pk and update it here.
		if o.rootNl != nil {
			if err := o.rootNl.Save(ctx); err != nil {
				return err
			}
			o.SetRootNlID(o.rootNl.PrimaryKey())
		}
		if !o.nameIsLoaded {
			panic("a value for Name is required, and there is no default value. Call SetName() before inserting the record.")
		}
		insertFields = getLeafNlInsertFields(o)
		var newPK string
		newPK, err = d.Insert(ctx, "leaf_nl", "id", insertFields)
		if err != nil {
			return err
		}
		o.id = newPK
		o._originalPK = newPK
		o.idIsLoaded = true

		if o.leaf2s.Len() > 0 {
			keys := o.leaf2s.Keys()
			for i, k := range keys {
				obj := o.leaf2s.Get(k)
				if err = obj.Save(ctx); err != nil {
					return err
				}
				if k != obj.PrimaryKey() {
					o.leaf2s.Delete(k)
					o.leaf2s.SetAt(i, obj.PrimaryKey(), obj)
				}
				db.Associate(ctx,
					d,
					"leaf_nl_assn",
					"leaf_1_id",
					newPK,
					"leaf_2_id",
					obj.PrimaryKey(),
				)
			}
		} else if len(o.leaf2sPks) > 0 {
			for _, k := range o.leaf2sPks {
				obj, err2 := LoadLeafNl(ctx, k)
				if err2 != nil {
					return err2
				}
				if obj != nil {
					db.Associate(ctx,
						d,
						"leaf_nl_assn",
						"leaf_1_id",
						newPK,
						"leaf_2_id",
						k,
					)
				}
			}
		}
		if o.leaf1s.Len() > 0 {
			keys := o.leaf1s.Keys()
			for i, k := range keys {
				obj := o.leaf1s.Get(k)
				if err = obj.Save(ctx); err != nil {
					return err
				}
				if k != obj.PrimaryKey() {
					o.leaf1s.Delete(k)
					o.leaf1s.SetAt(i, obj.PrimaryKey(), obj)
				}
				db.Associate(ctx,
					d,
					"leaf_nl_assn",
					"leaf_2_id",
					newPK,
					"leaf_1_id",
					obj.PrimaryKey(),
				)
			}
		} else if len(o.leaf1sPks) > 0 {
			for _, k := range o.leaf1sPks {
				obj, err2 := LoadLeafNl(ctx, k)
				if err2 != nil {
					return err2
				}
				if obj != nil {
					db.Associate(ctx,
						d,
						"leaf_nl_assn",
						"leaf_2_id",
						newPK,
						"leaf_1_id",
						k,
					)
				}
			}
		}

		return nil

	}) // transaction

	if err != nil {
		return
	}
	if t, ok := insertFields["gro_lock"]; ok {
		o.groLock = t.(int64)
		o.groLockIsLoaded = true
	}

	o.resetDirtyStatus()
	o._restored = true
	broadcast.Insert(ctx, "goradd_unit", "leaf_nl", o.PrimaryKey())
	return
}

// getUpdateFields returns the database columns that will be sent to the update process.
// This will include timestamp fields only if some other column has changed.
func (o *leafNlBase) getUpdateFields() (fields map[string]interface{}) {
	fields = map[string]interface{}{}
	if o.idIsDirty {
		fields["id"] = o.id
	}
	if o.nameIsDirty {
		fields["name"] = o.name
	}
	if o.rootNlIDIsDirty {
		if o.rootNlIDIsNull {
			fields["root_nl_id"] = nil
		} else {
			fields["root_nl_id"] = o.rootNlID
		}
	}
	return
}

// getInsertFields returns the fields that will be specified in an insert operation.
// Optional fields that have not been set and have no default will be returned as nil.
// NoSql databases should interpret this as no value. Sql databases should interpret this as
// explicitly setting a NULL value, which would override any database specific default value.
// Auto-generated fields will be returned with their generated values, except AutoPK fields, which are generated by the
// database driver and updated after the insert.
func (o *leafNlBase) getInsertFields() (fields map[string]interface{}) {
	fields = map[string]interface{}{}
	if o.idIsDirty {
		fields["id"] = o.id
	}

	fields["name"] = o.name
	fields["gro_lock"] = db.RecordVersion(0)
	if o.rootNlIDIsNull {
		fields["root_nl_id"] = nil
	} else {
		fields["root_nl_id"] = o.rootNlID
	}
	return
}

// Delete deletes the record from the database.
func (o *leafNlBase) Delete(ctx context.Context) (err error) {
	if o == nil {
		return // allow deleting of a nil object to be a noop
	}
	if !o._restored {
		panic("Cannot delete a record that has no primary key value.")
	}
	d := Database()
	err = db.WithTransaction(ctx, d, func(ctx context.Context) error {

		if err := db.AssociateOnly(ctx,
			d,
			"leaf_nl_assn",
			"leaf_1_id",
			o._originalPK,
			"id",
			[]LeafNl(nil)); err != nil {
			return err
		}

		if err := db.AssociateOnly(ctx,
			d,
			"leaf_nl_assn",
			"leaf_2_id",
			o._originalPK,
			"id",
			[]LeafNl(nil)); err != nil {
			return err
		}

		return d.Delete(ctx, "leaf_nl",
			map[string]any{"id": o._originalPK},
			"gro_lock",
			o.GroLock(),
		)
	})

	if err != nil {
		return err
	}
	broadcast.Delete(ctx, "goradd_unit", "leaf_nl", o._originalPK)
	return
}

// deleteLeafNl deletes the LeafNl with primary key pk from the database
// and handles associated records.
func deleteLeafNl(ctx context.Context, pk string) error {
	d := db.GetDatabase("goradd_unit")
	err := db.WithTransaction(ctx, d, func(ctx context.Context) error {
		if obj, err := LoadLeafNl(ctx,
			pk,
			node.LeafNl().ID(),
			node.LeafNl().GroLock(),
		); err != nil {
			return err
		} else if obj == nil {
			return db.NewRecordNotFoundError("leaf_nl", pk)
		} else {
			if err := obj.Delete(ctx); err != nil {
				return err
			}
		}
		return nil
	})
	return err
}

// resetDirtyStatus resets the dirty status of every field in the object.
func (o *leafNlBase) resetDirtyStatus() {
	o.idIsDirty = false
	o.nameIsDirty = false
	o.rootNlIDIsDirty = false
	o.leaf2sIsDirty = false
	o.leaf2sPks = nil
	o.leaf1sIsDirty = false
	o.leaf1sPks = nil

}

// IsDirty returns true if the object has been changed since it was read from the database or created.
func (o *leafNlBase) IsDirty() (dirty bool) {
	dirty = o.idIsDirty ||
		o.nameIsDirty ||
		o.rootNlIDIsDirty

	dirty = dirty ||
		o.rootNl != nil && o.rootNl.IsDirty()

	dirty = dirty ||
		o.leaf2sIsDirty ||
		o.leaf1sIsDirty

	for obj := range o.leaf2s.ValuesIter() {
		dirty = dirty || obj.IsDirty()
	}

	for obj := range o.leaf1s.ValuesIter() {
		dirty = dirty || obj.IsDirty()
	}

	return
}

// Get returns the value of a field in the object based on the field's name.
// It will also get related objects if they are loaded.
// Invalid fields and objects are returned as nil.
// Get can be used to retrieve a value by using the Field() of a node.
func (o *leafNlBase) Get(key string) interface{} {
	switch key {
	case LeafNlIDField:
		if !o.idIsLoaded {
			return nil
		}
		return o.id
	case LeafNlNameField:
		if !o.nameIsLoaded {
			return nil
		}
		return o.name
	case LeafNlGroLockField:
		if !o.groLockIsLoaded {
			return nil
		}
		return o.groLock
	case LeafNlRootNlIDField:
		if !o.rootNlIDIsLoaded {
			return nil
		}
		return o.rootNlID
	case LeafNlRootNlField:
		return o.RootNl()
	case LeafNlLeaf2sField:
		return o.leaf2s.Values()
	case LeafNlLeaf1sField:
		return o.leaf1s.Values()
	}
	return nil
}

// MarshalBinary serializes the object into a buffer that is deserializable using UnmarshalBinary.
// It should be used for transmitting database objects over the wire, or for temporary storage. It does not send
// a version number, so if the data format changes, its up to you to invalidate the old stored objects.
// The framework uses this to serialize the object when it is stored in a control.
func (o *leafNlBase) MarshalBinary() ([]byte, error) {
	buf := new(bytes.Buffer)
	enc := gob.NewEncoder(buf)
	if err := o.encodeTo(enc); err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

func (o *leafNlBase) encodeTo(enc db.Encoder) error {

	if err := enc.Encode(o.id); err != nil {
		return fmt.Errorf("error encoding LeafNl.id: %w", err)
	}
	if err := enc.Encode(o.idIsLoaded); err != nil {
		return fmt.Errorf("error encoding LeafNl.idIsLoaded: %w", err)
	}
	if err := enc.Encode(o.idIsDirty); err != nil {
		return fmt.Errorf("error encoding LeafNl.idIsDirty: %w", err)
	}

	if err := enc.Encode(o.name); err != nil {
		return fmt.Errorf("error encoding LeafNl.name: %w", err)
	}
	if err := enc.Encode(o.nameIsLoaded); err != nil {
		return fmt.Errorf("error encoding LeafNl.nameIsLoaded: %w", err)
	}
	if err := enc.Encode(o.nameIsDirty); err != nil {
		return fmt.Errorf("error encoding LeafNl.nameIsDirty: %w", err)
	}

	if err := enc.Encode(o.groLock); err != nil {
		return fmt.Errorf("error encoding LeafNl.groLock: %w", err)
	}
	if err := enc.Encode(o.groLockIsLoaded); err != nil {
		return fmt.Errorf("error encoding LeafNl.groLockIsLoaded: %w", err)
	}

	if err := enc.Encode(o.rootNlID); err != nil {
		return fmt.Errorf("error encoding LeafNl.rootNlID: %w", err)
	}
	if err := enc.Encode(o.rootNlIDIsNull); err != nil {
		return fmt.Errorf("error encoding LeafNl.rootNlIDIsNull: %w", err)
	}
	if err := enc.Encode(o.rootNlIDIsLoaded); err != nil {
		return fmt.Errorf("error encoding LeafNl.rootNlIDIsLoaded: %w", err)
	}
	if err := enc.Encode(o.rootNlIDIsDirty); err != nil {
		return fmt.Errorf("error encoding LeafNl.rootNlIDIsDirty: %w", err)
	}

	if o.rootNl == nil {
		if err := enc.Encode(false); err != nil {
			return err
		}
	} else {
		if err := enc.Encode(true); err != nil {
			return err
		}
		if err := enc.Encode(o.rootNl); err != nil {
			return fmt.Errorf("error encoding LeafNl.rootNl: %w", err)
		}
	}
	if err := enc.Encode(&o.leaf2s); err != nil {
		return fmt.Errorf("error encoding LeafNl.leaf2s: %w", err)
	}
	if err := enc.Encode(o.leaf2sIsDirty); err != nil {
		return fmt.Errorf("error encoding LeafNl.leaf2sIsDirty: %w", err)
	}
	if err := enc.Encode(o.leaf2sPks != nil); err != nil {
		return err
	}
	if o.leaf2sPks != nil {
		if err := enc.Encode(o.leaf2sPks); err != nil {
			return fmt.Errorf("error encoding LeafNl.leaf2sPks: %w", err)
		}
	}

	if err := enc.Encode(&o.leaf1s); err != nil {
		return fmt.Errorf("error encoding LeafNl.leaf1s: %w", err)
	}
	if err := enc.Encode(o.leaf1sIsDirty); err != nil {
		return fmt.Errorf("error encoding LeafNl.leaf1sIsDirty: %w", err)
	}
	if err := enc.Encode(o.leaf1sPks != nil); err != nil {
		return err
	}
	if o.leaf1sPks != nil {
		if err := enc.Encode(o.leaf1sPks); err != nil {
			return fmt.Errorf("error encoding LeafNl.leaf1sPks: %w", err)
		}
	}

	if o._aliases == nil {
		if err := enc.Encode(false); err != nil {
			return err
		}
	} else {
		if err := enc.Encode(true); err != nil {
			return err
		}
		if err := enc.Encode(o._aliases); err != nil {
			return fmt.Errorf("error encoding LeafNl._aliases: %w", err)
		}
	}

	if err := enc.Encode(o._restored); err != nil {
		return fmt.Errorf("error encoding LeafNl._restored: %w", err)
	}
	if err := enc.Encode(o._originalPK); err != nil {
		return fmt.Errorf("error encoding LeafNl._originalPK: %w", err)
	}
	return nil
}

// UnmarshalBinary converts a structure that was created with MarshalBinary into a LeafNl object.
func (o *leafNlBase) UnmarshalBinary(data []byte) (err error) {
	buf := bytes.NewReader(data)
	dec := gob.NewDecoder(buf)
	return o.decodeFrom(dec)
}

func (o *leafNlBase) decodeFrom(dec db.Decoder) (err error) {
	var isPtr bool

	_ = isPtr
	if err = dec.Decode(&o.id); err != nil {
		return fmt.Errorf("error decoding LeafNl.id: %w", err)
	}
	if err = dec.Decode(&o.idIsLoaded); err != nil {
		return fmt.Errorf("error decoding LeafNl.idIsLoaded: %w", err)
	}
	if err = dec.Decode(&o.idIsDirty); err != nil {
		return fmt.Errorf("error decoding LeafNl.idIsDirty: %w", err)
	}

	if err = dec.Decode(&o.name); err != nil {
		return fmt.Errorf("error decoding LeafNl.name: %w", err)
	}
	if err = dec.Decode(&o.nameIsLoaded); err != nil {
		return fmt.Errorf("error decoding LeafNl.nameIsLoaded: %w", err)
	}
	if err = dec.Decode(&o.nameIsDirty); err != nil {
		return fmt.Errorf("error decoding LeafNl.nameIsDirty: %w", err)
	}

	if err = dec.Decode(&o.groLock); err != nil {
		return fmt.Errorf("error decoding LeafNl.groLock: %w", err)
	}
	if err = dec.Decode(&o.groLockIsLoaded); err != nil {
		return fmt.Errorf("error decoding LeafNl.groLockIsLoaded: %w", err)
	}

	if err = dec.Decode(&o.rootNlID); err != nil {
		return fmt.Errorf("error decoding LeafNl.rootNlID: %w", err)
	}
	if err = dec.Decode(&o.rootNlIDIsNull); err != nil {
		return fmt.Errorf("error decoding LeafNl.rootNlIDIsNull: %w", err)
	}
	if err = dec.Decode(&o.rootNlIDIsLoaded); err != nil {
		return fmt.Errorf("error decoding LeafNl.rootNlIDIsLoaded: %w", err)
	}
	if err = dec.Decode(&o.rootNlIDIsDirty); err != nil {
		return fmt.Errorf("error decoding LeafNl.rootNlIDIsDirty: %w", err)
	}

	if err = dec.Decode(&isPtr); err != nil {
		return fmt.Errorf("error decoding LeafNl.rootNl isPtr: %w", err)
	}
	if isPtr {
		if err = dec.Decode(&o.rootNl); err != nil {
			return fmt.Errorf("error decoding LeafNl.rootNl: %w", err)
		}
	}

	if err = dec.Decode(&o.leaf2s); err != nil {
		return fmt.Errorf("error decoding LeafNl.leaf2sPks: %w", err)
	}
	if err = dec.Decode(&o.leaf2sIsDirty); err != nil {
		return fmt.Errorf("error decoding LeafNl.leaf2sIsDirty: %w", err)
	}
	if err = dec.Decode(&isPtr); err != nil {
		return fmt.Errorf("error decoding LeafNl.leaf2sPks isPtr: %w", err)
	}
	if isPtr {
		if err = dec.Decode(&o.leaf2sPks); err != nil {
			return fmt.Errorf("error decoding LeafNl.leaf2sPks: %w", err)
		}
	}

	if err = dec.Decode(&o.leaf1s); err != nil {
		return fmt.Errorf("error decoding LeafNl.leaf1sPks: %w", err)
	}
	if err = dec.Decode(&o.leaf1sIsDirty); err != nil {
		return fmt.Errorf("error decoding LeafNl.leaf1sIsDirty: %w", err)
	}
	if err = dec.Decode(&isPtr); err != nil {
		return fmt.Errorf("error decoding LeafNl.leaf1sPks isPtr: %w", err)
	}
	if isPtr {
		if err = dec.Decode(&o.leaf1sPks); err != nil {
			return fmt.Errorf("error decoding LeafNl.leaf1sPks: %w", err)
		}
	}
	if err = dec.Decode(&isPtr); err != nil {
		return fmt.Errorf("error decoding LeafNl._aliases isPtr: %w", err)
	}
	if isPtr {
		if err = dec.Decode(&o._aliases); err != nil {
			return fmt.Errorf("error decoding LeafNl._aliases: %w", err)
		}
	}

	if err = dec.Decode(&o._restored); err != nil {
		return fmt.Errorf("error decoding LeafNl._restored: %w", err)
	}
	if err = dec.Decode(&o._originalPK); err != nil {
		return fmt.Errorf("error decoding LeafNl._originalPK: %w", err)
	}
	return
}

// MarshalJSON serializes the object into a JSON object.
// Only valid data will be serialized, meaning, you can control what gets serialized by using Select to
// select only the fields you want when you query for the object. Another way to control the output
// is to call MarshalStringMap, modify the map, then encode the map.
func (o *leafNlBase) MarshalJSON() (data []byte, err error) {
	v := o.MarshalStringMap()
	return json.Marshal(v)
}

// MarshalStringMap serializes the object into a string map of interfaces.
// Only valid data will be serialized, meaning, you can control what gets serialized by using Select to
// select only the fields you want when you query for the object. The keys are the same as the json keys.
func (o *leafNlBase) MarshalStringMap() map[string]interface{} {
	v := make(map[string]interface{})

	if o.idIsLoaded {
		v["id"] = o.id
	}

	if o.nameIsLoaded {
		v["name"] = o.name
	}

	if o.groLockIsLoaded {
		v["groLock"] = o.groLock
	}

	if o.rootNlIDIsLoaded {
		if o.rootNlIDIsNull {
			v["rootNlID"] = nil
		} else {
			v["rootNlID"] = o.rootNlID
		}
	}

	if val := o.rootNl; val != nil {
		v["rootNl"] = val.MarshalStringMap()
	}
	if o.leaf2s.Len() != 0 {
		var vals []map[string]interface{}
		for obj := range o.leaf2s.ValuesIter() {
			vals = append(vals, obj.MarshalStringMap())
		}
		v["leaf2s"] = vals
	}
	if o.leaf1s.Len() != 0 {
		var vals []map[string]interface{}
		for obj := range o.leaf1s.ValuesIter() {
			vals = append(vals, obj.MarshalStringMap())
		}
		v["leaf1s"] = vals
	}
	for _k, _v := range o._aliases {
		v[_k] = _v
	}
	return v
}

// UnmarshalJSON unmarshalls the given json data into the LeafNl. The LeafNl can be a
// newly created object, or one loaded from the database.
//
// After unmarshalling, the object is not  saved. You must call Save to insert it into the database
// or update it.
//
// Unmarshalling of sub-objects, as in objects linked via foreign keys, is not currently supported.
//
// The fields it expects are:
//
//	"id" - string
//	"name" - string
//	"groLock" - int64
func (o *leafNlBase) UnmarshalJSON(data []byte) (err error) {
	var v map[string]interface{}
	if len(data) == 0 {
		return
	}
	d := json.NewDecoder(bytes.NewReader(data))
	d.UseNumber() // use a number to avoid precision errors
	if err = d.Decode(&v); err != nil {
		return err
	}
	return o.UnmarshalStringMap(v)
}

// UnmarshalStringMap will load the values from the stringmap into the object.
//
// Override this in LeafNl to modify the json before sending it here.
func (o *leafNlBase) UnmarshalStringMap(m map[string]interface{}) (err error) {
	for k, v := range m {
		switch k {

		case "id":
			{
				if v == nil {
					return fmt.Errorf("field %s cannot be null", k)
				}

				if s, ok := v.(string); !ok {
					return fmt.Errorf("json field %s must be a string", k)
				} else {
					o.SetID(s)
				}
			}
		case "name":
			{
				if v == nil {
					return fmt.Errorf("field %s cannot be null", k)
				}

				if s, ok := v.(string); !ok {
					return fmt.Errorf("json field %s must be a string", k)
				} else {
					o.SetName(s)
				}
			}
		case "rootNlID":
			{
				if v == nil {
					o.SetRootNlIDToNull()
					continue
				}

				if _, ok := m["rootNl"]; ok {
					continue // importing the foreign key will remove the object
				}

				if s, ok := v.(string); !ok {
					return fmt.Errorf("json field %s must be a string", k)
				} else {
					o.SetRootNlID(s)
				}
			}

		case "rootNl":
			v2 := NewRootNl()
			m2, ok := v.(map[string]any)
			if !ok {
				return fmt.Errorf("json field %s must be a map", k)
			}
			err = v2.UnmarshalStringMap(m2)
			if err != nil {
				return
			}
			o.SetRootNl(v2)

		case "leaf2s":
			v2, ok := v.([]any)
			if !ok {
				return fmt.Errorf("json field %s must be an array of maps", k)
			}
			var s []*LeafNl
			for _, i2 := range v2 {
				m2, ok := i2.(map[string]any)
				if !ok {
					return fmt.Errorf("json field %s must be an array of maps", k)
				}
				v3 := NewLeafNl()
				err = v3.UnmarshalStringMap(m2)
				if err != nil {
					return
				}
				s = append(s, v3)
			}
			o.SetLeaf2s(s...)

		case "leaf1s":
			v2, ok := v.([]any)
			if !ok {
				return fmt.Errorf("json field %s must be an array of maps", k)
			}
			var s []*LeafNl
			for _, i2 := range v2 {
				m2, ok := i2.(map[string]any)
				if !ok {
					return fmt.Errorf("json field %s must be an array of maps", k)
				}
				v3 := NewLeafNl()
				err = v3.UnmarshalStringMap(m2)
				if err != nil {
					return
				}
				s = append(s, v3)
			}
			o.SetLeaf1s(s...)

		}
	}
	return
}
