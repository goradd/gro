// Code generated by goradd-orm. DO NOT EDIT.

package goradd_unit

import (
	"context"
	"testing"

	"github.com/goradd/orm/pkg/db"
	"github.com/goradd/orm/pkg/test"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestLeafLock_SetName(t *testing.T) {

	obj := NewLeafLock()
	name := test.RandomValue[string](100)
	obj.SetName(name)
	assert.Equal(t, name, obj.Name())

	// test default
	obj.SetName("")
	assert.EqualValues(t, "", obj.Name(), "set default")

	// test panic on setting value larger than maximum size allowed
	name = test.RandomValue[string](101)
	assert.Panics(t, func() {
		obj.SetName(name)
	})
}
func TestLeafLock_SetGroLockTimestamp(t *testing.T) {

	obj := NewLeafLock()
	groLockTimestamp := test.RandomValue[int64](64)
	obj.SetGroLockTimestamp(groLockTimestamp)
	assert.Equal(t, groLockTimestamp, obj.GroLockTimestamp())
	assert.False(t, obj.GroLockTimestampIsNull())

	// Test NULL
	obj.SetGroLockTimestampToNull()
	assert.Equal(t, 0, obj.GroLockTimestamp())
	assert.True(t, obj.GroLockTimestampIsNull())

	// test default
	obj.SetGroLockTimestamp(0)
	assert.EqualValues(t, 0, obj.GroLockTimestamp(), "set default")

}

// createMinimalSampleLeafLock creates and saves a minimal version of a LeafLock object
// for testing.
func createMinimalSampleLeafLock(ctx context.Context) *LeafLock {
	obj := NewLeafLock()

	name := test.RandomValue[string](100)
	obj.SetName(name)

	groLockTimestamp := test.RandomValue[int64](64)
	obj.SetGroLockTimestamp(groLockTimestamp)

	obj.Save(ctx)
	return obj
}
func TestLeafLock_CRUD(t *testing.T) {
	obj := NewLeafLock()
	ctx := db.NewContext(nil)

	name := test.RandomValue[string](100)
	obj.SetName(name)

	groLockTimestamp := test.RandomValue[int64](64)
	obj.SetGroLockTimestamp(groLockTimestamp)

	err := obj.Save(ctx)
	assert.NoError(t, err)
	defer obj.Delete(ctx)

	// Test retrieval
	obj2 := LoadLeafLock(ctx, obj.PrimaryKey())
	require.NotNil(t, obj2)

	assert.True(t, obj2.IDIsValid())

	assert.True(t, obj2.NameIsValid())
	assert.Equal(t, name, obj2.Name())

	assert.True(t, obj2.GroLockTimestampIsValid())
	assert.False(t, obj2.GroLockTimestampIsNull())
	assert.Equal(t, groLockTimestamp, obj2.GroLockTimestamp())

}
