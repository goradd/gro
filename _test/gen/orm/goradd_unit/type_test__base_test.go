// Code generated by goradd-orm. DO NOT EDIT.

package goradd_unit

import (
	"context"
	"testing"
	"time"

	"github.com/goradd/orm/pkg/db"
	"github.com/goradd/orm/pkg/test"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestTypeTest_SetDate(t *testing.T) {

	obj := NewTypeTest()
	val := test.RandomValue[time.Time](0)
	obj.SetDate(val)
	val = obj.Date()
	assert.Zero(t, val.Minute()) // make sure minute part is zero'd
	assert.Zero(t, val.Hour())   // make sure hour part is zero'd
	assert.Zero(t, val.Second()) // make sure second part is zero'd
	assert.False(t, obj.DateIsNull())

	// Test NULL
	obj.SetDateToNull()
	assert.EqualValues(t, time.Time{}, obj.Date())
	assert.True(t, obj.DateIsNull())

	// test default
	obj.SetDate(time.Time{})
	assert.EqualValues(t, time.Time{}, obj.Date(), "set default")

}
func TestTypeTest_SetTime(t *testing.T) {

	obj := NewTypeTest()
	val := test.RandomValue[time.Time](0)
	obj.SetTime(val)
	val = obj.Time()
	assert.EqualValues(t, 1, val.Year())  // make sure year part is zero'd. The zero value of time.Time has a year of 1.
	assert.EqualValues(t, 1, val.Month()) // make sure month part is zero'd
	assert.EqualValues(t, 1, val.Day())   // make sure day part is zero'd
	assert.False(t, obj.TimeIsNull())

	// Test NULL
	obj.SetTimeToNull()
	assert.EqualValues(t, time.Time{}, obj.Time())
	assert.True(t, obj.TimeIsNull())

	// test default
	obj.SetTime(time.Time{})
	assert.EqualValues(t, time.Time{}, obj.Time(), "set default")

}
func TestTypeTest_SetDateTime(t *testing.T) {

	obj := NewTypeTest()
	val := test.RandomValue[time.Time](0)
	obj.SetDateTime(val)
	assert.Equal(t, val, obj.DateTime())
	assert.False(t, obj.DateTimeIsNull())

	// Test NULL
	obj.SetDateTimeToNull()
	assert.EqualValues(t, time.Time{}, obj.DateTime())
	assert.True(t, obj.DateTimeIsNull())

	// test default
	obj.SetDateTime(time.Time{})
	assert.EqualValues(t, time.Time{}, obj.DateTime(), "set default")

}
func TestTypeTest_SetTestInt(t *testing.T) {

	obj := NewTypeTest()
	val := test.RandomValue[int](32)
	obj.SetTestInt(val)
	assert.Equal(t, val, obj.TestInt())
	assert.False(t, obj.TestIntIsNull())

	// Test NULL
	obj.SetTestIntToNull()
	assert.EqualValues(t, 5, obj.TestInt())
	assert.True(t, obj.TestIntIsNull())

	// test default
	obj.SetTestInt(5)
	assert.EqualValues(t, 5, obj.TestInt(), "set default")

}
func TestTypeTest_SetTestFloat(t *testing.T) {

	obj := NewTypeTest()
	val := test.RandomValue[float32](32)
	obj.SetTestFloat(val)
	assert.Equal(t, val, obj.TestFloat())
	assert.False(t, obj.TestFloatIsNull())

	// Test NULL
	obj.SetTestFloatToNull()
	assert.EqualValues(t, 0, obj.TestFloat())
	assert.True(t, obj.TestFloatIsNull())

	// test default
	obj.SetTestFloat(0)
	assert.EqualValues(t, 0, obj.TestFloat(), "set default")

}
func TestTypeTest_SetTestDouble(t *testing.T) {

	obj := NewTypeTest()
	val := test.RandomValue[float64](64)
	obj.SetTestDouble(val)
	assert.Equal(t, val, obj.TestDouble())

	// test default
	obj.SetTestDouble(0)
	assert.EqualValues(t, 0, obj.TestDouble(), "set default")

}
func TestTypeTest_SetTestText(t *testing.T) {

	obj := NewTypeTest()
	val := test.RandomValue[string](65535)
	obj.SetTestText(val)
	assert.Equal(t, val, obj.TestText())
	assert.False(t, obj.TestTextIsNull())

	// Test NULL
	obj.SetTestTextToNull()
	assert.EqualValues(t, "", obj.TestText())
	assert.True(t, obj.TestTextIsNull())

	// test default
	obj.SetTestText("")
	assert.EqualValues(t, "", obj.TestText(), "set default")

	// test panic on setting value larger than maximum size allowed
	val = test.RandomValue[string](65536)
	assert.Panics(t, func() {
		obj.SetTestText(val)
	})
}
func TestTypeTest_SetTestBit(t *testing.T) {

	obj := NewTypeTest()
	val := test.RandomValue[bool](0)
	obj.SetTestBit(val)
	assert.Equal(t, val, obj.TestBit())
	assert.False(t, obj.TestBitIsNull())

	// Test NULL
	obj.SetTestBitToNull()
	assert.EqualValues(t, false, obj.TestBit())
	assert.True(t, obj.TestBitIsNull())

	// test default
	obj.SetTestBit(false)
	assert.EqualValues(t, false, obj.TestBit(), "set default")

}
func TestTypeTest_SetTestVarchar(t *testing.T) {

	obj := NewTypeTest()
	val := test.RandomValue[string](10)
	obj.SetTestVarchar(val)
	assert.Equal(t, val, obj.TestVarchar())
	assert.False(t, obj.TestVarcharIsNull())

	// Test NULL
	obj.SetTestVarcharToNull()
	assert.EqualValues(t, "", obj.TestVarchar())
	assert.True(t, obj.TestVarcharIsNull())

	// test default
	obj.SetTestVarchar("")
	assert.EqualValues(t, "", obj.TestVarchar(), "set default")

	// test panic on setting value larger than maximum size allowed
	val = test.RandomValue[string](11)
	assert.Panics(t, func() {
		obj.SetTestVarchar(val)
	})
}
func TestTypeTest_SetTestBlob(t *testing.T) {

	obj := NewTypeTest()
	val := test.RandomValue[[]byte](65535)
	obj.SetTestBlob(val)
	assert.Equal(t, val, obj.TestBlob())

	// test default
	obj.SetTestBlob([]byte{})
	assert.EqualValues(t, []byte{}, obj.TestBlob(), "set default")

	// test panic on setting value larger than maximum size allowed
	val = test.RandomValue[[]byte](65536)
	assert.Panics(t, func() {
		obj.SetTestBlob(val)
	})
}

// createMinimalSampleTypeTest creates and saves a minimal version of a TypeTest object
// for testing.
func createMinimalSampleTypeTest(ctx context.Context) *TypeTest {
	obj := NewTypeTest()

	obj.SetDate(test.RandomValue[time.Time](0))

	obj.SetTime(test.RandomValue[time.Time](0))

	obj.SetDateTime(test.RandomValue[time.Time](0))

	obj.SetTestInt(test.RandomValue[int](32))

	obj.SetTestFloat(test.RandomValue[float32](32))

	obj.SetTestDouble(test.RandomValue[float64](64))

	obj.SetTestText(test.RandomValue[string](65535))

	obj.SetTestBit(test.RandomValue[bool](0))

	obj.SetTestVarchar(test.RandomValue[string](10))

	obj.SetTestBlob(test.RandomValue[[]byte](65535))

	obj.Save(ctx)
	return obj
}
func TestTypeTest_CRUD(t *testing.T) {
	obj := NewTypeTest()
	ctx := db.NewContext(nil)

	v_date := test.RandomValue[time.Time](0)
	obj.SetDate(v_date)

	v_date = obj.Date()

	v_time := test.RandomValue[time.Time](0)
	obj.SetTime(v_time)

	v_time = obj.Time()

	v_dateTime := test.RandomValue[time.Time](0)
	obj.SetDateTime(v_dateTime)

	v_dateTime = obj.DateTime()

	v_testInt := test.RandomValue[int](32)
	obj.SetTestInt(v_testInt)

	v_testFloat := test.RandomValue[float32](32)
	obj.SetTestFloat(v_testFloat)

	v_testDouble := test.RandomValue[float64](64)
	obj.SetTestDouble(v_testDouble)

	v_testText := test.RandomValue[string](65535)
	obj.SetTestText(v_testText)

	v_testBit := test.RandomValue[bool](0)
	obj.SetTestBit(v_testBit)

	v_testVarchar := test.RandomValue[string](10)
	obj.SetTestVarchar(v_testVarchar)

	v_testBlob := test.RandomValue[[]byte](65535)
	obj.SetTestBlob(v_testBlob)

	err := obj.Save(ctx)
	assert.NoError(t, err)
	defer obj.Delete(ctx)

	// Test retrieval
	obj2 := LoadTypeTest(ctx, obj.PrimaryKey())
	require.NotNil(t, obj2)

	assert.True(t, obj2.IDIsValid())

	assert.True(t, obj2.DateIsValid())
	assert.False(t, obj2.DateIsNull())
	assert.EqualValues(t, v_date, obj2.Date())

	assert.True(t, obj2.TimeIsValid())
	assert.False(t, obj2.TimeIsNull())
	assert.EqualValues(t, v_time, obj2.Time())

	assert.True(t, obj2.DateTimeIsValid())
	assert.False(t, obj2.DateTimeIsNull())
	assert.EqualValues(t, v_dateTime, obj2.DateTime())

	assert.True(t, obj2.TsIsValid())
	assert.False(t, obj2.TsIsNull())

	assert.True(t, obj2.TestIntIsValid())
	assert.False(t, obj2.TestIntIsNull())
	assert.EqualValues(t, v_testInt, obj2.TestInt())

	assert.True(t, obj2.TestFloatIsValid())
	assert.False(t, obj2.TestFloatIsNull())
	assert.EqualValues(t, v_testFloat, obj2.TestFloat())

	assert.True(t, obj2.TestDoubleIsValid())
	assert.EqualValues(t, v_testDouble, obj2.TestDouble())

	assert.True(t, obj2.TestTextIsValid())
	assert.False(t, obj2.TestTextIsNull())
	assert.EqualValues(t, v_testText, obj2.TestText())

	assert.True(t, obj2.TestBitIsValid())
	assert.False(t, obj2.TestBitIsNull())
	assert.EqualValues(t, v_testBit, obj2.TestBit())

	assert.True(t, obj2.TestVarcharIsValid())
	assert.False(t, obj2.TestVarcharIsNull())
	assert.EqualValues(t, v_testVarchar, obj2.TestVarchar())

	assert.True(t, obj2.TestBlobIsValid())
	assert.EqualValues(t, v_testBlob, obj2.TestBlob())

}
