// Code generated by goradd-orm. DO NOT EDIT.

package goradd_unit

import (
	"context"
	"testing"

	"github.com/goradd/orm/pkg/db"
	"github.com/goradd/orm/pkg/test"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestRoot_SetName(t *testing.T) {

	obj := NewRoot()
	name := test.RandomValue[string](100)
	obj.SetName(name)
	assert.Equal(t, name, obj.Name())

	// test default
	obj.SetName("")
	assert.EqualValues(t, "", obj.Name(), "set default")

	// test panic on setting value larger than maximum size allowed
	name = test.RandomValue[string](101)
	assert.Panics(t, func() {
		obj.SetName(name)
	})
}
func TestRoot_SetOptionalLeafID(t *testing.T) {

	obj := NewRoot()
	optionalLeafID := test.RandomValue[string](0)
	obj.SetOptionalLeafID(optionalLeafID)
	assert.Equal(t, optionalLeafID, obj.OptionalLeafID())
	assert.False(t, obj.OptionalLeafIDIsNull())

	// Test NULL
	obj.SetOptionalLeafIDToNull()
	assert.Equal(t, "", obj.OptionalLeafID())
	assert.True(t, obj.OptionalLeafIDIsNull())

	// test default
	obj.SetOptionalLeafID("")
	assert.EqualValues(t, "", obj.OptionalLeafID(), "set default")

}
func TestRoot_SetRequiredLeafID(t *testing.T) {

	obj := NewRoot()
	requiredLeafID := test.RandomValue[string](0)
	obj.SetRequiredLeafID(requiredLeafID)
	assert.Equal(t, requiredLeafID, obj.RequiredLeafID())

	// test default
	obj.SetRequiredLeafID("")
	assert.EqualValues(t, "", obj.RequiredLeafID(), "set default")

}
func TestRoot_SetOptionalLeafUniqueID(t *testing.T) {

	obj := NewRoot()
	optionalLeafUniqueID := test.RandomValue[string](0)
	obj.SetOptionalLeafUniqueID(optionalLeafUniqueID)
	assert.Equal(t, optionalLeafUniqueID, obj.OptionalLeafUniqueID())

	// test default
	obj.SetOptionalLeafUniqueID("")
	assert.EqualValues(t, "", obj.OptionalLeafUniqueID(), "set default")

}
func TestRoot_SetRequiredLeafUniqueID(t *testing.T) {

	obj := NewRoot()
	requiredLeafUniqueID := test.RandomValue[string](0)
	obj.SetRequiredLeafUniqueID(requiredLeafUniqueID)
	assert.Equal(t, requiredLeafUniqueID, obj.RequiredLeafUniqueID())

	// test default
	obj.SetRequiredLeafUniqueID("")
	assert.EqualValues(t, "", obj.RequiredLeafUniqueID(), "set default")

}
func TestRoot_SetParentID(t *testing.T) {

	obj := NewRoot()
	parentID := test.RandomValue[string](0)
	obj.SetParentID(parentID)
	assert.Equal(t, parentID, obj.ParentID())
	assert.False(t, obj.ParentIDIsNull())

	// Test NULL
	obj.SetParentIDToNull()
	assert.Equal(t, "", obj.ParentID())
	assert.True(t, obj.ParentIDIsNull())

	// test default
	obj.SetParentID("")
	assert.EqualValues(t, "", obj.ParentID(), "set default")

}

// createMinimalSampleRoot creates and saves a minimal version of a Root object
// for testing.
func createMinimalSampleRoot(ctx context.Context) *Root {
	obj := NewRoot()

	name := test.RandomValue[string](100)
	obj.SetName(name)

	// A required forward reference will need to be fulfilled just to save the minimal version of this object
	objRequiredLeaf := createMinimalSampleRequiredLeaf(ctx)
	obj.SetRequiredLeaf(objRequiredLeaf)

	// A required forward reference will need to be fulfilled just to save the minimal version of this object
	objOptionalLeafUnique := createMinimalSampleOptionalLeafUnique(ctx)
	obj.SetOptionalLeafUnique(objOptionalLeafUnique)

	// A required forward reference will need to be fulfilled just to save the minimal version of this object
	objRequiredLeafUnique := createMinimalSampleRequiredLeafUnique(ctx)
	obj.SetRequiredLeafUnique(objRequiredLeafUnique)

	obj.Save(ctx)
	return obj
}
func TestRoot_CRUD(t *testing.T) {
	obj := NewRoot()
	ctx := db.NewContext(nil)

	name := test.RandomValue[string](100)
	obj.SetName(name)

	objOptionalLeaf := createMinimalSampleLeaf(ctx)
	defer objOptionalLeaf.Delete(ctx)
	obj.SetOptionalLeaf(objOptionalLeaf)

	objRequiredLeaf := createMinimalSampleLeaf(ctx)
	defer objRequiredLeaf.Delete(ctx)
	obj.SetRequiredLeaf(objRequiredLeaf)

	objOptionalLeafUnique := createMinimalSampleLeaf(ctx)
	defer objOptionalLeafUnique.Delete(ctx)
	obj.SetOptionalLeafUnique(objOptionalLeafUnique)

	objRequiredLeafUnique := createMinimalSampleLeaf(ctx)
	defer objRequiredLeafUnique.Delete(ctx)
	obj.SetRequiredLeafUnique(objRequiredLeafUnique)

	objParent := createMinimalSampleRoot(ctx)
	defer objParent.Delete(ctx)
	obj.SetParent(objParent)

	err := obj.Save(ctx)
	assert.NoError(t, err)
	defer obj.Delete(ctx)

	// Test retrieval
	obj2 := LoadRoot(ctx, obj.PrimaryKey())
	require.NotNil(t, obj2)

	assert.True(t, obj2.IDIsValid())

	assert.True(t, obj2.NameIsValid())
	assert.Equal(t, name, obj2.Name())

	assert.True(t, obj2.OptionalLeafIDIsValid())
	assert.False(t, obj2.OptionalLeafIDIsNull())
	assert.NotEmpty(t, obj2.OptionalLeafID())

	assert.True(t, obj2.RequiredLeafIDIsValid())
	assert.NotEmpty(t, obj2.RequiredLeafID())

	assert.True(t, obj2.OptionalLeafUniqueIDIsValid())
	assert.NotEmpty(t, obj2.OptionalLeafUniqueID())

	assert.True(t, obj2.RequiredLeafUniqueIDIsValid())
	assert.NotEmpty(t, obj2.RequiredLeafUniqueID())

	assert.True(t, obj2.ParentIDIsValid())
	assert.False(t, obj2.ParentIDIsNull())
	assert.NotEmpty(t, obj2.ParentID())

}
