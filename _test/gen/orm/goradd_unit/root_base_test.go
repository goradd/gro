// Code generated by goradd-orm. DO NOT EDIT.

package goradd_unit

import (
	"context"
	"testing"

	"github.com/goradd/orm/pkg/db"
	"github.com/goradd/orm/pkg/test"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestRoot_SetName(t *testing.T) {

	obj := NewRoot()
	val := test.RandomValue[string](100)
	obj.SetName(val)
	assert.Equal(t, val, obj.Name())

	// test default
	obj.SetName("")
	assert.EqualValues(t, "", obj.Name(), "set default")

	// test panic on setting value larger than maximum size allowed
	val = test.RandomValue[string](101)
	assert.Panics(t, func() {
		obj.SetName(val)
	})
}
func TestRoot_SetOptionalLeafID(t *testing.T) {

	obj := NewRoot()
	val := test.RandomValue[string](0)
	obj.SetOptionalLeafID(val)
	assert.Equal(t, val, obj.OptionalLeafID())
	assert.False(t, obj.OptionalLeafIDIsNull())

	// Test NULL
	obj.SetOptionalLeafIDToNull()
	assert.EqualValues(t, "", obj.OptionalLeafID())
	assert.True(t, obj.OptionalLeafIDIsNull())

	// test default
	obj.SetOptionalLeafID("")
	assert.EqualValues(t, "", obj.OptionalLeafID(), "set default")

}
func TestRoot_SetRequiredLeafID(t *testing.T) {

	obj := NewRoot()
	val := test.RandomValue[string](0)
	obj.SetRequiredLeafID(val)
	assert.Equal(t, val, obj.RequiredLeafID())

	// test default
	obj.SetRequiredLeafID("")
	assert.EqualValues(t, "", obj.RequiredLeafID(), "set default")

}
func TestRoot_SetOptionalLeafUniqueID(t *testing.T) {

	obj := NewRoot()
	val := test.RandomValue[string](0)
	obj.SetOptionalLeafUniqueID(val)
	assert.Equal(t, val, obj.OptionalLeafUniqueID())

	// test default
	obj.SetOptionalLeafUniqueID("")
	assert.EqualValues(t, "", obj.OptionalLeafUniqueID(), "set default")

}
func TestRoot_SetRequiredLeafUniqueID(t *testing.T) {

	obj := NewRoot()
	val := test.RandomValue[string](0)
	obj.SetRequiredLeafUniqueID(val)
	assert.Equal(t, val, obj.RequiredLeafUniqueID())

	// test default
	obj.SetRequiredLeafUniqueID("")
	assert.EqualValues(t, "", obj.RequiredLeafUniqueID(), "set default")

}
func TestRoot_SetParentID(t *testing.T) {

	obj := NewRoot()
	val := test.RandomValue[string](0)
	obj.SetParentID(val)
	assert.Equal(t, val, obj.ParentID())
	assert.False(t, obj.ParentIDIsNull())

	// Test NULL
	obj.SetParentIDToNull()
	assert.EqualValues(t, "", obj.ParentID())
	assert.True(t, obj.ParentIDIsNull())

	// test default
	obj.SetParentID("")
	assert.EqualValues(t, "", obj.ParentID(), "set default")

}

// createMinimalSampleRoot creates and saves a minimal version of a Root object
// for testing.
func createMinimalSampleRoot(ctx context.Context) *Root {
	obj := NewRoot()

	obj.SetName(test.RandomValue[string](100))

	// A required forward reference will need to be fulfilled just to save the minimal version of this object
	obj.SetRequiredLeaf(createMinimalSampleLeaf(ctx))

	// A required forward reference will need to be fulfilled just to save the minimal version of this object
	obj.SetOptionalLeafUnique(createMinimalSampleLeaf(ctx))

	// A required forward reference will need to be fulfilled just to save the minimal version of this object
	obj.SetRequiredLeafUnique(createMinimalSampleLeaf(ctx))

	obj.Save(ctx)
	return obj
}
func TestRoot_CRUD(t *testing.T) {
	obj := NewRoot()
	ctx := db.NewContext(nil)

	v_name := test.RandomValue[string](100)
	obj.SetName(v_name)

	v_objOptionalLeaf := createMinimalSampleLeaf(ctx)
	defer v_objOptionalLeaf.Delete(ctx)
	obj.SetOptionalLeaf(v_objOptionalLeaf)

	v_objRequiredLeaf := createMinimalSampleLeaf(ctx)
	defer v_objRequiredLeaf.Delete(ctx)
	obj.SetRequiredLeaf(v_objRequiredLeaf)

	v_objOptionalLeafUnique := createMinimalSampleLeaf(ctx)
	defer v_objOptionalLeafUnique.Delete(ctx)
	obj.SetOptionalLeafUnique(v_objOptionalLeafUnique)

	v_objRequiredLeafUnique := createMinimalSampleLeaf(ctx)
	defer v_objRequiredLeafUnique.Delete(ctx)
	obj.SetRequiredLeafUnique(v_objRequiredLeafUnique)

	v_objParent := createMinimalSampleRoot(ctx)
	defer v_objParent.Delete(ctx)
	obj.SetParent(v_objParent)

	err := obj.Save(ctx)
	assert.NoError(t, err)
	defer obj.Delete(ctx)

	// Test retrieval
	obj2 := LoadRoot(ctx, obj.PrimaryKey())
	require.NotNil(t, obj2)

	assert.True(t, obj2.IDIsValid())

	assert.True(t, obj2.NameIsValid())
	assert.EqualValues(t, v_name, obj2.Name())

	assert.True(t, obj2.OptionalLeafIDIsValid())
	assert.False(t, obj2.OptionalLeafIDIsNull())
	assert.NotEmpty(t, obj2.OptionalLeafID())

	assert.True(t, obj2.RequiredLeafIDIsValid())
	assert.NotEmpty(t, obj2.RequiredLeafID())

	assert.True(t, obj2.OptionalLeafUniqueIDIsValid())
	assert.NotEmpty(t, obj2.OptionalLeafUniqueID())

	assert.True(t, obj2.RequiredLeafUniqueIDIsValid())
	assert.NotEmpty(t, obj2.RequiredLeafUniqueID())

	assert.True(t, obj2.ParentIDIsValid())
	assert.False(t, obj2.ParentIDIsNull())
	assert.NotEmpty(t, obj2.ParentID())

}
