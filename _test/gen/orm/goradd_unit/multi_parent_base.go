// Code generated by goradd-orm. DO NOT EDIT.

package goradd_unit

import (
	"bytes"
	"context"
	"encoding/gob"
	"encoding/json"
	"fmt"
	"unicode/utf8"

	"github.com/goradd/all"
	"github.com/goradd/maps"
	"github.com/goradd/orm/_test/gen/orm/goradd_unit/node"
	"github.com/goradd/orm/pkg/broadcast"
	"github.com/goradd/orm/pkg/db"
	"github.com/goradd/orm/pkg/op"
	"github.com/goradd/orm/pkg/query"
)

// MultiParentBase is embedded in a MultiParent object and provides the ORM access to the database.
// The member variables of the structure are private and should not normally be accessed by the MultiParent embedder.
// Instead, use the accessor functions.
type multiParentBase struct {
	id                string
	idIsLoaded        bool
	idIsDirty         bool
	name              string
	nameIsNull        bool
	nameIsLoaded      bool
	nameIsDirty       bool
	parent1ID         string
	parent1IDIsNull   bool
	parent1IDIsLoaded bool
	parent1IDIsDirty  bool
	objParent1        *MultiParent
	parent2ID         string
	parent2IDIsNull   bool
	parent2IDIsLoaded bool
	parent2IDIsDirty  bool
	objParent2        *MultiParent

	// Reverse reference objects.
	revParent1MultiParents        maps.SliceMap[string, *MultiParent] // Objects in the order they were queried
	revParent1MultiParentsIsDirty bool
	revParent2MultiParents        maps.SliceMap[string, *MultiParent] // Objects in the order they were queried
	revParent2MultiParentsIsDirty bool

	// Custom aliases, if specified
	_aliases map[string]any

	// Indicates whether this is a new object, or one loaded from the database. Used by Save to know whether to Insert or Update.
	_restored bool

	_originalPK string
}

// IDs used to access the MultiParent object fields by name using the Get function.
// doc: type=MultiParent
const (
	MultiParent_ID                 = `ID`
	MultiParent_Name               = `Name`
	MultiParent_Parent1ID          = `Parent1ID`
	MultiParent_Parent1            = `Parent1`
	MultiParent_Parent2ID          = `Parent2ID`
	MultiParent_Parent2            = `Parent2`
	MultiParentParent1MultiParents = `Parent1MultiParents`
	MultiParentParent2MultiParents = `Parent2MultiParents`
)

const MultiParentNameMaxLength = 100 // The number of runes the column can hold

// Initialize or re-initialize a MultiParent database object to default values.
// The primary key will get a temporary negative number which will be replaced when the object is saved.
// Multiple calls to Initialize are not guaranteed to create sequential values for the primary key.
func (o *multiParentBase) Initialize() {
	o.id = db.TemporaryPrimaryKey()
	o.idIsLoaded = true
	o.idIsDirty = false

	o.name = ""
	o.nameIsNull = true
	o.nameIsLoaded = false
	o.nameIsDirty = false

	o.parent1ID = ""
	o.parent1IDIsNull = true
	o.parent1IDIsLoaded = false
	o.parent1IDIsDirty = false

	o.parent2ID = ""
	o.parent2IDIsNull = true
	o.parent2IDIsLoaded = false
	o.parent2IDIsDirty = false

	// Reverse reference objects.

	o.revParent1MultiParents.Clear()
	o.revParent1MultiParentsIsDirty = false

	o.revParent2MultiParents.Clear()
	o.revParent2MultiParentsIsDirty = false

	o._aliases = nil
	o._restored = false
}

// PrimaryKey returns the current value of the primary key field.
func (o *multiParentBase) PrimaryKey() string {
	return o.id
}

// OriginalPrimaryKey returns the value of the primary key that was originally loaded into the object when it was
// read from the database.
func (o *multiParentBase) OriginalPrimaryKey() string {
	return o._originalPK
}

// Copy copies most fields to a new MultiParent object.
// Forward reference ids will be copied, but reverse and many-many references will not.
// Attached objects will not be included in the copy.
// Automatically generated fields will not be included in the copy.
// The primary key field will not be copied, since it is normally auto-generated.
// Call Save() on the new object to save it into the database.
// Copy might panic if any fields in the database were set to a size larger than the
// maximum size through a process that accessed the database outside of the ORM.
func (o *multiParentBase) Copy() (newObject *MultiParent) {
	newObject = NewMultiParent()
	if o.idIsLoaded {
		newObject.SetID(o.id)
	}
	if o.nameIsLoaded {
		newObject.SetName(o.name)
	}
	if o.parent1IDIsLoaded {
		newObject.SetParent1ID(o.parent1ID)
	}
	if o.parent2IDIsLoaded {
		newObject.SetParent2ID(o.parent2ID)
	}
	return
}

// ID returns the value of ID.
func (o *multiParentBase) ID() string {
	if o._restored && !o.idIsLoaded {
		panic("ID was not selected in the last query and has not been set, and so is not valid")
	}
	return o.id
}

// IDIsLoaded returns true if the value was loaded from the database or has been set.
func (o *multiParentBase) IDIsLoaded() bool {
	return o.idIsLoaded
}

// SetID sets the value of ID in the object, to be saved later in the database using the Save() function.
// Normally you will not need to call this function, since the ID value is automatically generated by the
// database driver. Exceptions might include importing data to a new database, or correcting primary key conflicts when
// merging data. You cannot change a primary key for a record that has been written to the database.
// (While SQL databases allow it, most NoSQL databases do not)
func (o *multiParentBase) SetID(v string) {
	if o._restored {
		panic("you cannot change an auto-generated primary key")
	}

	o.idIsLoaded = true
	o.id = v
	o.idIsDirty = true
}

// Name returns the value of Name.
func (o *multiParentBase) Name() string {
	if o._restored && !o.nameIsLoaded {
		panic("Name was not selected in the last query and has not been set, and so is not valid")
	}
	return o.name
}

// NameIsLoaded returns true if the value was loaded from the database or has been set.
func (o *multiParentBase) NameIsLoaded() bool {
	return o.nameIsLoaded
}

// NameIsNull returns true if the related database value is null.
func (o *multiParentBase) NameIsNull() bool {
	return o.nameIsNull
}

// SetName sets the value of Name in the object, to be saved later in the database using the Save() function.
func (o *multiParentBase) SetName(v string) {
	if utf8.RuneCountInString(v) > MultiParentNameMaxLength {
		panic("attempted to set MultiParent.Name to a value larger than its maximum length in runes")
	}
	if o._restored &&
		o.nameIsLoaded && // if it was not selected, then make sure it gets set, since our end comparison won't be valid
		!o.nameIsNull && // if the db value is null, force a set of value
		o.name == v {
		// no change
		return
	}

	o.nameIsLoaded = true
	o.name = v
	o.nameIsDirty = true
	o.nameIsNull = false
}

// SetNameToNull() will set the name value in the database to NULL.
// Name() will return the column's default value after this.
func (o *multiParentBase) SetNameToNull() {
	if !o.nameIsLoaded || !o.nameIsNull {
		// If we know it is null in the database, don't save it
		o.nameIsDirty = true
	}
	o.nameIsLoaded = true
	o.nameIsNull = true
	o.name = ""
}

// Parent1ID returns the value of Parent1ID.
func (o *multiParentBase) Parent1ID() string {
	if o._restored && !o.parent1IDIsLoaded {
		panic("Parent1ID was not selected in the last query and has not been set, and so is not valid")
	}
	return o.parent1ID
}

// Parent1IDIsLoaded returns true if the value was loaded from the database or has been set.
func (o *multiParentBase) Parent1IDIsLoaded() bool {
	return o.parent1IDIsLoaded
}

// Parent1IDIsNull returns true if the related database value is null.
func (o *multiParentBase) Parent1IDIsNull() bool {
	return o.parent1IDIsNull
}

// SetParent1ID sets the value of Parent1ID in the object, to be saved later in the database using the Save() function.
func (o *multiParentBase) SetParent1ID(v string) {
	if o._restored &&
		o.parent1IDIsLoaded && // if it was not selected, then make sure it gets set, since our end comparison won't be valid
		!o.parent1IDIsNull && // if the db value is null, force a set of value
		o.parent1ID == v {
		// no change
		return
	}

	o.parent1IDIsLoaded = true
	o.parent1ID = v
	o.parent1IDIsDirty = true
	o.parent1IDIsNull = false
	o.objParent1 = nil
}

// SetParent1IDToNull() will set the parent_1_id value in the database to NULL.
// Parent1ID() will return the column's default value after this.
func (o *multiParentBase) SetParent1IDToNull() {
	if !o.parent1IDIsLoaded || !o.parent1IDIsNull {
		// If we know it is null in the database, don't save it
		o.parent1IDIsDirty = true
	}
	o.parent1IDIsLoaded = true
	o.parent1IDIsNull = true
	o.parent1ID = ""
	o.objParent1 = nil
}

// Parent1 returns the current value of the loaded Parent1, and nil if its not loaded.
func (o *multiParentBase) Parent1() *MultiParent {
	return o.objParent1
}

// LoadParent1 returns the related Parent1. If it is not already loaded,
// it will attempt to load it, provided the Parent1ID column has been loaded first.
func (o *multiParentBase) LoadParent1(ctx context.Context) *MultiParent {
	if !o.parent1IDIsLoaded {
		return nil
	}

	if o.objParent1 == nil {
		// Load and cache
		o.objParent1 = LoadMultiParent(ctx, o.parent1ID)
	}
	return o.objParent1
}

// SetParent1 will set the reference to parent1. The referenced object
// will be saved when MultiParent is saved. Pass nil to break the connection.
func (o *multiParentBase) SetParent1(objParent1 *MultiParent) {
	o.parent1IDIsLoaded = true
	if objParent1 == nil {
		if !o.parent1IDIsNull || !o._restored {
			o.parent1IDIsNull = true
			o.parent1IDIsDirty = true
			o.parent1ID = ""
			o.objParent1 = nil
		}
	} else {
		o.objParent1 = objParent1
		if o.parent1IDIsNull || !o._restored || o.parent1ID != objParent1.PrimaryKey() {
			o.parent1IDIsNull = false
			o.parent1ID = objParent1.PrimaryKey()
			o.parent1IDIsDirty = true
		}
	}
}

// Parent2ID returns the value of Parent2ID.
func (o *multiParentBase) Parent2ID() string {
	if o._restored && !o.parent2IDIsLoaded {
		panic("Parent2ID was not selected in the last query and has not been set, and so is not valid")
	}
	return o.parent2ID
}

// Parent2IDIsLoaded returns true if the value was loaded from the database or has been set.
func (o *multiParentBase) Parent2IDIsLoaded() bool {
	return o.parent2IDIsLoaded
}

// Parent2IDIsNull returns true if the related database value is null.
func (o *multiParentBase) Parent2IDIsNull() bool {
	return o.parent2IDIsNull
}

// SetParent2ID sets the value of Parent2ID in the object, to be saved later in the database using the Save() function.
func (o *multiParentBase) SetParent2ID(v string) {
	if o._restored &&
		o.parent2IDIsLoaded && // if it was not selected, then make sure it gets set, since our end comparison won't be valid
		!o.parent2IDIsNull && // if the db value is null, force a set of value
		o.parent2ID == v {
		// no change
		return
	}

	o.parent2IDIsLoaded = true
	o.parent2ID = v
	o.parent2IDIsDirty = true
	o.parent2IDIsNull = false
	o.objParent2 = nil
}

// SetParent2IDToNull() will set the parent_2_id value in the database to NULL.
// Parent2ID() will return the column's default value after this.
func (o *multiParentBase) SetParent2IDToNull() {
	if !o.parent2IDIsLoaded || !o.parent2IDIsNull {
		// If we know it is null in the database, don't save it
		o.parent2IDIsDirty = true
	}
	o.parent2IDIsLoaded = true
	o.parent2IDIsNull = true
	o.parent2ID = ""
	o.objParent2 = nil
}

// Parent2 returns the current value of the loaded Parent2, and nil if its not loaded.
func (o *multiParentBase) Parent2() *MultiParent {
	return o.objParent2
}

// LoadParent2 returns the related Parent2. If it is not already loaded,
// it will attempt to load it, provided the Parent2ID column has been loaded first.
func (o *multiParentBase) LoadParent2(ctx context.Context) *MultiParent {
	if !o.parent2IDIsLoaded {
		return nil
	}

	if o.objParent2 == nil {
		// Load and cache
		o.objParent2 = LoadMultiParent(ctx, o.parent2ID)
	}
	return o.objParent2
}

// SetParent2 will set the reference to parent2. The referenced object
// will be saved when MultiParent is saved. Pass nil to break the connection.
func (o *multiParentBase) SetParent2(objParent2 *MultiParent) {
	o.parent2IDIsLoaded = true
	if objParent2 == nil {
		if !o.parent2IDIsNull || !o._restored {
			o.parent2IDIsNull = true
			o.parent2IDIsDirty = true
			o.parent2ID = ""
			o.objParent2 = nil
		}
	} else {
		o.objParent2 = objParent2
		if o.parent2IDIsNull || !o._restored || o.parent2ID != objParent2.PrimaryKey() {
			o.parent2IDIsNull = false
			o.parent2ID = objParent2.PrimaryKey()
			o.parent2IDIsDirty = true
		}
	}
}

// GetAlias returns the value for the Alias node aliasKey that was returned in the most
// recent query.
func (o *multiParentBase) GetAlias(aliasKey string) query.AliasValue {
	if a, ok := o._aliases[aliasKey]; ok {
		return query.NewAliasValue(a)
	} else {
		panic("Alias " + aliasKey + " not found.")
	}
}

// IsNew returns true if the object will create a new record when saved.
func (o *multiParentBase) IsNew() bool {
	return !o._restored
}

// Parent1MultiParent returns a single MultiParent object by primary key, if one was loaded.
// Otherwise, it will return nil. It will not return MultiParent objects that are not saved.
func (o *multiParentBase) Parent1MultiParent(pk string) *MultiParent {
	v := o.revParent1MultiParents.Get(pk)
	return v
}

// Parent1MultiParents returns a slice of MultiParent objects if loaded.
func (o *multiParentBase) Parent1MultiParents() []*MultiParent {
	return o.revParent1MultiParents.Values()
}

// LoadParent1MultiParents loads a new slice of MultiParent objects and returns it.
func (o *multiParentBase) LoadParent1MultiParents(ctx context.Context, conditions ...interface{}) []*MultiParent {
	if o.IsNew() {
		return nil
	}
	for obj := range o.revParent1MultiParents.ValuesIter() {
		if obj.IsDirty() {
			panic("You cannot load over items that have changed but have not been saved.")
		}
	}

	qb := queryMultiParents(ctx)
	cond := op.Equal(node.MultiParent().Parent1ID(), o.PrimaryKey())
	if conditions != nil {
		conditions = append(conditions, cond)
		cond = op.And(conditions...)
	}

	objs := qb.Where(cond).Load()
	o.revParent1MultiParents.Clear()

	for _, obj := range objs {
		pk := obj.ID()
		o.revParent1MultiParents.Set(pk, obj)
	}

	if o.revParent1MultiParents.Len() == 0 {
		return nil
	}
	return o.revParent1MultiParents.Values()
}

// CountParent1MultiParents does a database query and returns the number of MultiParent
// objects currently in the database connected to this object.
func (o *multiParentBase) CountParent1MultiParents(ctx context.Context) int {
	return CountMultiParentsByParent1ID(ctx, o.PrimaryKey())
}

// SetParent1MultiParents associates the objects in objs with the MultiParent.
// If it has items already associated with it that will not be associated after a save,
// the foreign keys for those items will be set to null.
// If you did not use a join to query the items in the first place, used a conditional join,
// or joined with an expansion, be particularly careful, since you may be changing items
// that are not currently attached to this MultiParent.
func (o *multiParentBase) SetParent1MultiParents(objs ...*MultiParent) {
	for obj := range o.revParent1MultiParents.ValuesIter() {
		if obj.IsDirty() {
			panic("You cannot overwrite items that have changed but have not been saved.")
		}
	}

	o.revParent1MultiParents.Clear()
	for _, obj := range objs {
		pk := obj.ID()
		o.revParent1MultiParents.Set(pk, obj)
	}
	o.revParent1MultiParentsIsDirty = true
}

// Parent2MultiParent returns a single MultiParent object by primary key, if one was loaded.
// Otherwise, it will return nil. It will not return MultiParent objects that are not saved.
func (o *multiParentBase) Parent2MultiParent(pk string) *MultiParent {
	v := o.revParent2MultiParents.Get(pk)
	return v
}

// Parent2MultiParents returns a slice of MultiParent objects if loaded.
func (o *multiParentBase) Parent2MultiParents() []*MultiParent {
	return o.revParent2MultiParents.Values()
}

// LoadParent2MultiParents loads a new slice of MultiParent objects and returns it.
func (o *multiParentBase) LoadParent2MultiParents(ctx context.Context, conditions ...interface{}) []*MultiParent {
	if o.IsNew() {
		return nil
	}
	for obj := range o.revParent2MultiParents.ValuesIter() {
		if obj.IsDirty() {
			panic("You cannot load over items that have changed but have not been saved.")
		}
	}

	qb := queryMultiParents(ctx)
	cond := op.Equal(node.MultiParent().Parent2ID(), o.PrimaryKey())
	if conditions != nil {
		conditions = append(conditions, cond)
		cond = op.And(conditions...)
	}

	objs := qb.Where(cond).Load()
	o.revParent2MultiParents.Clear()

	for _, obj := range objs {
		pk := obj.ID()
		o.revParent2MultiParents.Set(pk, obj)
	}

	if o.revParent2MultiParents.Len() == 0 {
		return nil
	}
	return o.revParent2MultiParents.Values()
}

// CountParent2MultiParents does a database query and returns the number of MultiParent
// objects currently in the database connected to this object.
func (o *multiParentBase) CountParent2MultiParents(ctx context.Context) int {
	return CountMultiParentsByParent2ID(ctx, o.PrimaryKey())
}

// SetParent2MultiParents associates the objects in objs with the MultiParent.
// If it has items already associated with it that will not be associated after a save,
// the foreign keys for those items will be set to null.
// If you did not use a join to query the items in the first place, used a conditional join,
// or joined with an expansion, be particularly careful, since you may be changing items
// that are not currently attached to this MultiParent.
func (o *multiParentBase) SetParent2MultiParents(objs ...*MultiParent) {
	for obj := range o.revParent2MultiParents.ValuesIter() {
		if obj.IsDirty() {
			panic("You cannot overwrite items that have changed but have not been saved.")
		}
	}

	o.revParent2MultiParents.Clear()
	for _, obj := range objs {
		pk := obj.ID()
		o.revParent2MultiParents.Set(pk, obj)
	}
	o.revParent2MultiParentsIsDirty = true
}

// LoadMultiParent returns a MultiParent from the database.
// selectNodes lets you provide nodes for selecting specific fields or additional fields from related tables.
// See [MultiParentsBuilder.Select] for more info.
func LoadMultiParent(ctx context.Context, id string, selectNodes ...query.Node) *MultiParent {
	return queryMultiParents(ctx).
		Where(op.Equal(node.MultiParent().ID(), id)).
		Select(selectNodes...).
		Get()
}

// HasMultiParent returns true if a MultiParent with the given primary key exists in the database.
// doc: type=MultiParent
func HasMultiParent(ctx context.Context, id string) bool {
	return queryMultiParents(ctx).
		Where(op.Equal(node.MultiParent().ID(), id)).
		Count() == 1
}

// The MultiParentBuilder uses the query.BuilderI interface to build a query.
// All query operations go through this query builder.
// End a query by calling either Load, LoadCursor, Get, Count, or Delete
type MultiParentBuilder interface {
	// Join(alias string, joinedTable query.Node, condition query.Node) MultiParentBuilder

	// Where adds a condition to filter what gets selected.
	// Calling Where multiple times will AND the conditions together.
	Where(c query.Node) MultiParentBuilder

	// OrderBy specifies how the resulting data should be sorted.
	// By default, the given nodes are sorted in ascending order.
	// Add Descending() to the node to specify that it should be sorted in descending order.
	OrderBy(nodes ...query.Sorter) MultiParentBuilder

	// Limit will return a subset of the data, limited to the offset and number of rows specified.
	// For large data sets and specific types of queries, this can be slow, because it will perform
	// the entire query before computing the limit.
	// You cannot limit a query that has selected a "many" relationship".
	Limit(maxRowCount int, offset int) MultiParentBuilder

	// Select performs two functions:
	//  - Passing a table type node will join the object or objects from that table to this object.
	//  - Passing a column node will optimize the query to only return the specified fields.
	// Once you select at least one column, you must select all the columns that you want in the result.
	// Some fields, like primary keys, are always selected.
	// If you are using a GroupBy, you must select the fields in the GroupBy.
	Select(nodes ...query.Node) MultiParentBuilder

	// Calculation adds a calculation described by operation with the name alias.
	// After the query, you can read the data using GetAlias() on the object identified by base.
	Calculation(base query.TableNodeI, alias string, operation query.OperationNodeI) MultiParentBuilder

	// Distinct removes duplicates from the results of the query.
	// Adding a Select() is required.
	Distinct() MultiParentBuilder

	// GroupBy controls how results are grouped when using aggregate functions with Calculation.
	GroupBy(nodes ...query.Node) MultiParentBuilder

	// Having does additional filtering on the results of the query after the query is performed.
	Having(node query.Node) MultiParentBuilder

	// Load terminates the query builder, performs the query, and returns a slice of MultiParent objects.
	// If there are any errors, nil is returned and the specific error is stored in the context.
	// If no results come back from the query, it will return a non-nil empty slice.
	Load() []*MultiParent
	// Load terminates the query builder, performs the query, and returns a slice of interfaces.
	// This can then satisfy a general interface that loads arrays of objects.
	// If there are any errors, nil is returned and the specific error is stored in the context.
	// If no results come back from the query, it will return a non-nil empty slice.
	LoadI() []query.OrmObj

	// LoadCursor terminates the query builder, performs the query, and returns a cursor to the query.
	//
	// A query cursor is useful for dealing with large amounts of query results. However, there are some
	// limitations to its use. When working with SQL databases, you cannot use a cursor while querying
	// many-to-many or reverse relationships that will create an array of values.
	//
	// Call Next() on the returned cursor object to step through the results. Make sure you call Close
	// on the cursor object when you are done. You should use
	//   defer cursor.Close()
	// to make sure the cursor gets closed.
	LoadCursor() multiParentsCursor

	// Get is a convenience method to return only the first item found in a query.
	// The entire query is performed, so you should generally use this only if you know
	// you are selecting on one or very few items.
	//
	// If an error occurs, or no results are found, a nil is returned.
	// In the case of an error, the error is returned in the context.
	Get() *MultiParent

	// Count terminates a query and returns just the number of items in the result.
	// If you have Select or Calculation columns in the query, it will count NULL results as well.
	// To not count NULL values, use Where in the builder with a NotNull operation.
	// To count distinct combinations of items, call Distinct() on the builder.
	Count() int

	// Subquery terminates the query builder and tags it as a subquery within a larger query.
	// You MUST include what you are selecting by adding Calculation or Select functions on the subquery builder.
	// Generally you would use this as a node to a Calculation function on the surrounding query builder.
	// Subquery() *query.SubqueryNode

}

type multiParentQueryBuilder struct {
	builder *query.Builder
}

func newMultiParentBuilder(ctx context.Context) MultiParentBuilder {
	b := multiParentQueryBuilder{
		builder: query.NewBuilder(ctx, node.MultiParent()),
	}
	return &b
}

// Load terminates the query builder, performs the query, and returns a slice of MultiParent objects.
// If there are any errors, nil is returned and the specific error is stored in the context.
// If no results come back from the query, it will return a non-nil empty slice.
func (b *multiParentQueryBuilder) Load() (multiParents []*MultiParent) {
	b.builder.Command = query.BuilderCommandLoad
	database := db.GetDatabase("goradd_unit")
	results := database.BuilderQuery(b.builder)
	if results == nil {
		return
	}
	for _, item := range results.([]map[string]any) {
		o := new(MultiParent)
		o.load(item, o)
		multiParents = append(multiParents, o)
	}
	return
}

// Load terminates the query builder, performs the query, and returns a slice of interfaces.
// This can then satisfy a variety of interfaces that load arrays of objects, including KeyLabeler.
// If there are any errors, nil is returned and the specific error is stored in the context.
// If no results come back from the query, it will return a non-nil empty slice.
func (b *multiParentQueryBuilder) LoadI() (multiParents []query.OrmObj) {
	b.builder.Command = query.BuilderCommandLoad
	database := db.GetDatabase("goradd_unit")
	results := database.BuilderQuery(b.builder)
	if results == nil {
		return
	}
	for _, item := range results.([]map[string]any) {
		o := new(MultiParent)
		o.load(item, o)
		multiParents = append(multiParents, o)
	}
	return
}

// LoadCursor terminates the query builder, performs the query, and returns a cursor to the query.
//
// A query cursor is useful for dealing with large amounts of query results. However, there are some
// limitations to its use. When working with SQL databases, you cannot use a cursor while querying
// many-to-many or reverse relationships that will create an array of values.
//
// Call Next() on the returned cursor object to step through the results. Make sure you call Close
// on the cursor object when you are done. You should use
//
//	defer cursor.Close()
//
// to make sure the cursor gets closed.
func (b *multiParentQueryBuilder) LoadCursor() multiParentsCursor {
	b.builder.Command = query.BuilderCommandLoadCursor
	database := db.GetDatabase("goradd_unit")
	result := database.BuilderQuery(b.builder)
	cursor := result.(query.CursorI)

	return multiParentsCursor{cursor}
}

type multiParentsCursor struct {
	query.CursorI
}

// Next returns the current MultiParent object and moves the cursor to the next one.
//
// If there are no more records, it returns nil.
func (c multiParentsCursor) Next() *MultiParent {
	if c.CursorI == nil {
		return nil
	}

	row := c.CursorI.Next()
	if row == nil {
		return nil
	}
	o := new(MultiParent)
	o.load(row, o)
	return o
}

// Get is a convenience method to return only the first item found in a query.
// The entire query is performed, so you should generally use this only if you know
// you are selecting on one or very few items.
//
// If an error occurs, or no results are found, a nil is returned.
// In the case of an error, the error is returned in the context.
func (b *multiParentQueryBuilder) Get() *MultiParent {
	results := b.Load()
	if results != nil && len(results) > 0 {
		obj := results[0]
		return obj
	} else {
		return nil
	}
}

/*
// Join attaches the table referred to by joinedTable, filtering the join process using the operation node specified
// by condition.
// The joinedTable node will be modified by this process so that you can use it in subsequent builder operations.
// Call GetAlias to return the resulting object from the query result.
func (b *multiParentQueryBuilder) Join(alias string, joinedTable query.Node, condition query.Node) MultiParentBuilder {
    if query.RootNode(n).TableName_() != "multi_parent" {
        panic("you can only join a node that is rooted at node.MultiParent()")
    }
    // TODO: make sure joinedTable is a table node
	b.builder.Join(alias, joinedTable, condition)
	return b
}
*/

// Where adds a condition to filter what gets selected.
// Calling Where multiple times will AND the conditions together.
func (b *multiParentQueryBuilder) Where(c query.Node) MultiParentBuilder {
	b.builder.Where(c)
	return b
}

// OrderBy specifies how the resulting data should be sorted.
// By default, the given nodes are sorted in ascending order.
// Add Descending() to the node to specify that it should be sorted in descending order.
func (b *multiParentQueryBuilder) OrderBy(nodes ...query.Sorter) MultiParentBuilder {
	b.builder.OrderBy(nodes...)
	return b
}

// Limit will return a subset of the data, limited to the offset and number of rows specified.
// For large data sets and specific types of queries, this can be slow, because it will perform
// the entire query before computing the limit.
// You cannot limit a query that has embedded arrays.
func (b *multiParentQueryBuilder) Limit(maxRowCount int, offset int) MultiParentBuilder {
	b.builder.Limit(maxRowCount, offset)
	return b
}

// Select specifies what specific columns will be loaded with data.
// By default, all the columns of the multi_parent table will be queried and loaded.
// If nodes contains columns from the multi_parent table, that will limit the columns queried and loaded to only those columns.
// If related tables are specified, then all the columns from those tables are queried, selected and joined to the result.
// If columns in related tables are specified, then only those columns will be queried and loaded.
// Depending on the query, additional columns may automatically be added to the query. In particular, primary key columns
// will be added in most situations. The exception to this would be in distinct queries, group by queries, or subqueries.
func (b *multiParentQueryBuilder) Select(nodes ...query.Node) MultiParentBuilder {
	b.builder.Select(nodes...)
	return b
}

// Calculation adds operation as an aliased value onto base.
// After the query, you can read the data by passing alias to GetAlias on the returned object.
func (b *multiParentQueryBuilder) Calculation(base query.TableNodeI, alias string, operation query.OperationNodeI) MultiParentBuilder {
	b.builder.Calculation(base, alias, operation)
	return b
}

// Distinct removes duplicates from the results of the query.
// Adding a Select() is usually required.
func (b *multiParentQueryBuilder) Distinct() MultiParentBuilder {
	b.builder.Distinct()
	return b
}

// GroupBy controls how results are grouped when using aggregate functions with Calculation.
func (b *multiParentQueryBuilder) GroupBy(nodes ...query.Node) MultiParentBuilder {
	b.builder.GroupBy(nodes...)
	return b
}

// Having does additional filtering on the results of the query after the query is performed.
func (b *multiParentQueryBuilder) Having(node query.Node) MultiParentBuilder {
	b.builder.Having(node)
	return b
}

// Count terminates a query and returns just the number of items in the result.
// If you have Select or Calculation columns in the query, it will count NULL results as well.
// To not count NULL values, use Where in the builder with a NotNull operation.
// To count distinct combinations of items, call Distinct() on the builder.
func (b *multiParentQueryBuilder) Count() int {
	b.builder.Command = query.BuilderCommandCount
	database := db.GetDatabase("goradd_unit")
	results := database.BuilderQuery(b.builder)
	if results == nil {
		return 0
	}
	return results.(int)
}

/*
// Subquery terminates the query builder and tags it as a subquery within a larger query.
// You MUST include what you are selecting by adding Calculation or Select functions on the subquery builder.
// Generally you would use this as a node to a Calculation function on the surrounding query builder.
func (b *multiParentQueryBuilder)  Subquery() *query.SubqueryNode {
	 return b.builder.Subquery()
}
*/

func CountMultiParents(ctx context.Context) int {
	return QueryMultiParents(ctx).Count()
}

// CountMultiParentsByID queries the database and returns the number of MultiParent objects that
// have id.
// doc: type=MultiParent
func CountMultiParentsByID(ctx context.Context, id string) int {
	return QueryMultiParents(ctx).Where(op.Equal(node.MultiParent().ID(), id)).Count()
}

// CountMultiParentsByName queries the database and returns the number of MultiParent objects that
// have name.
// doc: type=MultiParent
func CountMultiParentsByName(ctx context.Context, name string) int {
	return QueryMultiParents(ctx).Where(op.Equal(node.MultiParent().Name(), name)).Count()
}

// CountMultiParentsByParent1ID queries the database and returns the number of MultiParent objects that
// have parent1ID.
// doc: type=MultiParent
func CountMultiParentsByParent1ID(ctx context.Context, parent1ID string) int {
	if parent1ID == "" {
		return 0
	}
	return QueryMultiParents(ctx).Where(op.Equal(node.MultiParent().Parent1ID(), parent1ID)).Count()
}

// CountMultiParentsByParent2ID queries the database and returns the number of MultiParent objects that
// have parent2ID.
// doc: type=MultiParent
func CountMultiParentsByParent2ID(ctx context.Context, parent2ID string) int {
	if parent2ID == "" {
		return 0
	}
	return QueryMultiParents(ctx).Where(op.Equal(node.MultiParent().Parent2ID(), parent2ID)).Count()
}

// load is the private loader that transforms data coming from the database into a tree structure reflecting the relationships
// between the object chain requested by the user in the query.
func (o *multiParentBase) load(m map[string]interface{}, objThis *MultiParent) {

	if v, ok := m["id"]; ok && v != nil {
		if o.id, ok = v.(string); ok {
			o.idIsLoaded = true
			o.idIsDirty = false

			o._originalPK = o.id

		} else {
			panic("Wrong type found for id.")
		}
	} else {
		o.idIsLoaded = false
		o.id = ""
		o.idIsDirty = false
	}

	if v, ok := m["name"]; ok {
		if v == nil {
			o.name = ""
			o.nameIsNull = true
			o.nameIsLoaded = true
			o.nameIsDirty = false
		} else if o.name, ok = v.(string); ok {
			o.nameIsNull = false
			o.nameIsLoaded = true
			o.nameIsDirty = false
		} else {
			panic("Wrong type found for name.")
		}
	} else {
		o.nameIsLoaded = false
		o.nameIsNull = true
		o.name = ""
		o.nameIsDirty = false
	}

	if v, ok := m["parent_1_id"]; ok {
		if v == nil {
			o.parent1ID = ""
			o.parent1IDIsNull = true
			o.parent1IDIsLoaded = true
			o.parent1IDIsDirty = false
		} else if o.parent1ID, ok = v.(string); ok {
			o.parent1IDIsNull = false
			o.parent1IDIsLoaded = true
			o.parent1IDIsDirty = false
		} else {
			panic("Wrong type found for parent_1_id.")
		}
	} else {
		o.parent1IDIsLoaded = false
		o.parent1IDIsNull = true
		o.parent1ID = ""
		o.parent1IDIsDirty = false
	}

	if v, ok := m["Parent1"]; ok {
		if objParent1, ok2 := v.(map[string]any); ok2 {
			o.objParent1 = new(MultiParent)
			o.objParent1.load(objParent1, o.objParent1)
			o.parent1IDIsLoaded = true
			o.parent1IDIsDirty = false
		} else {
			panic("Wrong type found for Parent1 object.")
		}
	} else {
		o.objParent1 = nil
	}

	if v, ok := m["parent_2_id"]; ok {
		if v == nil {
			o.parent2ID = ""
			o.parent2IDIsNull = true
			o.parent2IDIsLoaded = true
			o.parent2IDIsDirty = false
		} else if o.parent2ID, ok = v.(string); ok {
			o.parent2IDIsNull = false
			o.parent2IDIsLoaded = true
			o.parent2IDIsDirty = false
		} else {
			panic("Wrong type found for parent_2_id.")
		}
	} else {
		o.parent2IDIsLoaded = false
		o.parent2IDIsNull = true
		o.parent2ID = ""
		o.parent2IDIsDirty = false
	}

	if v, ok := m["Parent2"]; ok {
		if objParent2, ok2 := v.(map[string]any); ok2 {
			o.objParent2 = new(MultiParent)
			o.objParent2.load(objParent2, o.objParent2)
			o.parent2IDIsLoaded = true
			o.parent2IDIsDirty = false
		} else {
			panic("Wrong type found for Parent2 object.")
		}
	} else {
		o.objParent2 = nil
	}

	// Reverse references

	if v, ok := m["Parent1MultiParents"]; ok {
		switch v2 := v.(type) {
		case []map[string]any: // array expansion
			o.revParent1MultiParents.Clear()
			o.revParent1MultiParentsIsDirty = false
			for _, v3 := range v2 {
				obj := new(MultiParent)
				obj.load(v3, obj)
				o.revParent1MultiParents.Set(obj.PrimaryKey(), obj)
			}
		default:
			panic("Wrong type found for revParent1MultiParents object.")
		}
	} else {
		o.revParent1MultiParents.Clear()
		o.revParent1MultiParentsIsDirty = false
	}

	if v, ok := m["Parent2MultiParents"]; ok {
		switch v2 := v.(type) {
		case []map[string]any: // array expansion
			o.revParent2MultiParents.Clear()
			o.revParent2MultiParentsIsDirty = false
			for _, v3 := range v2 {
				obj := new(MultiParent)
				obj.load(v3, obj)
				o.revParent2MultiParents.Set(obj.PrimaryKey(), obj)
			}
		default:
			panic("Wrong type found for revParent2MultiParents object.")
		}
	} else {
		o.revParent2MultiParents.Clear()
		o.revParent2MultiParentsIsDirty = false
	}

	if v, ok := m["aliases_"]; ok {
		o._aliases = v.(map[string]any)
	}

	o._restored = true

}

// save will update or insert the object, depending on the state of the object.
func (o *multiParentBase) save(ctx context.Context) error {
	if o._restored {
		return o.update(ctx)
	} else {
		return o.insert(ctx)
	}
}

// update will update the values in the database, saving any changed values.
// If the table has auto-generated values, those will be updated automatically.
func (o *multiParentBase) update(ctx context.Context) error {
	if !o._restored {
		panic("cannot update a record that was not originally read from the database.")
	}
	if !o.IsDirty() {
		return nil // nothing to save
	}

	var modifiedFields map[string]interface{}

	d := Database()
	err := db.ExecuteTransaction(ctx, d, func() error {

		// Save loaded Parent1 object to get its new pk and update it here.
		if o.objParent1 != nil {
			if err := o.objParent1.Save(ctx); err != nil {
				return err
			}
			o.parent1ID = o.objParent1.PrimaryKey()
		}

		// Save loaded Parent2 object to get its new pk and update it here.
		if o.objParent2 != nil {
			if err := o.objParent2.Save(ctx); err != nil {
				return err
			}
			o.parent2ID = o.objParent2.PrimaryKey()
		}

		modifiedFields = o.getUpdateFields()
		if len(modifiedFields) != 0 {
			var err2 error

			_, err2 = d.Update(ctx, "multi_parent", "id", o._originalPK, modifiedFields, "", 0)
			if err2 != nil {
				return err2
			}
		}

		if o.revParent1MultiParentsIsDirty {
			// relation connection changed

			currentObjs := QueryMultiParents(ctx).
				Where(op.Equal(node.MultiParent().Parent1ID(), o.PrimaryKey())).
				Select(node.MultiParent().Parent1ID()).
				Load()

			for _, obj := range currentObjs {
				if !o.revParent1MultiParents.Has(obj.PrimaryKey()) {
					// The old object is not in the group of new objects
					obj.SetParent1IDToNull()
					if err := obj.Save(ctx); err != nil {
						return err
					}
				}
			}
			{
				keys := o.revParent1MultiParents.Keys() // Make a copy of the keys, since we will change the slicemap while iterating
				for i, k := range keys {
					obj := o.revParent1MultiParents.Get(k)
					obj.SetParent1ID(o.PrimaryKey())
					obj.parent1IDIsDirty = true // force a change in case data is stale
					if err := obj.Save(ctx); err != nil {
						return err
					}
					if obj.PrimaryKey() != k {
						// update slice map key without changing order
						o.revParent1MultiParents.Delete(k)
						o.revParent1MultiParents.SetAt(i, obj.PrimaryKey(), obj)
					}
				}
			}

		} else {

			// save related objects
			for obj := range o.revParent1MultiParents.ValuesIter() {
				if err := obj.Save(ctx); err != nil {
					return err
				}
			}
		}
		if o.revParent2MultiParentsIsDirty {
			// relation connection changed

			currentObjs := QueryMultiParents(ctx).
				Where(op.Equal(node.MultiParent().Parent2ID(), o.PrimaryKey())).
				Select(node.MultiParent().Parent2ID()).
				Load()

			for _, obj := range currentObjs {
				if !o.revParent2MultiParents.Has(obj.PrimaryKey()) {
					// The old object is not in the group of new objects
					obj.SetParent2IDToNull()
					if err := obj.Save(ctx); err != nil {
						return err
					}
				}
			}
			{
				keys := o.revParent2MultiParents.Keys() // Make a copy of the keys, since we will change the slicemap while iterating
				for i, k := range keys {
					obj := o.revParent2MultiParents.Get(k)
					obj.SetParent2ID(o.PrimaryKey())
					obj.parent2IDIsDirty = true // force a change in case data is stale
					if err := obj.Save(ctx); err != nil {
						return err
					}
					if obj.PrimaryKey() != k {
						// update slice map key without changing order
						o.revParent2MultiParents.Delete(k)
						o.revParent2MultiParents.SetAt(i, obj.PrimaryKey(), obj)
					}
				}
			}

		} else {

			// save related objects
			for obj := range o.revParent2MultiParents.ValuesIter() {
				if err := obj.Save(ctx); err != nil {
					return err
				}
			}
		}

		return nil
	}) // transaction
	if err != nil {
		return err
	}

	o.resetDirtyStatus()
	if len(modifiedFields) != 0 {
		broadcast.Update(ctx, "goradd_unit", "multi_parent", o._originalPK, all.SortedKeys(modifiedFields)...)
	}

	return nil
}

// insert will insert the object into the database. Related items will be saved.
func (o *multiParentBase) insert(ctx context.Context) (err error) {
	var insertFields map[string]interface{}
	d := Database()
	err = db.ExecuteTransaction(ctx, d, func() error {

		// Save loaded Parent1 object to get its new pk and update it here.
		if o.objParent1 != nil {
			if err := o.objParent1.Save(ctx); err != nil {
				return err
			}
			o.parent1ID = o.objParent1.PrimaryKey()
		}

		// Save loaded Parent2 object to get its new pk and update it here.
		if o.objParent2 != nil {
			if err := o.objParent2.Save(ctx); err != nil {
				return err
			}
			o.parent2ID = o.objParent2.PrimaryKey()
		}

		insertFields = o.getInsertFields()
		var newPk string

		newPk, err = d.Insert(ctx, "multi_parent", "id", insertFields)
		if err != nil {
			return err
		}
		o.id = newPk
		o._originalPK = newPk
		o.idIsLoaded = true

		if o.revParent1MultiParents.Len() > 0 {
			keys := o.revParent1MultiParents.Keys()
			for i, k := range keys {
				obj := o.revParent1MultiParents.Get(k)
				obj.SetParent1ID(newPk)
				if err = obj.Save(ctx); err != nil {
					return err
				}
				if obj.PrimaryKey() != k {
					o.revParent1MultiParents.Delete(k)
					o.revParent1MultiParents.SetAt(i, obj.PrimaryKey(), obj)
				}
			}
		}

		if o.revParent2MultiParents.Len() > 0 {
			keys := o.revParent2MultiParents.Keys()
			for i, k := range keys {
				obj := o.revParent2MultiParents.Get(k)
				obj.SetParent2ID(newPk)
				if err = obj.Save(ctx); err != nil {
					return err
				}
				if obj.PrimaryKey() != k {
					o.revParent2MultiParents.Delete(k)
					o.revParent2MultiParents.SetAt(i, obj.PrimaryKey(), obj)
				}
			}
		}

		return nil

	}) // transaction

	if err != nil {
		return
	}

	o.resetDirtyStatus()
	o._restored = true
	broadcast.Insert(ctx, "goradd_unit", "multi_parent", o.PrimaryKey())
	return
}

// getUpdateFields returns the database columns that will be sent to the update process.
// This will include timestamp fields only if some other column has changed.
func (o *multiParentBase) getUpdateFields() (fields map[string]interface{}) {
	fields = map[string]interface{}{}
	if o.idIsDirty {
		fields["id"] = o.id
	}
	if o.nameIsDirty {
		if o.nameIsNull {
			fields["name"] = nil
		} else {
			fields["name"] = o.name
		}
	}
	if o.parent1IDIsDirty {
		if o.parent1IDIsNull {
			fields["parent_1_id"] = nil
		} else {
			fields["parent_1_id"] = o.parent1ID
		}
	}
	if o.parent2IDIsDirty {
		if o.parent2IDIsNull {
			fields["parent_2_id"] = nil
		} else {
			fields["parent_2_id"] = o.parent2ID
		}
	}
	return
}

// getInsertFields returns the fields that will be specified in an insert operation.
// Optional fields that have not been set and have no default will be returned as nil.
// NoSql databases should interpret this as no value. Sql databases should interpret this as
// explicitly setting a NULL value, which would override any database specific default value.
// Auto-generated fields will be returned with their generated values, except AutoPK fields, which are generated by the
// database driver and updated after the insert.
func (o *multiParentBase) getInsertFields() (fields map[string]interface{}) {
	fields = map[string]interface{}{}
	if o.idIsDirty {
		fields["id"] = o.id
	}
	if o.nameIsNull {
		fields["name"] = nil
	} else {
		fields["name"] = o.name
	}
	if o.parent1IDIsNull {
		fields["parent_1_id"] = nil
	} else {
		fields["parent_1_id"] = o.parent1ID
	}
	if o.parent2IDIsNull {
		fields["parent_2_id"] = nil
	} else {
		fields["parent_2_id"] = o.parent2ID
	}
	return
}

// Delete deletes the record from the database.
//
// Associated Parent1MultiParents will have their Parent1ID field set to NULL.
// Associated Parent2MultiParents will have their Parent2ID field set to NULL.
func (o *multiParentBase) Delete(ctx context.Context) (err error) {
	if o == nil {
		return // allow deleting of a nil object to be a noop
	}
	if !o._restored {
		panic("Cannot delete a record that has no primary key value.")
	}
	d := Database()
	err = db.ExecuteTransaction(ctx, d, func() error {

		{
			objs := QueryMultiParents(ctx).
				Where(op.Equal(node.MultiParent().Parent1ID(), o.id)).
				Select(node.MultiParent().Parent1ID()).
				Load()
			for _, obj := range objs {
				obj.SetParent1IDToNull()
				if err = obj.Save(ctx); err != nil {
					return err
				}
			}
			o.revParent1MultiParents.Clear()
		}

		{
			objs := QueryMultiParents(ctx).
				Where(op.Equal(node.MultiParent().Parent2ID(), o.id)).
				Select(node.MultiParent().Parent2ID()).
				Load()
			for _, obj := range objs {
				obj.SetParent2IDToNull()
				if err = obj.Save(ctx); err != nil {
					return err
				}
			}
			o.revParent2MultiParents.Clear()
		}

		d.Delete(ctx, "multi_parent", map[string]any{"ID": o.id})
		return nil
	})

	if err != nil {
		return err
	}
	broadcast.Delete(ctx, "goradd_unit", "multi_parent", fmt.Sprint(o.id))
	return
}

// deleteMultiParent deletes the MultiParent with primary key pk from the database
// and handles associated records.
func deleteMultiParent(ctx context.Context, pk string) error {
	if obj := LoadMultiParent(ctx, pk, node.MultiParent().PrimaryKey()); obj != nil {
		if err := obj.Delete(ctx); err != nil {
			return err
		}
	}
	return nil
}

// resetDirtyStatus resets the dirty status of every field in the object.
func (o *multiParentBase) resetDirtyStatus() {
	o.idIsDirty = false
	o.nameIsDirty = false
	o.parent1IDIsDirty = false
	o.parent2IDIsDirty = false
	o.revParent1MultiParentsIsDirty = false
	o.revParent2MultiParentsIsDirty = false

}

// IsDirty returns true if the object has been changed since it was read from the database or created.
// However, a new object that has a column with a default value will be automatically marked as dirty upon creation.
func (o *multiParentBase) IsDirty() (dirty bool) {
	dirty = o.idIsDirty ||
		o.nameIsDirty ||
		o.parent1IDIsDirty ||
		(o.objParent1 != nil && o.objParent1.IsDirty()) ||
		o.parent2IDIsDirty ||
		(o.objParent2 != nil && o.objParent2.IsDirty())

	dirty = dirty ||
		o.revParent1MultiParentsIsDirty ||
		o.revParent2MultiParentsIsDirty

	for obj := range o.revParent1MultiParents.ValuesIter() {
		dirty = dirty || obj.IsDirty()
	}
	for obj := range o.revParent2MultiParents.ValuesIter() {
		dirty = dirty || obj.IsDirty()
	}

	return
}

// Get returns the value of a field in the object based on the field's name.
// It will also get related objects if they are loaded.
// Invalid fields and objects are returned as nil.
// Get can be used to retrieve a value by using the Identifier of a node.
func (o *multiParentBase) Get(key string) interface{} {

	switch key {

	case "ID":
		if !o.idIsLoaded {
			return nil
		}
		return o.id

	case "Name":
		if !o.nameIsLoaded {
			return nil
		}
		return o.name

	case "Parent1ID":
		if !o.parent1IDIsLoaded {
			return nil
		}
		return o.parent1ID

	case "Parent1":
		return o.Parent1()

	case "Parent2ID":
		if !o.parent2IDIsLoaded {
			return nil
		}
		return o.parent2ID

	case "Parent2":
		return o.Parent2()

	case "Parent1MultiParents":
		return o.revParent1MultiParents.Values()
	case "Parent2MultiParents":
		return o.revParent2MultiParents.Values()

	}
	return nil
}

// MarshalBinary serializes the object into a buffer that is deserializable using UnmarshalBinary.
// It should be used for transmitting database objects over the wire, or for temporary storage. It does not send
// a version number, so if the data format changes, its up to you to invalidate the old stored objects.
// The framework uses this to serialize the object when it is stored in a control.
func (o *multiParentBase) MarshalBinary() ([]byte, error) {
	buf := new(bytes.Buffer)
	encoder := gob.NewEncoder(buf)

	if err := encoder.Encode(o.id); err != nil {
		return nil, fmt.Errorf("error encoding MultiParent.id: %w", err)
	}
	if err := encoder.Encode(o.idIsLoaded); err != nil {
		return nil, fmt.Errorf("error encoding MultiParent.idIsLoaded: %w", err)
	}
	if err := encoder.Encode(o.idIsDirty); err != nil {
		return nil, fmt.Errorf("error encoding MultiParent.idIsDirty: %w", err)
	}

	if err := encoder.Encode(o.name); err != nil {
		return nil, fmt.Errorf("error encoding MultiParent.name: %w", err)
	}
	if err := encoder.Encode(o.nameIsNull); err != nil {
		return nil, fmt.Errorf("error encoding MultiParent.nameIsNull: %w", err)
	}
	if err := encoder.Encode(o.nameIsLoaded); err != nil {
		return nil, fmt.Errorf("error encoding MultiParent.nameIsLoaded: %w", err)
	}
	if err := encoder.Encode(o.nameIsDirty); err != nil {
		return nil, fmt.Errorf("error encoding MultiParent.nameIsDirty: %w", err)
	}

	if err := encoder.Encode(o.parent1ID); err != nil {
		return nil, fmt.Errorf("error encoding MultiParent.parent1ID: %w", err)
	}
	if err := encoder.Encode(o.parent1IDIsNull); err != nil {
		return nil, fmt.Errorf("error encoding MultiParent.parent1IDIsNull: %w", err)
	}
	if err := encoder.Encode(o.parent1IDIsLoaded); err != nil {
		return nil, fmt.Errorf("error encoding MultiParent.parent1IDIsLoaded: %w", err)
	}
	if err := encoder.Encode(o.parent1IDIsDirty); err != nil {
		return nil, fmt.Errorf("error encoding MultiParent.parent1IDIsDirty: %w", err)
	}

	if o.objParent1 == nil {
		if err := encoder.Encode(false); err != nil {
			return nil, err
		}
	} else {
		if err := encoder.Encode(true); err != nil {
			return nil, err
		}
		if err := encoder.Encode(o.objParent1); err != nil {
			return nil, fmt.Errorf("error encoding MultiParent.objParent1: %w", err)
		}
	}

	if err := encoder.Encode(o.parent2ID); err != nil {
		return nil, fmt.Errorf("error encoding MultiParent.parent2ID: %w", err)
	}
	if err := encoder.Encode(o.parent2IDIsNull); err != nil {
		return nil, fmt.Errorf("error encoding MultiParent.parent2IDIsNull: %w", err)
	}
	if err := encoder.Encode(o.parent2IDIsLoaded); err != nil {
		return nil, fmt.Errorf("error encoding MultiParent.parent2IDIsLoaded: %w", err)
	}
	if err := encoder.Encode(o.parent2IDIsDirty); err != nil {
		return nil, fmt.Errorf("error encoding MultiParent.parent2IDIsDirty: %w", err)
	}

	if o.objParent2 == nil {
		if err := encoder.Encode(false); err != nil {
			return nil, err
		}
	} else {
		if err := encoder.Encode(true); err != nil {
			return nil, err
		}
		if err := encoder.Encode(o.objParent2); err != nil {
			return nil, fmt.Errorf("error encoding MultiParent.objParent2: %w", err)
		}
	}

	if err := encoder.Encode(&o.revParent1MultiParents); err != nil {
		return nil, err
	}

	if err := encoder.Encode(o.revParent1MultiParentsIsDirty); err != nil {
		return nil, err
	}

	if err := encoder.Encode(&o.revParent2MultiParents); err != nil {
		return nil, err
	}

	if err := encoder.Encode(o.revParent2MultiParentsIsDirty); err != nil {
		return nil, err
	}

	if o._aliases == nil {
		if err := encoder.Encode(false); err != nil {
			return nil, err
		}
	} else {
		if err := encoder.Encode(true); err != nil {
			return nil, err
		}
		if err := encoder.Encode(o._aliases); err != nil {
			return nil, fmt.Errorf("error encoding MultiParent._aliases: %w", err)
		}
	}

	if err := encoder.Encode(o._restored); err != nil {
		return nil, fmt.Errorf("error encoding MultiParent._restored: %w", err)
	}
	if err := encoder.Encode(o._originalPK); err != nil {
		return nil, fmt.Errorf("error encoding MultiParent._originalPK: %w", err)
	}

	return buf.Bytes(), nil

	return buf.Bytes(), nil
}

// UnmarshalBinary converts a structure that was created with MarshalBinary into a MultiParent object.
func (o *multiParentBase) UnmarshalBinary(data []byte) (err error) {

	buf := bytes.NewBuffer(data)
	dec := gob.NewDecoder(buf)
	var isPtr bool

	_ = isPtr
	if err = dec.Decode(&o.id); err != nil {
		return fmt.Errorf("error decoding MultiParent.id: %w", err)
	}
	if err = dec.Decode(&o.idIsLoaded); err != nil {
		return fmt.Errorf("error decoding MultiParent.idIsLoaded: %w", err)
	}
	if err = dec.Decode(&o.idIsDirty); err != nil {
		return fmt.Errorf("error decoding MultiParent.idIsDirty: %w", err)
	}

	if err = dec.Decode(&o.name); err != nil {
		return fmt.Errorf("error decoding MultiParent.name: %w", err)
	}
	if err = dec.Decode(&o.nameIsNull); err != nil {
		return fmt.Errorf("error decoding MultiParent.nameIsNull: %w", err)
	}
	if err = dec.Decode(&o.nameIsLoaded); err != nil {
		return fmt.Errorf("error decoding MultiParent.nameIsLoaded: %w", err)
	}
	if err = dec.Decode(&o.nameIsDirty); err != nil {
		return fmt.Errorf("error decoding MultiParent.nameIsDirty: %w", err)
	}

	if err = dec.Decode(&o.parent1ID); err != nil {
		return fmt.Errorf("error decoding MultiParent.parent1ID: %w", err)
	}
	if err = dec.Decode(&o.parent1IDIsNull); err != nil {
		return fmt.Errorf("error decoding MultiParent.parent1IDIsNull: %w", err)
	}
	if err = dec.Decode(&o.parent1IDIsLoaded); err != nil {
		return fmt.Errorf("error decoding MultiParent.parent1IDIsLoaded: %w", err)
	}
	if err = dec.Decode(&o.parent1IDIsDirty); err != nil {
		return fmt.Errorf("error decoding MultiParent.parent1IDIsDirty: %w", err)
	}

	if err = dec.Decode(&isPtr); err != nil {
		return fmt.Errorf("error decoding MultiParent.objParent1 isPtr: %w", err)
	}
	if isPtr {
		if err = dec.Decode(&o.objParent1); err != nil {
			return fmt.Errorf("error decoding MultiParent.objParent1: %w", err)
		}
	}
	if err = dec.Decode(&o.parent2ID); err != nil {
		return fmt.Errorf("error decoding MultiParent.parent2ID: %w", err)
	}
	if err = dec.Decode(&o.parent2IDIsNull); err != nil {
		return fmt.Errorf("error decoding MultiParent.parent2IDIsNull: %w", err)
	}
	if err = dec.Decode(&o.parent2IDIsLoaded); err != nil {
		return fmt.Errorf("error decoding MultiParent.parent2IDIsLoaded: %w", err)
	}
	if err = dec.Decode(&o.parent2IDIsDirty); err != nil {
		return fmt.Errorf("error decoding MultiParent.parent2IDIsDirty: %w", err)
	}

	if err = dec.Decode(&isPtr); err != nil {
		return fmt.Errorf("error decoding MultiParent.objParent2 isPtr: %w", err)
	}
	if isPtr {
		if err = dec.Decode(&o.objParent2); err != nil {
			return fmt.Errorf("error decoding MultiParent.objParent2: %w", err)
		}
	}
	if err = dec.Decode(&o.revParent1MultiParents); err != nil {
		return fmt.Errorf("error decoding MultiParent.revParent1MultiParents: %w", err)
	}

	if err = dec.Decode(&o.revParent1MultiParentsIsDirty); err != nil {
		return fmt.Errorf("error decoding MultiParent.revParent1MultiParentsIsDirty: %w", err)
	}

	if err = dec.Decode(&o.revParent2MultiParents); err != nil {
		return fmt.Errorf("error decoding MultiParent.revParent2MultiParents: %w", err)
	}

	if err = dec.Decode(&o.revParent2MultiParentsIsDirty); err != nil {
		return fmt.Errorf("error decoding MultiParent.revParent2MultiParentsIsDirty: %w", err)
	}

	return
}

// MarshalJSON serializes the object into a JSON object.
// Only valid data will be serialized, meaning, you can control what gets serialized by using Select to
// select only the fields you want when you query for the object. Another way to control the output
// is to call MarshalStringMap, modify the map, then encode the map.
func (o *multiParentBase) MarshalJSON() (data []byte, err error) {
	v := o.MarshalStringMap()
	return json.Marshal(v)
}

// MarshalStringMap serializes the object into a string map of interfaces.
// Only valid data will be serialized, meaning, you can control what gets serialized by using Select to
// select only the fields you want when you query for the object. The keys are the same as the json keys.
func (o *multiParentBase) MarshalStringMap() map[string]interface{} {
	v := make(map[string]interface{})

	if o.idIsLoaded {
		v["id"] = o.id
	}

	if o.nameIsLoaded {
		if o.nameIsNull {
			v["name"] = nil
		} else {
			v["name"] = o.name
		}
	}

	if o.parent1IDIsLoaded {
		if o.parent1IDIsNull {
			v["parent1ID"] = nil
		} else {
			v["parent1ID"] = o.parent1ID
		}
	}

	if val := o.Parent1(); val != nil {
		v["parent1"] = val.MarshalStringMap()
	}

	if o.parent2IDIsLoaded {
		if o.parent2IDIsNull {
			v["parent2ID"] = nil
		} else {
			v["parent2ID"] = o.parent2ID
		}
	}

	if val := o.Parent2(); val != nil {
		v["parent2"] = val.MarshalStringMap()
	}
	if o.revParent1MultiParents.Len() != 0 {
		var vals []map[string]interface{}
		for obj := range o.revParent1MultiParents.ValuesIter() {
			vals = append(vals, obj.MarshalStringMap())
		}
		v["parent1multiParents"] = vals
	}
	if o.revParent2MultiParents.Len() != 0 {
		var vals []map[string]interface{}
		for obj := range o.revParent2MultiParents.ValuesIter() {
			vals = append(vals, obj.MarshalStringMap())
		}
		v["parent2multiParents"] = vals
	}
	for _k, _v := range o._aliases {
		v[_k] = _v
	}
	return v
}

// UnmarshalJSON unmarshalls the given json data into the MultiParent. The MultiParent can be a
// newly created object, or one loaded from the database.
//
// After unmarshalling, the object is not  saved. You must call Save to insert it into the database
// or update it.
//
// Unmarshalling of sub-objects, as in objects linked via foreign keys, is not currently supported.
//
// The fields it expects are:
//
//	"id" - string
//	"name" - string, nullable
//	"parent1ID" - string, nullable
//	"parent2ID" - string, nullable
func (o *multiParentBase) UnmarshalJSON(data []byte) (err error) {
	var v map[string]interface{}
	if len(data) == 0 {
		return
	}
	d := json.NewDecoder(bytes.NewReader(data))
	d.UseNumber() // use a number to avoid precision errors
	if err = d.Decode(&v); err != nil {
		return err
	}
	return o.UnmarshalStringMap(v)
}

// UnmarshalStringMap will load the values from the stringmap into the object.
//
// Override this in MultiParent to modify the json before sending it here.
func (o *multiParentBase) UnmarshalStringMap(m map[string]interface{}) (err error) {
	for k, v := range m {
		switch k {

		case "id":
			{
				if v == nil {
					return fmt.Errorf("field %s cannot be null", k)
				}

				if s, ok := v.(string); !ok {
					return fmt.Errorf("json field %s must be a string", k)
				} else {
					o.SetID(s)
				}
			}

		case "name":
			{
				if v == nil {
					o.SetNameToNull()
					continue
				}

				if s, ok := v.(string); !ok {
					return fmt.Errorf("json field %s must be a string", k)
				} else {
					o.SetName(s)
				}
			}

		case "parent1ID":
			{
				if v == nil {
					o.SetParent1IDToNull()
					continue
				}

				if s, ok := v.(string); !ok {
					return fmt.Errorf("field %s must be a string", k)
				} else {
					o.SetParent1ID(s)
				}

			}

		case "parent2ID":
			{
				if v == nil {
					o.SetParent2IDToNull()
					continue
				}

				if s, ok := v.(string); !ok {
					return fmt.Errorf("field %s must be a string", k)
				} else {
					o.SetParent2ID(s)
				}

			}

		}
	}
	return
}
