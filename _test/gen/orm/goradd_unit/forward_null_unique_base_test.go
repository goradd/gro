// Code generated by goradd-orm. DO NOT EDIT.

package goradd_unit

import (
	"context"
	"testing"

	"github.com/goradd/orm/pkg/db"
	"github.com/goradd/orm/pkg/test"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestForwardNullUnique_SetName(t *testing.T) {

	obj := NewForwardNullUnique()
	name := test.RandomValue[string](100)
	obj.SetName(name)
	assert.Equal(t, name, obj.Name())

	// test default
	obj.SetName("")
	assert.EqualValues(t, "", obj.Name(), "set default")

	// test panic on setting value larger than maximum size allowed
	name = test.RandomValue[string](101)
	assert.Panics(t, func() {
		obj.SetName(name)
	})
}
func TestForwardNullUnique_SetReverseID(t *testing.T) {

	obj := NewForwardNullUnique()
	reverseID := test.RandomValue[string](0)
	obj.SetReverseID(reverseID)
	assert.Equal(t, reverseID, obj.ReverseID())
	assert.False(t, obj.ReverseIDIsNull())

	// Test nil
	obj.SetReverseID(nil)
	assert.Equal(t, "", obj.ReverseID(), "set nil")
	assert.True(t, obj.ReverseIDIsNull())

	// test default
	obj.SetReverseID("")
	assert.EqualValues(t, "", obj.ReverseID(), "set default")

	assert.False(t, obj.ReverseIDIsNull())

}

// createMinimalSampleForwardNullUnique creates and saves a minimal version of a ForwardNullUnique object
// for testing.
func createMinimalSampleForwardNullUnique(ctx context.Context) *ForwardNullUnique {
	obj := NewForwardNullUnique()

	name := test.RandomValue[string](100)
	obj.SetName(name)

	obj.Save(ctx)
	return obj
}
func TestForwardNullUnique_CRUD(t *testing.T) {
	obj := NewForwardNullUnique()
	ctx := db.NewContext(nil)

	name := test.RandomValue[string](100)
	obj.SetName(name)

	objReverse := createMinimalSampleReverse(ctx)
	obj.SetReverse(objReverse)

	obj.Save(ctx)

	// Test retrieval
	obj = LoadForwardNullUnique(ctx, obj.PrimaryKey())
	require.NotNil(t, obj)

	assert.True(t, obj.IDIsValid())

	assert.True(t, obj.NameIsValid())
	assert.Equal(t, name, obj.Name())

	assert.True(t, obj.ReverseIDIsValid())
	assert.False(t, obj.ReverseIDIsNull())
	assert.NotEmpty(t, obj.ReverseID())

}
