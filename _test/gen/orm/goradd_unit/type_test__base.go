// Code generated by goradd-orm. DO NOT EDIT.

package goradd_unit

import (
	"bytes"
	"context"
	"encoding/base64"
	"encoding/gob"
	"encoding/json"
	"fmt"
	"slices"
	"time"
	"unicode/utf8"

	"github.com/goradd/all"
	"github.com/goradd/orm/_test/gen/orm/goradd_unit/node"
	"github.com/goradd/orm/pkg/broadcast"
	"github.com/goradd/orm/pkg/db"
	"github.com/goradd/orm/pkg/op"
	"github.com/goradd/orm/pkg/query"
)

// TypeTestBase is embedded in a TypeTest object and provides the ORM access to the database.
// The member variables of the structure are private and should not normally be accessed by the TypeTest embedder.
// Instead, use the accessor functions.
type typeTestBase struct {
	id                  string
	idIsLoaded          bool
	idIsDirty           bool
	date                time.Time
	dateIsNull          bool
	dateIsLoaded        bool
	dateIsDirty         bool
	time                time.Time
	timeIsNull          bool
	timeIsLoaded        bool
	timeIsDirty         bool
	dateTime            time.Time
	dateTimeIsNull      bool
	dateTimeIsLoaded    bool
	dateTimeIsDirty     bool
	ts                  time.Time
	tsIsNull            bool
	tsIsLoaded          bool
	testInt             int
	testIntIsNull       bool
	testIntIsLoaded     bool
	testIntIsDirty      bool
	testFloat           float32
	testFloatIsNull     bool
	testFloatIsLoaded   bool
	testFloatIsDirty    bool
	testDouble          float64
	testDoubleIsLoaded  bool
	testDoubleIsDirty   bool
	testText            string
	testTextIsNull      bool
	testTextIsLoaded    bool
	testTextIsDirty     bool
	testBit             bool
	testBitIsNull       bool
	testBitIsLoaded     bool
	testBitIsDirty      bool
	testVarchar         string
	testVarcharIsNull   bool
	testVarcharIsLoaded bool
	testVarcharIsDirty  bool
	testBlob            []byte
	testBlobIsLoaded    bool
	testBlobIsDirty     bool

	// Custom aliases, if specified
	_aliases map[string]any

	// Indicates whether this is a new object, or one loaded from the database. Used by Save to know whether to Insert or Update.
	_restored bool

	_originalPK string
}

// IDs used to access the TypeTest object fields by name using the Get function.
// doc: type=TypeTest
const (
	TypeTest_ID          = `ID`
	TypeTest_Date        = `Date`
	TypeTest_Time        = `Time`
	TypeTest_DateTime    = `DateTime`
	TypeTest_Ts          = `Ts`
	TypeTest_TestInt     = `TestInt`
	TypeTest_TestFloat   = `TestFloat`
	TypeTest_TestDouble  = `TestDouble`
	TypeTest_TestText    = `TestText`
	TypeTest_TestBit     = `TestBit`
	TypeTest_TestVarchar = `TestVarchar`
	TypeTest_TestBlob    = `TestBlob`
)

const TypeTestTestIntMax = 2147483647
const TypeTestTestIntMin = -2147483648
const TypeTestTestTextMaxLength = 65535 // The number of runes the column can hold
const TypeTestTestVarcharMaxLength = 10 // The number of runes the column can hold
const TypeTestTestBlobMaxLength = 65535 // The number of bytes the column can hold

// Initialize or re-initialize a TypeTest database object to default values.
// The primary key will get a temporary negative number which will be replaced when the object is saved.
// Multiple calls to Initialize are not guaranteed to create sequential values for the primary key.
func (o *typeTestBase) Initialize() {
	o.id = db.TemporaryPrimaryKey()
	o.idIsLoaded = true
	o.idIsDirty = false

	o.date = time.Time{}
	o.dateIsNull = true
	o.dateIsLoaded = false
	o.dateIsDirty = false

	o.time = time.Time{}
	o.timeIsNull = true
	o.timeIsLoaded = false
	o.timeIsDirty = false

	o.dateTime = time.Time{}
	o.dateTimeIsNull = true
	o.dateTimeIsLoaded = false
	o.dateTimeIsDirty = false

	o.ts = time.Time{}
	o.tsIsNull = false
	o.tsIsLoaded = true

	o.testInt = 5
	o.testIntIsNull = false
	o.testIntIsLoaded = true
	o.testIntIsDirty = false

	o.testFloat = 0
	o.testFloatIsNull = true
	o.testFloatIsLoaded = false
	o.testFloatIsDirty = false

	o.testDouble = 0
	o.testDoubleIsLoaded = false
	o.testDoubleIsDirty = false

	o.testText = ""
	o.testTextIsNull = true
	o.testTextIsLoaded = false
	o.testTextIsDirty = false

	o.testBit = false
	o.testBitIsNull = true
	o.testBitIsLoaded = false
	o.testBitIsDirty = false

	o.testVarchar = ""
	o.testVarcharIsNull = true
	o.testVarcharIsLoaded = false
	o.testVarcharIsDirty = false

	o.testBlob = []byte{}
	o.testBlobIsLoaded = false
	o.testBlobIsDirty = false

	o._aliases = nil
	o._restored = false
}

// PrimaryKey returns the current value of the primary key field.
func (o *typeTestBase) PrimaryKey() string {
	return o.id
}

// OriginalPrimaryKey returns the value of the primary key that was originally loaded into the object when it was
// read from the database.
func (o *typeTestBase) OriginalPrimaryKey() string {
	return o._originalPK
}

// Copy copies most fields to a new TypeTest object.
// Forward reference ids will be copied, but reverse and many-many references will not.
// Attached objects will not be included in the copy.
// Automatically generated fields will not be included in the copy.
// The primary key field will not be copied, since it is normally auto-generated.
// Call Save() on the new object to save it into the database.
// Copy might panic if any fields in the database were set to a size larger than the
// maximum size through a process that accessed the database outside of the ORM.
func (o *typeTestBase) Copy() (newObject *TypeTest) {
	newObject = NewTypeTest()
	if o.idIsLoaded {
		newObject.SetID(o.id)
	}
	if o.dateIsLoaded {
		newObject.SetDate(o.date)
	}
	if o.timeIsLoaded {
		newObject.SetTime(o.time)
	}
	if o.dateTimeIsLoaded {
		newObject.SetDateTime(o.dateTime)
	}
	if o.testIntIsLoaded {
		newObject.SetTestInt(o.testInt)
	}
	if o.testFloatIsLoaded {
		newObject.SetTestFloat(o.testFloat)
	}
	if o.testDoubleIsLoaded {
		newObject.SetTestDouble(o.testDouble)
	}
	if o.testTextIsLoaded {
		newObject.SetTestText(o.testText)
	}
	if o.testBitIsLoaded {
		newObject.SetTestBit(o.testBit)
	}
	if o.testVarcharIsLoaded {
		newObject.SetTestVarchar(o.testVarchar)
	}
	if o.testBlobIsLoaded {
		newObject.SetTestBlob(o.testBlob)
	}
	return
}

// ID returns the value of ID.
func (o *typeTestBase) ID() string {
	if o._restored && !o.idIsLoaded {
		panic("ID was not selected in the last query and has not been set, and so is not valid")
	}
	return o.id
}

// IDIsLoaded returns true if the value was loaded from the database or has been set.
func (o *typeTestBase) IDIsLoaded() bool {
	return o.idIsLoaded
}

// SetID sets the value of ID in the object, to be saved later in the database using the Save() function.
// Normally you will not need to call this function, since the ID value is automatically generated by the
// database driver. Exceptions might include importing data to a new database, or correcting primary key conflicts when
// merging data.
// You cannot change a primary key for a record that has been written to the database. While SQL databases will
// allow it, NoSql databases will not. Save a copy and delete this one instead.
func (o *typeTestBase) SetID(v string) {
	if o._restored {
		panic("error: Do not change a primary key for a record that has been saved. Instead, save a copy and delete the original.")
	}

	o.idIsLoaded = true
	o.id = v
	o.idIsDirty = true
}

// Date returns the value of Date.
func (o *typeTestBase) Date() time.Time {
	if o._restored && !o.dateIsLoaded {
		panic("Date was not selected in the last query and has not been set, and so is not valid")
	}
	return o.date
}

// DateIsLoaded returns true if the value was loaded from the database or has been set.
func (o *typeTestBase) DateIsLoaded() bool {
	return o.dateIsLoaded
}

// DateIsNull returns true if the related database value is null.
func (o *typeTestBase) DateIsNull() bool {
	return o.dateIsNull
}

// SetDate sets the value of Date in the object, to be saved later in the database using the Save() function.
//
// The value v will be converted to UTC time.
// The time will also be zeroed. This may cause the date value to change. To prevent this, be sure that the date given is already in UTC time.
func (o *typeTestBase) SetDate(v time.Time) {
	if o._restored &&
		o.dateIsLoaded && // if it was not selected, then make sure it gets set, since our end comparison won't be valid
		!o.dateIsNull && // if the db value is null, force a set of value
		o.date.Equal(v) {
		// no change
		return
	}

	o.dateIsLoaded = true
	v = v.UTC()
	v = time.Date(v.Year(), v.Month(), v.Day(), 0, 0, 0, 0, v.Location())
	o.date = v
	o.dateIsDirty = true
	o.dateIsNull = false
}

// SetDateToNull() will set the date value in the database to NULL.
// Date() will return the column's default value after this.
func (o *typeTestBase) SetDateToNull() {
	if !o.dateIsLoaded || !o.dateIsNull {
		// If we know it is null in the database, don't save it
		o.dateIsDirty = true
	}
	o.dateIsLoaded = true
	o.dateIsNull = true
	o.date = time.Time{}
}

// Time returns the value of Time.
func (o *typeTestBase) Time() time.Time {
	if o._restored && !o.timeIsLoaded {
		panic("Time was not selected in the last query and has not been set, and so is not valid")
	}
	return o.time
}

// TimeIsLoaded returns true if the value was loaded from the database or has been set.
func (o *typeTestBase) TimeIsLoaded() bool {
	return o.timeIsLoaded
}

// TimeIsNull returns true if the related database value is null.
func (o *typeTestBase) TimeIsNull() bool {
	return o.timeIsNull
}

// SetTime sets the value of Time in the object, to be saved later in the database using the Save() function.
//
// The value v will be converted to UTC time.
// The date will also be zeroed. This process may cause the time value to change. To prevent this, be sure that the time given is already in UTC time.
func (o *typeTestBase) SetTime(v time.Time) {
	if o._restored &&
		o.timeIsLoaded && // if it was not selected, then make sure it gets set, since our end comparison won't be valid
		!o.timeIsNull && // if the db value is null, force a set of value
		o.time.Equal(v) {
		// no change
		return
	}

	o.timeIsLoaded = true
	v = v.UTC()
	v = time.Date(1, 1, 1, v.Hour(), v.Minute(), v.Second(), v.Nanosecond(), time.UTC)
	o.time = v
	o.timeIsDirty = true
	o.timeIsNull = false
}

// SetTimeToNull() will set the time value in the database to NULL.
// Time() will return the column's default value after this.
func (o *typeTestBase) SetTimeToNull() {
	if !o.timeIsLoaded || !o.timeIsNull {
		// If we know it is null in the database, don't save it
		o.timeIsDirty = true
	}
	o.timeIsLoaded = true
	o.timeIsNull = true
	o.time = time.Time{}
}

// DateTime returns the value of DateTime.
func (o *typeTestBase) DateTime() time.Time {
	if o._restored && !o.dateTimeIsLoaded {
		panic("DateTime was not selected in the last query and has not been set, and so is not valid")
	}
	return o.dateTime
}

// DateTimeIsLoaded returns true if the value was loaded from the database or has been set.
func (o *typeTestBase) DateTimeIsLoaded() bool {
	return o.dateTimeIsLoaded
}

// DateTimeIsNull returns true if the related database value is null.
func (o *typeTestBase) DateTimeIsNull() bool {
	return o.dateTimeIsNull
}

// SetDateTime sets the value of DateTime in the object, to be saved later in the database using the Save() function.
//
// The value v will be converted to UTC time.
func (o *typeTestBase) SetDateTime(v time.Time) {
	if o._restored &&
		o.dateTimeIsLoaded && // if it was not selected, then make sure it gets set, since our end comparison won't be valid
		!o.dateTimeIsNull && // if the db value is null, force a set of value
		o.dateTime.Equal(v) {
		// no change
		return
	}

	o.dateTimeIsLoaded = true
	v = v.UTC()
	o.dateTime = v
	o.dateTimeIsDirty = true
	o.dateTimeIsNull = false
}

// SetDateTimeToNull() will set the date_time value in the database to NULL.
// DateTime() will return the column's default value after this.
func (o *typeTestBase) SetDateTimeToNull() {
	if !o.dateTimeIsLoaded || !o.dateTimeIsNull {
		// If we know it is null in the database, don't save it
		o.dateTimeIsDirty = true
	}
	o.dateTimeIsLoaded = true
	o.dateTimeIsNull = true
	o.dateTime = time.Time{}
}

// Ts returns the value of Ts.
func (o *typeTestBase) Ts() time.Time {
	if o._restored && !o.tsIsLoaded {
		panic("Ts was not selected in the last query and has not been set, and so is not valid")
	}
	return o.ts
}

// TsIsLoaded returns true if the value was loaded from the database or has been set.
func (o *typeTestBase) TsIsLoaded() bool {
	return o.tsIsLoaded
}

// TsIsNull returns true if the related database value is null.
func (o *typeTestBase) TsIsNull() bool {
	return o.tsIsNull
}

// TestInt returns the value of TestInt.
func (o *typeTestBase) TestInt() int {
	if o._restored && !o.testIntIsLoaded {
		panic("TestInt was not selected in the last query and has not been set, and so is not valid")
	}
	return o.testInt
}

// TestIntIsLoaded returns true if the value was loaded from the database or has been set.
func (o *typeTestBase) TestIntIsLoaded() bool {
	return o.testIntIsLoaded
}

// TestIntIsNull returns true if the related database value is null.
func (o *typeTestBase) TestIntIsNull() bool {
	return o.testIntIsNull
}

// SetTestInt sets the value of TestInt in the object, to be saved later in the database using the Save() function.
func (o *typeTestBase) SetTestInt(v int) {
	if o._restored &&
		o.testIntIsLoaded && // if it was not selected, then make sure it gets set, since our end comparison won't be valid
		!o.testIntIsNull && // if the db value is null, force a set of value
		o.testInt == v {
		// no change
		return
	}

	o.testIntIsLoaded = true
	o.testInt = v
	o.testIntIsDirty = true
	o.testIntIsNull = false
}

// SetTestIntToNull() will set the test_int value in the database to NULL.
// TestInt() will return the column's default value after this.
func (o *typeTestBase) SetTestIntToNull() {
	if !o.testIntIsLoaded || !o.testIntIsNull {
		// If we know it is null in the database, don't save it
		o.testIntIsDirty = true
	}
	o.testIntIsLoaded = true
	o.testIntIsNull = true
	o.testInt = 5
}

// TestFloat returns the value of TestFloat.
func (o *typeTestBase) TestFloat() float32 {
	if o._restored && !o.testFloatIsLoaded {
		panic("TestFloat was not selected in the last query and has not been set, and so is not valid")
	}
	return o.testFloat
}

// TestFloatIsLoaded returns true if the value was loaded from the database or has been set.
func (o *typeTestBase) TestFloatIsLoaded() bool {
	return o.testFloatIsLoaded
}

// TestFloatIsNull returns true if the related database value is null.
func (o *typeTestBase) TestFloatIsNull() bool {
	return o.testFloatIsNull
}

// SetTestFloat sets the value of TestFloat in the object, to be saved later in the database using the Save() function.
func (o *typeTestBase) SetTestFloat(v float32) {
	if o._restored &&
		o.testFloatIsLoaded && // if it was not selected, then make sure it gets set, since our end comparison won't be valid
		!o.testFloatIsNull && // if the db value is null, force a set of value
		o.testFloat == v {
		// no change
		return
	}

	o.testFloatIsLoaded = true
	o.testFloat = v
	o.testFloatIsDirty = true
	o.testFloatIsNull = false
}

// SetTestFloatToNull() will set the test_float value in the database to NULL.
// TestFloat() will return the column's default value after this.
func (o *typeTestBase) SetTestFloatToNull() {
	if !o.testFloatIsLoaded || !o.testFloatIsNull {
		// If we know it is null in the database, don't save it
		o.testFloatIsDirty = true
	}
	o.testFloatIsLoaded = true
	o.testFloatIsNull = true
	o.testFloat = 0
}

// TestDouble returns the value of TestDouble.
func (o *typeTestBase) TestDouble() float64 {
	if o._restored && !o.testDoubleIsLoaded {
		panic("TestDouble was not selected in the last query and has not been set, and so is not valid")
	}
	return o.testDouble
}

// TestDoubleIsLoaded returns true if the value was loaded from the database or has been set.
func (o *typeTestBase) TestDoubleIsLoaded() bool {
	return o.testDoubleIsLoaded
}

// SetTestDouble sets the value of TestDouble in the object, to be saved later in the database using the Save() function.
func (o *typeTestBase) SetTestDouble(v float64) {
	if o._restored &&
		o.testDoubleIsLoaded && // if it was not selected, then make sure it gets set, since our end comparison won't be valid
		o.testDouble == v {
		// no change
		return
	}

	o.testDoubleIsLoaded = true
	o.testDouble = v
	o.testDoubleIsDirty = true
}

// TestText returns the value of TestText.
func (o *typeTestBase) TestText() string {
	if o._restored && !o.testTextIsLoaded {
		panic("TestText was not selected in the last query and has not been set, and so is not valid")
	}
	return o.testText
}

// TestTextIsLoaded returns true if the value was loaded from the database or has been set.
func (o *typeTestBase) TestTextIsLoaded() bool {
	return o.testTextIsLoaded
}

// TestTextIsNull returns true if the related database value is null.
func (o *typeTestBase) TestTextIsNull() bool {
	return o.testTextIsNull
}

// SetTestText sets the value of TestText in the object, to be saved later in the database using the Save() function.
func (o *typeTestBase) SetTestText(v string) {
	if utf8.RuneCountInString(v) > TypeTestTestTextMaxLength {
		panic("attempted to set TypeTest.TestText to a value larger than its maximum length in runes")
	}
	if o._restored &&
		o.testTextIsLoaded && // if it was not selected, then make sure it gets set, since our end comparison won't be valid
		!o.testTextIsNull && // if the db value is null, force a set of value
		o.testText == v {
		// no change
		return
	}

	o.testTextIsLoaded = true
	o.testText = v
	o.testTextIsDirty = true
	o.testTextIsNull = false
}

// SetTestTextToNull() will set the test_text value in the database to NULL.
// TestText() will return the column's default value after this.
func (o *typeTestBase) SetTestTextToNull() {
	if !o.testTextIsLoaded || !o.testTextIsNull {
		// If we know it is null in the database, don't save it
		o.testTextIsDirty = true
	}
	o.testTextIsLoaded = true
	o.testTextIsNull = true
	o.testText = ""
}

// TestBit returns the value of TestBit.
func (o *typeTestBase) TestBit() bool {
	if o._restored && !o.testBitIsLoaded {
		panic("TestBit was not selected in the last query and has not been set, and so is not valid")
	}
	return o.testBit
}

// TestBitIsLoaded returns true if the value was loaded from the database or has been set.
func (o *typeTestBase) TestBitIsLoaded() bool {
	return o.testBitIsLoaded
}

// TestBitIsNull returns true if the related database value is null.
func (o *typeTestBase) TestBitIsNull() bool {
	return o.testBitIsNull
}

// SetTestBit sets the value of TestBit in the object, to be saved later in the database using the Save() function.
func (o *typeTestBase) SetTestBit(v bool) {
	if o._restored &&
		o.testBitIsLoaded && // if it was not selected, then make sure it gets set, since our end comparison won't be valid
		!o.testBitIsNull && // if the db value is null, force a set of value
		o.testBit == v {
		// no change
		return
	}

	o.testBitIsLoaded = true
	o.testBit = v
	o.testBitIsDirty = true
	o.testBitIsNull = false
}

// SetTestBitToNull() will set the test_bit value in the database to NULL.
// TestBit() will return the column's default value after this.
func (o *typeTestBase) SetTestBitToNull() {
	if !o.testBitIsLoaded || !o.testBitIsNull {
		// If we know it is null in the database, don't save it
		o.testBitIsDirty = true
	}
	o.testBitIsLoaded = true
	o.testBitIsNull = true
	o.testBit = false
}

// TestVarchar returns the value of TestVarchar.
func (o *typeTestBase) TestVarchar() string {
	if o._restored && !o.testVarcharIsLoaded {
		panic("TestVarchar was not selected in the last query and has not been set, and so is not valid")
	}
	return o.testVarchar
}

// TestVarcharIsLoaded returns true if the value was loaded from the database or has been set.
func (o *typeTestBase) TestVarcharIsLoaded() bool {
	return o.testVarcharIsLoaded
}

// TestVarcharIsNull returns true if the related database value is null.
func (o *typeTestBase) TestVarcharIsNull() bool {
	return o.testVarcharIsNull
}

// SetTestVarchar sets the value of TestVarchar in the object, to be saved later in the database using the Save() function.
func (o *typeTestBase) SetTestVarchar(v string) {
	if utf8.RuneCountInString(v) > TypeTestTestVarcharMaxLength {
		panic("attempted to set TypeTest.TestVarchar to a value larger than its maximum length in runes")
	}
	if o._restored &&
		o.testVarcharIsLoaded && // if it was not selected, then make sure it gets set, since our end comparison won't be valid
		!o.testVarcharIsNull && // if the db value is null, force a set of value
		o.testVarchar == v {
		// no change
		return
	}

	o.testVarcharIsLoaded = true
	o.testVarchar = v
	o.testVarcharIsDirty = true
	o.testVarcharIsNull = false
}

// SetTestVarcharToNull() will set the test_varchar value in the database to NULL.
// TestVarchar() will return the column's default value after this.
func (o *typeTestBase) SetTestVarcharToNull() {
	if !o.testVarcharIsLoaded || !o.testVarcharIsNull {
		// If we know it is null in the database, don't save it
		o.testVarcharIsDirty = true
	}
	o.testVarcharIsLoaded = true
	o.testVarcharIsNull = true
	o.testVarchar = ""
}

// TestBlob returns the value of TestBlob.
func (o *typeTestBase) TestBlob() []byte {
	if o._restored && !o.testBlobIsLoaded {
		panic("TestBlob was not selected in the last query and has not been set, and so is not valid")
	}
	return o.testBlob
}

// TestBlobIsLoaded returns true if the value was loaded from the database or has been set.
func (o *typeTestBase) TestBlobIsLoaded() bool {
	return o.testBlobIsLoaded
}

// SetTestBlob copies the value of TestBlob, to be saved later in the database using the Save() function.
// Passing nil will set test_blob to an empty array.
func (o *typeTestBase) SetTestBlob(v []byte) {

	if len(v) > TypeTestTestBlobMaxLength {
		panic("attempted to set TypeTest.TestBlob to a value larger than its maximum length")
	}

	if o._restored &&
		o.testBlobIsLoaded && // if it was not selected, then make sure it gets set, since our end comparison won't be valid
		bytes.Equal(o.testBlob, v) {
		// no change
		return
	}

	o.testBlobIsLoaded = true
	if v == nil {
		o.testBlob = []byte{}
	} else {
		o.testBlob = slices.Clone(v)
	}
	o.testBlobIsDirty = true
}

// GetAlias returns the value for the Alias node aliasKey that was returned in the most
// recent query.
func (o *typeTestBase) GetAlias(aliasKey string) query.AliasValue {
	if a, ok := o._aliases[aliasKey]; ok {
		return query.NewAliasValue(a)
	} else {
		panic("Alias " + aliasKey + " not found.")
	}
}

// IsNew returns true if the object will create a new record when saved.
func (o *typeTestBase) IsNew() bool {
	return !o._restored
}

// LoadTypeTest returns a TypeTest from the database.
// selectNodes lets you provide nodes for selecting specific fields or additional fields from related tables.
// See [TypeTestsBuilder.Select] for more info.
func LoadTypeTest(ctx context.Context, id string, selectNodes ...query.Node) *TypeTest {
	return queryTypeTests(ctx).
		Where(op.Equal(node.TypeTest().ID(), id)).
		Select(selectNodes...).
		Get()
}

// HasTypeTest returns true if a TypeTest with the given primary key exists in the database.
// doc: type=TypeTest
func HasTypeTest(ctx context.Context, id string) bool {
	return queryTypeTests(ctx).
		Where(op.Equal(node.TypeTest().ID(), id)).
		Count() == 1
}

// The TypeTestBuilder uses the query.BuilderI interface to build a query.
// All query operations go through this query builder.
// End a query by calling either Load, LoadCursor, Get, Count, or Delete
type TypeTestBuilder interface {
	// Join(alias string, joinedTable query.Node, condition query.Node) TypeTestBuilder

	// Where adds a condition to filter what gets selected.
	// Calling Where multiple times will AND the conditions together.
	Where(c query.Node) TypeTestBuilder

	// OrderBy specifies how the resulting data should be sorted.
	// By default, the given nodes are sorted in ascending order.
	// Add Descending() to the node to specify that it should be sorted in descending order.
	OrderBy(nodes ...query.Sorter) TypeTestBuilder

	// Limit will return a subset of the data, limited to the offset and number of rows specified.
	// For large data sets and specific types of queries, this can be slow, because it will perform
	// the entire query before computing the limit.
	// You cannot limit a query that has selected a "many" relationship".
	Limit(maxRowCount int, offset int) TypeTestBuilder

	// Select performs two functions:
	//  - Passing a table type node will join the object or objects from that table to this object.
	//  - Passing a column node will optimize the query to only return the specified fields.
	// Once you select at least one column, you must select all the columns that you want in the result.
	// Some fields, like primary keys, are always selected.
	// If you are using a GroupBy, you must select the fields in the GroupBy.
	Select(nodes ...query.Node) TypeTestBuilder

	// Calculation adds a calculation described by operation with the name alias.
	// After the query, you can read the data using GetAlias() on the object identified by base.
	Calculation(base query.TableNodeI, alias string, operation query.OperationNodeI) TypeTestBuilder

	// Distinct removes duplicates from the results of the query.
	// Adding a Select() is required.
	Distinct() TypeTestBuilder

	// GroupBy controls how results are grouped when using aggregate functions with Calculation.
	GroupBy(nodes ...query.Node) TypeTestBuilder

	// Having does additional filtering on the results of the query after the query is performed.
	Having(node query.Node) TypeTestBuilder

	// Load terminates the query builder, performs the query, and returns a slice of TypeTest objects.
	// If there are any errors, nil is returned and the specific error is stored in the context.
	// If no results come back from the query, it will return a non-nil empty slice.
	Load() []*TypeTest
	// Load terminates the query builder, performs the query, and returns a slice of interfaces.
	// This can then satisfy a general interface that loads arrays of objects.
	// If there are any errors, nil is returned and the specific error is stored in the context.
	// If no results come back from the query, it will return a non-nil empty slice.
	LoadI() []query.OrmObj

	// LoadCursor terminates the query builder, performs the query, and returns a cursor to the query.
	//
	// A query cursor is useful for dealing with large amounts of query results. However, there are some
	// limitations to its use. When working with SQL databases, you cannot use a cursor while querying
	// many-to-many or reverse relationships that will create an array of values.
	//
	// Call Next() on the returned cursor object to step through the results. Make sure you call Close
	// on the cursor object when you are done. You should use
	//   defer cursor.Close()
	// to make sure the cursor gets closed.
	LoadCursor() typeTestsCursor

	// Get is a convenience method to return only the first item found in a query.
	// The entire query is performed, so you should generally use this only if you know
	// you are selecting on one or very few items.
	//
	// If an error occurs, or no results are found, a nil is returned.
	// In the case of an error, the error is returned in the context.
	Get() *TypeTest

	// Count terminates a query and returns just the number of items in the result.
	// If you have Select or Calculation columns in the query, it will count NULL results as well.
	// To not count NULL values, use Where in the builder with a NotNull operation.
	// To count distinct combinations of items, call Distinct() on the builder.
	Count() int

	// Subquery terminates the query builder and tags it as a subquery within a larger query.
	// You MUST include what you are selecting by adding Calculation or Select functions on the subquery builder.
	// Generally you would use this as a node to a Calculation function on the surrounding query builder.
	// Subquery() *query.SubqueryNode

}

type typeTestQueryBuilder struct {
	builder *query.Builder
}

func newTypeTestBuilder(ctx context.Context) TypeTestBuilder {
	b := typeTestQueryBuilder{
		builder: query.NewBuilder(ctx, node.TypeTest()),
	}
	return &b
}

// Load terminates the query builder, performs the query, and returns a slice of TypeTest objects.
// If there are any errors, nil is returned and the specific error is stored in the context.
// If no results come back from the query, it will return a non-nil empty slice.
func (b *typeTestQueryBuilder) Load() (typeTests []*TypeTest) {
	b.builder.Command = query.BuilderCommandLoad
	database := db.GetDatabase("goradd_unit")
	results := database.BuilderQuery(b.builder)
	if results == nil {
		return
	}
	for _, item := range results.([]map[string]any) {
		o := new(TypeTest)
		o.load(item, o)
		typeTests = append(typeTests, o)
	}
	return
}

// Load terminates the query builder, performs the query, and returns a slice of interfaces.
// This can then satisfy a variety of interfaces that load arrays of objects, including KeyLabeler.
// If there are any errors, nil is returned and the specific error is stored in the context.
// If no results come back from the query, it will return a non-nil empty slice.
func (b *typeTestQueryBuilder) LoadI() (typeTests []query.OrmObj) {
	b.builder.Command = query.BuilderCommandLoad
	database := db.GetDatabase("goradd_unit")
	results := database.BuilderQuery(b.builder)
	if results == nil {
		return
	}
	for _, item := range results.([]map[string]any) {
		o := new(TypeTest)
		o.load(item, o)
		typeTests = append(typeTests, o)
	}
	return
}

// LoadCursor terminates the query builder, performs the query, and returns a cursor to the query.
//
// A query cursor is useful for dealing with large amounts of query results. However, there are some
// limitations to its use. When working with SQL databases, you cannot use a cursor while querying
// many-to-many or reverse relationships that will create an array of values.
//
// Call Next() on the returned cursor object to step through the results. Make sure you call Close
// on the cursor object when you are done. You should use
//
//	defer cursor.Close()
//
// to make sure the cursor gets closed.
func (b *typeTestQueryBuilder) LoadCursor() typeTestsCursor {
	b.builder.Command = query.BuilderCommandLoadCursor
	database := db.GetDatabase("goradd_unit")
	result := database.BuilderQuery(b.builder)
	cursor := result.(query.CursorI)

	return typeTestsCursor{cursor}
}

type typeTestsCursor struct {
	query.CursorI
}

// Next returns the current TypeTest object and moves the cursor to the next one.
//
// If there are no more records, it returns nil.
func (c typeTestsCursor) Next() *TypeTest {
	if c.CursorI == nil {
		return nil
	}

	row := c.CursorI.Next()
	if row == nil {
		return nil
	}
	o := new(TypeTest)
	o.load(row, o)
	return o
}

// Get is a convenience method to return only the first item found in a query.
// The entire query is performed, so you should generally use this only if you know
// you are selecting on one or very few items.
//
// If an error occurs, or no results are found, a nil is returned.
// In the case of an error, the error is returned in the context.
func (b *typeTestQueryBuilder) Get() *TypeTest {
	results := b.Load()
	if results != nil && len(results) > 0 {
		obj := results[0]
		return obj
	} else {
		return nil
	}
}

/*
// Join attaches the table referred to by joinedTable, filtering the join process using the operation node specified
// by condition.
// The joinedTable node will be modified by this process so that you can use it in subsequent builder operations.
// Call GetAlias to return the resulting object from the query result.
func (b *typeTestQueryBuilder) Join(alias string, joinedTable query.Node, condition query.Node) TypeTestBuilder {
    if query.RootNode(n).TableName_() != "type_test" {
        panic("you can only join a node that is rooted at node.TypeTest()")
    }
    // TODO: make sure joinedTable is a table node
	b.builder.Join(alias, joinedTable, condition)
	return b
}
*/

// Where adds a condition to filter what gets selected.
// Calling Where multiple times will AND the conditions together.
func (b *typeTestQueryBuilder) Where(c query.Node) TypeTestBuilder {
	b.builder.Where(c)
	return b
}

// OrderBy specifies how the resulting data should be sorted.
// By default, the given nodes are sorted in ascending order.
// Add Descending() to the node to specify that it should be sorted in descending order.
func (b *typeTestQueryBuilder) OrderBy(nodes ...query.Sorter) TypeTestBuilder {
	b.builder.OrderBy(nodes...)
	return b
}

// Limit will return a subset of the data, limited to the offset and number of rows specified.
// For large data sets and specific types of queries, this can be slow, because it will perform
// the entire query before computing the limit.
// You cannot limit a query that has embedded arrays.
func (b *typeTestQueryBuilder) Limit(maxRowCount int, offset int) TypeTestBuilder {
	b.builder.Limit(maxRowCount, offset)
	return b
}

// Select specifies what specific columns will be loaded with data.
// By default, all the columns of the type_test table will be queried and loaded.
// If nodes contains columns from the type_test table, that will limit the columns queried and loaded to only those columns.
// If related tables are specified, then all the columns from those tables are queried, selected and joined to the result.
// If columns in related tables are specified, then only those columns will be queried and loaded.
// Depending on the query, additional columns may automatically be added to the query. In particular, primary key columns
// will be added in most situations. The exception to this would be in distinct queries, group by queries, or subqueries.
func (b *typeTestQueryBuilder) Select(nodes ...query.Node) TypeTestBuilder {
	b.builder.Select(nodes...)
	return b
}

// Calculation adds operation as an aliased value onto base.
// After the query, you can read the data by passing alias to GetAlias on the returned object.
func (b *typeTestQueryBuilder) Calculation(base query.TableNodeI, alias string, operation query.OperationNodeI) TypeTestBuilder {
	b.builder.Calculation(base, alias, operation)
	return b
}

// Distinct removes duplicates from the results of the query.
// Adding a Select() is usually required.
func (b *typeTestQueryBuilder) Distinct() TypeTestBuilder {
	b.builder.Distinct()
	return b
}

// GroupBy controls how results are grouped when using aggregate functions with Calculation.
func (b *typeTestQueryBuilder) GroupBy(nodes ...query.Node) TypeTestBuilder {
	b.builder.GroupBy(nodes...)
	return b
}

// Having does additional filtering on the results of the query after the query is performed.
func (b *typeTestQueryBuilder) Having(node query.Node) TypeTestBuilder {
	b.builder.Having(node)
	return b
}

// Count terminates a query and returns just the number of items in the result.
// If you have Select or Calculation columns in the query, it will count NULL results as well.
// To not count NULL values, use Where in the builder with a NotNull operation.
// To count distinct combinations of items, call Distinct() on the builder.
func (b *typeTestQueryBuilder) Count() int {
	b.builder.Command = query.BuilderCommandCount
	database := db.GetDatabase("goradd_unit")
	results := database.BuilderQuery(b.builder)
	if results == nil {
		return 0
	}
	return results.(int)
}

/*
// Subquery terminates the query builder and tags it as a subquery within a larger query.
// You MUST include what you are selecting by adding Calculation or Select functions on the subquery builder.
// Generally you would use this as a node to a Calculation function on the surrounding query builder.
func (b *typeTestQueryBuilder)  Subquery() *query.SubqueryNode {
	 return b.builder.Subquery()
}
*/

func CountTypeTests(ctx context.Context) int {
	return QueryTypeTests(ctx).Count()
}

// CountTypeTestsByID queries the database and returns the number of TypeTest objects that
// have id.
// doc: type=TypeTest
func CountTypeTestsByID(ctx context.Context, id string) int {
	return QueryTypeTests(ctx).Where(op.Equal(node.TypeTest().ID(), id)).Count()
}

// CountTypeTestsByDate queries the database and returns the number of TypeTest objects that
// have date.
// doc: type=TypeTest
func CountTypeTestsByDate(ctx context.Context, date time.Time) int {
	return QueryTypeTests(ctx).Where(op.Equal(node.TypeTest().Date(), date)).Count()
}

// CountTypeTestsByTime queries the database and returns the number of TypeTest objects that
// have time.
// doc: type=TypeTest
func CountTypeTestsByTime(ctx context.Context, time time.Time) int {
	t := time.Format("15:04:05")
	return QueryTypeTests(ctx).Where(op.Equal(node.TypeTest().Time(), t)).Count()
}

// CountTypeTestsByDateTime queries the database and returns the number of TypeTest objects that
// have dateTime.
// doc: type=TypeTest
func CountTypeTestsByDateTime(ctx context.Context, dateTime time.Time) int {
	return QueryTypeTests(ctx).Where(op.Equal(node.TypeTest().DateTime(), dateTime)).Count()
}

// CountTypeTestsByTs queries the database and returns the number of TypeTest objects that
// have ts.
// doc: type=TypeTest
func CountTypeTestsByTs(ctx context.Context, ts time.Time) int {
	return QueryTypeTests(ctx).Where(op.Equal(node.TypeTest().Ts(), ts)).Count()
}

// CountTypeTestsByTestInt queries the database and returns the number of TypeTest objects that
// have testInt.
// doc: type=TypeTest
func CountTypeTestsByTestInt(ctx context.Context, testInt int) int {
	return QueryTypeTests(ctx).Where(op.Equal(node.TypeTest().TestInt(), testInt)).Count()
}

// CountTypeTestsByTestFloat queries the database and returns the number of TypeTest objects that
// have testFloat.
// doc: type=TypeTest
func CountTypeTestsByTestFloat(ctx context.Context, testFloat float32) int {
	return QueryTypeTests(ctx).Where(op.Equal(node.TypeTest().TestFloat(), testFloat)).Count()
}

// CountTypeTestsByTestDouble queries the database and returns the number of TypeTest objects that
// have testDouble.
// doc: type=TypeTest
func CountTypeTestsByTestDouble(ctx context.Context, testDouble float64) int {
	return QueryTypeTests(ctx).Where(op.Equal(node.TypeTest().TestDouble(), testDouble)).Count()
}

// CountTypeTestsByTestText queries the database and returns the number of TypeTest objects that
// have testText.
// doc: type=TypeTest
func CountTypeTestsByTestText(ctx context.Context, testText string) int {
	return QueryTypeTests(ctx).Where(op.Equal(node.TypeTest().TestText(), testText)).Count()
}

// CountTypeTestsByTestBit queries the database and returns the number of TypeTest objects that
// have testBit.
// doc: type=TypeTest
func CountTypeTestsByTestBit(ctx context.Context, testBit bool) int {
	return QueryTypeTests(ctx).Where(op.Equal(node.TypeTest().TestBit(), testBit)).Count()
}

// CountTypeTestsByTestVarchar queries the database and returns the number of TypeTest objects that
// have testVarchar.
// doc: type=TypeTest
func CountTypeTestsByTestVarchar(ctx context.Context, testVarchar string) int {
	return QueryTypeTests(ctx).Where(op.Equal(node.TypeTest().TestVarchar(), testVarchar)).Count()
}

// CountTypeTestsByTestBlob queries the database and returns the number of TypeTest objects that
// have testBlob.
// doc: type=TypeTest
func CountTypeTestsByTestBlob(ctx context.Context, testBlob []byte) int {
	return QueryTypeTests(ctx).Where(op.Equal(node.TypeTest().TestBlob(), testBlob)).Count()
}

// load is the private loader that transforms data coming from the database into a tree structure reflecting the relationships
// between the object chain requested by the user in the query.
func (o *typeTestBase) load(m map[string]interface{}, objThis *TypeTest) {

	if v, ok := m["id"]; ok && v != nil {
		if o.id, ok = v.(string); ok {
			o.idIsLoaded = true
			o.idIsDirty = false

			o._originalPK = o.id

		} else {
			panic("Wrong type found for id.")
		}
	} else {
		o.idIsLoaded = false
		o.id = ""
		o.idIsDirty = false
	}

	if v, ok := m["date"]; ok {
		if v == nil {
			o.date = time.Time{}
			o.dateIsNull = true
			o.dateIsLoaded = true
			o.dateIsDirty = false
		} else if o.date, ok = v.(time.Time); ok {
			o.dateIsNull = false
			o.dateIsLoaded = true
			o.dateIsDirty = false
		} else {
			panic("Wrong type found for date.")
		}
	} else {
		o.dateIsLoaded = false
		o.dateIsNull = true
		o.date = time.Time{}
		o.dateIsDirty = false
	}

	if v, ok := m["time"]; ok {
		if v == nil {
			o.time = time.Time{}
			o.timeIsNull = true
			o.timeIsLoaded = true
			o.timeIsDirty = false
		} else if o.time, ok = v.(time.Time); ok {
			o.timeIsNull = false
			o.timeIsLoaded = true
			o.timeIsDirty = false
		} else {
			panic("Wrong type found for time.")
		}
	} else {
		o.timeIsLoaded = false
		o.timeIsNull = true
		o.time = time.Time{}
		o.timeIsDirty = false
	}

	if v, ok := m["date_time"]; ok {
		if v == nil {
			o.dateTime = time.Time{}
			o.dateTimeIsNull = true
			o.dateTimeIsLoaded = true
			o.dateTimeIsDirty = false
		} else if o.dateTime, ok = v.(time.Time); ok {
			o.dateTimeIsNull = false
			o.dateTimeIsLoaded = true
			o.dateTimeIsDirty = false
		} else {
			panic("Wrong type found for date_time.")
		}
	} else {
		o.dateTimeIsLoaded = false
		o.dateTimeIsNull = true
		o.dateTime = time.Time{}
		o.dateTimeIsDirty = false
	}

	if v, ok := m["ts"]; ok {
		if v == nil {
			o.ts = time.Time{}
			o.tsIsNull = true
			o.tsIsLoaded = true
		} else if o.ts, ok = v.(time.Time); ok {
			o.tsIsNull = false
			o.tsIsLoaded = true
		} else {
			panic("Wrong type found for ts.")
		}
	} else {
		o.tsIsLoaded = false
		o.tsIsNull = true
		o.ts = time.Time{}
	}

	if v, ok := m["test_int"]; ok {
		if v == nil {
			o.testInt = 5
			o.testIntIsNull = true
			o.testIntIsLoaded = true
			o.testIntIsDirty = false
		} else if o.testInt, ok = v.(int); ok {
			o.testIntIsNull = false
			o.testIntIsLoaded = true
			o.testIntIsDirty = false
		} else {
			panic("Wrong type found for test_int.")
		}
	} else {
		o.testIntIsLoaded = false
		o.testIntIsNull = true
		o.testInt = 5
		o.testIntIsDirty = false
	}

	if v, ok := m["test_float"]; ok {
		if v == nil {
			o.testFloat = 0
			o.testFloatIsNull = true
			o.testFloatIsLoaded = true
			o.testFloatIsDirty = false
		} else if o.testFloat, ok = v.(float32); ok {
			o.testFloatIsNull = false
			o.testFloatIsLoaded = true
			o.testFloatIsDirty = false
		} else {
			panic("Wrong type found for test_float.")
		}
	} else {
		o.testFloatIsLoaded = false
		o.testFloatIsNull = true
		o.testFloat = 0
		o.testFloatIsDirty = false
	}

	if v, ok := m["test_double"]; ok && v != nil {
		if o.testDouble, ok = v.(float64); ok {
			o.testDoubleIsLoaded = true
			o.testDoubleIsDirty = false

		} else {
			panic("Wrong type found for test_double.")
		}
	} else {
		o.testDoubleIsLoaded = false
		o.testDouble = 0
		o.testDoubleIsDirty = false
	}

	if v, ok := m["test_text"]; ok {
		if v == nil {
			o.testText = ""
			o.testTextIsNull = true
			o.testTextIsLoaded = true
			o.testTextIsDirty = false
		} else if o.testText, ok = v.(string); ok {
			o.testTextIsNull = false
			o.testTextIsLoaded = true
			o.testTextIsDirty = false
		} else {
			panic("Wrong type found for test_text.")
		}
	} else {
		o.testTextIsLoaded = false
		o.testTextIsNull = true
		o.testText = ""
		o.testTextIsDirty = false
	}

	if v, ok := m["test_bit"]; ok {
		if v == nil {
			o.testBit = false
			o.testBitIsNull = true
			o.testBitIsLoaded = true
			o.testBitIsDirty = false
		} else if o.testBit, ok = v.(bool); ok {
			o.testBitIsNull = false
			o.testBitIsLoaded = true
			o.testBitIsDirty = false
		} else {
			panic("Wrong type found for test_bit.")
		}
	} else {
		o.testBitIsLoaded = false
		o.testBitIsNull = true
		o.testBit = false
		o.testBitIsDirty = false
	}

	if v, ok := m["test_varchar"]; ok {
		if v == nil {
			o.testVarchar = ""
			o.testVarcharIsNull = true
			o.testVarcharIsLoaded = true
			o.testVarcharIsDirty = false
		} else if o.testVarchar, ok = v.(string); ok {
			o.testVarcharIsNull = false
			o.testVarcharIsLoaded = true
			o.testVarcharIsDirty = false
		} else {
			panic("Wrong type found for test_varchar.")
		}
	} else {
		o.testVarcharIsLoaded = false
		o.testVarcharIsNull = true
		o.testVarchar = ""
		o.testVarcharIsDirty = false
	}

	if v, ok := m["test_blob"]; ok && v != nil {
		if o.testBlob, ok = v.([]byte); ok {
			o.testBlobIsLoaded = true
			o.testBlobIsDirty = false

		} else {
			panic("Wrong type found for test_blob.")
		}
	} else {
		o.testBlobIsLoaded = false
		o.testBlob = []byte{}
		o.testBlobIsDirty = false
	}

	if v, ok := m["aliases_"]; ok {
		o._aliases = v.(map[string]any)
	}

	o._restored = true

}

// save will update or insert the object, depending on the state of the object.
func (o *typeTestBase) save(ctx context.Context) error {
	if o._restored {
		return o.update(ctx)
	} else {
		return o.insert(ctx)
	}
}

// update will update the values in the database, saving any changed values.
// If the table has auto-generated values, those will be updated automatically.
func (o *typeTestBase) update(ctx context.Context) error {
	if !o._restored {
		panic("cannot update a record that was not originally read from the database.")
	}
	if !o.IsDirty() {
		return nil // nothing to save
	}

	var modifiedFields map[string]interface{}

	d := Database()
	err := db.ExecuteTransaction(ctx, d, func() error {

		modifiedFields = o.getUpdateFields()
		if len(modifiedFields) != 0 {
			var err2 error

			_, err2 = d.Update(ctx, "type_test", "id", o._originalPK, modifiedFields, "", 0)
			if err2 != nil {
				return err2
			}
		}

		return nil
	}) // transaction
	if err != nil {
		return err
	}

	o.resetDirtyStatus()
	if len(modifiedFields) != 0 {
		broadcast.Update(ctx, "goradd_unit", "type_test", o._originalPK, all.SortedKeys(modifiedFields)...)
	}

	return nil
}

// insert will insert the object into the database. Related items will be saved.
func (o *typeTestBase) insert(ctx context.Context) (err error) {
	var insertFields map[string]interface{}
	d := Database()
	err = db.ExecuteTransaction(ctx, d, func() error {

		if !o.testDoubleIsLoaded {
			panic("a value for TestDouble is required, and there is no default value. Call SetTestDouble() before inserting the record.")
		}
		if !o.testBlobIsLoaded {
			panic("a value for TestBlob is required, and there is no default value. Call SetTestBlob() before inserting the record.")
		}

		insertFields = o.getInsertFields()
		var newPk string

		newPk, err = d.Insert(ctx, "type_test", "id", insertFields)
		if err != nil {
			return err
		}
		o.id = newPk
		o._originalPK = newPk
		o.idIsLoaded = true

		return nil

	}) // transaction

	if err != nil {
		return
	}
	if t, ok := insertFields["ts"]; ok {
		o.ts = t.(time.Time)
		o.tsIsLoaded = true
	}

	o.resetDirtyStatus()
	o._restored = true
	broadcast.Insert(ctx, "goradd_unit", "type_test", o.PrimaryKey())
	return
}

// getUpdateFields returns the database columns that will be sent to the update process.
// This will include timestamp fields only if some other column has changed.
func (o *typeTestBase) getUpdateFields() (fields map[string]interface{}) {
	fields = map[string]interface{}{}
	if o.idIsDirty {
		fields["id"] = o.id
	}
	if o.dateIsDirty {
		if o.dateIsNull {
			fields["date"] = nil
		} else {
			fields["date"] = o.date
		}
	}
	if o.timeIsDirty {
		if o.timeIsNull {
			fields["time"] = nil
		} else {
			fields["time"] = o.time
		}
	}
	if o.dateTimeIsDirty {
		if o.dateTimeIsNull {
			fields["date_time"] = nil
		} else {
			fields["date_time"] = o.dateTime
		}
	}
	if o.testIntIsDirty {
		if o.testIntIsNull {
			fields["test_int"] = nil
		} else {
			fields["test_int"] = o.testInt
		}
	}
	if o.testFloatIsDirty {
		if o.testFloatIsNull {
			fields["test_float"] = nil
		} else {
			fields["test_float"] = o.testFloat
		}
	}
	if o.testDoubleIsDirty {
		fields["test_double"] = o.testDouble
	}
	if o.testTextIsDirty {
		if o.testTextIsNull {
			fields["test_text"] = nil
		} else {
			fields["test_text"] = o.testText
		}
	}
	if o.testBitIsDirty {
		if o.testBitIsNull {
			fields["test_bit"] = nil
		} else {
			fields["test_bit"] = o.testBit
		}
	}
	if o.testVarcharIsDirty {
		if o.testVarcharIsNull {
			fields["test_varchar"] = nil
		} else {
			fields["test_varchar"] = o.testVarchar
		}
	}
	if o.testBlobIsDirty {
		fields["test_blob"] = o.testBlob
	}
	return
}

// getInsertFields returns the fields that will be specified in an insert operation.
// Optional fields that have not been set and have no default will be returned as nil.
// NoSql databases should interpret this as no value. Sql databases should interpret this as
// explicitly setting a NULL value, which would override any database specific default value.
// Auto-generated fields will be returned with their generated values, except AutoPK fields, which are generated by the
// database driver and updated after the insert.
func (o *typeTestBase) getInsertFields() (fields map[string]interface{}) {
	fields = map[string]interface{}{}
	if o.idIsDirty {
		fields["id"] = o.id
	}
	if o.dateIsNull {
		fields["date"] = nil
	} else {
		fields["date"] = o.date
	}
	if o.timeIsNull {
		fields["time"] = nil
	} else {
		fields["time"] = o.time
	}
	if o.dateTimeIsNull {
		fields["date_time"] = nil
	} else {
		fields["date_time"] = o.dateTime
	}
	fields["ts"] = time.Now().UTC()
	if o.testIntIsNull {
		fields["test_int"] = nil
	} else {
		fields["test_int"] = o.testInt
	}
	if o.testFloatIsNull {
		fields["test_float"] = nil
	} else {
		fields["test_float"] = o.testFloat
	}

	fields["test_double"] = o.testDouble
	if o.testTextIsNull {
		fields["test_text"] = nil
	} else {
		fields["test_text"] = o.testText
	}
	if o.testBitIsNull {
		fields["test_bit"] = nil
	} else {
		fields["test_bit"] = o.testBit
	}
	if o.testVarcharIsNull {
		fields["test_varchar"] = nil
	} else {
		fields["test_varchar"] = o.testVarchar
	}

	fields["test_blob"] = o.testBlob
	return
}

// Delete deletes the record from the database.
func (o *typeTestBase) Delete(ctx context.Context) (err error) {
	if o == nil {
		return // allow deleting of a nil object to be a noop
	}
	if !o._restored {
		panic("Cannot delete a record that has no primary key value.")
	}
	d := Database()
	d.Delete(ctx, "type_test", map[string]any{"ID": o.id})
	return nil
	broadcast.Delete(ctx, "goradd_unit", "type_test", fmt.Sprint(o.id))
	return
}

// deleteTypeTest deletes the TypeTest with primary key pk from the database
// and handles associated records.
func deleteTypeTest(ctx context.Context, pk string) error {
	d := db.GetDatabase("goradd_unit")
	d.Delete(ctx, "type_test", map[string]any{"ID": pk})
	broadcast.Delete(ctx, "goradd_unit", "type_test", fmt.Sprint(pk))
	return nil
}

// resetDirtyStatus resets the dirty status of every field in the object.
func (o *typeTestBase) resetDirtyStatus() {
	o.idIsDirty = false
	o.dateIsDirty = false
	o.timeIsDirty = false
	o.dateTimeIsDirty = false
	o.testIntIsDirty = false
	o.testFloatIsDirty = false
	o.testDoubleIsDirty = false
	o.testTextIsDirty = false
	o.testBitIsDirty = false
	o.testVarcharIsDirty = false
	o.testBlobIsDirty = false

}

// IsDirty returns true if the object has been changed since it was read from the database or created.
// However, a new object that has a column with a default value will be automatically marked as dirty upon creation.
func (o *typeTestBase) IsDirty() (dirty bool) {
	dirty = o.idIsDirty ||
		o.dateIsDirty ||
		o.timeIsDirty ||
		o.dateTimeIsDirty ||
		o.testIntIsDirty ||
		o.testFloatIsDirty ||
		o.testDoubleIsDirty ||
		o.testTextIsDirty ||
		o.testBitIsDirty ||
		o.testVarcharIsDirty ||
		o.testBlobIsDirty

	return
}

// Get returns the value of a field in the object based on the field's name.
// It will also get related objects if they are loaded.
// Invalid fields and objects are returned as nil.
// Get can be used to retrieve a value by using the Identifier of a node.
func (o *typeTestBase) Get(key string) interface{} {

	switch key {

	case "ID":
		if !o.idIsLoaded {
			return nil
		}
		return o.id

	case "Date":
		if !o.dateIsLoaded {
			return nil
		}
		return o.date

	case "Time":
		if !o.timeIsLoaded {
			return nil
		}
		return o.time

	case "DateTime":
		if !o.dateTimeIsLoaded {
			return nil
		}
		return o.dateTime

	case "Ts":
		if !o.tsIsLoaded {
			return nil
		}
		return o.ts

	case "TestInt":
		if !o.testIntIsLoaded {
			return nil
		}
		return o.testInt

	case "TestFloat":
		if !o.testFloatIsLoaded {
			return nil
		}
		return o.testFloat

	case "TestDouble":
		if !o.testDoubleIsLoaded {
			return nil
		}
		return o.testDouble

	case "TestText":
		if !o.testTextIsLoaded {
			return nil
		}
		return o.testText

	case "TestBit":
		if !o.testBitIsLoaded {
			return nil
		}
		return o.testBit

	case "TestVarchar":
		if !o.testVarcharIsLoaded {
			return nil
		}
		return o.testVarchar

	case "TestBlob":
		if !o.testBlobIsLoaded {
			return nil
		}
		return o.testBlob

	}
	return nil
}

// MarshalBinary serializes the object into a buffer that is deserializable using UnmarshalBinary.
// It should be used for transmitting database objects over the wire, or for temporary storage. It does not send
// a version number, so if the data format changes, its up to you to invalidate the old stored objects.
// The framework uses this to serialize the object when it is stored in a control.
func (o *typeTestBase) MarshalBinary() ([]byte, error) {
	buf := new(bytes.Buffer)
	enc := gob.NewEncoder(buf)
	if err := o.encodeTo(enc); err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

func (o *typeTestBase) encodeTo(enc db.Encoder) error {

	if err := enc.Encode(o.id); err != nil {
		return fmt.Errorf("error encoding TypeTest.id: %w", err)
	}
	if err := enc.Encode(o.idIsLoaded); err != nil {
		return fmt.Errorf("error encoding TypeTest.idIsLoaded: %w", err)
	}
	if err := enc.Encode(o.idIsDirty); err != nil {
		return fmt.Errorf("error encoding TypeTest.idIsDirty: %w", err)
	}

	if err := enc.Encode(o.date); err != nil {
		return fmt.Errorf("error encoding TypeTest.date: %w", err)
	}
	if err := enc.Encode(o.dateIsNull); err != nil {
		return fmt.Errorf("error encoding TypeTest.dateIsNull: %w", err)
	}
	if err := enc.Encode(o.dateIsLoaded); err != nil {
		return fmt.Errorf("error encoding TypeTest.dateIsLoaded: %w", err)
	}
	if err := enc.Encode(o.dateIsDirty); err != nil {
		return fmt.Errorf("error encoding TypeTest.dateIsDirty: %w", err)
	}

	if err := enc.Encode(o.time); err != nil {
		return fmt.Errorf("error encoding TypeTest.time: %w", err)
	}
	if err := enc.Encode(o.timeIsNull); err != nil {
		return fmt.Errorf("error encoding TypeTest.timeIsNull: %w", err)
	}
	if err := enc.Encode(o.timeIsLoaded); err != nil {
		return fmt.Errorf("error encoding TypeTest.timeIsLoaded: %w", err)
	}
	if err := enc.Encode(o.timeIsDirty); err != nil {
		return fmt.Errorf("error encoding TypeTest.timeIsDirty: %w", err)
	}

	if err := enc.Encode(o.dateTime); err != nil {
		return fmt.Errorf("error encoding TypeTest.dateTime: %w", err)
	}
	if err := enc.Encode(o.dateTimeIsNull); err != nil {
		return fmt.Errorf("error encoding TypeTest.dateTimeIsNull: %w", err)
	}
	if err := enc.Encode(o.dateTimeIsLoaded); err != nil {
		return fmt.Errorf("error encoding TypeTest.dateTimeIsLoaded: %w", err)
	}
	if err := enc.Encode(o.dateTimeIsDirty); err != nil {
		return fmt.Errorf("error encoding TypeTest.dateTimeIsDirty: %w", err)
	}

	if err := enc.Encode(o.ts); err != nil {
		return fmt.Errorf("error encoding TypeTest.ts: %w", err)
	}
	if err := enc.Encode(o.tsIsNull); err != nil {
		return fmt.Errorf("error encoding TypeTest.tsIsNull: %w", err)
	}
	if err := enc.Encode(o.tsIsLoaded); err != nil {
		return fmt.Errorf("error encoding TypeTest.tsIsLoaded: %w", err)
	}

	if err := enc.Encode(o.testInt); err != nil {
		return fmt.Errorf("error encoding TypeTest.testInt: %w", err)
	}
	if err := enc.Encode(o.testIntIsNull); err != nil {
		return fmt.Errorf("error encoding TypeTest.testIntIsNull: %w", err)
	}
	if err := enc.Encode(o.testIntIsLoaded); err != nil {
		return fmt.Errorf("error encoding TypeTest.testIntIsLoaded: %w", err)
	}
	if err := enc.Encode(o.testIntIsDirty); err != nil {
		return fmt.Errorf("error encoding TypeTest.testIntIsDirty: %w", err)
	}

	if err := enc.Encode(o.testFloat); err != nil {
		return fmt.Errorf("error encoding TypeTest.testFloat: %w", err)
	}
	if err := enc.Encode(o.testFloatIsNull); err != nil {
		return fmt.Errorf("error encoding TypeTest.testFloatIsNull: %w", err)
	}
	if err := enc.Encode(o.testFloatIsLoaded); err != nil {
		return fmt.Errorf("error encoding TypeTest.testFloatIsLoaded: %w", err)
	}
	if err := enc.Encode(o.testFloatIsDirty); err != nil {
		return fmt.Errorf("error encoding TypeTest.testFloatIsDirty: %w", err)
	}

	if err := enc.Encode(o.testDouble); err != nil {
		return fmt.Errorf("error encoding TypeTest.testDouble: %w", err)
	}
	if err := enc.Encode(o.testDoubleIsLoaded); err != nil {
		return fmt.Errorf("error encoding TypeTest.testDoubleIsLoaded: %w", err)
	}
	if err := enc.Encode(o.testDoubleIsDirty); err != nil {
		return fmt.Errorf("error encoding TypeTest.testDoubleIsDirty: %w", err)
	}

	if err := enc.Encode(o.testText); err != nil {
		return fmt.Errorf("error encoding TypeTest.testText: %w", err)
	}
	if err := enc.Encode(o.testTextIsNull); err != nil {
		return fmt.Errorf("error encoding TypeTest.testTextIsNull: %w", err)
	}
	if err := enc.Encode(o.testTextIsLoaded); err != nil {
		return fmt.Errorf("error encoding TypeTest.testTextIsLoaded: %w", err)
	}
	if err := enc.Encode(o.testTextIsDirty); err != nil {
		return fmt.Errorf("error encoding TypeTest.testTextIsDirty: %w", err)
	}

	if err := enc.Encode(o.testBit); err != nil {
		return fmt.Errorf("error encoding TypeTest.testBit: %w", err)
	}
	if err := enc.Encode(o.testBitIsNull); err != nil {
		return fmt.Errorf("error encoding TypeTest.testBitIsNull: %w", err)
	}
	if err := enc.Encode(o.testBitIsLoaded); err != nil {
		return fmt.Errorf("error encoding TypeTest.testBitIsLoaded: %w", err)
	}
	if err := enc.Encode(o.testBitIsDirty); err != nil {
		return fmt.Errorf("error encoding TypeTest.testBitIsDirty: %w", err)
	}

	if err := enc.Encode(o.testVarchar); err != nil {
		return fmt.Errorf("error encoding TypeTest.testVarchar: %w", err)
	}
	if err := enc.Encode(o.testVarcharIsNull); err != nil {
		return fmt.Errorf("error encoding TypeTest.testVarcharIsNull: %w", err)
	}
	if err := enc.Encode(o.testVarcharIsLoaded); err != nil {
		return fmt.Errorf("error encoding TypeTest.testVarcharIsLoaded: %w", err)
	}
	if err := enc.Encode(o.testVarcharIsDirty); err != nil {
		return fmt.Errorf("error encoding TypeTest.testVarcharIsDirty: %w", err)
	}

	if err := enc.Encode(o.testBlob); err != nil {
		return fmt.Errorf("error encoding TypeTest.testBlob: %w", err)
	}
	if err := enc.Encode(o.testBlobIsLoaded); err != nil {
		return fmt.Errorf("error encoding TypeTest.testBlobIsLoaded: %w", err)
	}
	if err := enc.Encode(o.testBlobIsDirty); err != nil {
		return fmt.Errorf("error encoding TypeTest.testBlobIsDirty: %w", err)
	}

	if o._aliases == nil {
		if err := enc.Encode(false); err != nil {
			return err
		}
	} else {
		if err := enc.Encode(true); err != nil {
			return err
		}
		if err := enc.Encode(o._aliases); err != nil {
			return fmt.Errorf("error encoding TypeTest._aliases: %w", err)
		}
	}

	if err := enc.Encode(o._restored); err != nil {
		return fmt.Errorf("error encoding TypeTest._restored: %w", err)
	}
	if err := enc.Encode(o._originalPK); err != nil {
		return fmt.Errorf("error encoding TypeTest._originalPK: %w", err)
	}
	return nil
}

// UnmarshalBinary converts a structure that was created with MarshalBinary into a TypeTest object.
func (o *typeTestBase) UnmarshalBinary(data []byte) (err error) {
	buf := bytes.NewReader(data)
	dec := gob.NewDecoder(buf)
	return o.decodeFrom(dec)
}

func (o *typeTestBase) decodeFrom(dec db.Decoder) (err error) {
	var isPtr bool

	_ = isPtr
	if err = dec.Decode(&o.id); err != nil {
		return fmt.Errorf("error decoding TypeTest.id: %w", err)
	}
	if err = dec.Decode(&o.idIsLoaded); err != nil {
		return fmt.Errorf("error decoding TypeTest.idIsLoaded: %w", err)
	}
	if err = dec.Decode(&o.idIsDirty); err != nil {
		return fmt.Errorf("error decoding TypeTest.idIsDirty: %w", err)
	}

	if err = dec.Decode(&o.date); err != nil {
		return fmt.Errorf("error decoding TypeTest.date: %w", err)
	}
	if err = dec.Decode(&o.dateIsNull); err != nil {
		return fmt.Errorf("error decoding TypeTest.dateIsNull: %w", err)
	}
	if err = dec.Decode(&o.dateIsLoaded); err != nil {
		return fmt.Errorf("error decoding TypeTest.dateIsLoaded: %w", err)
	}
	if err = dec.Decode(&o.dateIsDirty); err != nil {
		return fmt.Errorf("error decoding TypeTest.dateIsDirty: %w", err)
	}

	if err = dec.Decode(&o.time); err != nil {
		return fmt.Errorf("error decoding TypeTest.time: %w", err)
	}
	if err = dec.Decode(&o.timeIsNull); err != nil {
		return fmt.Errorf("error decoding TypeTest.timeIsNull: %w", err)
	}
	if err = dec.Decode(&o.timeIsLoaded); err != nil {
		return fmt.Errorf("error decoding TypeTest.timeIsLoaded: %w", err)
	}
	if err = dec.Decode(&o.timeIsDirty); err != nil {
		return fmt.Errorf("error decoding TypeTest.timeIsDirty: %w", err)
	}

	if err = dec.Decode(&o.dateTime); err != nil {
		return fmt.Errorf("error decoding TypeTest.dateTime: %w", err)
	}
	if err = dec.Decode(&o.dateTimeIsNull); err != nil {
		return fmt.Errorf("error decoding TypeTest.dateTimeIsNull: %w", err)
	}
	if err = dec.Decode(&o.dateTimeIsLoaded); err != nil {
		return fmt.Errorf("error decoding TypeTest.dateTimeIsLoaded: %w", err)
	}
	if err = dec.Decode(&o.dateTimeIsDirty); err != nil {
		return fmt.Errorf("error decoding TypeTest.dateTimeIsDirty: %w", err)
	}

	if err = dec.Decode(&o.ts); err != nil {
		return fmt.Errorf("error decoding TypeTest.ts: %w", err)
	}
	if err = dec.Decode(&o.tsIsNull); err != nil {
		return fmt.Errorf("error decoding TypeTest.tsIsNull: %w", err)
	}
	if err = dec.Decode(&o.tsIsLoaded); err != nil {
		return fmt.Errorf("error decoding TypeTest.tsIsLoaded: %w", err)
	}

	if err = dec.Decode(&o.testInt); err != nil {
		return fmt.Errorf("error decoding TypeTest.testInt: %w", err)
	}
	if err = dec.Decode(&o.testIntIsNull); err != nil {
		return fmt.Errorf("error decoding TypeTest.testIntIsNull: %w", err)
	}
	if err = dec.Decode(&o.testIntIsLoaded); err != nil {
		return fmt.Errorf("error decoding TypeTest.testIntIsLoaded: %w", err)
	}
	if err = dec.Decode(&o.testIntIsDirty); err != nil {
		return fmt.Errorf("error decoding TypeTest.testIntIsDirty: %w", err)
	}

	if err = dec.Decode(&o.testFloat); err != nil {
		return fmt.Errorf("error decoding TypeTest.testFloat: %w", err)
	}
	if err = dec.Decode(&o.testFloatIsNull); err != nil {
		return fmt.Errorf("error decoding TypeTest.testFloatIsNull: %w", err)
	}
	if err = dec.Decode(&o.testFloatIsLoaded); err != nil {
		return fmt.Errorf("error decoding TypeTest.testFloatIsLoaded: %w", err)
	}
	if err = dec.Decode(&o.testFloatIsDirty); err != nil {
		return fmt.Errorf("error decoding TypeTest.testFloatIsDirty: %w", err)
	}

	if err = dec.Decode(&o.testDouble); err != nil {
		return fmt.Errorf("error decoding TypeTest.testDouble: %w", err)
	}
	if err = dec.Decode(&o.testDoubleIsLoaded); err != nil {
		return fmt.Errorf("error decoding TypeTest.testDoubleIsLoaded: %w", err)
	}
	if err = dec.Decode(&o.testDoubleIsDirty); err != nil {
		return fmt.Errorf("error decoding TypeTest.testDoubleIsDirty: %w", err)
	}

	if err = dec.Decode(&o.testText); err != nil {
		return fmt.Errorf("error decoding TypeTest.testText: %w", err)
	}
	if err = dec.Decode(&o.testTextIsNull); err != nil {
		return fmt.Errorf("error decoding TypeTest.testTextIsNull: %w", err)
	}
	if err = dec.Decode(&o.testTextIsLoaded); err != nil {
		return fmt.Errorf("error decoding TypeTest.testTextIsLoaded: %w", err)
	}
	if err = dec.Decode(&o.testTextIsDirty); err != nil {
		return fmt.Errorf("error decoding TypeTest.testTextIsDirty: %w", err)
	}

	if err = dec.Decode(&o.testBit); err != nil {
		return fmt.Errorf("error decoding TypeTest.testBit: %w", err)
	}
	if err = dec.Decode(&o.testBitIsNull); err != nil {
		return fmt.Errorf("error decoding TypeTest.testBitIsNull: %w", err)
	}
	if err = dec.Decode(&o.testBitIsLoaded); err != nil {
		return fmt.Errorf("error decoding TypeTest.testBitIsLoaded: %w", err)
	}
	if err = dec.Decode(&o.testBitIsDirty); err != nil {
		return fmt.Errorf("error decoding TypeTest.testBitIsDirty: %w", err)
	}

	if err = dec.Decode(&o.testVarchar); err != nil {
		return fmt.Errorf("error decoding TypeTest.testVarchar: %w", err)
	}
	if err = dec.Decode(&o.testVarcharIsNull); err != nil {
		return fmt.Errorf("error decoding TypeTest.testVarcharIsNull: %w", err)
	}
	if err = dec.Decode(&o.testVarcharIsLoaded); err != nil {
		return fmt.Errorf("error decoding TypeTest.testVarcharIsLoaded: %w", err)
	}
	if err = dec.Decode(&o.testVarcharIsDirty); err != nil {
		return fmt.Errorf("error decoding TypeTest.testVarcharIsDirty: %w", err)
	}

	if err = dec.Decode(&o.testBlob); err != nil {
		return fmt.Errorf("error decoding TypeTest.testBlob: %w", err)
	}
	if err = dec.Decode(&o.testBlobIsLoaded); err != nil {
		return fmt.Errorf("error decoding TypeTest.testBlobIsLoaded: %w", err)
	}
	if err = dec.Decode(&o.testBlobIsDirty); err != nil {
		return fmt.Errorf("error decoding TypeTest.testBlobIsDirty: %w", err)
	}

	if err = dec.Decode(&isPtr); err != nil {
		return fmt.Errorf("error decoding TypeTest._aliases isPtr: %w", err)
	}
	if isPtr {
		if err = dec.Decode(&o._aliases); err != nil {
			return fmt.Errorf("error decoding TypeTest._aliases: %w", err)
		}
	}

	if err = dec.Decode(&o._restored); err != nil {
		return fmt.Errorf("error decoding TypeTest._restored: %w", err)
	}
	if err = dec.Decode(&o._originalPK); err != nil {
		return fmt.Errorf("error decoding TypeTest._originalPK: %w", err)
	}
	return
}

// MarshalJSON serializes the object into a JSON object.
// Only valid data will be serialized, meaning, you can control what gets serialized by using Select to
// select only the fields you want when you query for the object. Another way to control the output
// is to call MarshalStringMap, modify the map, then encode the map.
func (o *typeTestBase) MarshalJSON() (data []byte, err error) {
	v := o.MarshalStringMap()
	return json.Marshal(v)
}

// MarshalStringMap serializes the object into a string map of interfaces.
// Only valid data will be serialized, meaning, you can control what gets serialized by using Select to
// select only the fields you want when you query for the object. The keys are the same as the json keys.
func (o *typeTestBase) MarshalStringMap() map[string]interface{} {
	v := make(map[string]interface{})

	if o.idIsLoaded {
		v["id"] = o.id
	}

	if o.dateIsLoaded {
		if o.dateIsNull {
			v["date"] = nil
		} else {
			v["date"] = o.date
		}
	}

	if o.timeIsLoaded {
		if o.timeIsNull {
			v["time"] = nil
		} else {
			v["time"] = o.time
		}
	}

	if o.dateTimeIsLoaded {
		if o.dateTimeIsNull {
			v["dateTime"] = nil
		} else {
			v["dateTime"] = o.dateTime
		}
	}

	if o.tsIsLoaded {
		if o.tsIsNull {
			v["ts"] = nil
		} else {
			v["ts"] = o.ts
		}
	}

	if o.testIntIsLoaded {
		if o.testIntIsNull {
			v["testInt"] = nil
		} else {
			v["testInt"] = o.testInt
		}
	}

	if o.testFloatIsLoaded {
		if o.testFloatIsNull {
			v["testFloat"] = nil
		} else {
			v["testFloat"] = o.testFloat
		}
	}

	if o.testDoubleIsLoaded {
		v["testDouble"] = o.testDouble
	}

	if o.testTextIsLoaded {
		if o.testTextIsNull {
			v["testText"] = nil
		} else {
			v["testText"] = o.testText
		}
	}

	if o.testBitIsLoaded {
		if o.testBitIsNull {
			v["testBit"] = nil
		} else {
			v["testBit"] = o.testBit
		}
	}

	if o.testVarcharIsLoaded {
		if o.testVarcharIsNull {
			v["testVarchar"] = nil
		} else {
			v["testVarchar"] = o.testVarchar
		}
	}

	if o.testBlobIsLoaded {
		v["testBlob"] = o.testBlob
	}

	for _k, _v := range o._aliases {
		v[_k] = _v
	}
	return v
}

// UnmarshalJSON unmarshalls the given json data into the TypeTest. The TypeTest can be a
// newly created object, or one loaded from the database.
//
// After unmarshalling, the object is not  saved. You must call Save to insert it into the database
// or update it.
//
// Unmarshalling of sub-objects, as in objects linked via foreign keys, is not currently supported.
//
// The fields it expects are:
//
//	"id" - string
//	"date" - time.Time, nullable
//	"time" - time.Time, nullable
//	"dateTime" - time.Time, nullable
//	"ts" - time.Time, nullable
//	"testInt" - int, nullable
//	"testFloat" - float32, nullable
//	"testDouble" - float64
//	"testText" - string, nullable
//	"testBit" - bool, nullable
//	"testVarchar" - string, nullable
//	"testBlob" - []byte
func (o *typeTestBase) UnmarshalJSON(data []byte) (err error) {
	var v map[string]interface{}
	if len(data) == 0 {
		return
	}
	d := json.NewDecoder(bytes.NewReader(data))
	d.UseNumber() // use a number to avoid precision errors
	if err = d.Decode(&v); err != nil {
		return err
	}
	return o.UnmarshalStringMap(v)
}

// UnmarshalStringMap will load the values from the stringmap into the object.
//
// Override this in TypeTest to modify the json before sending it here.
func (o *typeTestBase) UnmarshalStringMap(m map[string]interface{}) (err error) {
	for k, v := range m {
		switch k {

		case "id":
			{
				if v == nil {
					return fmt.Errorf("field %s cannot be null", k)
				}

				if s, ok := v.(string); !ok {
					return fmt.Errorf("json field %s must be a string", k)
				} else {
					o.SetID(s)
				}
			}

		case "date":
			{
				if v == nil {
					o.SetDateToNull()
					continue
				}

				switch d := v.(type) {
				case json.Number:
					// a numeric value, which for JSON, means milliseconds since epoc
					n2, err := d.Int64()
					if err != nil {
						return err
					}
					o.SetDate(time.UnixMilli(n2).UTC())
				case float64:
					// a numeric value, which for JSON, means milliseconds since epoc
					o.SetDate(time.UnixMilli(int64(d)).UTC())
				case string:
					// an ISO8601 string (hopefully)
					var t time.Time
					err = t.UnmarshalJSON([]byte(`"` + d + `"`))
					if err != nil {
						return fmt.Errorf("JSON format error for time field %s: %w", k, err)
					}
					t = t.UTC()
					o.SetDate(t)
				default:
					return fmt.Errorf("json field %s must be a number or a string", k)
				}
			}

		case "time":
			{
				if v == nil {
					o.SetTimeToNull()
					continue
				}

				switch d := v.(type) {
				case json.Number:
					// a numeric value, which for JSON, means milliseconds since epoc
					n2, err := d.Int64()
					if err != nil {
						return err
					}
					o.SetTime(time.UnixMilli(n2).UTC())
				case float64:
					// a numeric value, which for JSON, means milliseconds since epoc
					o.SetTime(time.UnixMilli(int64(d)).UTC())
				case string:
					// an ISO8601 string (hopefully)
					var t time.Time
					err = t.UnmarshalJSON([]byte(`"` + d + `"`))
					if err != nil {
						return fmt.Errorf("JSON format error for time field %s: %w", k, err)
					}
					t = t.UTC()
					o.SetTime(t)
				default:
					return fmt.Errorf("json field %s must be a number or a string", k)
				}
			}

		case "dateTime":
			{
				if v == nil {
					o.SetDateTimeToNull()
					continue
				}

				switch d := v.(type) {
				case json.Number:
					// a numeric value, which for JSON, means milliseconds since epoc
					n2, err := d.Int64()
					if err != nil {
						return err
					}
					o.SetDateTime(time.UnixMilli(n2).UTC())
				case float64:
					// a numeric value, which for JSON, means milliseconds since epoc
					o.SetDateTime(time.UnixMilli(int64(d)).UTC())
				case string:
					// an ISO8601 string (hopefully)
					var t time.Time
					err = t.UnmarshalJSON([]byte(`"` + d + `"`))
					if err != nil {
						return fmt.Errorf("JSON format error for time field %s: %w", k, err)
					}
					t = t.UTC()
					o.SetDateTime(t)
				default:
					return fmt.Errorf("json field %s must be a number or a string", k)
				}
			}

		case "testInt":
			{
				if v == nil {
					o.SetTestIntToNull()
					continue
				}

				switch n := v.(type) {
				case json.Number:
					n2, err := n.Int64()
					if err != nil {
						return err
					}
					o.SetTestInt(int(n2))
				case int:
					o.SetTestInt(n)
				case float64:
					o.SetTestInt(int(n))
				default:
					return fmt.Errorf("field %s must be a number", k)
				}
			}

		case "testFloat":
			{
				if v == nil {
					o.SetTestFloatToNull()
					continue
				}

				switch n := v.(type) {
				case json.Number:
					n2, err := n.Float64()
					if err != nil {
						return err
					}
					o.SetTestFloat(float32(n2))
				case float64:
					o.SetTestFloat(float32(n))
				case float32:
					o.SetTestFloat(n)
				default:
					return fmt.Errorf("field %s must be a number", k)
				}
			}

		case "testDouble":
			{
				if v == nil {
					return fmt.Errorf("field %s cannot be null", k)
				}

				switch n := v.(type) {
				case json.Number:
					n2, err := n.Float64()
					if err != nil {
						return err
					}
					o.SetTestDouble(n2)
				case float64:
					o.SetTestDouble(n)
				default:
					return fmt.Errorf("field %s must be a number", k)
				}
			}

		case "testText":
			{
				if v == nil {
					o.SetTestTextToNull()
					continue
				}

				if s, ok := v.(string); !ok {
					return fmt.Errorf("json field %s must be a string", k)
				} else {
					o.SetTestText(s)
				}
			}

		case "testBit":
			{
				if v == nil {
					o.SetTestBitToNull()
					continue
				}

				if b, ok := v.(bool); !ok {
					return fmt.Errorf("json field %s must be a boolean", k)
				} else {
					o.SetTestBit(b)
				}
			}

		case "testVarchar":
			{
				if v == nil {
					o.SetTestVarcharToNull()
					continue
				}

				if s, ok := v.(string); !ok {
					return fmt.Errorf("json field %s must be a string", k)
				} else {
					o.SetTestVarchar(s)
				}
			}

		case "testBlob":
			{
				if v == nil {
					return fmt.Errorf("field %s cannot be null", k)
				}

				switch d := v.(type) {
				case string:
					{
						// A base 64 encoded string
						if b, err2 := base64.StdEncoding.DecodeString(d); err2 == nil {
							o.SetTestBlob(b)
						} else {
							return fmt.Errorf("json field %s must be either a Base64 encoded string or an array of byte values", k)
						}
					}
				case []interface{}:
					{
						// An array of byte values. Unfortunately, these come through as float64s, and so need to be converted
						b := make([]byte, len(d), len(d))
						for i, b1 := range d {
							if f, ok := b1.(float64); !ok {
								return fmt.Errorf("json field %s must be either a Base64 encoded string or an array of byte values", k)
							} else {
								b[i] = uint8(f)
							}
						}
						o.SetTestBlob(b)
					}
				default:
					return fmt.Errorf("json field %s must be either a Base64 encoded string or an array of byte values", k)
				}

			}

		}
	}
	return
}
