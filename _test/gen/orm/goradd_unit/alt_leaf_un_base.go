// Code generated by goradd-orm. DO NOT EDIT.

package goradd_unit

import (
	"bytes"
	"context"
	"encoding/gob"
	"encoding/json"
	"fmt"
	"unicode/utf8"

	"github.com/goradd/anyutil"
	"github.com/goradd/orm/_test/gen/orm/goradd_unit/node"
	"github.com/goradd/orm/pkg/broadcast"
	"github.com/goradd/orm/pkg/db"
	"github.com/goradd/orm/pkg/op"
	"github.com/goradd/orm/pkg/query"
)

// AltLeafUnBase is embedded in a AltLeafUn object and provides the ORM access to the database.
// The member variables of the structure are private and should not normally be accessed by the AltLeafUn embedder.
// Instead, use the accessor functions.
type altLeafUnBase struct {
	id                  string
	idIsLoaded          bool
	idIsDirty           bool
	name                string
	nameIsLoaded        bool
	nameIsDirty         bool
	altRootUnID         float32
	altRootUnIDIsNull   bool
	altRootUnIDIsLoaded bool
	altRootUnIDIsDirty  bool
	objAltRootUn        *AltRootUn

	// Custom aliases, if specified
	_aliases map[string]any

	// Indicates whether this is a new object, or one loaded from the database. Used by Save to know whether to Insert or Update.
	_restored bool

	_originalPK string
}

// IDs used to access the AltLeafUn object fields by name using the Get function.
// doc: type=AltLeafUn
const (
	AltLeafUn_ID          = `ID`
	AltLeafUn_Name        = `Name`
	AltLeafUn_AltRootUnID = `AltRootUnID`
	AltLeafUn_AltRootUn   = `AltRootUn`
)

const AltLeafUnIDMaxLength = 32    // The number of runes the column can hold
const AltLeafUnNameMaxLength = 100 // The number of runes the column can hold

// Initialize or re-initialize a AltLeafUn database object to default values.
// The primary key will get a temporary negative number which will be replaced when the object is saved.
// Multiple calls to Initialize are not guaranteed to create sequential values for the primary key.
func (o *altLeafUnBase) Initialize() {
	o.id = db.TemporaryPrimaryKey()
	o.idIsLoaded = true
	o.idIsDirty = false

	o.name = ""
	o.nameIsLoaded = false
	o.nameIsDirty = false

	o.altRootUnID = 0
	o.altRootUnIDIsNull = true
	o.altRootUnIDIsLoaded = false
	o.altRootUnIDIsDirty = false

	o._aliases = nil
	o._restored = false
}

// PrimaryKey returns the current value of the primary key field.
func (o *altLeafUnBase) PrimaryKey() string {
	return o.id
}

// OriginalPrimaryKey returns the value of the primary key that was originally loaded into the object when it was
// read from the database.
func (o *altLeafUnBase) OriginalPrimaryKey() string {
	return o._originalPK
}

// Copy copies most fields to a new AltLeafUn object.
// Forward reference ids will be copied, but reverse and many-many references will not.
// Attached objects will not be included in the copy.
// Automatically generated fields will not be included in the copy.
// The primary key field will not be copied, since it is normally auto-generated.
// Call Save() on the new object to save it into the database.
// Copy might panic if any fields in the database were set to a size larger than the
// maximum size through a process that accessed the database outside of the ORM.
func (o *altLeafUnBase) Copy() (newObject *AltLeafUn) {
	newObject = NewAltLeafUn()
	if o.idIsLoaded {
		newObject.SetID(o.id)
	}
	if o.nameIsLoaded {
		newObject.SetName(o.name)
	}
	if o.altRootUnIDIsLoaded {
		newObject.SetAltRootUnID(o.altRootUnID)
	}
	return
}

// ID returns the value of ID.
func (o *altLeafUnBase) ID() string {
	if o._restored && !o.idIsLoaded {
		panic("ID was not selected in the last query and has not been set, and so is not valid")
	}
	return o.id
}

// IDIsLoaded returns true if the value was loaded from the database or has been set.
func (o *altLeafUnBase) IDIsLoaded() bool {
	return o.idIsLoaded
}

// SetID sets the value of ID in the object, to be saved later in the database using the Save() function.
// Normally you will not need to call this function, since the ID value is automatically generated by the
// database driver. Exceptions might include importing data to a new database, or correcting primary key conflicts when
// merging data.
// You cannot change a primary key for a record that has been written to the database. While SQL databases will
// allow it, NoSql databases will not. Save a copy and delete this one instead.
func (o *altLeafUnBase) SetID(v string) {
	if o._restored {
		panic("error: Do not change a primary key for a record that has been saved. Instead, save a copy and delete the original.")
	}
	if utf8.RuneCountInString(v) > AltLeafUnIDMaxLength {
		panic("attempted to set AltLeafUn.ID to a value larger than its maximum length in runes")
	}

	o.idIsLoaded = true
	o.id = v
	o.idIsDirty = true
}

// Name returns the value of Name.
func (o *altLeafUnBase) Name() string {
	if o._restored && !o.nameIsLoaded {
		panic("Name was not selected in the last query and has not been set, and so is not valid")
	}
	return o.name
}

// NameIsLoaded returns true if the value was loaded from the database or has been set.
func (o *altLeafUnBase) NameIsLoaded() bool {
	return o.nameIsLoaded
}

// SetName sets the value of Name in the object, to be saved later in the database using the Save() function.
func (o *altLeafUnBase) SetName(v string) {
	if utf8.RuneCountInString(v) > AltLeafUnNameMaxLength {
		panic("attempted to set AltLeafUn.Name to a value larger than its maximum length in runes")
	}
	if o._restored &&
		o.nameIsLoaded && // if it was not selected, then make sure it gets set, since our end comparison won't be valid
		o.name == v {
		// no change
		return
	}

	o.nameIsLoaded = true
	o.name = v
	o.nameIsDirty = true
}

// AltRootUnID returns the value of AltRootUnID.
func (o *altLeafUnBase) AltRootUnID() float32 {
	if o._restored && !o.altRootUnIDIsLoaded {
		panic("AltRootUnID was not selected in the last query and has not been set, and so is not valid")
	}
	return o.altRootUnID
}

// AltRootUnIDIsLoaded returns true if the value was loaded from the database or has been set.
func (o *altLeafUnBase) AltRootUnIDIsLoaded() bool {
	return o.altRootUnIDIsLoaded
}

// AltRootUnIDIsNull returns true if the related database value is null.
func (o *altLeafUnBase) AltRootUnIDIsNull() bool {
	return o.altRootUnIDIsNull
}

// SetAltRootUnID sets the value of AltRootUnID in the object, to be saved later in the database using the Save() function.
func (o *altLeafUnBase) SetAltRootUnID(v float32) {
	if o._restored &&
		o.altRootUnIDIsLoaded && // if it was not selected, then make sure it gets set, since our end comparison won't be valid
		!o.altRootUnIDIsNull && // if the db value is null, force a set of value
		o.altRootUnID == v {
		// no change
		return
	}

	o.altRootUnIDIsLoaded = true
	o.altRootUnID = v
	o.altRootUnIDIsDirty = true
	o.altRootUnIDIsNull = false
}

// SetAltRootUnIDToNull() will set the alt_root_un_id value in the database to NULL.
// AltRootUnID() will return the column's default value after this.
func (o *altLeafUnBase) SetAltRootUnIDToNull() {
	if !o.altRootUnIDIsLoaded || !o.altRootUnIDIsNull {
		// If we know it is null in the database, don't save it
		o.altRootUnIDIsDirty = true
	}
	o.altRootUnIDIsLoaded = true
	o.altRootUnIDIsNull = true
	o.altRootUnID = 0
	o.objAltRootUn = nil
}

// AltRootUn returns the current value of the loaded AltRootUn, and nil if its not loaded.
func (o *altLeafUnBase) AltRootUn() *AltRootUn {
	return o.objAltRootUn
}

// LoadAltRootUn returns the related AltRootUn. If it is not already loaded,
// it will attempt to load it, provided the AltRootUnID column has been loaded first.
func (o *altLeafUnBase) LoadAltRootUn(ctx context.Context) (*AltRootUn, error) {
	var err error

	if o.objAltRootUn == nil {
		if !o.altRootUnIDIsLoaded {
			panic("AltRootUnID must be selected in the previous query")
		}
		// Load and cache
		o.objAltRootUn, err = LoadAltRootUn(ctx, o.altRootUnID)
	}
	return o.objAltRootUn, err
}

// SetAltRootUn will set the reference to altRootUn. The referenced object
// will be saved when AltLeafUn is saved. Pass nil to break the connection.
func (o *altLeafUnBase) SetAltRootUn(objAltRootUn *AltRootUn) {
	o.altRootUnIDIsLoaded = true
	if objAltRootUn == nil {
		if !o.altRootUnIDIsNull || !o._restored {
			o.altRootUnIDIsNull = true
			o.altRootUnIDIsDirty = true
			o.altRootUnID = 0
			o.objAltRootUn = nil
		}
	} else {
		o.objAltRootUn = objAltRootUn
		if o.altRootUnIDIsNull || !o._restored || o.altRootUnID != objAltRootUn.PrimaryKey() {
			o.altRootUnIDIsNull = false
			o.altRootUnID = objAltRootUn.PrimaryKey()
			o.altRootUnIDIsDirty = true
		}
	}
}

// GetAlias returns the value for the Alias node aliasKey that was returned in the most
// recent query.
func (o *altLeafUnBase) GetAlias(aliasKey string) query.AliasValue {
	if a, ok := o._aliases[aliasKey]; ok {
		return query.NewAliasValue(a)
	} else {
		panic("Alias " + aliasKey + " not found.")
	}
}

// IsNew returns true if the object will create a new record when saved.
func (o *altLeafUnBase) IsNew() bool {
	return !o._restored
}

// LoadAltLeafUn returns a AltLeafUn from the database.
// selectNodes lets you provide nodes for selecting specific fields or additional fields from related tables.
// See [AltLeafUnsBuilder.Select] for more info.
func LoadAltLeafUn(ctx context.Context, id string, selectNodes ...query.Node) (*AltLeafUn, error) {
	return queryAltLeafUns(ctx).
		Where(op.Equal(node.AltLeafUn().ID(), id)).
		Select(selectNodes...).
		Get()
}

// HasAltLeafUn returns true if a AltLeafUn with the given primary key exists in the database.
// doc: type=AltLeafUn
func HasAltLeafUn(ctx context.Context, id string) (bool, error) {
	v, err := queryAltLeafUns(ctx).
		Where(op.Equal(node.AltLeafUn().ID(), id)).
		Count()
	return v > 0, err
}

// LoadAltLeafUnByAltRootUnID queries for a single AltLeafUn object by the given unique index values.
// selectNodes optionally let you provide nodes for joining to other tables or selecting specific fields.
// See [AltLeafUnsBuilder.Select].
// If you need a more elaborate query, use QueryAltLeafUns() to start a query builder.
func LoadAltLeafUnByAltRootUnID(ctx context.Context, altRootUnID interface{}, selectNodes ...query.Node) (*AltLeafUn, error) {
	q := queryAltLeafUns(ctx)
	if altRootUnID == nil {
		q = q.Where(op.IsNull(node.AltLeafUn().AltRootUnID()))
	} else {
		q = q.Where(op.Equal(node.AltLeafUn().AltRootUnID(), altRootUnID))
	}
	return q.Select(selectNodes...).Get()
}

// HasAltLeafUnByAltRootUnID returns true if the
// given unique index values exist in the database.
// doc: type=AltLeafUn
func HasAltLeafUnByAltRootUnID(ctx context.Context, altRootUnID interface{}) (bool, error) {
	q := queryAltLeafUns(ctx)
	if altRootUnID == nil {
		q = q.Where(op.IsNull(node.AltLeafUn().AltRootUnID()))
	} else {
		q = q.Where(op.Equal(node.AltLeafUn().AltRootUnID(), altRootUnID))
	}
	v, err := q.Count()
	return v > 0, err
}

// The AltLeafUnBuilder uses a builder pattern to create a query on the database.
// Create a AltLeafUnBuilder by calling QueryAltLeafUns, which will select all
// the AltLeafUn object in the database. Then filter and arrange those objects
// by calling Where, Select, etc.
// End a query by calling either Load, LoadI, LoadCursor, Get, or Count.
// A AltLeafUnBuilder stores the context it will use to perform the query, and thus is
// meant to be a short-lived object. You should not save it for later use.
type AltLeafUnBuilder struct {
	builder *query.Builder
	ctx     context.Context
}

func newAltLeafUnBuilder(ctx context.Context) *AltLeafUnBuilder {
	b := AltLeafUnBuilder{
		builder: query.NewBuilder(node.AltLeafUn()),
		ctx:     ctx,
	}
	return &b
}

// Load terminates the query builder, performs the query, and returns a slice of AltLeafUn objects.
// If there are any errors, nil is returned and the specific error is stored in the context.
// If no results come back from the query, it will return a non-nil empty slice.
func (b *AltLeafUnBuilder) Load() (altLeafUns []*AltLeafUn, err error) {
	b.builder.Command = query.BuilderCommandLoad
	database := db.GetDatabase("goradd_unit")
	var results any

	ctx := b.ctx
	results, err = database.BuilderQuery(ctx, b.builder)
	if results == nil || err != nil {
		return
	}
	for _, item := range results.([]map[string]any) {
		o := new(AltLeafUn)
		o.unpack(item, o)
		altLeafUns = append(altLeafUns, o)
	}
	return
}

// LoadI terminates the query builder, performs the query, and returns a slice of interfaces.
// This can then satisfy a variety of interfaces that load arrays of objects, including KeyLabeler.
// If there are any errors, nil is returned and the specific error is stored in the context.
// If no results come back from the query, it will return a non-nil empty slice.
func (b *AltLeafUnBuilder) LoadI() (altLeafUns []query.OrmObj, err error) {
	b.builder.Command = query.BuilderCommandLoad
	database := db.GetDatabase("goradd_unit")
	var results any

	ctx := b.ctx
	results, err = database.BuilderQuery(ctx, b.builder)
	if results == nil || err != nil {
		return
	}
	for _, item := range results.([]map[string]any) {
		o := new(AltLeafUn)
		o.unpack(item, o)
		altLeafUns = append(altLeafUns, o)
	}
	return
}

// LoadCursor terminates the query builder, performs the query, and returns a cursor to the query.
//
// A query cursor is useful for dealing with large amounts of query results. However, there are some
// limitations to its use. When working with SQL databases, you cannot use a cursor while querying
// many-to-many or reverse relationships that will create an array of values.
//
// Call Next() on the returned cursor object to step through the results. Make sure you call Close
// on the cursor object when you are done. You should use
//
//	defer cursor.Close()
//
// to make sure the cursor gets closed.
func (b *AltLeafUnBuilder) LoadCursor() (altLeafUnsCursor, error) {
	b.builder.Command = query.BuilderCommandLoadCursor
	database := db.GetDatabase("goradd_unit")
	result, err := database.BuilderQuery(b.ctx, b.builder)
	var cursor query.CursorI
	if result != nil {
		cursor = result.(query.CursorI)
	}
	return altLeafUnsCursor{cursor}, err
}

type altLeafUnsCursor struct {
	query.CursorI
}

// Next returns the current AltLeafUn object and moves the cursor to the next one.
//
// If there are no more records, it returns nil.
func (c altLeafUnsCursor) Next() (*AltLeafUn, error) {
	if c.CursorI == nil {
		return nil, nil
	}

	row, err := c.CursorI.Next()
	if row == nil || err != nil {
		return nil, err
	}
	o := new(AltLeafUn)
	o.unpack(row, o)
	return o, nil
}

// Get is a convenience method to return only the first item found in a query.
// The entire query is performed, so you should generally use this only if you know
// you are selecting on one or very few items.
// If an error occurs, or no results are found, a nil is returned.
func (b *AltLeafUnBuilder) Get() (*AltLeafUn, error) {
	results, err := b.Load()
	if err != nil || len(results) == 0 {
		return nil, err
	}
	return results[0], nil
}

// Where adds a condition to filter what gets selected.
// Calling Where multiple times will AND the conditions together.
func (b *AltLeafUnBuilder) Where(c query.Node) *AltLeafUnBuilder {
	b.builder.Where(c)
	return b
}

// OrderBy specifies how the resulting data should be sorted.
// By default, the given nodes are sorted in ascending order.
// Add Descending() to the node to specify that it should be sorted in descending order.
func (b *AltLeafUnBuilder) OrderBy(nodes ...query.Sorter) *AltLeafUnBuilder {
	b.builder.OrderBy(nodes...)
	return b
}

// Limit will return a subset of the data, limited to the offset and number of rows specified.
// For large data sets and specific types of queries, this can be slow, because it will perform
// the entire query before computing the limit.
// You cannot limit a query that has embedded arrays.
func (b *AltLeafUnBuilder) Limit(maxRowCount int, offset int) *AltLeafUnBuilder {
	b.builder.Limit(maxRowCount, offset)
	return b
}

// Select specifies what specific columns will be loaded with data.
// By default, all the columns of the alt_leaf_un table will be queried and loaded.
// If nodes contains columns from the alt_leaf_un table, that will limit the columns queried and loaded to only those columns.
// If related tables are specified, then all the columns from those tables are queried, selected and joined to the result.
// If columns in related tables are specified, then only those columns will be queried and loaded.
// Depending on the query, additional columns may automatically be added to the query. In particular, primary key columns
// will be added in most situations. The exception to this would be in distinct queries, group by queries, or subqueries.
func (b *AltLeafUnBuilder) Select(nodes ...query.Node) *AltLeafUnBuilder {
	b.builder.Select(nodes...)
	return b
}

// Calculation adds operation as an aliased value onto base.
// After the query, you can read the data by passing alias to GetAlias on the returned object.
func (b *AltLeafUnBuilder) Calculation(base query.TableNodeI, alias string, operation query.OperationNodeI) *AltLeafUnBuilder {
	b.builder.Calculation(base, alias, operation)
	return b
}

// Distinct removes duplicates from the results of the query.
// Adding a Select() is usually required.
func (b *AltLeafUnBuilder) Distinct() *AltLeafUnBuilder {
	b.builder.Distinct()
	return b
}

// GroupBy controls how results are grouped when using aggregate functions with Calculation.
func (b *AltLeafUnBuilder) GroupBy(nodes ...query.Node) *AltLeafUnBuilder {
	b.builder.GroupBy(nodes...)
	return b
}

// Having does additional filtering on the results of the query after the query is performed.
func (b *AltLeafUnBuilder) Having(node query.Node) *AltLeafUnBuilder {
	b.builder.Having(node)
	return b
}

// Count terminates a query and returns just the number of items in the result.
// If you have Select or Calculation columns in the query, it will count NULL results as well.
// To not count NULL values, use Where in the builder with a NotNull operation.
// To count distinct combinations of items, call Distinct() on the builder.
func (b *AltLeafUnBuilder) Count() (int, error) {
	b.builder.Command = query.BuilderCommandCount
	database := db.GetDatabase("goradd_unit")

	ctx := b.ctx
	results, err := database.BuilderQuery(ctx, b.builder)
	if results == nil || err != nil {
		return 0, err
	}
	return results.(int), nil
}

// CountAltLeafUns returns the total number of items in the alt_leaf_un table.
func CountAltLeafUns(ctx context.Context) (int, error) {
	return QueryAltLeafUns(ctx).Count()
}

// CountAltLeafUnsByAltRootUnID queries the database and returns the number of AltLeafUn objects that
// have altRootUnID.
// doc: type=AltLeafUn
func CountAltLeafUnsByAltRootUnID(ctx context.Context, altRootUnID float32) (int, error) {
	v_altRootUnID := altRootUnID
	return QueryAltLeafUns(ctx).
		Where(op.Equal(node.AltLeafUn().AltRootUnID(), v_altRootUnID)).
		Count()
}

// unpack recursively transforms data coming from the database into ORM objects.
func (o *altLeafUnBase) unpack(m map[string]interface{}, objThis *AltLeafUn) {

	if v, ok := m["id"]; ok && v != nil {
		if o.id, ok = v.(string); ok {
			o.idIsLoaded = true
			o.idIsDirty = false

			o._originalPK = o.id

		} else {
			panic("Wrong type found for id.")
		}
	} else {
		o.idIsLoaded = false
		o.id = ""
		o.idIsDirty = false
	}

	if v, ok := m["name"]; ok && v != nil {
		if o.name, ok = v.(string); ok {
			o.nameIsLoaded = true
			o.nameIsDirty = false

		} else {
			panic("Wrong type found for name.")
		}
	} else {
		o.nameIsLoaded = false
		o.name = ""
		o.nameIsDirty = false
	}

	if v, ok := m["alt_root_un_id"]; ok {
		if v == nil {
			o.altRootUnID = 0
			o.altRootUnIDIsNull = true
			o.altRootUnIDIsLoaded = true
			o.altRootUnIDIsDirty = false
		} else if o.altRootUnID, ok = v.(float32); ok {
			o.altRootUnIDIsNull = false
			o.altRootUnIDIsLoaded = true
			o.altRootUnIDIsDirty = false
		} else {
			panic("Wrong type found for alt_root_un_id.")
		}
	} else {
		o.altRootUnIDIsLoaded = false
		o.altRootUnIDIsNull = true
		o.altRootUnID = 0
		o.altRootUnIDIsDirty = false
	}

	if v, ok := m["AltRootUn"]; ok {
		if objAltRootUn, ok2 := v.(map[string]any); ok2 {
			o.objAltRootUn = new(AltRootUn)
			o.objAltRootUn.unpack(objAltRootUn, o.objAltRootUn)
			o.altRootUnIDIsLoaded = true
			o.altRootUnIDIsDirty = false
		} else {
			panic("Wrong type found for AltRootUn object.")
		}
	} else {
		o.objAltRootUn = nil
	}

	if v, ok := m["aliases_"]; ok {
		o._aliases = v.(map[string]any)
	}

	o._restored = true

}

// save will update or insert the object, depending on the state of the object.
func (o *altLeafUnBase) save(ctx context.Context) error {
	if o._restored {
		return o.update(ctx)
	} else {
		return o.insert(ctx)
	}
}

// update will update the values in the database, saving any changed values.
// If the table has auto-generated values, those will be updated automatically.
func (o *altLeafUnBase) update(ctx context.Context) error {
	if !o._restored {
		panic("cannot update a record that was not originally read from the database.")
	}
	if !o.IsDirty() {
		return nil // nothing to save
	}

	var modifiedFields map[string]interface{}

	d := Database()
	err := db.ExecuteTransaction(ctx, d, func() error {

		// Save loaded AltRootUn object to get its new pk and update it here.
		if o.objAltRootUn != nil {
			if err := o.objAltRootUn.Save(ctx); err != nil {
				return err
			}
			o.SetAltRootUnID(o.objAltRootUn.PrimaryKey())
		}

		if o.altRootUnIDIsDirty &&
			!o.altRootUnIDIsNull {
			if obj, err := LoadAltLeafUnByAltRootUnID(ctx, o.altRootUnID); err != nil {
				return err
			} else if obj != nil {
				return db.NewUniqueValueError("alt_leaf_un", map[string]any{"alt_root_un_id": o.altRootUnID}, nil)
			}
		}

		modifiedFields = getAltLeafUnUpdateFields(o)
		if len(modifiedFields) != 0 {
			var err2 error

			_, err2 = d.Update(ctx, "alt_leaf_un", "id", o._originalPK, modifiedFields, "", 0)
			if err2 != nil {
				return err2
			}
		}

		return nil
	}) // transaction
	if err != nil {
		return err
	}

	o.resetDirtyStatus()
	if len(modifiedFields) != 0 {
		broadcast.Update(ctx, "goradd_unit", "alt_leaf_un", o._originalPK, anyutil.SortedKeys(modifiedFields)...)
	}

	return nil
}

// insert will insert the object into the database. Related items will be saved.
func (o *altLeafUnBase) insert(ctx context.Context) (err error) {
	var insertFields map[string]interface{}
	d := Database()
	err = db.ExecuteTransaction(ctx, d, func() error {

		// Save loaded AltRootUn object to get its new pk and update it here.
		if o.objAltRootUn != nil {
			if err := o.objAltRootUn.Save(ctx); err != nil {
				return err
			}
			o.SetAltRootUnID(o.objAltRootUn.PrimaryKey())
		}

		if !o.nameIsLoaded {
			panic("a value for Name is required, and there is no default value. Call SetName() before inserting the record.")
		}
		if o.altRootUnIDIsDirty &&
			!o.altRootUnIDIsNull {
			if obj, err := LoadAltLeafUnByAltRootUnID(ctx, o.altRootUnID); err != nil {
				return err
			} else if obj != nil {
				return db.NewUniqueValueError("alt_leaf_un", map[string]any{"alt_root_un_id": o.altRootUnID}, nil)
			}
		}
		insertFields = getAltLeafUnInsertFields(o)
		var newPK string
		newPK, err = d.Insert(ctx, "alt_leaf_un", "id", insertFields)
		if err != nil {
			return err
		}
		o.id = newPK
		o._originalPK = newPK
		o.idIsLoaded = true

		return nil

	}) // transaction

	if err != nil {
		return
	}

	o.resetDirtyStatus()
	o._restored = true
	broadcast.Insert(ctx, "goradd_unit", "alt_leaf_un", o.PrimaryKey())
	return
}

// getUpdateFields returns the database columns that will be sent to the update process.
// This will include timestamp fields only if some other column has changed.
func (o *altLeafUnBase) getUpdateFields() (fields map[string]interface{}) {
	fields = map[string]interface{}{}
	if o.idIsDirty {
		fields["id"] = o.id
	}
	if o.nameIsDirty {
		fields["name"] = o.name
	}
	if o.altRootUnIDIsDirty {
		if o.altRootUnIDIsNull {
			fields["alt_root_un_id"] = nil
		} else {
			fields["alt_root_un_id"] = o.altRootUnID
		}
	}
	return
}

// getInsertFields returns the fields that will be specified in an insert operation.
// Optional fields that have not been set and have no default will be returned as nil.
// NoSql databases should interpret this as no value. Sql databases should interpret this as
// explicitly setting a NULL value, which would override any database specific default value.
// Auto-generated fields will be returned with their generated values, except AutoPK fields, which are generated by the
// database driver and updated after the insert.
func (o *altLeafUnBase) getInsertFields() (fields map[string]interface{}) {
	fields = map[string]interface{}{}
	if o.idIsDirty {
		fields["id"] = o.id
	}

	fields["name"] = o.name
	if o.altRootUnIDIsNull {
		fields["alt_root_un_id"] = nil
	} else {
		fields["alt_root_un_id"] = o.altRootUnID
	}
	return
}

// Delete deletes the record from the database.
func (o *altLeafUnBase) Delete(ctx context.Context) (err error) {
	if o == nil {
		return // allow deleting of a nil object to be a noop
	}
	if !o._restored {
		panic("Cannot delete a record that has no primary key value.")
	}
	d := Database()
	err = d.Delete(ctx, "alt_leaf_un", "ID", o.id, "", 0)
	if err != nil {
		return err
	}
	broadcast.Delete(ctx, "goradd_unit", "alt_leaf_un", fmt.Sprint(o.id))
	return
}

// deleteAltLeafUn deletes the AltLeafUn with primary key pk from the database
// and handles associated records.
func deleteAltLeafUn(ctx context.Context, pk string) error {
	d := db.GetDatabase("goradd_unit")
	err := d.Delete(ctx, "alt_leaf_un", "id", pk, "", 0)
	if err != nil {
		return err
	}
	broadcast.Delete(ctx, "goradd_unit", "alt_leaf_un", fmt.Sprint(pk))
	return err
}

// resetDirtyStatus resets the dirty status of every field in the object.
func (o *altLeafUnBase) resetDirtyStatus() {
	o.idIsDirty = false
	o.nameIsDirty = false
	o.altRootUnIDIsDirty = false

}

// IsDirty returns true if the object has been changed since it was read from the database or created.
// However, a new object that has a column with a default value will be automatically marked as dirty upon creation.
func (o *altLeafUnBase) IsDirty() (dirty bool) {
	dirty = o.idIsDirty ||
		o.nameIsDirty ||
		o.altRootUnIDIsDirty ||
		(o.objAltRootUn != nil && o.objAltRootUn.IsDirty())

	return
}

// Get returns the value of a field in the object based on the field's name.
// It will also get related objects if they are loaded.
// Invalid fields and objects are returned as nil.
// Get can be used to retrieve a value by using the Identifier of a node.
func (o *altLeafUnBase) Get(key string) interface{} {

	switch key {

	case "ID":
		if !o.idIsLoaded {
			return nil
		}
		return o.id

	case "Name":
		if !o.nameIsLoaded {
			return nil
		}
		return o.name

	case "AltRootUnID":
		if !o.altRootUnIDIsLoaded {
			return nil
		}
		return o.altRootUnID

	case "AltRootUn":
		return o.AltRootUn()

	}
	return nil
}

// MarshalBinary serializes the object into a buffer that is deserializable using UnmarshalBinary.
// It should be used for transmitting database objects over the wire, or for temporary storage. It does not send
// a version number, so if the data format changes, its up to you to invalidate the old stored objects.
// The framework uses this to serialize the object when it is stored in a control.
func (o *altLeafUnBase) MarshalBinary() ([]byte, error) {
	buf := new(bytes.Buffer)
	enc := gob.NewEncoder(buf)
	if err := o.encodeTo(enc); err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

func (o *altLeafUnBase) encodeTo(enc db.Encoder) error {

	if err := enc.Encode(o.id); err != nil {
		return fmt.Errorf("error encoding AltLeafUn.id: %w", err)
	}
	if err := enc.Encode(o.idIsLoaded); err != nil {
		return fmt.Errorf("error encoding AltLeafUn.idIsLoaded: %w", err)
	}
	if err := enc.Encode(o.idIsDirty); err != nil {
		return fmt.Errorf("error encoding AltLeafUn.idIsDirty: %w", err)
	}

	if err := enc.Encode(o.name); err != nil {
		return fmt.Errorf("error encoding AltLeafUn.name: %w", err)
	}
	if err := enc.Encode(o.nameIsLoaded); err != nil {
		return fmt.Errorf("error encoding AltLeafUn.nameIsLoaded: %w", err)
	}
	if err := enc.Encode(o.nameIsDirty); err != nil {
		return fmt.Errorf("error encoding AltLeafUn.nameIsDirty: %w", err)
	}

	if err := enc.Encode(o.altRootUnID); err != nil {
		return fmt.Errorf("error encoding AltLeafUn.altRootUnID: %w", err)
	}
	if err := enc.Encode(o.altRootUnIDIsNull); err != nil {
		return fmt.Errorf("error encoding AltLeafUn.altRootUnIDIsNull: %w", err)
	}
	if err := enc.Encode(o.altRootUnIDIsLoaded); err != nil {
		return fmt.Errorf("error encoding AltLeafUn.altRootUnIDIsLoaded: %w", err)
	}
	if err := enc.Encode(o.altRootUnIDIsDirty); err != nil {
		return fmt.Errorf("error encoding AltLeafUn.altRootUnIDIsDirty: %w", err)
	}

	if o.objAltRootUn == nil {
		if err := enc.Encode(false); err != nil {
			return err
		}
	} else {
		if err := enc.Encode(true); err != nil {
			return err
		}
		if err := enc.Encode(o.objAltRootUn); err != nil {
			return fmt.Errorf("error encoding AltLeafUn.objAltRootUn: %w", err)
		}
	}

	if o._aliases == nil {
		if err := enc.Encode(false); err != nil {
			return err
		}
	} else {
		if err := enc.Encode(true); err != nil {
			return err
		}
		if err := enc.Encode(o._aliases); err != nil {
			return fmt.Errorf("error encoding AltLeafUn._aliases: %w", err)
		}
	}

	if err := enc.Encode(o._restored); err != nil {
		return fmt.Errorf("error encoding AltLeafUn._restored: %w", err)
	}
	if err := enc.Encode(o._originalPK); err != nil {
		return fmt.Errorf("error encoding AltLeafUn._originalPK: %w", err)
	}
	return nil
}

// UnmarshalBinary converts a structure that was created with MarshalBinary into a AltLeafUn object.
func (o *altLeafUnBase) UnmarshalBinary(data []byte) (err error) {
	buf := bytes.NewReader(data)
	dec := gob.NewDecoder(buf)
	return o.decodeFrom(dec)
}

func (o *altLeafUnBase) decodeFrom(dec db.Decoder) (err error) {
	var isPtr bool

	_ = isPtr
	if err = dec.Decode(&o.id); err != nil {
		return fmt.Errorf("error decoding AltLeafUn.id: %w", err)
	}
	if err = dec.Decode(&o.idIsLoaded); err != nil {
		return fmt.Errorf("error decoding AltLeafUn.idIsLoaded: %w", err)
	}
	if err = dec.Decode(&o.idIsDirty); err != nil {
		return fmt.Errorf("error decoding AltLeafUn.idIsDirty: %w", err)
	}

	if err = dec.Decode(&o.name); err != nil {
		return fmt.Errorf("error decoding AltLeafUn.name: %w", err)
	}
	if err = dec.Decode(&o.nameIsLoaded); err != nil {
		return fmt.Errorf("error decoding AltLeafUn.nameIsLoaded: %w", err)
	}
	if err = dec.Decode(&o.nameIsDirty); err != nil {
		return fmt.Errorf("error decoding AltLeafUn.nameIsDirty: %w", err)
	}

	if err = dec.Decode(&o.altRootUnID); err != nil {
		return fmt.Errorf("error decoding AltLeafUn.altRootUnID: %w", err)
	}
	if err = dec.Decode(&o.altRootUnIDIsNull); err != nil {
		return fmt.Errorf("error decoding AltLeafUn.altRootUnIDIsNull: %w", err)
	}
	if err = dec.Decode(&o.altRootUnIDIsLoaded); err != nil {
		return fmt.Errorf("error decoding AltLeafUn.altRootUnIDIsLoaded: %w", err)
	}
	if err = dec.Decode(&o.altRootUnIDIsDirty); err != nil {
		return fmt.Errorf("error decoding AltLeafUn.altRootUnIDIsDirty: %w", err)
	}

	if err = dec.Decode(&isPtr); err != nil {
		return fmt.Errorf("error decoding AltLeafUn.objAltRootUn isPtr: %w", err)
	}
	if isPtr {
		if err = dec.Decode(&o.objAltRootUn); err != nil {
			return fmt.Errorf("error decoding AltLeafUn.objAltRootUn: %w", err)
		}
	}
	if err = dec.Decode(&isPtr); err != nil {
		return fmt.Errorf("error decoding AltLeafUn._aliases isPtr: %w", err)
	}
	if isPtr {
		if err = dec.Decode(&o._aliases); err != nil {
			return fmt.Errorf("error decoding AltLeafUn._aliases: %w", err)
		}
	}

	if err = dec.Decode(&o._restored); err != nil {
		return fmt.Errorf("error decoding AltLeafUn._restored: %w", err)
	}
	if err = dec.Decode(&o._originalPK); err != nil {
		return fmt.Errorf("error decoding AltLeafUn._originalPK: %w", err)
	}
	return
}

// MarshalJSON serializes the object into a JSON object.
// Only valid data will be serialized, meaning, you can control what gets serialized by using Select to
// select only the fields you want when you query for the object. Another way to control the output
// is to call MarshalStringMap, modify the map, then encode the map.
func (o *altLeafUnBase) MarshalJSON() (data []byte, err error) {
	v := o.MarshalStringMap()
	return json.Marshal(v)
}

// MarshalStringMap serializes the object into a string map of interfaces.
// Only valid data will be serialized, meaning, you can control what gets serialized by using Select to
// select only the fields you want when you query for the object. The keys are the same as the json keys.
func (o *altLeafUnBase) MarshalStringMap() map[string]interface{} {
	v := make(map[string]interface{})

	if o.idIsLoaded {
		v["id"] = o.id
	}

	if o.nameIsLoaded {
		v["name"] = o.name
	}

	if val := o.objAltRootUn; val != nil {
		v["altRootUn"] = val.MarshalStringMap()
	} else if o.altRootUnIDIsLoaded {
		if o.altRootUnIDIsNull {
			v["altRootUnID"] = nil
		} else {
			v["altRootUnID"] = o.altRootUnID
		}
	}

	for _k, _v := range o._aliases {
		v[_k] = _v
	}
	return v
}

// UnmarshalJSON unmarshalls the given json data into the AltLeafUn. The AltLeafUn can be a
// newly created object, or one loaded from the database.
//
// After unmarshalling, the object is not  saved. You must call Save to insert it into the database
// or update it.
//
// Unmarshalling of sub-objects, as in objects linked via foreign keys, is not currently supported.
//
// The fields it expects are:
//
//	"id" - string
//	"name" - string
//	"altRootUnID" - float32, nullable
func (o *altLeafUnBase) UnmarshalJSON(data []byte) (err error) {
	var v map[string]interface{}
	if len(data) == 0 {
		return
	}
	d := json.NewDecoder(bytes.NewReader(data))
	d.UseNumber() // use a number to avoid precision errors
	if err = d.Decode(&v); err != nil {
		return err
	}
	return o.UnmarshalStringMap(v)
}

// UnmarshalStringMap will load the values from the stringmap into the object.
//
// Override this in AltLeafUn to modify the json before sending it here.
func (o *altLeafUnBase) UnmarshalStringMap(m map[string]interface{}) (err error) {
	for k, v := range m {
		switch k {

		case "id":
			{
				if v == nil {
					return fmt.Errorf("field %s cannot be null", k)
				}

				if s, ok := v.(string); !ok {
					return fmt.Errorf("json field %s must be a string", k)
				} else {
					o.SetID(s)
				}
			}

		case "name":
			{
				if v == nil {
					return fmt.Errorf("field %s cannot be null", k)
				}

				if s, ok := v.(string); !ok {
					return fmt.Errorf("json field %s must be a string", k)
				} else {
					o.SetName(s)
				}
			}

		case "altRootUnID":
			{
				if v == nil {
					o.SetAltRootUnIDToNull()
					continue
				}

				if _, ok := m["altRootUn"]; ok {
					continue // importing the foreign key will remove the object
				}

				switch n := v.(type) {
				case json.Number:
					n2, err := n.Float64()
					if err != nil {
						return err
					}
					o.SetAltRootUnID(float32(n2))
				case float64:
					o.SetAltRootUnID(float32(n))
				case float32:
					o.SetAltRootUnID(n)
				default:
					return fmt.Errorf("field %s must be a number", k)
				}
			}

		case "altRootUn":
			v2 := NewAltRootUn()
			m2, ok := v.(map[string]any)
			if !ok {
				return fmt.Errorf("json field %s must be a map", k)
			}
			err = v2.UnmarshalStringMap(m2)
			if err != nil {
				return
			}
			o.SetAltRootUn(v2)

		}
	}
	return
}
