// Code generated by goradd-orm. DO NOT EDIT.

package goradd_unit

import (
	"context"
	"testing"

	"github.com/goradd/orm/_test/gen/orm/goradd_unit/node"
	"github.com/goradd/orm/pkg/db"
	"github.com/goradd/orm/pkg/test"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

// createMinimalSampleDoubleIndex creates an unsaved minimal version of a DoubleIndex object
// for testing.
func createMinimalSampleDoubleIndex() *DoubleIndex {
	obj := NewDoubleIndex()
	updateMinimalSampleDoubleIndex(obj)
	return obj
}

// updateMinimalSampleDoubleIndex sets the values of a minimal sample to new, random values.
func updateMinimalSampleDoubleIndex(obj *DoubleIndex) {

	obj.SetID(test.RandomValue[int](32))

	obj.SetFieldInt(test.RandomValue[int](32))

	obj.SetFieldString(test.RandomValue[string](50))

}

// createMaximalSampleDoubleIndex creates an unsaved version of a DoubleIndex object
// for testing that includes references to minimal objects.
func createMaximalSampleDoubleIndex() *DoubleIndex {
	obj := NewDoubleIndex()
	updateMaximalSampleDoubleIndex(obj)
	return obj
}

// updateMaximalSampleDoubleIndex sets all the maximal sample values to new values.
func updateMaximalSampleDoubleIndex(obj *DoubleIndex) {
	updateMinimalSampleDoubleIndex(obj)

}

// deleteSampleDoubleIndex deletes an object created and saved by one of the sample creator functions.
func deleteSampleDoubleIndex(ctx context.Context, obj *DoubleIndex) {
	if obj == nil {
		return
	}

	obj.Delete(ctx)

}

func TestDoubleIndex_SetID(t *testing.T) {

	obj := NewDoubleIndex()
	val := test.RandomValue[int](32)
	obj.SetID(val)
	assert.Equal(t, val, obj.ID())

	// test default
	obj.SetID(0)
	assert.EqualValues(t, 0, obj.ID(), "set default")

}
func TestDoubleIndex_SetFieldInt(t *testing.T) {

	obj := NewDoubleIndex()
	val := test.RandomValue[int](32)
	obj.SetFieldInt(val)
	assert.Equal(t, val, obj.FieldInt())

	// test default
	obj.SetFieldInt(0)
	assert.EqualValues(t, 0, obj.FieldInt(), "set default")

}
func TestDoubleIndex_SetFieldString(t *testing.T) {

	obj := NewDoubleIndex()
	val := test.RandomValue[string](50)
	obj.SetFieldString(val)
	assert.Equal(t, val, obj.FieldString())

	// test default
	obj.SetFieldString("")
	assert.EqualValues(t, "", obj.FieldString(), "set default")

	// test panic on setting value larger than maximum size allowed
	val = test.RandomValue[string](51)
	assert.Panics(t, func() {
		obj.SetFieldString(val)
	})
}

func TestDoubleIndex_Copy(t *testing.T) {
	obj := createMinimalSampleDoubleIndex()

	obj2 := obj.Copy()

	assert.Equal(t, obj.ID(), obj2.ID())
	assert.Equal(t, obj.FieldInt(), obj2.FieldInt())
	assert.Equal(t, obj.FieldString(), obj2.FieldString())

}

func TestDoubleIndex_BasicInsert(t *testing.T) {
	obj := createMinimalSampleDoubleIndex()
	ctx := db.NewContext(nil)
	err := obj.Save(ctx)
	assert.NoError(t, err)
	defer deleteSampleDoubleIndex(ctx, obj)

	// Test retrieval
	obj2 := LoadDoubleIndex(ctx, obj.PrimaryKey())
	require.NotNil(t, obj2)

	assert.Equal(t, obj2.PrimaryKey(), obj2.OriginalPrimaryKey())

	assert.True(t, obj2.IDIsValid())

	assert.EqualValues(t, obj.ID(), obj2.ID())

	// test that setting it to the same value will not change the dirty bit
	assert.False(t, obj2.idIsDirty)
	obj2.SetID(obj2.ID())
	assert.False(t, obj2.idIsDirty)

	assert.True(t, obj2.FieldIntIsValid())

	assert.EqualValues(t, obj.FieldInt(), obj2.FieldInt())

	// test that setting it to the same value will not change the dirty bit
	assert.False(t, obj2.fieldIntIsDirty)
	obj2.SetFieldInt(obj2.FieldInt())
	assert.False(t, obj2.fieldIntIsDirty)

	assert.True(t, obj2.FieldStringIsValid())

	assert.EqualValues(t, obj.FieldString(), obj2.FieldString())

	// test that setting it to the same value will not change the dirty bit
	assert.False(t, obj2.fieldStringIsDirty)
	obj2.SetFieldString(obj2.FieldString())
	assert.False(t, obj2.fieldStringIsDirty)

}

func TestDoubleIndex_InsertPanics(t *testing.T) {
	obj := createMinimalSampleDoubleIndex()
	ctx := db.NewContext(nil)

	obj.idIsValid = false
	assert.Panics(t, func() { obj.Save(ctx) })
	obj.idIsValid = true

	obj.fieldIntIsValid = false
	assert.Panics(t, func() { obj.Save(ctx) })
	obj.fieldIntIsValid = true

	obj.fieldStringIsValid = false
	assert.Panics(t, func() { obj.Save(ctx) })
	obj.fieldStringIsValid = true

}

func TestDoubleIndex_BasicUpdate(t *testing.T) {
	obj := createMinimalSampleDoubleIndex()
	ctx := db.NewContext(nil)
	assert.NoError(t, obj.Save(ctx))
	defer deleteSampleDoubleIndex(ctx, obj)
	updateMinimalSampleDoubleIndex(obj)
	assert.NoError(t, obj.Save(ctx))
	obj2 := LoadDoubleIndex(ctx, obj.PrimaryKey())

	assert.Equal(t, obj2.ID(), obj.ID(), "ID did not update")
	assert.Equal(t, obj2.FieldInt(), obj.FieldInt(), "FieldInt did not update")
	assert.Equal(t, obj2.FieldString(), obj.FieldString(), "FieldString did not update")
}

func TestDoubleIndex_References(t *testing.T) {
	obj := createMaximalSampleDoubleIndex()
	ctx := db.NewContext(nil)
	obj.Save(ctx)
	defer deleteSampleDoubleIndex(ctx, obj)

	// Test that referenced objects were saved and assigned ids

}
func TestDoubleIndex_EmptyPrimaryKeyGetter(t *testing.T) {
	obj := NewDoubleIndex()

	assert.Zero(t, obj.ID())
}

func TestDoubleIndex_Getters(t *testing.T) {
	obj := createMinimalSampleDoubleIndex()

	ctx := db.NewContext(nil)
	require.NoError(t, obj.Save(ctx))
	defer deleteSampleDoubleIndex(ctx, obj)

	obj2 := LoadDoubleIndex(ctx, obj.PrimaryKey(), node.DoubleIndex().PrimaryKey())
	assert.Equal(t, obj.ID(), obj2.ID())

	assert.Panics(t, func() { obj2.FieldInt() })
	assert.Panics(t, func() { obj2.FieldString() })
}
