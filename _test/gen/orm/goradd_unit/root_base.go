// Code generated by goradd-orm. DO NOT EDIT.

package goradd_unit

import (
	"bytes"
	"context"
	"encoding/gob"
	"encoding/json"
	"fmt"
	"unicode/utf8"

	"github.com/goradd/all"
	"github.com/goradd/maps"
	"github.com/goradd/orm/_test/gen/orm/goradd_unit/node"
	"github.com/goradd/orm/pkg/broadcast"
	"github.com/goradd/orm/pkg/db"
	"github.com/goradd/orm/pkg/op"
	"github.com/goradd/orm/pkg/query"
)

// RootBase is embedded in a Root object and provides the ORM access to the database.
// The member variables of the structure are private and should not normally be accessed by the Root embedder.
// Instead, use the accessor functions.
type rootBase struct {
	id        string
	idIsValid bool

	name        string
	nameIsValid bool
	nameIsDirty bool

	optionalLeafID        string
	optionalLeafIDIsNull  bool
	optionalLeafIDIsValid bool
	optionalLeafIDIsDirty bool
	objOptionalLeaf       *Leaf

	requiredLeafID        string
	requiredLeafIDIsValid bool
	requiredLeafIDIsDirty bool
	objRequiredLeaf       *Leaf

	optionalLeafUniqueID        string
	optionalLeafUniqueIDIsValid bool
	optionalLeafUniqueIDIsDirty bool
	objOptionalLeafUnique       *Leaf

	requiredLeafUniqueID        string
	requiredLeafUniqueIDIsValid bool
	requiredLeafUniqueIDIsDirty bool
	objRequiredLeafUnique       *Leaf

	parentID        string
	parentIDIsNull  bool
	parentIDIsValid bool
	parentIDIsDirty bool
	objParent       *Root

	// Reverse reference objects.

	revParentRoots        maps.SliceMap[string, *Root] // Objects in the order they were queried
	revParentRootsIsDirty bool

	// Custom aliases, if specified
	_aliases map[string]any

	// Indicates whether this is a new object, or one loaded from the database. Used by Save to know whether to Insert or Update.
	_restored bool

	_originalPK string
}

// IDs used to access the Root object fields by name using the Get function.
// doc: type=Root
const (
	Root_ID                   = `ID`
	Root_Name                 = `Name`
	Root_OptionalLeafID       = `OptionalLeafID`
	Root_OptionalLeaf         = `OptionalLeaf`
	Root_RequiredLeafID       = `RequiredLeafID`
	Root_RequiredLeaf         = `RequiredLeaf`
	Root_OptionalLeafUniqueID = `OptionalLeafUniqueID`
	Root_OptionalLeafUnique   = `OptionalLeafUnique`
	Root_RequiredLeafUniqueID = `RequiredLeafUniqueID`
	Root_RequiredLeafUnique   = `RequiredLeafUnique`
	Root_ParentID             = `ParentID`
	Root_Parent               = `Parent`

	RootParentRoots = `ParentRoots`
)

const RootNameMaxLength = 100 // The number of runes the column can hold

// Initialize or re-initialize a Root database object to default values.
// The primary key will get a temporary negative number which will be replaced when the object is saved.
// Multiple calls to Initialize are not guaranteed to create sequential values for the primary key.
func (o *rootBase) Initialize() {

	o.id = db.TemporaryPrimaryKey()

	o.idIsValid = false

	o.name = ""

	o.nameIsValid = false
	o.nameIsDirty = false

	o.optionalLeafID = ""

	o.optionalLeafIDIsNull = true
	o.optionalLeafIDIsValid = true
	o.optionalLeafIDIsDirty = true

	o.requiredLeafID = ""

	o.requiredLeafIDIsValid = false
	o.requiredLeafIDIsDirty = false

	o.optionalLeafUniqueID = ""

	o.optionalLeafUniqueIDIsValid = false
	o.optionalLeafUniqueIDIsDirty = false

	o.requiredLeafUniqueID = ""

	o.requiredLeafUniqueIDIsValid = false
	o.requiredLeafUniqueIDIsDirty = false

	o.parentID = ""

	o.parentIDIsNull = true
	o.parentIDIsValid = true
	o.parentIDIsDirty = true

	// Reverse reference objects.

	o.revParentRoots.Clear()
	o.revParentRootsIsDirty = false

	o._aliases = nil

	o._restored = false
}

// PrimaryKey returns the current value of the primary key field.
func (o *rootBase) PrimaryKey() string {
	return o.id
}

// OriginalPrimaryKey returns the value of the primary key that was originally loaded into the object when it was
// read from the database.
func (o *rootBase) OriginalPrimaryKey() string {
	return o._originalPK
}

// Copy copies all valid fields to a new Root object.
// Forward reference ids will be copied, but reverse and many-many references will not.
// Attached objects will not be included in the copy.
// Call Save() on the new object to save it into the database.
// Copy might panic if any fields in the database were set to a size larger than the
// maximum size through a process that accessed the database outside of the ORM.
func (o *rootBase) Copy() (newObject *Root) {
	newObject = NewRoot()
	if o.nameIsValid {
		newObject.SetName(o.name)
	}
	if o.optionalLeafIDIsValid {
		newObject.SetOptionalLeafID(o.optionalLeafID)
	}
	if o.requiredLeafIDIsValid {
		newObject.SetRequiredLeafID(o.requiredLeafID)
	}
	if o.optionalLeafUniqueIDIsValid {
		newObject.SetOptionalLeafUniqueID(o.optionalLeafUniqueID)
	}
	if o.requiredLeafUniqueIDIsValid {
		newObject.SetRequiredLeafUniqueID(o.requiredLeafUniqueID)
	}
	if o.parentIDIsValid {
		newObject.SetParentID(o.parentID)
	}
	return
}

// ID returns the loaded value of ID or
// the zero value if not loaded. Call IDIsValid() to determine
// if it is loaded.
func (o *rootBase) ID() string {
	return fmt.Sprint(o.id)
}

// IDIsValid returns true if the value was loaded from the database or has been set.
func (o *rootBase) IDIsValid() bool {
	return o._restored && o.idIsValid
}

// Name returns the loaded value of Name.
func (o *rootBase) Name() string {
	if o._restored && !o.nameIsValid {
		panic("Name was not selected in the last query and has not been set, and so is not valid")
	}
	return o.name
}

// NameIsValid returns true if the value was loaded from the database or has been set.
func (o *rootBase) NameIsValid() bool {
	return o.nameIsValid
}

// SetName sets the value of Name in the object, to be saved later in the database using the Save() function.
func (o *rootBase) SetName(v string) {
	if utf8.RuneCountInString(v) > RootNameMaxLength {
		panic("attempted to set Root.Name to a value larger than its maximum length in runes")
	}
	if o._restored &&
		o.nameIsValid && // if it was not selected, then make sure it gets set, since our end comparison won't be valid
		o.name == v {
		// no change
		return
	}

	o.nameIsValid = true
	o.name = v
	o.nameIsDirty = true
}

// OptionalLeafID returns the loaded value of OptionalLeafID.
func (o *rootBase) OptionalLeafID() string {
	if o._restored && !o.optionalLeafIDIsValid {
		panic("OptionalLeafID was not selected in the last query and has not been set, and so is not valid")
	}
	return o.optionalLeafID
}

// OptionalLeafIDIsValid returns true if the value was loaded from the database or has been set.
func (o *rootBase) OptionalLeafIDIsValid() bool {
	return o.optionalLeafIDIsValid
}

// OptionalLeafIDIsNull returns true if the related database value is null.
func (o *rootBase) OptionalLeafIDIsNull() bool {
	return o.optionalLeafIDIsNull
}

// SetOptionalLeafID sets the value of OptionalLeafID in the object, to be saved later in the database using the Save() function.
func (o *rootBase) SetOptionalLeafID(v string) {
	if o._restored &&
		o.optionalLeafIDIsValid && // if it was not selected, then make sure it gets set, since our end comparison won't be valid
		!o.optionalLeafIDIsNull && // if the db value is null, force a set of value
		o.optionalLeafID == v {
		// no change
		return
	}

	o.optionalLeafIDIsValid = true
	o.optionalLeafID = v
	o.optionalLeafIDIsDirty = true
	o.optionalLeafIDIsNull = false
	o.objOptionalLeaf = nil
}

// SetOptionalLeafIDToNull() will set the optional_leaf_id value in the database to NULL.
// OptionalLeafID() will return the column's default value after this.
func (o *rootBase) SetOptionalLeafIDToNull() {
	if !o.optionalLeafIDIsValid || !o.optionalLeafIDIsNull {
		// If we know it is null in the database, don't save it
		o.optionalLeafIDIsDirty = true
	}
	o.optionalLeafIDIsValid = true
	o.optionalLeafIDIsNull = true
	o.optionalLeafID = ""
	o.objOptionalLeaf = nil
}

// OptionalLeaf returns the current value of the loaded OptionalLeaf, and nil if its not loaded.
func (o *rootBase) OptionalLeaf() *Leaf {
	return o.objOptionalLeaf
}

// LoadOptionalLeaf returns the related OptionalLeaf. If it is not already loaded,
// it will attempt to load it, provided the OptionalLeafID column has been loaded first.
func (o *rootBase) LoadOptionalLeaf(ctx context.Context) *Leaf {
	if !o.optionalLeafIDIsValid {
		return nil
	}

	if o.objOptionalLeaf == nil {
		// Load and cache
		o.objOptionalLeaf = LoadLeaf(ctx, o.optionalLeafID)
	}
	return o.objOptionalLeaf
}

// SetOptionalLeaf will set the reference to optionalLeaf. The referenced object
// will be saved when Root is saved. Pass nil to break the connection.
func (o *rootBase) SetOptionalLeaf(objOptionalLeaf *Leaf) {
	o.optionalLeafIDIsValid = true
	if objOptionalLeaf == nil {
		if !o.optionalLeafIDIsNull || !o._restored {
			o.optionalLeafIDIsNull = true
			o.optionalLeafIDIsDirty = true
			o.optionalLeafID = ""
			o.objOptionalLeaf = nil
		}
	} else {
		o.objOptionalLeaf = objOptionalLeaf
		if o.optionalLeafIDIsNull || !o._restored || o.optionalLeafID != objOptionalLeaf.PrimaryKey() {
			o.optionalLeafIDIsNull = false
			o.optionalLeafID = objOptionalLeaf.PrimaryKey()
			o.optionalLeafIDIsDirty = true
		}
	}
}

// RequiredLeafID returns the loaded value of RequiredLeafID.
func (o *rootBase) RequiredLeafID() string {
	if o._restored && !o.requiredLeafIDIsValid {
		panic("RequiredLeafID was not selected in the last query and has not been set, and so is not valid")
	}
	return o.requiredLeafID
}

// RequiredLeafIDIsValid returns true if the value was loaded from the database or has been set.
func (o *rootBase) RequiredLeafIDIsValid() bool {
	return o.requiredLeafIDIsValid
}

// SetRequiredLeafID sets the value of RequiredLeafID in the object, to be saved later in the database using the Save() function.
func (o *rootBase) SetRequiredLeafID(v string) {
	if o._restored &&
		o.requiredLeafIDIsValid && // if it was not selected, then make sure it gets set, since our end comparison won't be valid
		o.requiredLeafID == v {
		// no change
		return
	}

	o.requiredLeafIDIsValid = true
	o.requiredLeafID = v
	o.requiredLeafIDIsDirty = true
	o.objRequiredLeaf = nil
}

// RequiredLeaf returns the current value of the loaded RequiredLeaf, and nil if its not loaded.
func (o *rootBase) RequiredLeaf() *Leaf {
	return o.objRequiredLeaf
}

// LoadRequiredLeaf returns the related RequiredLeaf. If it is not already loaded,
// it will attempt to load it, provided the RequiredLeafID column has been loaded first.
func (o *rootBase) LoadRequiredLeaf(ctx context.Context) *Leaf {
	if !o.requiredLeafIDIsValid {
		return nil
	}

	if o.objRequiredLeaf == nil {
		// Load and cache
		o.objRequiredLeaf = LoadLeaf(ctx, o.requiredLeafID)
	}
	return o.objRequiredLeaf
}

// SetRequiredLeaf sets the value of RequiredLeaf in the object, to be saved later using the Save() function.
func (o *rootBase) SetRequiredLeaf(objRequiredLeaf *Leaf) {
	if objRequiredLeaf == nil {
		panic("Cannot set RequiredLeaf to a nil value since RequiredLeafID is not nullable.")
	} else {
		o.objRequiredLeaf = objRequiredLeaf
		o.requiredLeafIDIsValid = true
		if o.requiredLeafID != objRequiredLeaf.PrimaryKey() {
			o.requiredLeafID = objRequiredLeaf.PrimaryKey()
			o.requiredLeafIDIsDirty = true
		}
	}
}

// OptionalLeafUniqueID returns the loaded value of OptionalLeafUniqueID.
func (o *rootBase) OptionalLeafUniqueID() string {
	if o._restored && !o.optionalLeafUniqueIDIsValid {
		panic("OptionalLeafUniqueID was not selected in the last query and has not been set, and so is not valid")
	}
	return o.optionalLeafUniqueID
}

// OptionalLeafUniqueIDIsValid returns true if the value was loaded from the database or has been set.
func (o *rootBase) OptionalLeafUniqueIDIsValid() bool {
	return o.optionalLeafUniqueIDIsValid
}

// SetOptionalLeafUniqueID sets the value of OptionalLeafUniqueID in the object, to be saved later in the database using the Save() function.
func (o *rootBase) SetOptionalLeafUniqueID(v string) {
	if o._restored &&
		o.optionalLeafUniqueIDIsValid && // if it was not selected, then make sure it gets set, since our end comparison won't be valid
		o.optionalLeafUniqueID == v {
		// no change
		return
	}

	o.optionalLeafUniqueIDIsValid = true
	o.optionalLeafUniqueID = v
	o.optionalLeafUniqueIDIsDirty = true
	o.objOptionalLeafUnique = nil
}

// OptionalLeafUnique returns the current value of the loaded OptionalLeafUnique, and nil if its not loaded.
func (o *rootBase) OptionalLeafUnique() *Leaf {
	return o.objOptionalLeafUnique
}

// LoadOptionalLeafUnique returns the related OptionalLeafUnique. If it is not already loaded,
// it will attempt to load it, provided the OptionalLeafUniqueID column has been loaded first.
func (o *rootBase) LoadOptionalLeafUnique(ctx context.Context) *Leaf {
	if !o.optionalLeafUniqueIDIsValid {
		return nil
	}

	if o.objOptionalLeafUnique == nil {
		// Load and cache
		o.objOptionalLeafUnique = LoadLeaf(ctx, o.optionalLeafUniqueID)
	}
	return o.objOptionalLeafUnique
}

// SetOptionalLeafUnique sets the value of OptionalLeafUnique in the object, to be saved later using the Save() function.
func (o *rootBase) SetOptionalLeafUnique(objOptionalLeafUnique *Leaf) {
	if objOptionalLeafUnique == nil {
		panic("Cannot set OptionalLeafUnique to a nil value since OptionalLeafUniqueID is not nullable.")
	} else {
		o.objOptionalLeafUnique = objOptionalLeafUnique
		o.optionalLeafUniqueIDIsValid = true
		if o.optionalLeafUniqueID != objOptionalLeafUnique.PrimaryKey() {
			o.optionalLeafUniqueID = objOptionalLeafUnique.PrimaryKey()
			o.optionalLeafUniqueIDIsDirty = true
		}
	}
}

// RequiredLeafUniqueID returns the loaded value of RequiredLeafUniqueID.
func (o *rootBase) RequiredLeafUniqueID() string {
	if o._restored && !o.requiredLeafUniqueIDIsValid {
		panic("RequiredLeafUniqueID was not selected in the last query and has not been set, and so is not valid")
	}
	return o.requiredLeafUniqueID
}

// RequiredLeafUniqueIDIsValid returns true if the value was loaded from the database or has been set.
func (o *rootBase) RequiredLeafUniqueIDIsValid() bool {
	return o.requiredLeafUniqueIDIsValid
}

// SetRequiredLeafUniqueID sets the value of RequiredLeafUniqueID in the object, to be saved later in the database using the Save() function.
func (o *rootBase) SetRequiredLeafUniqueID(v string) {
	if o._restored &&
		o.requiredLeafUniqueIDIsValid && // if it was not selected, then make sure it gets set, since our end comparison won't be valid
		o.requiredLeafUniqueID == v {
		// no change
		return
	}

	o.requiredLeafUniqueIDIsValid = true
	o.requiredLeafUniqueID = v
	o.requiredLeafUniqueIDIsDirty = true
	o.objRequiredLeafUnique = nil
}

// RequiredLeafUnique returns the current value of the loaded RequiredLeafUnique, and nil if its not loaded.
func (o *rootBase) RequiredLeafUnique() *Leaf {
	return o.objRequiredLeafUnique
}

// LoadRequiredLeafUnique returns the related RequiredLeafUnique. If it is not already loaded,
// it will attempt to load it, provided the RequiredLeafUniqueID column has been loaded first.
func (o *rootBase) LoadRequiredLeafUnique(ctx context.Context) *Leaf {
	if !o.requiredLeafUniqueIDIsValid {
		return nil
	}

	if o.objRequiredLeafUnique == nil {
		// Load and cache
		o.objRequiredLeafUnique = LoadLeaf(ctx, o.requiredLeafUniqueID)
	}
	return o.objRequiredLeafUnique
}

// SetRequiredLeafUnique sets the value of RequiredLeafUnique in the object, to be saved later using the Save() function.
func (o *rootBase) SetRequiredLeafUnique(objRequiredLeafUnique *Leaf) {
	if objRequiredLeafUnique == nil {
		panic("Cannot set RequiredLeafUnique to a nil value since RequiredLeafUniqueID is not nullable.")
	} else {
		o.objRequiredLeafUnique = objRequiredLeafUnique
		o.requiredLeafUniqueIDIsValid = true
		if o.requiredLeafUniqueID != objRequiredLeafUnique.PrimaryKey() {
			o.requiredLeafUniqueID = objRequiredLeafUnique.PrimaryKey()
			o.requiredLeafUniqueIDIsDirty = true
		}
	}
}

// ParentID returns the loaded value of ParentID.
func (o *rootBase) ParentID() string {
	if o._restored && !o.parentIDIsValid {
		panic("ParentID was not selected in the last query and has not been set, and so is not valid")
	}
	return o.parentID
}

// ParentIDIsValid returns true if the value was loaded from the database or has been set.
func (o *rootBase) ParentIDIsValid() bool {
	return o.parentIDIsValid
}

// ParentIDIsNull returns true if the related database value is null.
func (o *rootBase) ParentIDIsNull() bool {
	return o.parentIDIsNull
}

// SetParentID sets the value of ParentID in the object, to be saved later in the database using the Save() function.
func (o *rootBase) SetParentID(v string) {
	if o._restored &&
		o.parentIDIsValid && // if it was not selected, then make sure it gets set, since our end comparison won't be valid
		!o.parentIDIsNull && // if the db value is null, force a set of value
		o.parentID == v {
		// no change
		return
	}

	o.parentIDIsValid = true
	o.parentID = v
	o.parentIDIsDirty = true
	o.parentIDIsNull = false
	o.objParent = nil
}

// SetParentIDToNull() will set the parent_id value in the database to NULL.
// ParentID() will return the column's default value after this.
func (o *rootBase) SetParentIDToNull() {
	if !o.parentIDIsValid || !o.parentIDIsNull {
		// If we know it is null in the database, don't save it
		o.parentIDIsDirty = true
	}
	o.parentIDIsValid = true
	o.parentIDIsNull = true
	o.parentID = ""
	o.objParent = nil
}

// Parent returns the current value of the loaded Parent, and nil if its not loaded.
func (o *rootBase) Parent() *Root {
	return o.objParent
}

// LoadParent returns the related Parent. If it is not already loaded,
// it will attempt to load it, provided the ParentID column has been loaded first.
func (o *rootBase) LoadParent(ctx context.Context) *Root {
	if !o.parentIDIsValid {
		return nil
	}

	if o.objParent == nil {
		// Load and cache
		o.objParent = LoadRoot(ctx, o.parentID)
	}
	return o.objParent
}

// SetParent will set the reference to parent. The referenced object
// will be saved when Root is saved. Pass nil to break the connection.
func (o *rootBase) SetParent(objParent *Root) {
	o.parentIDIsValid = true
	if objParent == nil {
		if !o.parentIDIsNull || !o._restored {
			o.parentIDIsNull = true
			o.parentIDIsDirty = true
			o.parentID = ""
			o.objParent = nil
		}
	} else {
		o.objParent = objParent
		if o.parentIDIsNull || !o._restored || o.parentID != objParent.PrimaryKey() {
			o.parentIDIsNull = false
			o.parentID = objParent.PrimaryKey()
			o.parentIDIsDirty = true
		}
	}
}

// GetAlias returns the value for the Alias node aliasKey that was returned in the most
// recent query.
func (o *rootBase) GetAlias(aliasKey string) query.AliasValue {
	if a, ok := o._aliases[aliasKey]; ok {
		return query.NewAliasValue(a)
	} else {
		panic("Alias " + aliasKey + " not found.")
	}
}

// IsNew returns true if the object will create a new record when saved.
func (o *rootBase) IsNew() bool {
	return !o._restored
}

// ParentRoot returns a single Root object by primary key, if one was loaded.
// Otherwise, it will return nil. It will not return Root objects that are not saved.
func (o *rootBase) ParentRoot(pk string) *Root {
	v := o.revParentRoots.Get(pk)
	return v
}

// ParentRoots returns a slice of Root objects if loaded.
func (o *rootBase) ParentRoots() []*Root {
	return o.revParentRoots.Values()
}

// LoadParentRoots loads a new slice of Root objects and returns it.
func (o *rootBase) LoadParentRoots(ctx context.Context, conditions ...interface{}) []*Root {
	if o.IsNew() {
		return nil
	}
	for obj := range o.revParentRoots.ValuesIter() {
		if obj.IsDirty() {
			panic("You cannot load over items that have changed but have not been saved.")
		}
	}

	qb := queryRoots(ctx)
	cond := op.Equal(node.Root().ParentID(), o.PrimaryKey())
	if conditions != nil {
		conditions = append(conditions, cond)
		cond = op.And(conditions...)
	}

	objs := qb.Where(cond).Load()
	o.revParentRoots.Clear()

	for _, obj := range objs {
		pk := obj.ID()
		o.revParentRoots.Set(pk, obj)
	}

	if o.revParentRoots.Len() == 0 {
		return nil
	}
	return o.revParentRoots.Values()
}

// CountParentRoots does a database query and returns the number of Root
// objects currently in the database connected to this object.
func (o *rootBase) CountParentRoots(ctx context.Context) int {
	return CountRootsByParentID(ctx, o.PrimaryKey())
}

// SetParentRoots associates the objects in objs with the Root.
// If it has items already associated with it that will not be associated after a save,
// the foreign keys for those items will be set to null.
// If you did not use a join to query the items in the first place, used a conditional join,
// or joined with an expansion, be particularly careful, since you may be changing items
// that are not currently attached to this Root.
func (o *rootBase) SetParentRoots(objs ...*Root) {
	for obj := range o.revParentRoots.ValuesIter() {
		if obj.IsDirty() {
			panic("You cannot overwrite items that have changed but have not been saved.")
		}
	}

	o.revParentRoots.Clear()
	for _, obj := range objs {
		pk := obj.ID()
		o.revParentRoots.Set(pk, obj)
	}
	o.revParentRootsIsDirty = true
}

// LoadRoot returns a Root from the database.
// selectNodes lets you provide nodes for selecting specific fields or additional fields from related tables.
// See [RootsBuilder.Select] for more info.
func LoadRoot(ctx context.Context, id string, selectNodes ...query.Node) *Root {
	return queryRoots(ctx).
		Where(op.Equal(node.Root().ID(), id)).
		Select(selectNodes...).
		Get()
}

// HasRoot returns true if a Root with the given primaryKey exists in the database.
// doc: type=Root
func HasRoot(ctx context.Context, id string) bool {
	return queryRoots(ctx).
		Where(op.Equal(node.Root().ID(), id)).
		Count() == 1
}

// LoadRootByOptionalLeafUniqueID queries for a single Root object by the given unique index values.
// selectNodes optionally let you provide nodes for joining to other tables or selecting specific fields.
// See [RootsBuilder.Select].
// If you need a more elaborate query, use QueryRoots() to start a query builder.
func LoadRootByOptionalLeafUniqueID(ctx context.Context, optionalLeafUniqueID string, selectNodes ...query.Node) *Root {
	q := queryRoots(ctx)
	q = q.Where(op.Equal(node.Root().OptionalLeafUniqueID(), optionalLeafUniqueID))
	return q.Select(selectNodes...).Get()
}

// HasRootByOptionalLeafUniqueID returns true if the
// given unique index values exist in the database.
// doc: type=Root
func HasRootByOptionalLeafUniqueID(ctx context.Context, optionalLeafUniqueID string) bool {
	q := queryRoots(ctx)
	q = q.Where(op.Equal(node.Root().OptionalLeafUniqueID(), optionalLeafUniqueID))
	return q.Count() == 1
}

// LoadRootByRequiredLeafUniqueID queries for a single Root object by the given unique index values.
// selectNodes optionally let you provide nodes for joining to other tables or selecting specific fields.
// See [RootsBuilder.Select].
// If you need a more elaborate query, use QueryRoots() to start a query builder.
func LoadRootByRequiredLeafUniqueID(ctx context.Context, requiredLeafUniqueID string, selectNodes ...query.Node) *Root {
	q := queryRoots(ctx)
	q = q.Where(op.Equal(node.Root().RequiredLeafUniqueID(), requiredLeafUniqueID))
	return q.Select(selectNodes...).Get()
}

// HasRootByRequiredLeafUniqueID returns true if the
// given unique index values exist in the database.
// doc: type=Root
func HasRootByRequiredLeafUniqueID(ctx context.Context, requiredLeafUniqueID string) bool {
	q := queryRoots(ctx)
	q = q.Where(op.Equal(node.Root().RequiredLeafUniqueID(), requiredLeafUniqueID))
	return q.Count() == 1
}

// The RootBuilder uses the query.BuilderI interface to build a query.
// All query operations go through this query builder.
// End a query by calling either Load, LoadCursor, Get, Count, or Delete
type RootBuilder interface {
	// Join(alias string, joinedTable query.Node, condition query.Node) RootBuilder

	// Where adds a condition to filter what gets selected.
	// Calling Where multiple times will AND the conditions together.
	Where(c query.Node) RootBuilder

	// OrderBy specifies how the resulting data should be sorted.
	// By default, the given nodes are sorted in ascending order.
	// Add Descending() to the node to specify that it should be sorted in descending order.
	OrderBy(nodes ...query.Sorter) RootBuilder

	// Limit will return a subset of the data, limited to the offset and number of rows specified.
	// For large data sets and specific types of queries, this can be slow, because it will perform
	// the entire query before computing the limit.
	// You cannot limit a query that has selected a "many" relationship".
	Limit(maxRowCount int, offset int) RootBuilder

	// Select performs two functions:
	//  - Passing a table type node will join the object or objects from that table to this object.
	//  - Passing a column node will optimize the query to only return the specified fields.
	// Once you select at least one column, you must select all the columns that you want in the result.
	// Some fields, like primary keys, are always selected.
	// If you are using a GroupBy, you must select the fields in the GroupBy.
	Select(nodes ...query.Node) RootBuilder

	// Calculation adds a calculation described by operation with the name alias.
	// After the query, you can read the data using GetAlias() on the object identified by base.
	Calculation(base query.TableNodeI, alias string, operation query.OperationNodeI) RootBuilder

	// Distinct removes duplicates from the results of the query.
	// Adding a Select() is required.
	Distinct() RootBuilder

	// GroupBy controls how results are grouped when using aggregate functions with Calculation.
	GroupBy(nodes ...query.Node) RootBuilder

	// Having does additional filtering on the results of the query after the query is performed.
	Having(node query.Node) RootBuilder

	// Load terminates the query builder, performs the query, and returns a slice of Root objects.
	// If there are any errors, nil is returned and the specific error is stored in the context.
	// If no results come back from the query, it will return a non-nil empty slice.
	Load() []*Root
	// Load terminates the query builder, performs the query, and returns a slice of interfaces.
	// This can then satisfy a general interface that loads arrays of objects.
	// If there are any errors, nil is returned and the specific error is stored in the context.
	// If no results come back from the query, it will return a non-nil empty slice.
	LoadI() []query.OrmObj

	// LoadCursor terminates the query builder, performs the query, and returns a cursor to the query.
	//
	// A query cursor is useful for dealing with large amounts of query results. However, there are some
	// limitations to its use. When working with SQL databases, you cannot use a cursor while querying
	// many-to-many or reverse relationships that will create an array of values.
	//
	// Call Next() on the returned cursor object to step through the results. Make sure you call Close
	// on the cursor object when you are done. You should use
	//   defer cursor.Close()
	// to make sure the cursor gets closed.
	LoadCursor() rootsCursor

	// Get is a convenience method to return only the first item found in a query.
	// The entire query is performed, so you should generally use this only if you know
	// you are selecting on one or very few items.
	//
	// If an error occurs, or no results are found, a nil is returned.
	// In the case of an error, the error is returned in the context.
	Get() *Root

	// Count terminates a query and returns just the number of items in the result.
	// If you have Select or Calculation columns in the query, it will count NULL results as well.
	// To not count NULL values, use Where in the builder with a NotNull operation.
	// To count distinct combinations of items, call Distinct() on the builder.
	Count() int

	// Subquery terminates the query builder and tags it as a subquery within a larger query.
	// You MUST include what you are selecting by adding Calculation or Select functions on the subquery builder.
	// Generally you would use this as a node to a Calculation function on the surrounding query builder.
	// Subquery() *query.SubqueryNode

}

type rootQueryBuilder struct {
	builder *query.Builder
}

func newRootBuilder(ctx context.Context) RootBuilder {
	b := rootQueryBuilder{
		builder: query.NewBuilder(ctx, node.Root()),
	}
	return &b
}

// Load terminates the query builder, performs the query, and returns a slice of Root objects.
// If there are any errors, nil is returned and the specific error is stored in the context.
// If no results come back from the query, it will return a non-nil empty slice.
func (b *rootQueryBuilder) Load() (roots []*Root) {
	b.builder.Command = query.BuilderCommandLoad
	database := db.GetDatabase("goradd_unit")
	results := database.BuilderQuery(b.builder)
	if results == nil {
		return
	}
	for _, item := range results.([]map[string]any) {
		o := new(Root)
		o.load(item, o)
		roots = append(roots, o)
	}
	return
}

// Load terminates the query builder, performs the query, and returns a slice of interfaces.
// This can then satisfy a variety of interfaces that load arrays of objects, including KeyLabeler.
// If there are any errors, nil is returned and the specific error is stored in the context.
// If no results come back from the query, it will return a non-nil empty slice.
func (b *rootQueryBuilder) LoadI() (roots []query.OrmObj) {
	b.builder.Command = query.BuilderCommandLoad
	database := db.GetDatabase("goradd_unit")
	results := database.BuilderQuery(b.builder)
	if results == nil {
		return
	}
	for _, item := range results.([]map[string]any) {
		o := new(Root)
		o.load(item, o)
		roots = append(roots, o)
	}
	return
}

// LoadCursor terminates the query builder, performs the query, and returns a cursor to the query.
//
// A query cursor is useful for dealing with large amounts of query results. However, there are some
// limitations to its use. When working with SQL databases, you cannot use a cursor while querying
// many-to-many or reverse relationships that will create an array of values.
//
// Call Next() on the returned cursor object to step through the results. Make sure you call Close
// on the cursor object when you are done. You should use
//
//	defer cursor.Close()
//
// to make sure the cursor gets closed.
func (b *rootQueryBuilder) LoadCursor() rootsCursor {
	b.builder.Command = query.BuilderCommandLoadCursor
	database := db.GetDatabase("goradd_unit")
	result := database.BuilderQuery(b.builder)
	cursor := result.(query.CursorI)

	return rootsCursor{cursor}
}

type rootsCursor struct {
	query.CursorI
}

// Next returns the current Root object and moves the cursor to the next one.
//
// If there are no more records, it returns nil.
func (c rootsCursor) Next() *Root {
	if c.CursorI == nil {
		return nil
	}

	row := c.CursorI.Next()
	if row == nil {
		return nil
	}
	o := new(Root)
	o.load(row, o)
	return o
}

// Get is a convenience method to return only the first item found in a query.
// The entire query is performed, so you should generally use this only if you know
// you are selecting on one or very few items.
//
// If an error occurs, or no results are found, a nil is returned.
// In the case of an error, the error is returned in the context.
func (b *rootQueryBuilder) Get() *Root {
	results := b.Load()
	if results != nil && len(results) > 0 {
		obj := results[0]
		return obj
	} else {
		return nil
	}
}

/*
// Join attaches the table referred to by joinedTable, filtering the join process using the operation node specified
// by condition.
// The joinedTable node will be modified by this process so that you can use it in subsequent builder operations.
// Call GetAlias to return the resulting object from the query result.
func (b *rootQueryBuilder) Join(alias string, joinedTable query.Node, condition query.Node) RootBuilder {
    if query.RootNode(n).TableName_() != "root" {
        panic("you can only join a node that is rooted at node.Root()")
    }
    // TODO: make sure joinedTable is a table node
	b.builder.Join(alias, joinedTable, condition)
	return b
}
*/

// Where adds a condition to filter what gets selected.
// Calling Where multiple times will AND the conditions together.
func (b *rootQueryBuilder) Where(c query.Node) RootBuilder {
	b.builder.Where(c)
	return b
}

// OrderBy specifies how the resulting data should be sorted.
// By default, the given nodes are sorted in ascending order.
// Add Descending() to the node to specify that it should be sorted in descending order.
func (b *rootQueryBuilder) OrderBy(nodes ...query.Sorter) RootBuilder {
	b.builder.OrderBy(nodes...)
	return b
}

// Limit will return a subset of the data, limited to the offset and number of rows specified.
// For large data sets and specific types of queries, this can be slow, because it will perform
// the entire query before computing the limit.
// You cannot limit a query that has embedded arrays.
func (b *rootQueryBuilder) Limit(maxRowCount int, offset int) RootBuilder {
	b.builder.Limit(maxRowCount, offset)
	return b
}

// Select specifies what specific columns will be loaded with data.
// By default, all the columns of the root table will be queried and loaded.
// If nodes contains columns from the root table, that will limit the columns queried and loaded to only those columns.
// If related tables are specified, then all the columns from those tables are queried, selected and joined to the result.
// If columns in related tables are specified, then only those columns will be queried and loaded.
// Depending on the query, additional columns may automatically be added to the query. In particular, primary key columns
// will be added in most situations. The exception to this would be in distinct queries, group by queries, or subqueries.
func (b *rootQueryBuilder) Select(nodes ...query.Node) RootBuilder {
	b.builder.Select(nodes...)
	return b
}

// Calculation adds operation as an aliased value onto base.
// After the query, you can read the data by passing alias to GetAlias on the returned object.
func (b *rootQueryBuilder) Calculation(base query.TableNodeI, alias string, operation query.OperationNodeI) RootBuilder {
	b.builder.Calculation(base, alias, operation)
	return b
}

// Distinct removes duplicates from the results of the query.
// Adding a Select() is usually required.
func (b *rootQueryBuilder) Distinct() RootBuilder {
	b.builder.Distinct()
	return b
}

// GroupBy controls how results are grouped when using aggregate functions with Calculation.
func (b *rootQueryBuilder) GroupBy(nodes ...query.Node) RootBuilder {
	b.builder.GroupBy(nodes...)
	return b
}

// Having does additional filtering on the results of the query after the query is performed.
func (b *rootQueryBuilder) Having(node query.Node) RootBuilder {
	b.builder.Having(node)
	return b
}

// Count terminates a query and returns just the number of items in the result.
// If you have Select or Calculation columns in the query, it will count NULL results as well.
// To not count NULL values, use Where in the builder with a NotNull operation.
// To count distinct combinations of items, call Distinct() on the builder.
func (b *rootQueryBuilder) Count() int {
	b.builder.Command = query.BuilderCommandCount
	database := db.GetDatabase("goradd_unit")
	results := database.BuilderQuery(b.builder)
	if results == nil {
		return 0
	}
	return results.(int)
}

/*
// Subquery terminates the query builder and tags it as a subquery within a larger query.
// You MUST include what you are selecting by adding Calculation or Select functions on the subquery builder.
// Generally you would use this as a node to a Calculation function on the surrounding query builder.
func (b *rootQueryBuilder)  Subquery() *query.SubqueryNode {
	 return b.builder.Subquery()
}
*/

// CountRootsByID queries the database and returns the number of Root objects that
// have id.
// doc: type=Root
func CountRootsByID(ctx context.Context, id string) int {
	return queryRoots(ctx).Where(op.Equal(node.Root().ID(), id)).Count()
}

// CountRootsByName queries the database and returns the number of Root objects that
// have name.
// doc: type=Root
func CountRootsByName(ctx context.Context, name string) int {
	return queryRoots(ctx).Where(op.Equal(node.Root().Name(), name)).Count()
}

// CountRootsByOptionalLeafID queries the database and returns the number of Root objects that
// have optionalLeafID.
// doc: type=Root
func CountRootsByOptionalLeafID(ctx context.Context, optionalLeafID string) int {
	if optionalLeafID == "" {
		return 0
	}
	return queryRoots(ctx).Where(op.Equal(node.Root().OptionalLeafID(), optionalLeafID)).Count()
}

// CountRootsByRequiredLeafID queries the database and returns the number of Root objects that
// have requiredLeafID.
// doc: type=Root
func CountRootsByRequiredLeafID(ctx context.Context, requiredLeafID string) int {
	if requiredLeafID == "" {
		return 0
	}
	return queryRoots(ctx).Where(op.Equal(node.Root().RequiredLeafID(), requiredLeafID)).Count()
}

// CountRootsByOptionalLeafUniqueID queries the database and returns the number of Root objects that
// have optionalLeafUniqueID.
// doc: type=Root
func CountRootsByOptionalLeafUniqueID(ctx context.Context, optionalLeafUniqueID string) int {
	if optionalLeafUniqueID == "" {
		return 0
	}
	return queryRoots(ctx).Where(op.Equal(node.Root().OptionalLeafUniqueID(), optionalLeafUniqueID)).Count()
}

// CountRootsByRequiredLeafUniqueID queries the database and returns the number of Root objects that
// have requiredLeafUniqueID.
// doc: type=Root
func CountRootsByRequiredLeafUniqueID(ctx context.Context, requiredLeafUniqueID string) int {
	if requiredLeafUniqueID == "" {
		return 0
	}
	return queryRoots(ctx).Where(op.Equal(node.Root().RequiredLeafUniqueID(), requiredLeafUniqueID)).Count()
}

// CountRootsByParentID queries the database and returns the number of Root objects that
// have parentID.
// doc: type=Root
func CountRootsByParentID(ctx context.Context, parentID string) int {
	if parentID == "" {
		return 0
	}
	return queryRoots(ctx).Where(op.Equal(node.Root().ParentID(), parentID)).Count()
}

// load is the private loader that transforms data coming from the database into a tree structure reflecting the relationships
// between the object chain requested by the user in the query.
func (o *rootBase) load(m map[string]interface{}, objThis *Root) {

	if v, ok := m["id"]; ok && v != nil {
		if o.id, ok = v.(string); ok {
			o.idIsValid = true

			o._originalPK = o.id

		} else {
			panic("Wrong type found for id.")
		}
	} else {
		o.idIsValid = false
		o.id = ""
	}

	if v, ok := m["name"]; ok && v != nil {
		if o.name, ok = v.(string); ok {
			o.nameIsValid = true
			o.nameIsDirty = false

		} else {
			panic("Wrong type found for name.")
		}
	} else {
		o.nameIsValid = false
		o.name = ""
		o.nameIsDirty = false
	}

	if v, ok := m["optional_leaf_id"]; ok {
		if v == nil {
			o.optionalLeafID = ""
			o.optionalLeafIDIsNull = true
			o.optionalLeafIDIsValid = true
			o.optionalLeafIDIsDirty = false
		} else if o.optionalLeafID, ok = v.(string); ok {
			o.optionalLeafIDIsNull = false
			o.optionalLeafIDIsValid = true
			o.optionalLeafIDIsDirty = false
		} else {
			panic("Wrong type found for optional_leaf_id.")
		}
	} else {
		o.optionalLeafIDIsValid = false
		o.optionalLeafIDIsNull = true
		o.optionalLeafID = ""
		o.optionalLeafIDIsDirty = false
	}

	if v, ok := m["OptionalLeaf"]; ok {
		if objOptionalLeaf, ok2 := v.(map[string]any); ok2 {
			o.objOptionalLeaf = new(Leaf)
			o.objOptionalLeaf.load(objOptionalLeaf, o.objOptionalLeaf)
			o.optionalLeafIDIsValid = true
			o.optionalLeafIDIsDirty = false
		} else {
			panic("Wrong type found for OptionalLeaf object.")
		}
	} else {
		o.objOptionalLeaf = nil
	}

	if v, ok := m["required_leaf_id"]; ok && v != nil {
		if o.requiredLeafID, ok = v.(string); ok {
			o.requiredLeafIDIsValid = true
			o.requiredLeafIDIsDirty = false

		} else {
			panic("Wrong type found for required_leaf_id.")
		}
	} else {
		o.requiredLeafIDIsValid = false
		o.requiredLeafID = ""
		o.requiredLeafIDIsDirty = false
	}

	if v, ok := m["RequiredLeaf"]; ok {
		if objRequiredLeaf, ok2 := v.(map[string]any); ok2 {
			o.objRequiredLeaf = new(Leaf)
			o.objRequiredLeaf.load(objRequiredLeaf, o.objRequiredLeaf)
			o.requiredLeafIDIsValid = true
			o.requiredLeafIDIsDirty = false
		} else {
			panic("Wrong type found for RequiredLeaf object.")
		}
	} else {
		o.objRequiredLeaf = nil
	}

	if v, ok := m["optional_leaf_unique_id"]; ok && v != nil {
		if o.optionalLeafUniqueID, ok = v.(string); ok {
			o.optionalLeafUniqueIDIsValid = true
			o.optionalLeafUniqueIDIsDirty = false

		} else {
			panic("Wrong type found for optional_leaf_unique_id.")
		}
	} else {
		o.optionalLeafUniqueIDIsValid = false
		o.optionalLeafUniqueID = ""
		o.optionalLeafUniqueIDIsDirty = false
	}

	if v, ok := m["OptionalLeafUnique"]; ok {
		if objOptionalLeafUnique, ok2 := v.(map[string]any); ok2 {
			o.objOptionalLeafUnique = new(Leaf)
			o.objOptionalLeafUnique.load(objOptionalLeafUnique, o.objOptionalLeafUnique)
			o.optionalLeafUniqueIDIsValid = true
			o.optionalLeafUniqueIDIsDirty = false
		} else {
			panic("Wrong type found for OptionalLeafUnique object.")
		}
	} else {
		o.objOptionalLeafUnique = nil
	}

	if v, ok := m["required_leaf_unique_id"]; ok && v != nil {
		if o.requiredLeafUniqueID, ok = v.(string); ok {
			o.requiredLeafUniqueIDIsValid = true
			o.requiredLeafUniqueIDIsDirty = false

		} else {
			panic("Wrong type found for required_leaf_unique_id.")
		}
	} else {
		o.requiredLeafUniqueIDIsValid = false
		o.requiredLeafUniqueID = ""
		o.requiredLeafUniqueIDIsDirty = false
	}

	if v, ok := m["RequiredLeafUnique"]; ok {
		if objRequiredLeafUnique, ok2 := v.(map[string]any); ok2 {
			o.objRequiredLeafUnique = new(Leaf)
			o.objRequiredLeafUnique.load(objRequiredLeafUnique, o.objRequiredLeafUnique)
			o.requiredLeafUniqueIDIsValid = true
			o.requiredLeafUniqueIDIsDirty = false
		} else {
			panic("Wrong type found for RequiredLeafUnique object.")
		}
	} else {
		o.objRequiredLeafUnique = nil
	}

	if v, ok := m["parent_id"]; ok {
		if v == nil {
			o.parentID = ""
			o.parentIDIsNull = true
			o.parentIDIsValid = true
			o.parentIDIsDirty = false
		} else if o.parentID, ok = v.(string); ok {
			o.parentIDIsNull = false
			o.parentIDIsValid = true
			o.parentIDIsDirty = false
		} else {
			panic("Wrong type found for parent_id.")
		}
	} else {
		o.parentIDIsValid = false
		o.parentIDIsNull = true
		o.parentID = ""
		o.parentIDIsDirty = false
	}

	if v, ok := m["Parent"]; ok {
		if objParent, ok2 := v.(map[string]any); ok2 {
			o.objParent = new(Root)
			o.objParent.load(objParent, o.objParent)
			o.parentIDIsValid = true
			o.parentIDIsDirty = false
		} else {
			panic("Wrong type found for Parent object.")
		}
	} else {
		o.objParent = nil
	}

	// Reverse references

	if v, ok := m["ParentRoots"]; ok {
		switch v2 := v.(type) {
		case []map[string]any: // array expansion
			o.revParentRoots.Clear()
			o.revParentRootsIsDirty = false
			for _, v3 := range v2 {
				obj := new(Root)
				obj.load(v3, obj)
				o.revParentRoots.Set(obj.PrimaryKey(), obj)
			}
		default:
			panic("Wrong type found for revParentRoots object.")
		}
	} else {
		o.revParentRoots.Clear()
		o.revParentRootsIsDirty = false
	}

	if v, ok := m["aliases_"]; ok {
		o._aliases = v.(map[string]any)
	}

	o._restored = true

}

// Save will update or insert the object, depending on the state of the object.
// If it has any auto-generated ids, those will be updated.
// Database errors generally will be handled by the logger and not returned here,
// since those indicate a problem with database driver or configuration.
// Save will return a db.OptimisticLockError if it detects a collision when two users
// are attempting to change the same database record.
func (o *rootBase) Save(ctx context.Context) error {
	if o._restored {
		return o.update(ctx)
	} else {
		return o.insert(ctx)
	}
}

// update will update the values in the database, saving any changed values.
func (o *rootBase) update(ctx context.Context) error {
	if !o._restored {
		panic("cannot update a record that was not originally read from the database.")
	}
	if !o.IsDirty() {
		return nil // nothing to save
	}

	var modifiedFields map[string]interface{}

	d := Database()
	err := db.ExecuteTransaction(ctx, d, func() error {

		// Save loaded OptionalLeaf object to get its new pk and update it here.
		if o.objOptionalLeaf != nil {
			if err := o.objOptionalLeaf.Save(ctx); err != nil {
				return err
			}
			o.optionalLeafID = o.objOptionalLeaf.PrimaryKey()
		}

		// Save loaded RequiredLeaf object to get its new pk and update it here.
		if o.objRequiredLeaf != nil {
			if err := o.objRequiredLeaf.Save(ctx); err != nil {
				return err
			}
			o.requiredLeafID = o.objRequiredLeaf.PrimaryKey()
		}

		// Save loaded OptionalLeafUnique object to get its new pk and update it here.
		if o.objOptionalLeafUnique != nil {
			if err := o.objOptionalLeafUnique.Save(ctx); err != nil {
				return err
			}
			o.optionalLeafUniqueID = o.objOptionalLeafUnique.PrimaryKey()
		}

		// Save loaded RequiredLeafUnique object to get its new pk and update it here.
		if o.objRequiredLeafUnique != nil {
			if err := o.objRequiredLeafUnique.Save(ctx); err != nil {
				return err
			}
			o.requiredLeafUniqueID = o.objRequiredLeafUnique.PrimaryKey()
		}

		// Save loaded Parent object to get its new pk and update it here.
		if o.objParent != nil {
			if err := o.objParent.Save(ctx); err != nil {
				return err
			}
			o.parentID = o.objParent.PrimaryKey()
		}

		modifiedFields = o.getModifiedFields()
		if len(modifiedFields) != 0 {
			var err2 error

			_, err2 = d.Update(ctx, "root", "id", o._originalPK, modifiedFields, "", 0)
			if err2 != nil {
				return err2
			}
		}

		if o.revParentRootsIsDirty {
			// relation connection changed

			currentObjs := QueryRoots(ctx).
				Where(op.Equal(node.Root().ParentID(), o.PrimaryKey())).
				Select(node.Root().ParentID()).
				Load()

			for _, obj := range currentObjs {
				if !o.revParentRoots.Has(obj.PrimaryKey()) {
					// The old object is not in the group of new objects
					obj.SetParentIDToNull()
					if err := obj.Save(ctx); err != nil {
						return err
					}
				}
			}
			{
				keys := o.revParentRoots.Keys() // Make a copy of the keys, since we will change the slicemap while iterating
				for i, k := range keys {
					obj := o.revParentRoots.Get(k)
					obj.SetParentID(o.PrimaryKey())
					obj.parentIDIsDirty = true // force a change in case data is stale
					if err := obj.Save(ctx); err != nil {
						return err
					}
					if obj.PrimaryKey() != k {
						// update slice map key without changing order
						o.revParentRoots.Delete(k)
						o.revParentRoots.SetAt(i, obj.PrimaryKey(), obj)
					}
				}
			}

		} else {

			// save related objects
			for obj := range o.revParentRoots.ValuesIter() {
				if err := obj.Save(ctx); err != nil {
					return err
				}
			}
		}

		return nil
	}) // transaction
	if err != nil {
		return err
	}

	o.resetDirtyStatus()
	if len(modifiedFields) != 0 {
		broadcast.Update(ctx, "goradd_unit", "root", o._originalPK, all.SortedKeys(modifiedFields)...)
	}

	return nil
}

// insert will insert the object into the database. Related items will be saved.
func (o *rootBase) insert(ctx context.Context) (err error) {
	d := Database()
	err = db.ExecuteTransaction(ctx, d, func() error {

		if o.objOptionalLeaf != nil {
			if err = o.objOptionalLeaf.Save(ctx); err != nil {
				return err
			}
			o.optionalLeafID = o.objOptionalLeaf.PrimaryKey()
		}

		if o.objRequiredLeaf != nil {
			if err = o.objRequiredLeaf.Save(ctx); err != nil {
				return err
			}
			o.requiredLeafID = o.objRequiredLeaf.PrimaryKey()
		}

		if o.objOptionalLeafUnique != nil {
			if err = o.objOptionalLeafUnique.Save(ctx); err != nil {
				return err
			}
			o.optionalLeafUniqueID = o.objOptionalLeafUnique.PrimaryKey()
		}

		if o.objRequiredLeafUnique != nil {
			if err = o.objRequiredLeafUnique.Save(ctx); err != nil {
				return err
			}
			o.requiredLeafUniqueID = o.objRequiredLeafUnique.PrimaryKey()
		}

		if o.objParent != nil {
			if err = o.objParent.Save(ctx); err != nil {
				return err
			}
			o.parentID = o.objParent.PrimaryKey()
		}

		if !o.nameIsValid {
			panic("a value for Name is required, and there is no default value. Call SetName() before inserting the record.")
		}
		if !o.requiredLeafIDIsValid {
			panic("a value for RequiredLeafID is required, and there is no default value. Call SetRequiredLeafID() before inserting the record.")
		}
		if !o.optionalLeafUniqueIDIsValid {
			panic("a value for OptionalLeafUniqueID is required, and there is no default value. Call SetOptionalLeafUniqueID() before inserting the record.")
		}
		if !o.requiredLeafUniqueIDIsValid {
			panic("a value for RequiredLeafUniqueID is required, and there is no default value. Call SetRequiredLeafUniqueID() before inserting the record.")
		}

		m := o.getValidFields()

		id := d.Insert(ctx, "root", m)
		o.id = id
		o._originalPK = id

		if o.revParentRoots.Len() > 0 {
			keys := o.revParentRoots.Keys()
			for i, k := range keys {
				obj := o.revParentRoots.Get(k)
				obj.SetParentID(id)
				if err = obj.Save(ctx); err != nil {
					return err
				}
				if obj.PrimaryKey() != k {
					o.revParentRoots.Delete(k)
					o.revParentRoots.SetAt(i, obj.PrimaryKey(), obj)
				}
			}
		}

		return nil

	}) // transaction

	if err != nil {
		return
	}

	o.resetDirtyStatus()
	o._restored = true
	broadcast.Insert(ctx, "goradd_unit", "root", o.PrimaryKey())
	return
}

// getModifiedFields returns the database columns that have been modified. This
// will determine which specific fields are sent to the database to be changed.
func (o *rootBase) getModifiedFields() (fields map[string]interface{}) {
	fields = map[string]interface{}{}
	if o.nameIsDirty {
		fields["name"] = o.name
	}
	if o.optionalLeafIDIsDirty {
		if o.optionalLeafIDIsNull {
			fields["optional_leaf_id"] = nil
		} else {
			fields["optional_leaf_id"] = o.optionalLeafID
		}
	}
	if o.requiredLeafIDIsDirty {
		fields["required_leaf_id"] = o.requiredLeafID
	}
	if o.optionalLeafUniqueIDIsDirty {
		fields["optional_leaf_unique_id"] = o.optionalLeafUniqueID
	}
	if o.requiredLeafUniqueIDIsDirty {
		fields["required_leaf_unique_id"] = o.requiredLeafUniqueID
	}
	if o.parentIDIsDirty {
		if o.parentIDIsNull {
			fields["parent_id"] = nil
		} else {
			fields["parent_id"] = o.parentID
		}
	}
	return
}

// getValidFields returns the fields that have valid data in them in a form ready to send to the database.
func (o *rootBase) getValidFields() (fields map[string]interface{}) {
	fields = map[string]interface{}{}
	if o.nameIsValid {
		fields["name"] = o.name
	}
	if o.optionalLeafIDIsValid {
		if o.optionalLeafIDIsNull {
			fields["optional_leaf_id"] = nil
		} else {
			fields["optional_leaf_id"] = o.optionalLeafID
		}
	}
	if o.requiredLeafIDIsValid {
		fields["required_leaf_id"] = o.requiredLeafID
	}
	if o.optionalLeafUniqueIDIsValid {
		fields["optional_leaf_unique_id"] = o.optionalLeafUniqueID
	}
	if o.requiredLeafUniqueIDIsValid {
		fields["required_leaf_unique_id"] = o.requiredLeafUniqueID
	}
	if o.parentIDIsValid {
		if o.parentIDIsNull {
			fields["parent_id"] = nil
		} else {
			fields["parent_id"] = o.parentID
		}
	}
	return
}

// Delete deletes the record from the database.
//
// Associated ParentRoots will have their ParentID field set to NULL.
func (o *rootBase) Delete(ctx context.Context) (err error) {
	if o == nil {
		return // allow deleting of a nil object to be a noop
	}
	if !o._restored {
		panic("Cannot delete a record that has no primary key value.")
	}
	d := Database()
	err = db.ExecuteTransaction(ctx, d, func() error {

		{
			objs := QueryRoots(ctx).
				Where(op.Equal(node.Root().ParentID(), o.id)).
				Select(node.Root().ParentID()).
				Load()
			for _, obj := range objs {
				obj.SetParentIDToNull()
				if err = obj.Save(ctx); err != nil {
					return err
				}
			}
			o.revParentRoots.Clear()
		}

		d.Delete(ctx, "root", map[string]any{"ID": o.id})
		return nil
	})

	if err != nil {
		return err
	}
	broadcast.Delete(ctx, "goradd_unit", "root", fmt.Sprint(o.id))
	return
}

// deleteRoot deletes the Root with primary key pk from the database
// and handles associated records.
func deleteRoot(ctx context.Context, pk string) error {
	if obj := LoadRoot(ctx, pk, node.Root().PrimaryKey()); obj != nil {
		if err := obj.Delete(ctx); err != nil {
			return err
		}
	}
	return nil
}

// resetDirtyStatus resets the dirty status of every field in the object.
func (o *rootBase) resetDirtyStatus() {
	o.nameIsDirty = false
	o.optionalLeafIDIsDirty = false
	o.requiredLeafIDIsDirty = false
	o.optionalLeafUniqueIDIsDirty = false
	o.requiredLeafUniqueIDIsDirty = false
	o.parentIDIsDirty = false
	o.revParentRootsIsDirty = false

}

// IsDirty returns true if the object has been changed since it was read from the database or created.
// However, a new object that has a column with a default value will be automatically marked as dirty upon creation.
func (o *rootBase) IsDirty() (dirty bool) {
	dirty = o.nameIsDirty ||
		o.optionalLeafIDIsDirty ||
		(o.objOptionalLeaf != nil && o.objOptionalLeaf.IsDirty()) ||
		o.requiredLeafIDIsDirty ||
		(o.objRequiredLeaf != nil && o.objRequiredLeaf.IsDirty()) ||
		o.optionalLeafUniqueIDIsDirty ||
		(o.objOptionalLeafUnique != nil && o.objOptionalLeafUnique.IsDirty()) ||
		o.requiredLeafUniqueIDIsDirty ||
		(o.objRequiredLeafUnique != nil && o.objRequiredLeafUnique.IsDirty()) ||
		o.parentIDIsDirty ||
		(o.objParent != nil && o.objParent.IsDirty())

	dirty = dirty ||
		o.revParentRootsIsDirty

	for obj := range o.revParentRoots.ValuesIter() {
		dirty = dirty || obj.IsDirty()
	}

	return
}

// Get returns the value of a field in the object based on the field's name.
// It will also get related objects if they are loaded.
// Invalid fields and objects are returned as nil.
// Get can be used to retrieve a value by using the Identifier of a node.
func (o *rootBase) Get(key string) interface{} {

	switch key {

	case "ID":
		if !o.idIsValid {
			return nil
		}
		return o.id

	case "Name":
		if !o.nameIsValid {
			return nil
		}
		return o.name

	case "OptionalLeafID":
		if !o.optionalLeafIDIsValid {
			return nil
		}
		return o.optionalLeafID

	case "OptionalLeaf":
		return o.OptionalLeaf()

	case "RequiredLeafID":
		if !o.requiredLeafIDIsValid {
			return nil
		}
		return o.requiredLeafID

	case "RequiredLeaf":
		return o.RequiredLeaf()

	case "OptionalLeafUniqueID":
		if !o.optionalLeafUniqueIDIsValid {
			return nil
		}
		return o.optionalLeafUniqueID

	case "OptionalLeafUnique":
		return o.OptionalLeafUnique()

	case "RequiredLeafUniqueID":
		if !o.requiredLeafUniqueIDIsValid {
			return nil
		}
		return o.requiredLeafUniqueID

	case "RequiredLeafUnique":
		return o.RequiredLeafUnique()

	case "ParentID":
		if !o.parentIDIsValid {
			return nil
		}
		return o.parentID

	case "Parent":
		return o.Parent()

	case "ParentRoots":
		return o.revParentRoots.Values()

	}
	return nil
}

// MarshalBinary serializes the object into a buffer that is deserializable using UnmarshalBinary.
// It should be used for transmitting database objects over the wire, or for temporary storage. It does not send
// a version number, so if the data format changes, its up to you to invalidate the old stored objects.
// The framework uses this to serialize the object when it is stored in a control.
func (o *rootBase) MarshalBinary() ([]byte, error) {
	buf := new(bytes.Buffer)
	encoder := gob.NewEncoder(buf)

	if err := encoder.Encode(o.id); err != nil {
		return nil, fmt.Errorf("error encoding Root.id: %w", err)
	}
	if err := encoder.Encode(o.idIsValid); err != nil {
		return nil, fmt.Errorf("error encoding Root.idIsValid: %w", err)
	}

	if err := encoder.Encode(o.name); err != nil {
		return nil, fmt.Errorf("error encoding Root.name: %w", err)
	}
	if err := encoder.Encode(o.nameIsValid); err != nil {
		return nil, fmt.Errorf("error encoding Root.nameIsValid: %w", err)
	}
	if err := encoder.Encode(o.nameIsDirty); err != nil {
		return nil, fmt.Errorf("error encoding Root.nameIsDirty: %w", err)
	}

	if err := encoder.Encode(o.optionalLeafID); err != nil {
		return nil, fmt.Errorf("error encoding Root.optionalLeafID: %w", err)
	}
	if err := encoder.Encode(o.optionalLeafIDIsNull); err != nil {
		return nil, fmt.Errorf("error encoding Root.optionalLeafIDIsNull: %w", err)
	}
	if err := encoder.Encode(o.optionalLeafIDIsValid); err != nil {
		return nil, fmt.Errorf("error encoding Root.optionalLeafIDIsValid: %w", err)
	}
	if err := encoder.Encode(o.optionalLeafIDIsDirty); err != nil {
		return nil, fmt.Errorf("error encoding Root.optionalLeafIDIsDirty: %w", err)
	}

	if o.objOptionalLeaf == nil {
		if err := encoder.Encode(false); err != nil {
			return nil, err
		}
	} else {
		if err := encoder.Encode(true); err != nil {
			return nil, err
		}
		if err := encoder.Encode(o.objOptionalLeaf); err != nil {
			return nil, fmt.Errorf("error encoding Root.objOptionalLeaf: %w", err)
		}
	}

	if err := encoder.Encode(o.requiredLeafID); err != nil {
		return nil, fmt.Errorf("error encoding Root.requiredLeafID: %w", err)
	}
	if err := encoder.Encode(o.requiredLeafIDIsValid); err != nil {
		return nil, fmt.Errorf("error encoding Root.requiredLeafIDIsValid: %w", err)
	}
	if err := encoder.Encode(o.requiredLeafIDIsDirty); err != nil {
		return nil, fmt.Errorf("error encoding Root.requiredLeafIDIsDirty: %w", err)
	}

	if o.objRequiredLeaf == nil {
		if err := encoder.Encode(false); err != nil {
			return nil, err
		}
	} else {
		if err := encoder.Encode(true); err != nil {
			return nil, err
		}
		if err := encoder.Encode(o.objRequiredLeaf); err != nil {
			return nil, fmt.Errorf("error encoding Root.objRequiredLeaf: %w", err)
		}
	}

	if err := encoder.Encode(o.optionalLeafUniqueID); err != nil {
		return nil, fmt.Errorf("error encoding Root.optionalLeafUniqueID: %w", err)
	}
	if err := encoder.Encode(o.optionalLeafUniqueIDIsValid); err != nil {
		return nil, fmt.Errorf("error encoding Root.optionalLeafUniqueIDIsValid: %w", err)
	}
	if err := encoder.Encode(o.optionalLeafUniqueIDIsDirty); err != nil {
		return nil, fmt.Errorf("error encoding Root.optionalLeafUniqueIDIsDirty: %w", err)
	}

	if o.objOptionalLeafUnique == nil {
		if err := encoder.Encode(false); err != nil {
			return nil, err
		}
	} else {
		if err := encoder.Encode(true); err != nil {
			return nil, err
		}
		if err := encoder.Encode(o.objOptionalLeafUnique); err != nil {
			return nil, fmt.Errorf("error encoding Root.objOptionalLeafUnique: %w", err)
		}
	}

	if err := encoder.Encode(o.requiredLeafUniqueID); err != nil {
		return nil, fmt.Errorf("error encoding Root.requiredLeafUniqueID: %w", err)
	}
	if err := encoder.Encode(o.requiredLeafUniqueIDIsValid); err != nil {
		return nil, fmt.Errorf("error encoding Root.requiredLeafUniqueIDIsValid: %w", err)
	}
	if err := encoder.Encode(o.requiredLeafUniqueIDIsDirty); err != nil {
		return nil, fmt.Errorf("error encoding Root.requiredLeafUniqueIDIsDirty: %w", err)
	}

	if o.objRequiredLeafUnique == nil {
		if err := encoder.Encode(false); err != nil {
			return nil, err
		}
	} else {
		if err := encoder.Encode(true); err != nil {
			return nil, err
		}
		if err := encoder.Encode(o.objRequiredLeafUnique); err != nil {
			return nil, fmt.Errorf("error encoding Root.objRequiredLeafUnique: %w", err)
		}
	}

	if err := encoder.Encode(o.parentID); err != nil {
		return nil, fmt.Errorf("error encoding Root.parentID: %w", err)
	}
	if err := encoder.Encode(o.parentIDIsNull); err != nil {
		return nil, fmt.Errorf("error encoding Root.parentIDIsNull: %w", err)
	}
	if err := encoder.Encode(o.parentIDIsValid); err != nil {
		return nil, fmt.Errorf("error encoding Root.parentIDIsValid: %w", err)
	}
	if err := encoder.Encode(o.parentIDIsDirty); err != nil {
		return nil, fmt.Errorf("error encoding Root.parentIDIsDirty: %w", err)
	}

	if o.objParent == nil {
		if err := encoder.Encode(false); err != nil {
			return nil, err
		}
	} else {
		if err := encoder.Encode(true); err != nil {
			return nil, err
		}
		if err := encoder.Encode(o.objParent); err != nil {
			return nil, fmt.Errorf("error encoding Root.objParent: %w", err)
		}
	}

	if err := encoder.Encode(&o.revParentRoots); err != nil {
		return nil, err
	}

	if err := encoder.Encode(o.revParentRootsIsDirty); err != nil {
		return nil, err
	}

	if o._aliases == nil {
		if err := encoder.Encode(false); err != nil {
			return nil, err
		}
	} else {
		if err := encoder.Encode(true); err != nil {
			return nil, err
		}
		if err := encoder.Encode(o._aliases); err != nil {
			return nil, fmt.Errorf("error encoding Root._aliases: %w", err)
		}
	}

	if err := encoder.Encode(o._restored); err != nil {
		return nil, fmt.Errorf("error encoding Root._restored: %w", err)
	}
	if err := encoder.Encode(o._originalPK); err != nil {
		return nil, fmt.Errorf("error encoding Root._originalPK: %w", err)
	}

	return buf.Bytes(), nil

	return buf.Bytes(), nil
}

// UnmarshalBinary converts a structure that was created with MarshalBinary into a Root object.
func (o *rootBase) UnmarshalBinary(data []byte) (err error) {

	buf := bytes.NewBuffer(data)
	dec := gob.NewDecoder(buf)
	var isPtr bool

	_ = isPtr
	if err = dec.Decode(&o.id); err != nil {
		return fmt.Errorf("error decoding Root.id: %w", err)
	}
	if err = dec.Decode(&o.idIsValid); err != nil {
		return fmt.Errorf("error decoding Root.idIsValid: %w", err)
	}

	if err = dec.Decode(&o.name); err != nil {
		return fmt.Errorf("error decoding Root.name: %w", err)
	}
	if err = dec.Decode(&o.nameIsValid); err != nil {
		return fmt.Errorf("error decoding Root.nameIsValid: %w", err)
	}
	if err = dec.Decode(&o.nameIsDirty); err != nil {
		return fmt.Errorf("error decoding Root.nameIsDirty: %w", err)
	}

	if err = dec.Decode(&o.optionalLeafID); err != nil {
		return fmt.Errorf("error decoding Root.optionalLeafID: %w", err)
	}
	if err = dec.Decode(&o.optionalLeafIDIsNull); err != nil {
		return fmt.Errorf("error decoding Root.optionalLeafIDIsNull: %w", err)
	}
	if err = dec.Decode(&o.optionalLeafIDIsValid); err != nil {
		return fmt.Errorf("error decoding Root.optionalLeafIDIsValid: %w", err)
	}
	if err = dec.Decode(&o.optionalLeafIDIsDirty); err != nil {
		return fmt.Errorf("error decoding Root.optionalLeafIDIsDirty: %w", err)
	}

	if err = dec.Decode(&isPtr); err != nil {
		return fmt.Errorf("error decoding Root.objOptionalLeaf isPtr: %w", err)
	}
	if isPtr {
		if err = dec.Decode(&o.objOptionalLeaf); err != nil {
			return fmt.Errorf("error decoding Root.objOptionalLeaf: %w", err)
		}
	}
	if err = dec.Decode(&o.requiredLeafID); err != nil {
		return fmt.Errorf("error decoding Root.requiredLeafID: %w", err)
	}
	if err = dec.Decode(&o.requiredLeafIDIsValid); err != nil {
		return fmt.Errorf("error decoding Root.requiredLeafIDIsValid: %w", err)
	}
	if err = dec.Decode(&o.requiredLeafIDIsDirty); err != nil {
		return fmt.Errorf("error decoding Root.requiredLeafIDIsDirty: %w", err)
	}

	if err = dec.Decode(&isPtr); err != nil {
		return fmt.Errorf("error decoding Root.objRequiredLeaf isPtr: %w", err)
	}
	if isPtr {
		if err = dec.Decode(&o.objRequiredLeaf); err != nil {
			return fmt.Errorf("error decoding Root.objRequiredLeaf: %w", err)
		}
	}
	if err = dec.Decode(&o.optionalLeafUniqueID); err != nil {
		return fmt.Errorf("error decoding Root.optionalLeafUniqueID: %w", err)
	}
	if err = dec.Decode(&o.optionalLeafUniqueIDIsValid); err != nil {
		return fmt.Errorf("error decoding Root.optionalLeafUniqueIDIsValid: %w", err)
	}
	if err = dec.Decode(&o.optionalLeafUniqueIDIsDirty); err != nil {
		return fmt.Errorf("error decoding Root.optionalLeafUniqueIDIsDirty: %w", err)
	}

	if err = dec.Decode(&isPtr); err != nil {
		return fmt.Errorf("error decoding Root.objOptionalLeafUnique isPtr: %w", err)
	}
	if isPtr {
		if err = dec.Decode(&o.objOptionalLeafUnique); err != nil {
			return fmt.Errorf("error decoding Root.objOptionalLeafUnique: %w", err)
		}
	}
	if err = dec.Decode(&o.requiredLeafUniqueID); err != nil {
		return fmt.Errorf("error decoding Root.requiredLeafUniqueID: %w", err)
	}
	if err = dec.Decode(&o.requiredLeafUniqueIDIsValid); err != nil {
		return fmt.Errorf("error decoding Root.requiredLeafUniqueIDIsValid: %w", err)
	}
	if err = dec.Decode(&o.requiredLeafUniqueIDIsDirty); err != nil {
		return fmt.Errorf("error decoding Root.requiredLeafUniqueIDIsDirty: %w", err)
	}

	if err = dec.Decode(&isPtr); err != nil {
		return fmt.Errorf("error decoding Root.objRequiredLeafUnique isPtr: %w", err)
	}
	if isPtr {
		if err = dec.Decode(&o.objRequiredLeafUnique); err != nil {
			return fmt.Errorf("error decoding Root.objRequiredLeafUnique: %w", err)
		}
	}
	if err = dec.Decode(&o.parentID); err != nil {
		return fmt.Errorf("error decoding Root.parentID: %w", err)
	}
	if err = dec.Decode(&o.parentIDIsNull); err != nil {
		return fmt.Errorf("error decoding Root.parentIDIsNull: %w", err)
	}
	if err = dec.Decode(&o.parentIDIsValid); err != nil {
		return fmt.Errorf("error decoding Root.parentIDIsValid: %w", err)
	}
	if err = dec.Decode(&o.parentIDIsDirty); err != nil {
		return fmt.Errorf("error decoding Root.parentIDIsDirty: %w", err)
	}

	if err = dec.Decode(&isPtr); err != nil {
		return fmt.Errorf("error decoding Root.objParent isPtr: %w", err)
	}
	if isPtr {
		if err = dec.Decode(&o.objParent); err != nil {
			return fmt.Errorf("error decoding Root.objParent: %w", err)
		}
	}
	if err = dec.Decode(&o.revParentRoots); err != nil {
		return fmt.Errorf("error decoding Root.revParentRoots: %w", err)
	}

	if err = dec.Decode(&o.revParentRootsIsDirty); err != nil {
		return fmt.Errorf("error decoding Root.revParentRootsIsDirty: %w", err)
	}

	return
}

// MarshalJSON serializes the object into a JSON object.
// Only valid data will be serialized, meaning, you can control what gets serialized by using Select to
// select only the fields you want when you query for the object. Another way to control the output
// is to call MarshalStringMap, modify the map, then encode the map.
func (o *rootBase) MarshalJSON() (data []byte, err error) {
	v := o.MarshalStringMap()
	return json.Marshal(v)
}

// MarshalStringMap serializes the object into a string map of interfaces.
// Only valid data will be serialized, meaning, you can control what gets serialized by using Select to
// select only the fields you want when you query for the object. The keys are the same as the json keys.
func (o *rootBase) MarshalStringMap() map[string]interface{} {
	v := make(map[string]interface{})

	if o.idIsValid {
		v["id"] = o.id
	}

	if o.nameIsValid {
		v["name"] = o.name
	}

	if o.optionalLeafIDIsValid {
		if o.optionalLeafIDIsNull {
			v["optionalLeafID"] = nil
		} else {
			v["optionalLeafID"] = o.optionalLeafID
		}
	}

	if val := o.OptionalLeaf(); val != nil {
		v["optionalLeaf"] = val.MarshalStringMap()
	}

	if o.requiredLeafIDIsValid {
		v["requiredLeafID"] = o.requiredLeafID
	}

	if val := o.RequiredLeaf(); val != nil {
		v["requiredLeaf"] = val.MarshalStringMap()
	}

	if o.optionalLeafUniqueIDIsValid {
		v["optionalLeafUniqueID"] = o.optionalLeafUniqueID
	}

	if val := o.OptionalLeafUnique(); val != nil {
		v["optionalLeafUnique"] = val.MarshalStringMap()
	}

	if o.requiredLeafUniqueIDIsValid {
		v["requiredLeafUniqueID"] = o.requiredLeafUniqueID
	}

	if val := o.RequiredLeafUnique(); val != nil {
		v["requiredLeafUnique"] = val.MarshalStringMap()
	}

	if o.parentIDIsValid {
		if o.parentIDIsNull {
			v["parentID"] = nil
		} else {
			v["parentID"] = o.parentID
		}
	}

	if val := o.Parent(); val != nil {
		v["parent"] = val.MarshalStringMap()
	}
	if o.revParentRoots.Len() != 0 {
		var vals []map[string]interface{}
		for obj := range o.revParentRoots.ValuesIter() {
			vals = append(vals, obj.MarshalStringMap())
		}
		v["parentRoots"] = vals
	}
	for _k, _v := range o._aliases {
		v[_k] = _v
	}
	return v
}

// UnmarshalJSON unmarshalls the given json data into the Root. The Root can be a
// newly created object, or one loaded from the database.
//
// After unmarshalling, the object is not  saved. You must call Save to insert it into the database
// or update it.
//
// Unmarshalling of sub-objects, as in objects linked via foreign keys, is not currently supported.
//
// The fields it expects are:
//
//	"id" - string
//	"name" - string
//	"optionalLeafID" - string, nullable
//	"requiredLeafID" - string
//	"optionalLeafUniqueID" - string
//	"requiredLeafUniqueID" - string
//	"parentID" - string, nullable
func (o *rootBase) UnmarshalJSON(data []byte) (err error) {
	var v map[string]interface{}
	if len(data) == 0 {
		return
	}
	d := json.NewDecoder(bytes.NewReader(data))
	d.UseNumber() // use a number to avoid precision errors
	if err = d.Decode(&v); err != nil {
		return err
	}
	return o.UnmarshalStringMap(v)
}

// UnmarshalStringMap will load the values from the stringmap into the object.
//
// Override this in Root to modify the json before sending it here.
func (o *rootBase) UnmarshalStringMap(m map[string]interface{}) (err error) {
	for k, v := range m {
		switch k {

		case "name":
			{
				if v == nil {
					return fmt.Errorf("field %s cannot be null", k)
				}

				if s, ok := v.(string); !ok {
					return fmt.Errorf("json field %s must be a string", k)
				} else {
					o.SetName(s)
				}
			}

		case "optionalLeafID":
			{
				if v == nil {
					o.SetOptionalLeafIDToNull()
					continue
				}

				if s, ok := v.(string); !ok {
					return fmt.Errorf("field %s must be a string", k)
				} else {
					o.SetOptionalLeafID(s)
				}

			}

		case "requiredLeafID":
			{
				if v == nil {
					return fmt.Errorf("field %s cannot be null", k)
				}

				if s, ok := v.(string); !ok {
					return fmt.Errorf("field %s must be a string", k)
				} else {
					o.SetRequiredLeafID(s)
				}

			}

		case "optionalLeafUniqueID":
			{
				if v == nil {
					return fmt.Errorf("field %s cannot be null", k)
				}

				if s, ok := v.(string); !ok {
					return fmt.Errorf("field %s must be a string", k)
				} else {
					o.SetOptionalLeafUniqueID(s)
				}

			}

		case "requiredLeafUniqueID":
			{
				if v == nil {
					return fmt.Errorf("field %s cannot be null", k)
				}

				if s, ok := v.(string); !ok {
					return fmt.Errorf("field %s must be a string", k)
				} else {
					o.SetRequiredLeafUniqueID(s)
				}

			}

		case "parentID":
			{
				if v == nil {
					o.SetParentIDToNull()
					continue
				}

				if s, ok := v.(string); !ok {
					return fmt.Errorf("field %s must be a string", k)
				} else {
					o.SetParentID(s)
				}

			}

		}
	}
	return
}
