// Code generated by goradd-orm. DO NOT EDIT.

package goradd_unit

import (
	"bytes"
	"context"
	"encoding/gob"
	"encoding/json"
	"fmt"
	"unicode/utf8"

	"github.com/goradd/anyutil"
	"github.com/goradd/orm/_test/gen/orm/goradd_unit/node"
	"github.com/goradd/orm/pkg/broadcast"
	"github.com/goradd/orm/pkg/db"
	"github.com/goradd/orm/pkg/op"
	"github.com/goradd/orm/pkg/query"
)

// LeafNBase is embedded in a LeafN object and provides the ORM access to the database.
// The member variables of the structure are private and should not normally be accessed by the LeafN embedder.
// Instead, use the accessor functions.
type leafNBase struct {
	id              string
	idIsLoaded      bool
	idIsDirty       bool
	name            string
	nameIsLoaded    bool
	nameIsDirty     bool
	rootNID         string
	rootNIDIsLoaded bool
	rootNIDIsDirty  bool

	// References
	rootN *RootN

	// Custom aliases, if specified
	_aliases map[string]any

	// Indicates whether this is a new object, or one loaded from the database. Used by Save to know whether to Insert or Update.
	_restored bool

	_originalPK string
}

// IDs used to access the LeafN object fields by name using the Get function.
// doc: type=LeafN
const (
	LeafNIDField      = `id`
	LeafNNameField    = `name`
	LeafNRootNIDField = `rootNID`
	LeafNRootNField   = `rootN`
)

const LeafNIDMaxLength = 32      // The number of runes the column can hold
const LeafNNameMaxLength = 100   // The number of runes the column can hold
const LeafNRootNIDMaxLength = 32 // The number of runes the column can hold

// Initialize or re-initialize a LeafN database object to default values.
// The primary key will get a temporary unique value which will be replaced when the object is saved.
func (o *leafNBase) Initialize() {
	o.id = db.TemporaryPrimaryKey()
	o.idIsLoaded = true
	o.idIsDirty = false

	o.name = ""
	o.nameIsLoaded = false
	o.nameIsDirty = false

	o.rootNID = ""
	o.rootNIDIsLoaded = false
	o.rootNIDIsDirty = false

	o._aliases = nil
	o._restored = false
}

// Copy copies most fields to a new LeafN object.
// Forward reference ids will be copied, but reverse and many-many references will not.
// Attached objects will not be included in the copy.
// Automatically generated fields will not be included in the copy.
// The primary key field will not be copied, since it is normally auto-generated.
// Call Save() on the new object to save it into the database.
// Copy might panic if any fields in the database were set to a size larger than the
// maximum size through a process that accessed the database outside of the ORM.
func (o *leafNBase) Copy() (newObject *LeafN) {
	newObject = NewLeafN()
	if o.idIsLoaded {
		newObject.SetID(o.id)
	}
	if o.nameIsLoaded {
		newObject.SetName(o.name)
	}
	if o.rootNIDIsLoaded {
		newObject.SetRootNID(o.rootNID)
	}
	return
}

// OriginalPrimaryKey returns the value of the primary key that was originally loaded into the object when it was
// read from the database.
func (o *leafNBase) OriginalPrimaryKey() string {
	return o._originalPK
}

// PrimaryKey returns the value of the primary key of the record.
func (o *leafNBase) PrimaryKey() string {
	if o._restored && !o.idIsLoaded {
		panic("ID was not selected in the last query and has not been set, and so PrimaryKey is not valid")
	}
	return o.id
}

// SetPrimaryKey sets the value of the primary key in the object, to be saved later in the database using the Save() function.
// Normally you will not need to call this function, since the primary key value is automatically generated by the
// database driver. Exceptions might include importing data to a new database, or correcting primary key conflicts when
// merging data.
// You cannot change a primary key for a record that has been written to the database. While SQL databases will
// allow it, NoSql databases will not. Save a copy and delete this one instead.
func (o *leafNBase) SetPrimaryKey(v string) {
	o.SetID(v)
}

// ID returns the loaded value of the id field in the database.
func (o *leafNBase) ID() string {
	if o._restored && !o.idIsLoaded {
		panic("ID was not selected in the last query and has not been set, and so is not valid")
	}
	return o.id
}

// IDIsLoaded returns true if the value was loaded from the database or has been set.
func (o *leafNBase) IDIsLoaded() bool {
	return o.idIsLoaded
}

// SetID sets the value of ID in the object, to be saved later in the database using the Save() function.
// Normally you will not need to call this function, since the ID value is automatically generated by the
// database driver. Exceptions might include importing data to a new database, or correcting primary key conflicts when
// merging data.
// You cannot change a primary key for a record that has been written to the database. While SQL databases will
// allow it, NoSql databases will not. Save a copy and delete this one instead.
func (o *leafNBase) SetID(v string) {
	if o._restored {
		panic("error: Do not change a primary key for a record that has been saved. Instead, save a copy and delete the original.")
	}
	if utf8.RuneCountInString(v) > LeafNIDMaxLength {
		panic("attempted to set LeafN.ID to a value larger than its maximum length in runes")
	}
	o.idIsLoaded = true
	o.idIsDirty = true
	o.id = v
}

// Name returns the value of the loaded name field in the database.
func (o *leafNBase) Name() string {
	if o._restored && !o.nameIsLoaded {
		panic("Name was not selected in the last query and has not been set, and so is not valid")
	}
	return o.name
}

// NameIsLoaded returns true if the value was loaded from the database or has been set.
func (o *leafNBase) NameIsLoaded() bool {
	return o.nameIsLoaded
}

// SetName sets the value of Name in the object, to be saved later in the database using the Save() function.
func (o *leafNBase) SetName(v string) {
	if utf8.RuneCountInString(v) > LeafNNameMaxLength {
		panic("attempted to set LeafN.Name to a value larger than its maximum length in runes")
	}
	if o._restored &&
		o.nameIsLoaded && // if it was not selected, then make sure it gets set, since our end comparison won't be valid
		o.name == v {
		// no change
		return
	}

	o.nameIsLoaded = true
	o.name = v
	o.nameIsDirty = true
}

// RootNID returns the value of the loaded root_n_id field in the database.
func (o *leafNBase) RootNID() string {
	if o._restored && !o.rootNIDIsLoaded {
		panic("RootNID was not selected in the last query and has not been set, and so is not valid")
	}
	return o.rootNID
}

// RootNIDIsLoaded returns true if the value was loaded from the database or has been set.
func (o *leafNBase) RootNIDIsLoaded() bool {
	return o.rootNIDIsLoaded
}

// SetRootNID sets the value of RootNID in the object, to be saved later in the database using the Save() function.
func (o *leafNBase) SetRootNID(v string) {
	if utf8.RuneCountInString(v) > LeafNRootNIDMaxLength {
		panic("attempted to set LeafN.RootNID to a value larger than its maximum length in runes")
	}
	if o._restored &&
		o.rootNIDIsLoaded && // if it was not selected, then make sure it gets set, since our end comparison won't be valid
		o.rootNID == v {
		// no change
		return
	}

	o.rootNIDIsLoaded = true
	o.rootNID = v
	o.rootNIDIsDirty = true
	if o.rootN != nil &&
		o.rootNID != o.rootN.PrimaryKey() {
		o.rootN = nil
	}
}

// RootN returns the current value of the loaded RootN, and nil if its not loaded.
func (o *leafNBase) RootN() *RootN {
	return o.rootN
}

// LoadRootN returns the related RootN. If it is not already loaded,
// it will attempt to load it, provided the RootNID column has been loaded first.
func (o *leafNBase) LoadRootN(ctx context.Context) (*RootN, error) {
	var err error

	if o.rootN == nil {
		if !o.rootNIDIsLoaded {
			panic("RootNID must be selected in the previous query")
		}
		// Load and cache
		o.rootN, err = LoadRootN(ctx, o.rootNID)
	}
	return o.rootN, err
}

// SetRootN sets the value of RootN in the object, to be saved later using the Save() function.
func (o *leafNBase) SetRootN(rootN *RootN) {
	if rootN == nil {
		panic("Cannot set RootN to a nil value since RootNID is not nullable.")
	} else {
		o.rootN = rootN
		o.rootNIDIsLoaded = true
		if o.rootNID != rootN.PrimaryKey() {
			o.rootNID = rootN.PrimaryKey()
			o.rootNIDIsDirty = true
		}
	}
}

// GetAlias returns the value for the Alias node aliasKey that was returned in the most
// recent query.
func (o *leafNBase) GetAlias(aliasKey string) query.AliasValue {
	if a, ok := o._aliases[aliasKey]; ok {
		return query.NewAliasValue(a)
	} else {
		panic("Alias " + aliasKey + " not found.")
	}
}

// IsNew returns true if the object will create a new record when saved.
func (o *leafNBase) IsNew() bool {
	return !o._restored
}

// LoadLeafN returns a LeafN from the database.
// selectNodes lets you provide nodes for selecting specific fields or additional fields from related tables.
// See [LeafNsBuilder.Select] for more info.
func LoadLeafN(ctx context.Context, pk string, selectNodes ...query.Node) (*LeafN, error) {
	return queryLeafNs(ctx).
		Where(op.Equal(node.LeafN().ID(), pk)).
		Select(selectNodes...).
		Get()
}

// HasLeafN returns true if a LeafN with the given primary key exists in the database.
// doc: type=LeafN
func HasLeafN(ctx context.Context, pk string) (bool, error) {
	v, err := queryLeafNs(ctx).
		Where(op.Equal(node.LeafN().ID(), pk)).
		Count()
	return v > 0, err
}

// LoadLeafNsByRootNID queries LeafN objects by the given index values.
// selectNodes optionally let you provide nodes for joining to other tables or selecting specific fields.
// See [LeafNsBuilder.Select].
// If you need a more elaborate query, use QueryLeafNs() to start a query builder.
func LoadLeafNsByRootNID(ctx context.Context, rootNID string, selectNodes ...query.Node) ([]*LeafN, error) {
	q := queryLeafNs(ctx)
	q = q.Where(op.Equal(node.LeafN().RootNID(), rootNID))
	return q.Select(selectNodes...).Load()
}

// HasLeafNByRootNID returns true if the
// given index values exist in the database.
// doc: type=LeafN
func HasLeafNByRootNID(ctx context.Context, rootNID string) (bool, error) {
	q := queryLeafNs(ctx)
	q = q.Where(op.Equal(node.LeafN().RootNID(), rootNID))
	v, err := q.Count()
	return v > 0, err
}

// The LeafNBuilder uses a builder pattern to create a query on the database.
// Create a LeafNBuilder by calling QueryLeafNs, which will select all
// the LeafN object in the database. Then filter and arrange those objects
// by calling Where, Select, etc.
// End a query by calling either Load, LoadI, LoadCursor, Get, or Count.
// A LeafNBuilder stores the context it will use to perform the query, and thus is
// meant to be a short-lived object. You should not save it for later use.
type LeafNBuilder struct {
	builder *query.Builder
	ctx     context.Context
}

func newLeafNBuilder(ctx context.Context) *LeafNBuilder {
	b := LeafNBuilder{
		builder: query.NewBuilder(node.LeafN()),
		ctx:     ctx,
	}
	return &b
}

// Load terminates the query builder, performs the query, and returns a slice of LeafN objects.
// If there are any errors, nil is returned and the specific error is stored in the context.
// If no results come back from the query, it will return a non-nil empty slice.
func (b *LeafNBuilder) Load() (leafNs []*LeafN, err error) {
	b.builder.Command = query.BuilderCommandLoad
	database := db.GetDatabase("goradd_unit")
	var results any

	ctx := b.ctx
	results, err = database.BuilderQuery(ctx, b.builder)
	if results == nil || err != nil {
		return
	}
	for _, item := range results.([]map[string]any) {
		o := new(LeafN)
		o.unpack(item, o)
		leafNs = append(leafNs, o)
	}
	return
}

// LoadI terminates the query builder, performs the query, and returns a slice of interfaces.
// This can then satisfy a variety of interfaces that load arrays of objects, including KeyLabeler.
// If there are any errors, nil is returned and the specific error is stored in the context.
// If no results come back from the query, it will return a non-nil empty slice.
func (b *LeafNBuilder) LoadI() (leafNs []query.OrmObj, err error) {
	b.builder.Command = query.BuilderCommandLoad
	database := db.GetDatabase("goradd_unit")
	var results any

	ctx := b.ctx
	results, err = database.BuilderQuery(ctx, b.builder)
	if results == nil || err != nil {
		return
	}
	for _, item := range results.([]map[string]any) {
		o := new(LeafN)
		o.unpack(item, o)
		leafNs = append(leafNs, o)
	}
	return
}

// LoadCursor terminates the query builder, performs the query, and returns a cursor to the query.
//
// A query cursor is useful for dealing with large amounts of query results. However, there are some
// limitations to its use. When working with SQL databases, you cannot use a cursor while querying
// many-to-many or reverse relationships that will create an array of values.
//
// Call Next() on the returned cursor object to step through the results. Make sure you call Close
// on the cursor object when you are done. You should use
//
//	defer cursor.Close()
//
// to make sure the cursor gets closed.
func (b *LeafNBuilder) LoadCursor() (leafNsCursor, error) {
	b.builder.Command = query.BuilderCommandLoadCursor
	database := db.GetDatabase("goradd_unit")
	result, err := database.BuilderQuery(b.ctx, b.builder)
	var cursor query.CursorI
	if result != nil {
		cursor = result.(query.CursorI)
	}
	return leafNsCursor{cursor}, err
}

type leafNsCursor struct {
	query.CursorI
}

// Next returns the current LeafN object and moves the cursor to the next one.
//
// If there are no more records, it returns nil.
func (c leafNsCursor) Next() (*LeafN, error) {
	if c.CursorI == nil {
		return nil, nil
	}

	row, err := c.CursorI.Next()
	if row == nil || err != nil {
		return nil, err
	}
	o := new(LeafN)
	o.unpack(row, o)
	return o, nil
}

// Get is a convenience method to return only the first item found in a query.
// The entire query is performed, so you should generally use this only if you know
// you are selecting on one or very few items.
// If an error occurs, or no results are found, a nil is returned.
func (b *LeafNBuilder) Get() (*LeafN, error) {
	results, err := b.Load()
	if err != nil || len(results) == 0 {
		return nil, err
	}
	return results[0], nil
}

// Where adds a condition to filter what gets selected.
// Calling Where multiple times will AND the conditions together.
func (b *LeafNBuilder) Where(c query.Node) *LeafNBuilder {
	b.builder.Where(c)
	return b
}

// OrderBy specifies how the resulting data should be sorted.
// By default, the given nodes are sorted in ascending order.
// Add Descending() to the node to specify that it should be sorted in descending order.
func (b *LeafNBuilder) OrderBy(nodes ...query.Sorter) *LeafNBuilder {
	b.builder.OrderBy(nodes...)
	return b
}

// Limit will return a subset of the data, limited to the offset and number of rows specified.
// For large data sets and specific types of queries, this can be slow, because it will perform
// the entire query before computing the limit.
// You cannot limit a query that has embedded arrays.
func (b *LeafNBuilder) Limit(maxRowCount int, offset int) *LeafNBuilder {
	b.builder.Limit(maxRowCount, offset)
	return b
}

// Select specifies what specific columns will be loaded with data.
// By default, all the columns of the leaf_n table will be queried and loaded.
// If nodes contains columns from the leaf_n table, that will limit the columns queried and loaded to only those columns.
// If related tables are specified, then all the columns from those tables are queried, selected and joined to the result.
// If columns in related tables are specified, then only those columns will be queried and loaded.
// Depending on the query, additional columns may automatically be added to the query. In particular, primary key columns
// will be added in most situations. The exception to this would be in distinct queries, group by queries, or subqueries.
func (b *LeafNBuilder) Select(nodes ...query.Node) *LeafNBuilder {
	b.builder.Select(nodes...)
	return b
}

// Calculation adds operation as an aliased value onto base.
// After the query, you can read the data by passing alias to GetAlias on the returned object.
func (b *LeafNBuilder) Calculation(base query.TableNodeI, alias string, operation query.OperationNodeI) *LeafNBuilder {
	b.builder.Calculation(base, alias, operation)
	return b
}

// Distinct removes duplicates from the results of the query.
// Adding a Select() is usually required.
func (b *LeafNBuilder) Distinct() *LeafNBuilder {
	b.builder.Distinct()
	return b
}

// GroupBy controls how results are grouped when using aggregate functions with Calculation.
func (b *LeafNBuilder) GroupBy(nodes ...query.Node) *LeafNBuilder {
	b.builder.GroupBy(nodes...)
	return b
}

// Having does additional filtering on the results of the query after the query is performed.
func (b *LeafNBuilder) Having(node query.Node) *LeafNBuilder {
	b.builder.Having(node)
	return b
}

// Count terminates a query and returns just the number of items in the result.
// If you have Select or Calculation columns in the query, it will count NULL results as well.
// To not count NULL values, use Where in the builder with a NotNull operation.
// To count distinct combinations of items, call Distinct() on the builder.
func (b *LeafNBuilder) Count() (int, error) {
	b.builder.Command = query.BuilderCommandCount
	database := db.GetDatabase("goradd_unit")

	ctx := b.ctx
	results, err := database.BuilderQuery(ctx, b.builder)
	if results == nil || err != nil {
		return 0, err
	}
	return results.(int), nil
}

// CountLeafNs returns the total number of items in the leaf_n table.
func CountLeafNs(ctx context.Context) (int, error) {
	return QueryLeafNs(ctx).Count()
}

// CountLeafNsByRootNID queries the database and returns the number of LeafN objects that
// have rootNID.
// doc: type=LeafN
func CountLeafNsByRootNID(ctx context.Context, rootNID string) (int, error) {
	v_rootNID := rootNID
	return QueryLeafNs(ctx).
		Where(op.Equal(node.LeafN().RootNID(), v_rootNID)).
		Count()
}

// unpack recursively transforms data coming from the database into ORM objects.
func (o *leafNBase) unpack(m map[string]interface{}, objThis *LeafN) {

	if v, ok := m["id"]; ok && v != nil {
		if o.id, ok = v.(string); ok {
			o.idIsLoaded = true
			o.idIsDirty = false
			o._originalPK = o.id
		} else {
			panic("Wrong type found for id.")
		}
	} else {
		o.idIsLoaded = false
		o.id = ""
		o.idIsDirty = false
	}

	if v, ok := m["name"]; ok && v != nil {
		if o.name, ok = v.(string); ok {
			o.nameIsLoaded = true
			o.nameIsDirty = false
		} else {
			panic("Wrong type found for name.")
		}
	} else {
		o.nameIsLoaded = false
		o.name = ""
		o.nameIsDirty = false
	}

	if v, ok := m["root_n_id"]; ok && v != nil {
		if o.rootNID, ok = v.(string); ok {
			o.rootNIDIsLoaded = true
			o.rootNIDIsDirty = false
		} else {
			panic("Wrong type found for root_n_id.")
		}
	} else {
		o.rootNIDIsLoaded = false
		o.rootNID = ""
		o.rootNIDIsDirty = false
	}

	if v, ok := m["rootN"]; ok {
		if rootN, ok2 := v.(map[string]any); ok2 {
			o.rootN = new(RootN)
			o.rootN.unpack(rootN, o.rootN)
			o.rootNIDIsLoaded = true
			o.rootNIDIsDirty = false
		} else {
			panic("Wrong type found for RootN object.")
		}
	} else {
		o.rootN = nil
	}

	if v, ok := m["aliases_"]; ok {
		o._aliases = v.(map[string]any)
	}

	o._restored = true

}

// save will update or insert the object, depending on the state of the object.
func (o *leafNBase) save(ctx context.Context) error {
	if o._restored {
		return o.update(ctx)
	} else {
		return o.insert(ctx)
	}
}

// update will update the values in the database, saving any changed values.
// If the table has auto-generated values, those will be updated automatically.
func (o *leafNBase) update(ctx context.Context) error {
	if !o._restored {
		panic("cannot update a record that was not originally read from the database.")
	}
	if !o.IsDirty() {
		return nil // nothing to save
	}

	var modifiedFields map[string]interface{}

	d := Database()
	err := db.WithTransaction(ctx, d, func(ctx context.Context) error {
		// Save loaded RootN object to get its new pk and update it here.
		if o.rootN != nil {
			if err := o.rootN.Save(ctx); err != nil {
				return err
			}
			o.SetRootNID(o.rootN.PrimaryKey())
		}

		modifiedFields = getLeafNUpdateFields(o)
		if len(modifiedFields) != 0 {
			err2 := d.Update(ctx, "leaf_n",
				map[string]any{
					"id": o._originalPK,
				},
				modifiedFields,
				"",
				0,
			)
			if err2 != nil {
				return err2
			}
		}

		return nil
	}) // transaction
	if err != nil {
		return err
	}

	o.resetDirtyStatus()
	if len(modifiedFields) != 0 {
		broadcast.Update(ctx, "goradd_unit", "leaf_n", o._originalPK, anyutil.SortedKeys(modifiedFields)...)
	}

	return nil
}

// insert will insert the object into the database. Related items will be saved.
func (o *leafNBase) insert(ctx context.Context) (err error) {
	var insertFields map[string]interface{}
	d := Database()
	err = db.WithTransaction(ctx, d, func(ctx context.Context) error {
		// Save loaded RootN object to get its new pk and update it here.
		if o.rootN != nil {
			if err := o.rootN.Save(ctx); err != nil {
				return err
			}
			o.SetRootNID(o.rootN.PrimaryKey())
		}
		if !o.nameIsLoaded {
			panic("a value for Name is required, and there is no default value. Call SetName() before inserting the record.")
		}
		if !o.rootNIDIsLoaded {
			panic("a value for RootNID is required, and there is no default value. Call SetRootNID() before inserting the record.")
		}
		insertFields = getLeafNInsertFields(o)
		var newPK string
		newPK, err = d.Insert(ctx, "leaf_n", "id", insertFields)
		if err != nil {
			return err
		}
		o.id = newPK
		o._originalPK = newPK
		o.idIsLoaded = true

		return nil

	}) // transaction

	if err != nil {
		return
	}

	o.resetDirtyStatus()
	o._restored = true
	broadcast.Insert(ctx, "goradd_unit", "leaf_n", o.PrimaryKey())
	return
}

// getUpdateFields returns the database columns that will be sent to the update process.
// This will include timestamp fields only if some other column has changed.
func (o *leafNBase) getUpdateFields() (fields map[string]interface{}) {
	fields = map[string]interface{}{}
	if o.idIsDirty {
		fields["id"] = o.id
	}
	if o.nameIsDirty {
		fields["name"] = o.name
	}
	if o.rootNIDIsDirty {
		fields["root_n_id"] = o.rootNID
	}
	return
}

// getInsertFields returns the fields that will be specified in an insert operation.
// Optional fields that have not been set and have no default will be returned as nil.
// NoSql databases should interpret this as no value. Sql databases should interpret this as
// explicitly setting a NULL value, which would override any database specific default value.
// Auto-generated fields will be returned with their generated values, except AutoPK fields, which are generated by the
// database driver and updated after the insert.
func (o *leafNBase) getInsertFields() (fields map[string]interface{}) {
	fields = map[string]interface{}{}
	if o.idIsDirty {
		fields["id"] = o.id
	}

	fields["name"] = o.name

	fields["root_n_id"] = o.rootNID
	return
}

// Delete deletes the record from the database.
func (o *leafNBase) Delete(ctx context.Context) (err error) {
	if o == nil {
		return // allow deleting of a nil object to be a noop
	}
	if !o._restored {
		panic("Cannot delete a record that has no primary key value.")
	}
	d := Database()
	err = d.Delete(ctx, "leaf_n",
		map[string]any{
			"id": o._originalPK,
		},
		"",
		0,
	)
	if err != nil {
		return err
	}
	broadcast.Delete(ctx, "goradd_unit", "leaf_n", o._originalPK)
	return
}

// deleteLeafN deletes the LeafN with primary key pk from the database
// and handles associated records.
func deleteLeafN(ctx context.Context, pk string) error {
	d := db.GetDatabase("goradd_unit")
	err := d.Delete(ctx, "leaf_n",
		map[string]any{
			"id": pk,
		},
		"", 0)

	if err != nil {
		return err
	}
	broadcast.Delete(ctx, "goradd_unit", "leaf_n", pk)
	return err
}

// resetDirtyStatus resets the dirty status of every field in the object.
func (o *leafNBase) resetDirtyStatus() {
	o.idIsDirty = false
	o.nameIsDirty = false
	o.rootNIDIsDirty = false

}

// IsDirty returns true if the object has been changed since it was read from the database or created.
func (o *leafNBase) IsDirty() (dirty bool) {
	dirty = o.idIsDirty ||
		o.nameIsDirty ||
		o.rootNIDIsDirty

	dirty = dirty ||
		o.rootN != nil && o.rootN.IsDirty()

	return
}

// Get returns the value of a field in the object based on the field's name.
// It will also get related objects if they are loaded.
// Invalid fields and objects are returned as nil.
// Get can be used to retrieve a value by using the Field() of a node.
func (o *leafNBase) Get(key string) interface{} {
	switch key {
	case LeafNIDField:
		if !o.idIsLoaded {
			return nil
		}
		return o.id
	case LeafNNameField:
		if !o.nameIsLoaded {
			return nil
		}
		return o.name
	case LeafNRootNIDField:
		if !o.rootNIDIsLoaded {
			return nil
		}
		return o.rootNID
	case LeafNRootNField:
		return o.RootN()
	}
	return nil
}

// MarshalBinary serializes the object into a buffer that is deserializable using UnmarshalBinary.
// It should be used for transmitting database objects over the wire, or for temporary storage. It does not send
// a version number, so if the data format changes, its up to you to invalidate the old stored objects.
// The framework uses this to serialize the object when it is stored in a control.
func (o *leafNBase) MarshalBinary() ([]byte, error) {
	buf := new(bytes.Buffer)
	enc := gob.NewEncoder(buf)
	if err := o.encodeTo(enc); err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

func (o *leafNBase) encodeTo(enc db.Encoder) error {

	if err := enc.Encode(o.id); err != nil {
		return fmt.Errorf("error encoding LeafN.id: %w", err)
	}
	if err := enc.Encode(o.idIsLoaded); err != nil {
		return fmt.Errorf("error encoding LeafN.idIsLoaded: %w", err)
	}
	if err := enc.Encode(o.idIsDirty); err != nil {
		return fmt.Errorf("error encoding LeafN.idIsDirty: %w", err)
	}

	if err := enc.Encode(o.name); err != nil {
		return fmt.Errorf("error encoding LeafN.name: %w", err)
	}
	if err := enc.Encode(o.nameIsLoaded); err != nil {
		return fmt.Errorf("error encoding LeafN.nameIsLoaded: %w", err)
	}
	if err := enc.Encode(o.nameIsDirty); err != nil {
		return fmt.Errorf("error encoding LeafN.nameIsDirty: %w", err)
	}

	if err := enc.Encode(o.rootNID); err != nil {
		return fmt.Errorf("error encoding LeafN.rootNID: %w", err)
	}
	if err := enc.Encode(o.rootNIDIsLoaded); err != nil {
		return fmt.Errorf("error encoding LeafN.rootNIDIsLoaded: %w", err)
	}
	if err := enc.Encode(o.rootNIDIsDirty); err != nil {
		return fmt.Errorf("error encoding LeafN.rootNIDIsDirty: %w", err)
	}

	if o.rootN == nil {
		if err := enc.Encode(false); err != nil {
			return err
		}
	} else {
		if err := enc.Encode(true); err != nil {
			return err
		}
		if err := enc.Encode(o.rootN); err != nil {
			return fmt.Errorf("error encoding LeafN.rootN: %w", err)
		}
	}

	if o._aliases == nil {
		if err := enc.Encode(false); err != nil {
			return err
		}
	} else {
		if err := enc.Encode(true); err != nil {
			return err
		}
		if err := enc.Encode(o._aliases); err != nil {
			return fmt.Errorf("error encoding LeafN._aliases: %w", err)
		}
	}

	if err := enc.Encode(o._restored); err != nil {
		return fmt.Errorf("error encoding LeafN._restored: %w", err)
	}
	if err := enc.Encode(o._originalPK); err != nil {
		return fmt.Errorf("error encoding LeafN._originalPK: %w", err)
	}
	return nil
}

// UnmarshalBinary converts a structure that was created with MarshalBinary into a LeafN object.
func (o *leafNBase) UnmarshalBinary(data []byte) (err error) {
	buf := bytes.NewReader(data)
	dec := gob.NewDecoder(buf)
	return o.decodeFrom(dec)
}

func (o *leafNBase) decodeFrom(dec db.Decoder) (err error) {
	var isPtr bool

	_ = isPtr
	if err = dec.Decode(&o.id); err != nil {
		return fmt.Errorf("error decoding LeafN.id: %w", err)
	}
	if err = dec.Decode(&o.idIsLoaded); err != nil {
		return fmt.Errorf("error decoding LeafN.idIsLoaded: %w", err)
	}
	if err = dec.Decode(&o.idIsDirty); err != nil {
		return fmt.Errorf("error decoding LeafN.idIsDirty: %w", err)
	}

	if err = dec.Decode(&o.name); err != nil {
		return fmt.Errorf("error decoding LeafN.name: %w", err)
	}
	if err = dec.Decode(&o.nameIsLoaded); err != nil {
		return fmt.Errorf("error decoding LeafN.nameIsLoaded: %w", err)
	}
	if err = dec.Decode(&o.nameIsDirty); err != nil {
		return fmt.Errorf("error decoding LeafN.nameIsDirty: %w", err)
	}

	if err = dec.Decode(&o.rootNID); err != nil {
		return fmt.Errorf("error decoding LeafN.rootNID: %w", err)
	}
	if err = dec.Decode(&o.rootNIDIsLoaded); err != nil {
		return fmt.Errorf("error decoding LeafN.rootNIDIsLoaded: %w", err)
	}
	if err = dec.Decode(&o.rootNIDIsDirty); err != nil {
		return fmt.Errorf("error decoding LeafN.rootNIDIsDirty: %w", err)
	}

	if err = dec.Decode(&isPtr); err != nil {
		return fmt.Errorf("error decoding LeafN.rootN isPtr: %w", err)
	}
	if isPtr {
		if err = dec.Decode(&o.rootN); err != nil {
			return fmt.Errorf("error decoding LeafN.rootN: %w", err)
		}
	}
	if err = dec.Decode(&isPtr); err != nil {
		return fmt.Errorf("error decoding LeafN._aliases isPtr: %w", err)
	}
	if isPtr {
		if err = dec.Decode(&o._aliases); err != nil {
			return fmt.Errorf("error decoding LeafN._aliases: %w", err)
		}
	}

	if err = dec.Decode(&o._restored); err != nil {
		return fmt.Errorf("error decoding LeafN._restored: %w", err)
	}
	if err = dec.Decode(&o._originalPK); err != nil {
		return fmt.Errorf("error decoding LeafN._originalPK: %w", err)
	}
	return
}

// MarshalJSON serializes the object into a JSON object.
// Only valid data will be serialized, meaning, you can control what gets serialized by using Select to
// select only the fields you want when you query for the object. Another way to control the output
// is to call MarshalStringMap, modify the map, then encode the map.
func (o *leafNBase) MarshalJSON() (data []byte, err error) {
	v := o.MarshalStringMap()
	return json.Marshal(v)
}

// MarshalStringMap serializes the object into a string map of interfaces.
// Only valid data will be serialized, meaning, you can control what gets serialized by using Select to
// select only the fields you want when you query for the object. The keys are the same as the json keys.
func (o *leafNBase) MarshalStringMap() map[string]interface{} {
	v := make(map[string]interface{})

	if o.idIsLoaded {
		v["id"] = o.id
	}

	if o.nameIsLoaded {
		v["name"] = o.name
	}

	if o.rootNIDIsLoaded {
		v["rootNID"] = o.rootNID
	}

	if val := o.rootN; val != nil {
		v["rootN"] = val.MarshalStringMap()
	}
	for _k, _v := range o._aliases {
		v[_k] = _v
	}
	return v
}

// UnmarshalJSON unmarshalls the given json data into the LeafN. The LeafN can be a
// newly created object, or one loaded from the database.
//
// After unmarshalling, the object is not  saved. You must call Save to insert it into the database
// or update it.
//
// Unmarshalling of sub-objects, as in objects linked via foreign keys, is not currently supported.
//
// The fields it expects are:
//
//	"id" - string
//	"name" - string
func (o *leafNBase) UnmarshalJSON(data []byte) (err error) {
	var v map[string]interface{}
	if len(data) == 0 {
		return
	}
	d := json.NewDecoder(bytes.NewReader(data))
	d.UseNumber() // use a number to avoid precision errors
	if err = d.Decode(&v); err != nil {
		return err
	}
	return o.UnmarshalStringMap(v)
}

// UnmarshalStringMap will load the values from the stringmap into the object.
//
// Override this in LeafN to modify the json before sending it here.
func (o *leafNBase) UnmarshalStringMap(m map[string]interface{}) (err error) {
	for k, v := range m {
		switch k {

		case "id":
			{
				if v == nil {
					return fmt.Errorf("field %s cannot be null", k)
				}

				if s, ok := v.(string); !ok {
					return fmt.Errorf("json field %s must be a string", k)
				} else {
					o.SetID(s)
				}
			}
		case "name":
			{
				if v == nil {
					return fmt.Errorf("field %s cannot be null", k)
				}

				if s, ok := v.(string); !ok {
					return fmt.Errorf("json field %s must be a string", k)
				} else {
					o.SetName(s)
				}
			}
		case "rootNID":
			{
				if v == nil {
					return fmt.Errorf("field %s cannot be null", k)
				}

				if _, ok := m["rootN"]; ok {
					continue // importing the foreign key will remove the object
				}

				if s, ok := v.(string); !ok {
					return fmt.Errorf("json field %s must be a string", k)
				} else {
					o.SetRootNID(s)
				}
			}

		case "rootN":
			v2 := NewRootN()
			m2, ok := v.(map[string]any)
			if !ok {
				return fmt.Errorf("json field %s must be a map", k)
			}
			err = v2.UnmarshalStringMap(m2)
			if err != nil {
				return
			}
			o.SetRootN(v2)

		}
	}
	return
}
