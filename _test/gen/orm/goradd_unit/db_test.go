// Code generated by goradd-orm. DO NOT EDIT.

package goradd_unit

import (
	"bufio"
	"bytes"
	"context"
	"fmt"
	"os"
	"testing"

	"github.com/goradd/orm/_test/gen/orm/goradd_unit/node"
	"github.com/goradd/orm/pkg/test"
	"github.com/stretchr/testify/assert"
)

func TestMain(m *testing.M) {
	os.Exit(runTests(m))
}

func runTests(m *testing.M) int {
	setup(m)
	defer teardown()
	return m.Run()
}

func setup(m *testing.M) {
	fmt.Println("Setting up tests...")

	//fmt.Println(test.NewSeed())

	// uncomment the next line to re-use a previously created seed to recreate a test
	test.UseSeed(1000)

	InitDB()
}

func teardown() {
	// Cleanup logic here
	fmt.Println("Cleaning up after tests...")
}

// TestDbJson will export the entire database as JSON into a memory buffer, clear the database, then
// import the entire database from the buffer. It will then do some sanity checks.
func TestDbJson(t *testing.T) {
	return
	ctx := context.Background()

	// get single comparison objects and data sizes
	// database must be pre-populated for test

	v_AltRootUn, _ := QueryAltRootUns(ctx).
		OrderBy(node.AltRootUn().ID()).
		Get() // gets first record
	v_AutoGen, _ := QueryAutoGens(ctx).
		OrderBy(node.AutoGen().ID()).
		Get() // gets first record
	v_DoubleIndex, _ := QueryDoubleIndices(ctx).
		OrderBy(node.DoubleIndex().ID()).
		Get() // gets first record
	v_MultiParent, _ := QueryMultiParents(ctx).
		OrderBy(node.MultiParent().ID()).
		Get() // gets first record
	v_Root, _ := QueryRoots(ctx).
		OrderBy(node.Root().ID()).
		Get() // gets first record
	v_RootL, _ := QueryRootLs(ctx).
		OrderBy(node.RootL().ID()).
		Get() // gets first record
	v_RootN, _ := QueryRootNs(ctx).
		OrderBy(node.RootN().ID()).
		Get() // gets first record
	v_RootNl, _ := QueryRootNls(ctx).
		OrderBy(node.RootNl().ID()).
		Get() // gets first record
	v_RootU, _ := QueryRootUs(ctx).
		OrderBy(node.RootU().ID()).
		Get() // gets first record
	v_RootUl, _ := QueryRootUls(ctx).
		OrderBy(node.RootUl().ID()).
		Get() // gets first record
	v_RootUn, _ := QueryRootUns(ctx).
		OrderBy(node.RootUn().ID()).
		Get() // gets first record
	v_RootUnl, _ := QueryRootUnls(ctx).
		OrderBy(node.RootUnl().ID()).
		Get() // gets first record
	v_TimeoutTest, _ := QueryTimeoutTests(ctx).
		OrderBy(node.TimeoutTest().ID()).
		Get() // gets first record
	v_TwoKey, _ := QueryTwoKeys(ctx).
		OrderBy(node.TwoKey().Server(), node.TwoKey().Directory()).
		Get() // gets first record
	v_TypeTest, _ := QueryTypeTests(ctx).
		OrderBy(node.TypeTest().ID()).
		Get() // gets first record
	v_UnsupportedType, _ := QueryUnsupportedTypes(ctx).
		OrderBy(node.UnsupportedType().TypeSerial()).
		Get() // gets first record
	v_AltLeafUn, _ := QueryAltLeafUns(ctx).
		OrderBy(node.AltLeafUn().ID()).
		Get() // gets first record
	v_Leaf, _ := QueryLeafs(ctx).
		OrderBy(node.Leaf().ID()).
		Get() // gets first record
	v_LeafL, _ := QueryLeafLs(ctx).
		OrderBy(node.LeafL().ID()).
		Get() // gets first record
	v_LeafN, _ := QueryLeafNs(ctx).
		OrderBy(node.LeafN().ID()).
		Get() // gets first record
	v_LeafNl, _ := QueryLeafNls(ctx).
		OrderBy(node.LeafNl().ID()).
		Get() // gets first record
	v_LeafU, _ := QueryLeafUs(ctx).
		OrderBy(node.LeafU().ID()).
		Get() // gets first record
	v_LeafUl, _ := QueryLeafUls(ctx).
		OrderBy(node.LeafUl().ID()).
		Get() // gets first record
	v_LeafUn, _ := QueryLeafUns(ctx).
		OrderBy(node.LeafUn().ID()).
		Get() // gets first record
	v_LeafUnl, _ := QueryLeafUnls(ctx).
		OrderBy(node.LeafUnl().ID()).
		Get() // gets first record
	v_AltRootUnCount, _ := CountAltRootUns(ctx)
	v_AutoGenCount, _ := CountAutoGens(ctx)
	v_DoubleIndexCount, _ := CountDoubleIndices(ctx)
	v_MultiParentCount, _ := CountMultiParents(ctx)
	v_RootCount, _ := CountRoots(ctx)
	v_RootLCount, _ := CountRootLs(ctx)
	v_RootNCount, _ := CountRootNs(ctx)
	v_RootNlCount, _ := CountRootNls(ctx)
	v_RootUCount, _ := CountRootUs(ctx)
	v_RootUlCount, _ := CountRootUls(ctx)
	v_RootUnCount, _ := CountRootUns(ctx)
	v_RootUnlCount, _ := CountRootUnls(ctx)
	v_TimeoutTestCount, _ := CountTimeoutTests(ctx)
	v_TwoKeyCount, _ := CountTwoKeys(ctx)
	v_TypeTestCount, _ := CountTypeTests(ctx)
	v_UnsupportedTypeCount, _ := CountUnsupportedTypes(ctx)
	v_AltLeafUnCount, _ := CountAltLeafUns(ctx)
	v_LeafCount, _ := CountLeafs(ctx)
	v_LeafLCount, _ := CountLeafLs(ctx)
	v_LeafNCount, _ := CountLeafNs(ctx)
	v_LeafNlCount, _ := CountLeafNls(ctx)
	v_LeafUCount, _ := CountLeafUs(ctx)
	v_LeafUlCount, _ := CountLeafUls(ctx)
	v_LeafUnCount, _ := CountLeafUns(ctx)
	v_LeafUnlCount, _ := CountLeafUnls(ctx)

	var b bytes.Buffer
	w := bufio.NewWriter(&b)
	assert.NoError(t, JsonEncodeAll(ctx, w))

	ClearAll(ctx)
	assert.Equal(t, 0, func() int { i, _ := CountAltRootUns(ctx); return i }())
	assert.Equal(t, 0, func() int { i, _ := CountAutoGens(ctx); return i }())
	assert.Equal(t, 0, func() int { i, _ := CountDoubleIndices(ctx); return i }())
	assert.Equal(t, 0, func() int { i, _ := CountMultiParents(ctx); return i }())
	assert.Equal(t, 0, func() int { i, _ := CountRoots(ctx); return i }())
	assert.Equal(t, 0, func() int { i, _ := CountRootLs(ctx); return i }())
	assert.Equal(t, 0, func() int { i, _ := CountRootNs(ctx); return i }())
	assert.Equal(t, 0, func() int { i, _ := CountRootNls(ctx); return i }())
	assert.Equal(t, 0, func() int { i, _ := CountRootUs(ctx); return i }())
	assert.Equal(t, 0, func() int { i, _ := CountRootUls(ctx); return i }())
	assert.Equal(t, 0, func() int { i, _ := CountRootUns(ctx); return i }())
	assert.Equal(t, 0, func() int { i, _ := CountRootUnls(ctx); return i }())
	assert.Equal(t, 0, func() int { i, _ := CountTimeoutTests(ctx); return i }())
	assert.Equal(t, 0, func() int { i, _ := CountTwoKeys(ctx); return i }())
	assert.Equal(t, 0, func() int { i, _ := CountTypeTests(ctx); return i }())
	assert.Equal(t, 0, func() int { i, _ := CountUnsupportedTypes(ctx); return i }())
	assert.Equal(t, 0, func() int { i, _ := CountAltLeafUns(ctx); return i }())
	assert.Equal(t, 0, func() int { i, _ := CountLeafs(ctx); return i }())
	assert.Equal(t, 0, func() int { i, _ := CountLeafLs(ctx); return i }())
	assert.Equal(t, 0, func() int { i, _ := CountLeafNs(ctx); return i }())
	assert.Equal(t, 0, func() int { i, _ := CountLeafNls(ctx); return i }())
	assert.Equal(t, 0, func() int { i, _ := CountLeafUs(ctx); return i }())
	assert.Equal(t, 0, func() int { i, _ := CountLeafUls(ctx); return i }())
	assert.Equal(t, 0, func() int { i, _ := CountLeafUns(ctx); return i }())
	assert.Equal(t, 0, func() int { i, _ := CountLeafUnls(ctx); return i }())

	r := bufio.NewReader(&b)
	assert.NoError(t, JsonDecodeAll(ctx, r))

	if v_AltRootUn != nil {
		obj, _ := QueryAltRootUns(ctx).
			OrderBy(node.AltRootUn().ID()).
			Get()
		assertEqualFieldsAltRootUn(t, v_AltRootUn, obj)
	}
	if v_AutoGen != nil {
		obj, _ := QueryAutoGens(ctx).
			OrderBy(node.AutoGen().ID()).
			Get()
		assertEqualFieldsAutoGen(t, v_AutoGen, obj)
	}
	if v_DoubleIndex != nil {
		obj, _ := QueryDoubleIndices(ctx).
			OrderBy(node.DoubleIndex().ID()).
			Get()
		assertEqualFieldsDoubleIndex(t, v_DoubleIndex, obj)
	}
	if v_MultiParent != nil {
		obj, _ := QueryMultiParents(ctx).
			OrderBy(node.MultiParent().ID()).
			Get()
		assertEqualFieldsMultiParent(t, v_MultiParent, obj)
	}
	if v_Root != nil {
		obj, _ := QueryRoots(ctx).
			OrderBy(node.Root().ID()).
			Get()
		assertEqualFieldsRoot(t, v_Root, obj)
	}
	if v_RootL != nil {
		obj, _ := QueryRootLs(ctx).
			OrderBy(node.RootL().ID()).
			Get()
		assertEqualFieldsRootL(t, v_RootL, obj)
	}
	if v_RootN != nil {
		obj, _ := QueryRootNs(ctx).
			OrderBy(node.RootN().ID()).
			Get()
		assertEqualFieldsRootN(t, v_RootN, obj)
	}
	if v_RootNl != nil {
		obj, _ := QueryRootNls(ctx).
			OrderBy(node.RootNl().ID()).
			Get()
		assertEqualFieldsRootNl(t, v_RootNl, obj)
	}
	if v_RootU != nil {
		obj, _ := QueryRootUs(ctx).
			OrderBy(node.RootU().ID()).
			Get()
		assertEqualFieldsRootU(t, v_RootU, obj)
	}
	if v_RootUl != nil {
		obj, _ := QueryRootUls(ctx).
			OrderBy(node.RootUl().ID()).
			Get()
		assertEqualFieldsRootUl(t, v_RootUl, obj)
	}
	if v_RootUn != nil {
		obj, _ := QueryRootUns(ctx).
			OrderBy(node.RootUn().ID()).
			Get()
		assertEqualFieldsRootUn(t, v_RootUn, obj)
	}
	if v_RootUnl != nil {
		obj, _ := QueryRootUnls(ctx).
			OrderBy(node.RootUnl().ID()).
			Get()
		assertEqualFieldsRootUnl(t, v_RootUnl, obj)
	}
	if v_TimeoutTest != nil {
	}
	if v_TwoKey != nil {
		obj, _ := QueryTwoKeys(ctx).
			OrderBy(node.TwoKey().Server(), node.TwoKey().Directory()).
			Get()
		assertEqualFieldsTwoKey(t, v_TwoKey, obj)
	}
	if v_TypeTest != nil {
		obj, _ := QueryTypeTests(ctx).
			OrderBy(node.TypeTest().ID()).
			Get()
		assertEqualFieldsTypeTest(t, v_TypeTest, obj)
	}
	if v_UnsupportedType != nil {
		obj, _ := QueryUnsupportedTypes(ctx).
			OrderBy(node.UnsupportedType().TypeSerial()).
			Get()
		assertEqualFieldsUnsupportedType(t, v_UnsupportedType, obj)
	}
	if v_AltLeafUn != nil {
		obj, _ := QueryAltLeafUns(ctx).
			OrderBy(node.AltLeafUn().ID()).
			Get()
		assertEqualFieldsAltLeafUn(t, v_AltLeafUn, obj)
	}
	if v_Leaf != nil {
		obj, _ := QueryLeafs(ctx).
			OrderBy(node.Leaf().ID()).
			Get()
		assertEqualFieldsLeaf(t, v_Leaf, obj)
	}
	if v_LeafL != nil {
		obj, _ := QueryLeafLs(ctx).
			OrderBy(node.LeafL().ID()).
			Get()
		assertEqualFieldsLeafL(t, v_LeafL, obj)
	}
	if v_LeafN != nil {
		obj, _ := QueryLeafNs(ctx).
			OrderBy(node.LeafN().ID()).
			Get()
		assertEqualFieldsLeafN(t, v_LeafN, obj)
	}
	if v_LeafNl != nil {
		obj, _ := QueryLeafNls(ctx).
			OrderBy(node.LeafNl().ID()).
			Get()
		assertEqualFieldsLeafNl(t, v_LeafNl, obj)
	}
	if v_LeafU != nil {
		obj, _ := QueryLeafUs(ctx).
			OrderBy(node.LeafU().ID()).
			Get()
		assertEqualFieldsLeafU(t, v_LeafU, obj)
	}
	if v_LeafUl != nil {
		obj, _ := QueryLeafUls(ctx).
			OrderBy(node.LeafUl().ID()).
			Get()
		assertEqualFieldsLeafUl(t, v_LeafUl, obj)
	}
	if v_LeafUn != nil {
		obj, _ := QueryLeafUns(ctx).
			OrderBy(node.LeafUn().ID()).
			Get()
		assertEqualFieldsLeafUn(t, v_LeafUn, obj)
	}
	if v_LeafUnl != nil {
		obj, _ := QueryLeafUnls(ctx).
			OrderBy(node.LeafUnl().ID()).
			Get()
		assertEqualFieldsLeafUnl(t, v_LeafUnl, obj)
	}
	assert.Equal(t, v_AltRootUnCount, func() int { i, _ := CountAltRootUns(ctx); return i }())
	assert.Equal(t, v_AutoGenCount, func() int { i, _ := CountAutoGens(ctx); return i }())
	assert.Equal(t, v_DoubleIndexCount, func() int { i, _ := CountDoubleIndices(ctx); return i }())
	assert.Equal(t, v_MultiParentCount, func() int { i, _ := CountMultiParents(ctx); return i }())
	assert.Equal(t, v_RootCount, func() int { i, _ := CountRoots(ctx); return i }())
	assert.Equal(t, v_RootLCount, func() int { i, _ := CountRootLs(ctx); return i }())
	assert.Equal(t, v_RootNCount, func() int { i, _ := CountRootNs(ctx); return i }())
	assert.Equal(t, v_RootNlCount, func() int { i, _ := CountRootNls(ctx); return i }())
	assert.Equal(t, v_RootUCount, func() int { i, _ := CountRootUs(ctx); return i }())
	assert.Equal(t, v_RootUlCount, func() int { i, _ := CountRootUls(ctx); return i }())
	assert.Equal(t, v_RootUnCount, func() int { i, _ := CountRootUns(ctx); return i }())
	assert.Equal(t, v_RootUnlCount, func() int { i, _ := CountRootUnls(ctx); return i }())
	assert.Equal(t, v_TimeoutTestCount, func() int { i, _ := CountTimeoutTests(ctx); return i }())
	assert.Equal(t, v_TwoKeyCount, func() int { i, _ := CountTwoKeys(ctx); return i }())
	assert.Equal(t, v_TypeTestCount, func() int { i, _ := CountTypeTests(ctx); return i }())
	assert.Equal(t, v_UnsupportedTypeCount, func() int { i, _ := CountUnsupportedTypes(ctx); return i }())
	assert.Equal(t, v_AltLeafUnCount, func() int { i, _ := CountAltLeafUns(ctx); return i }())
	assert.Equal(t, v_LeafCount, func() int { i, _ := CountLeafs(ctx); return i }())
	assert.Equal(t, v_LeafLCount, func() int { i, _ := CountLeafLs(ctx); return i }())
	assert.Equal(t, v_LeafNCount, func() int { i, _ := CountLeafNs(ctx); return i }())
	assert.Equal(t, v_LeafNlCount, func() int { i, _ := CountLeafNls(ctx); return i }())
	assert.Equal(t, v_LeafUCount, func() int { i, _ := CountLeafUs(ctx); return i }())
	assert.Equal(t, v_LeafUlCount, func() int { i, _ := CountLeafUls(ctx); return i }())
	assert.Equal(t, v_LeafUnCount, func() int { i, _ := CountLeafUns(ctx); return i }())
	assert.Equal(t, v_LeafUnlCount, func() int { i, _ := CountLeafUnls(ctx); return i }())
}
