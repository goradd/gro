// Code generated by goradd-orm. DO NOT EDIT.

package goradd_unit

import (
	"bytes"
	"context"
	"encoding/gob"
	"encoding/json"
	"fmt"
	"unicode/utf8"

	"github.com/goradd/anyutil"
	"github.com/goradd/orm/_test/gen/orm/goradd_unit/node"
	"github.com/goradd/orm/pkg/broadcast"
	"github.com/goradd/orm/pkg/db"
	"github.com/goradd/orm/pkg/op"
	"github.com/goradd/orm/pkg/query"
)

// RootUnBase is embedded in a RootUn object and provides the ORM access to the database.
// The member variables of the structure are private and should not normally be accessed by the RootUn embedder.
// Instead, use the accessor functions.
type rootUnBase struct {
	id           string
	idIsLoaded   bool
	idIsDirty    bool
	name         string
	nameIsLoaded bool
	nameIsDirty  bool

	// Reverse reference objects.
	revLeafUn        *LeafUn
	revLeafUnIsDirty bool // is a new one being associated

	// Custom aliases, if specified
	_aliases map[string]any

	// Indicates whether this is a new object, or one loaded from the database. Used by Save to know whether to Insert or Update.
	_restored bool

	_originalPK string
}

// IDs used to access the RootUn object fields by name using the Get function.
// doc: type=RootUn
const (
	RootUn_ID    = `ID`
	RootUn_Name  = `Name`
	RootUnLeafUn = `LeafUn`
)

const RootUnIDMaxLength = 32    // The number of runes the column can hold
const RootUnNameMaxLength = 100 // The number of runes the column can hold

// Initialize or re-initialize a RootUn database object to default values.
// The primary key will get a temporary negative number which will be replaced when the object is saved.
// Multiple calls to Initialize are not guaranteed to create sequential values for the primary key.
func (o *rootUnBase) Initialize() {
	o.id = db.TemporaryPrimaryKey()
	o.idIsLoaded = true
	o.idIsDirty = false

	o.name = ""
	o.nameIsLoaded = false
	o.nameIsDirty = false

	// Reverse reference objects.

	o.revLeafUn = nil
	o.revLeafUnIsDirty = false

	o._aliases = nil
	o._restored = false
}

// PrimaryKey returns the current value of the primary key field.
func (o *rootUnBase) PrimaryKey() string {
	return o.id
}

// OriginalPrimaryKey returns the value of the primary key that was originally loaded into the object when it was
// read from the database.
func (o *rootUnBase) OriginalPrimaryKey() string {
	return o._originalPK
}

// Copy copies most fields to a new RootUn object.
// Forward reference ids will be copied, but reverse and many-many references will not.
// Attached objects will not be included in the copy.
// Automatically generated fields will not be included in the copy.
// The primary key field will not be copied, since it is normally auto-generated.
// Call Save() on the new object to save it into the database.
// Copy might panic if any fields in the database were set to a size larger than the
// maximum size through a process that accessed the database outside of the ORM.
func (o *rootUnBase) Copy() (newObject *RootUn) {
	newObject = NewRootUn()
	if o.idIsLoaded {
		newObject.SetID(o.id)
	}
	if o.nameIsLoaded {
		newObject.SetName(o.name)
	}
	return
}

// ID returns the value of ID.
func (o *rootUnBase) ID() string {
	if o._restored && !o.idIsLoaded {
		panic("ID was not selected in the last query and has not been set, and so is not valid")
	}
	return o.id
}

// IDIsLoaded returns true if the value was loaded from the database or has been set.
func (o *rootUnBase) IDIsLoaded() bool {
	return o.idIsLoaded
}

// SetID sets the value of ID in the object, to be saved later in the database using the Save() function.
// Normally you will not need to call this function, since the ID value is automatically generated by the
// database driver. Exceptions might include importing data to a new database, or correcting primary key conflicts when
// merging data.
// You cannot change a primary key for a record that has been written to the database. While SQL databases will
// allow it, NoSql databases will not. Save a copy and delete this one instead.
func (o *rootUnBase) SetID(v string) {
	if o._restored {
		panic("error: Do not change a primary key for a record that has been saved. Instead, save a copy and delete the original.")
	}
	if utf8.RuneCountInString(v) > RootUnIDMaxLength {
		panic("attempted to set RootUn.ID to a value larger than its maximum length in runes")
	}

	o.idIsLoaded = true
	o.id = v
	o.idIsDirty = true
}

// Name returns the value of Name.
func (o *rootUnBase) Name() string {
	if o._restored && !o.nameIsLoaded {
		panic("Name was not selected in the last query and has not been set, and so is not valid")
	}
	return o.name
}

// NameIsLoaded returns true if the value was loaded from the database or has been set.
func (o *rootUnBase) NameIsLoaded() bool {
	return o.nameIsLoaded
}

// SetName sets the value of Name in the object, to be saved later in the database using the Save() function.
func (o *rootUnBase) SetName(v string) {
	if utf8.RuneCountInString(v) > RootUnNameMaxLength {
		panic("attempted to set RootUn.Name to a value larger than its maximum length in runes")
	}
	if o._restored &&
		o.nameIsLoaded && // if it was not selected, then make sure it gets set, since our end comparison won't be valid
		o.name == v {
		// no change
		return
	}

	o.nameIsLoaded = true
	o.name = v
	o.nameIsDirty = true
}

// GetAlias returns the value for the Alias node aliasKey that was returned in the most
// recent query.
func (o *rootUnBase) GetAlias(aliasKey string) query.AliasValue {
	if a, ok := o._aliases[aliasKey]; ok {
		return query.NewAliasValue(a)
	} else {
		panic("Alias " + aliasKey + " not found.")
	}
}

// IsNew returns true if the object will create a new record when saved.
func (o *rootUnBase) IsNew() bool {
	return !o._restored
}

// LeafUn returns the connected LeafUn object, if one was loaded.
// Otherwise, it will return nil.
func (o *rootUnBase) LeafUn() *LeafUn {
	if o.revLeafUn == nil {
		return nil
	}
	return o.revLeafUn
}

// LoadLeafUn returns the connected LeafUn object, if one was loaded.
// Otherwise, it will load a new one and return it.
func (o *rootUnBase) LoadLeafUn(ctx context.Context) (*LeafUn, error) {
	if o.revLeafUn != nil && o.revLeafUn.IsDirty() {
		panic("The LeafUn has changed. You must save it first before changing to a different one.")
	}
	var err error
	if o.revLeafUn == nil {
		pk := o.ID()
		o.revLeafUn, err = LoadLeafUnByRootUnID(ctx, pk)
	}
	return o.revLeafUn, err
}

// SetLeafUn associates obj with this RootUn
// through the reverse relationship in LeafUn.RootUnID.
//
// The association is temporary until you call Save().
// Since this is a unique relationship, if a different LeafUn object is currently pointing to this RootUn,
// that LeafUn's RootUnID value will be set to null when Save is called.
// If you did not use a join to query the attached LeafUn in the first place, used a conditional join,
// or joined with an expansion, be particularly careful, since you may be inadvertently changing an item
// that is not currently attached to this RootUn.
func (o *rootUnBase) SetLeafUn(obj *LeafUn) {
	if o.revLeafUn != nil && o.revLeafUn.IsDirty() {
		panic("The LeafUn has changed. You must save it first before changing to a different one.")
	}
	o.revLeafUn = obj
	o.revLeafUnIsDirty = true
}

// LoadRootUn returns a RootUn from the database.
// selectNodes lets you provide nodes for selecting specific fields or additional fields from related tables.
// See [RootUnsBuilder.Select] for more info.
func LoadRootUn(ctx context.Context, id string, selectNodes ...query.Node) (*RootUn, error) {
	return queryRootUns(ctx).
		Where(op.Equal(node.RootUn().ID(), id)).
		Select(selectNodes...).
		Get()
}

// HasRootUn returns true if a RootUn with the given primary key exists in the database.
// doc: type=RootUn
func HasRootUn(ctx context.Context, id string) (bool, error) {
	v, err := queryRootUns(ctx).
		Where(op.Equal(node.RootUn().ID(), id)).
		Count()
	return v > 0, err
}

// The RootUnBuilder uses a builder pattern to create a query on the database.
// Start a query by calling QueryRootUns, which will select all
// the RootUn object in the database. Then filter and arrange those objects
// by calling Where, Select, etc.
// End a query by calling either Load, LoadI, LoadCursor, Get, or Count.
// A RootUnBuilder stores the context it will use to perform the query, and thus is
// meant to be a short-lived object. You should not save a query builder for later use.
type RootUnBuilder interface {
	// Where adds a condition to filter what gets selected.
	// Calling Where multiple times will AND the conditions together.
	// See the op package for the usable conditions.
	Where(c query.Node) RootUnBuilder

	// OrderBy specifies how the resulting data should be sorted.
	// By default, the given nodes are sorted in ascending order.
	// Add Descending() to the node to specify that it should be sorted in descending order.
	OrderBy(nodes ...query.Sorter) RootUnBuilder

	// Limit will return a subset of the data, limited to the offset and number of rows specified.
	// For large data sets and specific types of queries, this can be slow, because it will perform
	// the entire query before computing the limit.
	// You cannot limit a query that has selected a "many" relationship.
	Limit(maxRowCount int, offset int) RootUnBuilder

	// Select performs two functions:
	//  - Passing a table type node will join the object or objects from that table to this object.
	//  - Passing a column node will optimize the query to only return the specified fields.
	// Once you select at least one column, you must select all the columns that you want in the result.
	// Some fields, like primary keys, are always selected.
	// If you are using a GroupBy, you must select the fields in the GroupBy.
	Select(nodes ...query.Node) RootUnBuilder

	// Calculation adds a calculation described by operation with alias.
	// After the query, you can read the data using GetAlias() on the object identified by base.
	Calculation(base query.TableNodeI, alias string, operation query.OperationNodeI) RootUnBuilder

	// Distinct removes duplicates from the results of the query.
	// Adding a Select() is required when using Distinct.
	Distinct() RootUnBuilder

	// GroupBy controls how results are grouped when using aggregate functions with Calculation.
	GroupBy(nodes ...query.Node) RootUnBuilder

	// Having does additional filtering on the results of the query after the query is performed.
	Having(node query.Node) RootUnBuilder

	// Load terminates the query builder, performs the query, and returns a slice of RootUn objects.
	// If there are any errors, nil is returned along with the error.
	// If no results come back from the query, it will return a non-nil empty slice.
	Load() ([]*RootUn, error)
	// Load terminates the query builder, performs the query, and returns a slice of interfaces.
	// This can then satisfy a general interface that loads arrays of objects.
	// If there are any errors, nil is returned along with the error.
	// If no results come back from the query, it will return a non-nil empty slice.
	LoadI() ([]query.OrmObj, error)

	// LoadCursor terminates the query builder, performs the query, and returns a cursor to the query.
	//
	// A query cursor is useful for dealing with large amounts of query results. However, there are some
	// limitations to its use. When working with SQL databases, you cannot use a cursor while querying
	// many-to-many or reverse relationships that will create an array of values.
	//
	// Call Next() on the returned cursor object to step through the results. Make sure you call Close
	// on the cursor object when you are done. You should use
	//   defer cursor.Close()
	// to make sure the cursor gets closed.
	LoadCursor() (rootUnsCursor, error)

	// Get is a convenience method to return only the first item found in a query.
	// The entire query is performed, so you should generally use this only if you know
	// you are selecting on one or very few items.
	// If an error occurs, or no results are found, a nil is returned.
	Get() (*RootUn, error)

	// Count terminates a query and returns just the number of items in the result.
	// If you have Select or Calculation columns in the query, it will count NULL results as well.
	// To not count NULL values, use Where in the builder with a NotNull operation.
	// To count distinct combinations of items, call Distinct() on the builder.
	Count() (int, error)
}

type rootUnQueryBuilder struct {
	builder *query.Builder
}

func newRootUnBuilder(ctx context.Context) RootUnBuilder {
	b := rootUnQueryBuilder{
		builder: query.NewBuilder(ctx, node.RootUn()),
	}
	return &b
}

// Load terminates the query builder, performs the query, and returns a slice of RootUn objects.
// If there are any errors, nil is returned and the specific error is stored in the context.
// If no results come back from the query, it will return a non-nil empty slice.
func (b *rootUnQueryBuilder) Load() (rootUns []*RootUn, err error) {
	b.builder.Command = query.BuilderCommandLoad
	database := db.GetDatabase("goradd_unit")
	var results any
	results, err = database.BuilderQuery(b.builder)
	if results == nil || err != nil {
		return
	}
	for _, item := range results.([]map[string]any) {
		o := new(RootUn)
		o.load(item, o)
		rootUns = append(rootUns, o)
	}
	return
}

// Load terminates the query builder, performs the query, and returns a slice of interfaces.
// This can then satisfy a variety of interfaces that load arrays of objects, including KeyLabeler.
// If there are any errors, nil is returned and the specific error is stored in the context.
// If no results come back from the query, it will return a non-nil empty slice.
func (b *rootUnQueryBuilder) LoadI() (rootUns []query.OrmObj, err error) {
	b.builder.Command = query.BuilderCommandLoad
	database := db.GetDatabase("goradd_unit")
	var results any
	results, err = database.BuilderQuery(b.builder)
	if results == nil || err != nil {
		return
	}
	for _, item := range results.([]map[string]any) {
		o := new(RootUn)
		o.load(item, o)
		rootUns = append(rootUns, o)
	}
	return
}

// LoadCursor terminates the query builder, performs the query, and returns a cursor to the query.
//
// A query cursor is useful for dealing with large amounts of query results. However, there are some
// limitations to its use. When working with SQL databases, you cannot use a cursor while querying
// many-to-many or reverse relationships that will create an array of values.
//
// Call Next() on the returned cursor object to step through the results. Make sure you call Close
// on the cursor object when you are done. You should use
//
//	defer cursor.Close()
//
// to make sure the cursor gets closed.
func (b *rootUnQueryBuilder) LoadCursor() (rootUnsCursor, error) {
	b.builder.Command = query.BuilderCommandLoadCursor
	database := db.GetDatabase("goradd_unit")
	result, err := database.BuilderQuery(b.builder)
	cursor := result.(query.CursorI)

	return rootUnsCursor{cursor}, err
}

type rootUnsCursor struct {
	query.CursorI
}

// Next returns the current RootUn object and moves the cursor to the next one.
//
// If there are no more records, it returns nil.
func (c rootUnsCursor) Next() (*RootUn, error) {
	if c.CursorI == nil {
		return nil, nil
	}

	row, err := c.CursorI.Next()
	if row == nil || err != nil {
		return nil, err
	}
	o := new(RootUn)
	o.load(row, o)
	return o, nil
}

// Get is a convenience method to return only the first item found in a query.
// The entire query is performed, so you should generally use this only if you know
// you are selecting on one or very few items.
// If an error occurs, or no results are found, a nil is returned.
func (b *rootUnQueryBuilder) Get() (*RootUn, error) {
	results, err := b.Load()
	if err != nil || len(results) == 0 {
		return nil, err
	}
	return results[0], nil
}

// Where adds a condition to filter what gets selected.
// Calling Where multiple times will AND the conditions together.
func (b *rootUnQueryBuilder) Where(c query.Node) RootUnBuilder {
	b.builder.Where(c)
	return b
}

// OrderBy specifies how the resulting data should be sorted.
// By default, the given nodes are sorted in ascending order.
// Add Descending() to the node to specify that it should be sorted in descending order.
func (b *rootUnQueryBuilder) OrderBy(nodes ...query.Sorter) RootUnBuilder {
	b.builder.OrderBy(nodes...)
	return b
}

// Limit will return a subset of the data, limited to the offset and number of rows specified.
// For large data sets and specific types of queries, this can be slow, because it will perform
// the entire query before computing the limit.
// You cannot limit a query that has embedded arrays.
func (b *rootUnQueryBuilder) Limit(maxRowCount int, offset int) RootUnBuilder {
	b.builder.Limit(maxRowCount, offset)
	return b
}

// Select specifies what specific columns will be loaded with data.
// By default, all the columns of the root_un table will be queried and loaded.
// If nodes contains columns from the root_un table, that will limit the columns queried and loaded to only those columns.
// If related tables are specified, then all the columns from those tables are queried, selected and joined to the result.
// If columns in related tables are specified, then only those columns will be queried and loaded.
// Depending on the query, additional columns may automatically be added to the query. In particular, primary key columns
// will be added in most situations. The exception to this would be in distinct queries, group by queries, or subqueries.
func (b *rootUnQueryBuilder) Select(nodes ...query.Node) RootUnBuilder {
	b.builder.Select(nodes...)
	return b
}

// Calculation adds operation as an aliased value onto base.
// After the query, you can read the data by passing alias to GetAlias on the returned object.
func (b *rootUnQueryBuilder) Calculation(base query.TableNodeI, alias string, operation query.OperationNodeI) RootUnBuilder {
	b.builder.Calculation(base, alias, operation)
	return b
}

// Distinct removes duplicates from the results of the query.
// Adding a Select() is usually required.
func (b *rootUnQueryBuilder) Distinct() RootUnBuilder {
	b.builder.Distinct()
	return b
}

// GroupBy controls how results are grouped when using aggregate functions with Calculation.
func (b *rootUnQueryBuilder) GroupBy(nodes ...query.Node) RootUnBuilder {
	b.builder.GroupBy(nodes...)
	return b
}

// Having does additional filtering on the results of the query after the query is performed.
func (b *rootUnQueryBuilder) Having(node query.Node) RootUnBuilder {
	b.builder.Having(node)
	return b
}

// Count terminates a query and returns just the number of items in the result.
// If you have Select or Calculation columns in the query, it will count NULL results as well.
// To not count NULL values, use Where in the builder with a NotNull operation.
// To count distinct combinations of items, call Distinct() on the builder.
func (b *rootUnQueryBuilder) Count() (int, error) {
	b.builder.Command = query.BuilderCommandCount
	database := db.GetDatabase("goradd_unit")
	results, err := database.BuilderQuery(b.builder)
	if results == nil || err != nil {
		return 0, err
	}
	return results.(int), nil
}

// CountRootUns returns the total number of items in the root_un table.
func CountRootUns(ctx context.Context) (int, error) {
	return QueryRootUns(ctx).Count()
}

// CountRootUnsByID queries the database and returns the number of RootUn objects that
// have id.
// doc: type=RootUn
func CountRootUnsByID(ctx context.Context, id string) (int, error) {
	return QueryRootUns(ctx).Where(op.Equal(node.RootUn().ID(), id)).Count()
}

// CountRootUnsByName queries the database and returns the number of RootUn objects that
// have name.
// doc: type=RootUn
func CountRootUnsByName(ctx context.Context, name string) (int, error) {
	return QueryRootUns(ctx).Where(op.Equal(node.RootUn().Name(), name)).Count()
}

// load is the private loader that transforms data coming from the database into a tree structure reflecting the relationships
// between the object chain requested by the user in the query.
func (o *rootUnBase) load(m map[string]interface{}, objThis *RootUn) {

	if v, ok := m["id"]; ok && v != nil {
		if o.id, ok = v.(string); ok {
			o.idIsLoaded = true
			o.idIsDirty = false

			o._originalPK = o.id

		} else {
			panic("Wrong type found for id.")
		}
	} else {
		o.idIsLoaded = false
		o.id = ""
		o.idIsDirty = false
	}

	if v, ok := m["name"]; ok && v != nil {
		if o.name, ok = v.(string); ok {
			o.nameIsLoaded = true
			o.nameIsDirty = false

		} else {
			panic("Wrong type found for name.")
		}
	} else {
		o.nameIsLoaded = false
		o.name = ""
		o.nameIsDirty = false
	}

	// Reverse references

	if v, ok := m["LeafUn"]; ok {
		if v2, ok2 := v.(map[string]any); ok2 {
			o.revLeafUn = new(LeafUn)
			o.revLeafUn.load(v2, o.revLeafUn)
			o.revLeafUnIsDirty = false
		} else {
			panic("Wrong type found for rootUnID object.")
		}
	} else {
		o.revLeafUn = nil
		o.revLeafUnIsDirty = false
	}

	if v, ok := m["aliases_"]; ok {
		o._aliases = v.(map[string]any)
	}

	o._restored = true

}

// save will update or insert the object, depending on the state of the object.
func (o *rootUnBase) save(ctx context.Context) error {
	if o._restored {
		return o.update(ctx)
	} else {
		return o.insert(ctx)
	}
}

// update will update the values in the database, saving any changed values.
// If the table has auto-generated values, those will be updated automatically.
func (o *rootUnBase) update(ctx context.Context) error {
	if !o._restored {
		panic("cannot update a record that was not originally read from the database.")
	}
	if !o.IsDirty() {
		return nil // nothing to save
	}

	var modifiedFields map[string]interface{}

	d := Database()
	err := db.ExecuteTransaction(ctx, d, func() error {

		modifiedFields = getRootUnUpdateFields(o)
		if len(modifiedFields) != 0 {
			var err2 error

			_, err2 = d.Update(ctx, "root_un", "id", o._originalPK, modifiedFields, "", 0)
			if err2 != nil {
				return err2
			}
		}

		if o.revLeafUnIsDirty {
			// relation connection changed

			if obj, err := QueryLeafUns(ctx).
				Where(op.Equal(node.LeafUn().RootUnID(), o.PrimaryKey())).
				Select(node.LeafUn().RootUnID()).
				Get(); err != nil {
				return err
			} else if obj != nil &&
				(o.revLeafUn == nil ||
					obj.PrimaryKey() != o.revLeafUn.PrimaryKey()) {

				obj.SetRootUnIDToNull()
				if err = obj.Save(ctx); err != nil {
					return err
				}
			}

			if o.revLeafUn != nil {
				o.revLeafUn.rootUnIDIsDirty = true // force a change in case data is stale
				o.revLeafUn.SetRootUnID(o.PrimaryKey())
				if err := o.revLeafUn.Save(ctx); err != nil {
					return err
				}
			}

		} else {

			// save related object in case internal values changed
			if o.revLeafUn != nil {
				if err := o.revLeafUn.Save(ctx); err != nil {
					return err
				}
			}
		}

		return nil
	}) // transaction
	if err != nil {
		return err
	}

	o.resetDirtyStatus()
	if len(modifiedFields) != 0 {
		broadcast.Update(ctx, "goradd_unit", "root_un", o._originalPK, anyutil.SortedKeys(modifiedFields)...)
	}

	return nil
}

// insert will insert the object into the database. Related items will be saved.
func (o *rootUnBase) insert(ctx context.Context) (err error) {
	var insertFields map[string]interface{}
	d := Database()
	err = db.ExecuteTransaction(ctx, d, func() error {

		if !o.nameIsLoaded {
			panic("a value for Name is required, and there is no default value. Call SetName() before inserting the record.")
		}
		insertFields = getRootUnInsertFields(o)
		var newPk string

		newPk, err = d.Insert(ctx, "root_un", "id", insertFields)
		if err != nil {
			return err
		}
		o.id = newPk
		o._originalPK = newPk
		o.idIsLoaded = true

		if o.revLeafUn != nil {
			o.revLeafUn.SetRootUnID(newPk)
			if err = o.revLeafUn.Save(ctx); err != nil {
				return err
			}
		}

		return nil

	}) // transaction

	if err != nil {
		return
	}

	o.resetDirtyStatus()
	o._restored = true
	broadcast.Insert(ctx, "goradd_unit", "root_un", o.PrimaryKey())
	return
}

// getUpdateFields returns the database columns that will be sent to the update process.
// This will include timestamp fields only if some other column has changed.
func (o *rootUnBase) getUpdateFields() (fields map[string]interface{}) {
	fields = map[string]interface{}{}
	if o.idIsDirty {
		fields["id"] = o.id
	}
	if o.nameIsDirty {
		fields["name"] = o.name
	}
	return
}

// getInsertFields returns the fields that will be specified in an insert operation.
// Optional fields that have not been set and have no default will be returned as nil.
// NoSql databases should interpret this as no value. Sql databases should interpret this as
// explicitly setting a NULL value, which would override any database specific default value.
// Auto-generated fields will be returned with their generated values, except AutoPK fields, which are generated by the
// database driver and updated after the insert.
func (o *rootUnBase) getInsertFields() (fields map[string]interface{}) {
	fields = map[string]interface{}{}
	if o.idIsDirty {
		fields["id"] = o.id
	}

	fields["name"] = o.name
	return
}

// Delete deletes the record from the database.
//
// An associated LeafUn will have its RootUnID field set to NULL.
func (o *rootUnBase) Delete(ctx context.Context) (err error) {
	if o == nil {
		return // allow deleting of a nil object to be a noop
	}
	if !o._restored {
		panic("Cannot delete a record that has no primary key value.")
	}
	d := Database()
	err = db.ExecuteTransaction(ctx, d, func() error {

		{
			// Set the related objects pointer to us to NULL in the database
			obj, err := QueryLeafUns(ctx).
				Where(op.Equal(node.LeafUn().RootUnID(), o.id)).
				Select(node.LeafUn().RootUnID()).
				Get()
			if err != nil {
				return err
			}
			if obj != nil {
				obj.SetRootUnIDToNull()
				if err = obj.Save(ctx); err != nil {
					return err
				}
			}
			// Set this object's pointer to the reverse object to nil to mark that we broke the link
			o.revLeafUn = nil
		}

		return d.Delete(ctx, "root_un", "ID", o.id, "", 0)
	})

	if err != nil {
		return err
	}
	broadcast.Delete(ctx, "goradd_unit", "root_un", fmt.Sprint(o.id))
	return
}

// deleteRootUn deletes the RootUn with primary key pk from the database
// and handles associated records.
func deleteRootUn(ctx context.Context, pk string) error {
	d := db.GetDatabase("goradd_unit")
	err := db.ExecuteTransaction(ctx, d, func() error {
		if obj, err := LoadRootUn(ctx,
			pk,
			node.RootUn().PrimaryKey(),
		); err != nil {
			return err
		} else if obj == nil {
			return db.NewRecordNotFoundError("root_un", pk)
		} else {
			if err := obj.Delete(ctx); err != nil {
				return err
			}
		}
		return nil
	})
	return err
}

// resetDirtyStatus resets the dirty status of every field in the object.
func (o *rootUnBase) resetDirtyStatus() {
	o.idIsDirty = false
	o.nameIsDirty = false
	o.revLeafUnIsDirty = false

}

// IsDirty returns true if the object has been changed since it was read from the database or created.
// However, a new object that has a column with a default value will be automatically marked as dirty upon creation.
func (o *rootUnBase) IsDirty() (dirty bool) {
	dirty = o.idIsDirty ||
		o.nameIsDirty

	dirty = dirty ||
		o.revLeafUnIsDirty

	dirty = dirty || (o.revLeafUn != nil && o.revLeafUn.IsDirty())

	return
}

// Get returns the value of a field in the object based on the field's name.
// It will also get related objects if they are loaded.
// Invalid fields and objects are returned as nil.
// Get can be used to retrieve a value by using the Identifier of a node.
func (o *rootUnBase) Get(key string) interface{} {

	switch key {

	case "ID":
		if !o.idIsLoaded {
			return nil
		}
		return o.id

	case "Name":
		if !o.nameIsLoaded {
			return nil
		}
		return o.name

	case "LeafUn":
		return o.revLeafUn

	}
	return nil
}

// MarshalBinary serializes the object into a buffer that is deserializable using UnmarshalBinary.
// It should be used for transmitting database objects over the wire, or for temporary storage. It does not send
// a version number, so if the data format changes, its up to you to invalidate the old stored objects.
// The framework uses this to serialize the object when it is stored in a control.
func (o *rootUnBase) MarshalBinary() ([]byte, error) {
	buf := new(bytes.Buffer)
	enc := gob.NewEncoder(buf)
	if err := o.encodeTo(enc); err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

func (o *rootUnBase) encodeTo(enc db.Encoder) error {

	if err := enc.Encode(o.id); err != nil {
		return fmt.Errorf("error encoding RootUn.id: %w", err)
	}
	if err := enc.Encode(o.idIsLoaded); err != nil {
		return fmt.Errorf("error encoding RootUn.idIsLoaded: %w", err)
	}
	if err := enc.Encode(o.idIsDirty); err != nil {
		return fmt.Errorf("error encoding RootUn.idIsDirty: %w", err)
	}

	if err := enc.Encode(o.name); err != nil {
		return fmt.Errorf("error encoding RootUn.name: %w", err)
	}
	if err := enc.Encode(o.nameIsLoaded); err != nil {
		return fmt.Errorf("error encoding RootUn.nameIsLoaded: %w", err)
	}
	if err := enc.Encode(o.nameIsDirty); err != nil {
		return fmt.Errorf("error encoding RootUn.nameIsDirty: %w", err)
	}

	if o.revLeafUn == nil {
		if err := enc.Encode(false); err != nil {
			return err
		}
	} else {
		if err := enc.Encode(true); err != nil {
			return err
		}
		if err := enc.Encode(o.revLeafUn); err != nil {
			return fmt.Errorf("error encoding RootUn.revLeafUn: %w", err)
		}
	}

	if err := enc.Encode(o.revLeafUnIsDirty); err != nil {
		return fmt.Errorf("error encoding RootUn.revLeafUnIsDirty: %w", err)
	}

	if o._aliases == nil {
		if err := enc.Encode(false); err != nil {
			return err
		}
	} else {
		if err := enc.Encode(true); err != nil {
			return err
		}
		if err := enc.Encode(o._aliases); err != nil {
			return fmt.Errorf("error encoding RootUn._aliases: %w", err)
		}
	}

	if err := enc.Encode(o._restored); err != nil {
		return fmt.Errorf("error encoding RootUn._restored: %w", err)
	}
	if err := enc.Encode(o._originalPK); err != nil {
		return fmt.Errorf("error encoding RootUn._originalPK: %w", err)
	}
	return nil
}

// UnmarshalBinary converts a structure that was created with MarshalBinary into a RootUn object.
func (o *rootUnBase) UnmarshalBinary(data []byte) (err error) {
	buf := bytes.NewReader(data)
	dec := gob.NewDecoder(buf)
	return o.decodeFrom(dec)
}

func (o *rootUnBase) decodeFrom(dec db.Decoder) (err error) {
	var isPtr bool

	_ = isPtr
	if err = dec.Decode(&o.id); err != nil {
		return fmt.Errorf("error decoding RootUn.id: %w", err)
	}
	if err = dec.Decode(&o.idIsLoaded); err != nil {
		return fmt.Errorf("error decoding RootUn.idIsLoaded: %w", err)
	}
	if err = dec.Decode(&o.idIsDirty); err != nil {
		return fmt.Errorf("error decoding RootUn.idIsDirty: %w", err)
	}

	if err = dec.Decode(&o.name); err != nil {
		return fmt.Errorf("error decoding RootUn.name: %w", err)
	}
	if err = dec.Decode(&o.nameIsLoaded); err != nil {
		return fmt.Errorf("error decoding RootUn.nameIsLoaded: %w", err)
	}
	if err = dec.Decode(&o.nameIsDirty); err != nil {
		return fmt.Errorf("error decoding RootUn.nameIsDirty: %w", err)
	}

	if err = dec.Decode(&isPtr); err != nil {
		return fmt.Errorf("error decoding RootUn.revLeafUn isPtr: %w", err)
	}
	if isPtr {
		if err = dec.Decode(&o.revLeafUn); err != nil {
			return fmt.Errorf("error decoding RootUn.revLeafUn: %w", err)
		}
	}

	if err = dec.Decode(&o.revLeafUnIsDirty); err != nil {
		return fmt.Errorf("error decoding RootUn.revLeafUnIsDirty: %w", err)
	}
	if err = dec.Decode(&isPtr); err != nil {
		return fmt.Errorf("error decoding RootUn._aliases isPtr: %w", err)
	}
	if isPtr {
		if err = dec.Decode(&o._aliases); err != nil {
			return fmt.Errorf("error decoding RootUn._aliases: %w", err)
		}
	}

	if err = dec.Decode(&o._restored); err != nil {
		return fmt.Errorf("error decoding RootUn._restored: %w", err)
	}
	if err = dec.Decode(&o._originalPK); err != nil {
		return fmt.Errorf("error decoding RootUn._originalPK: %w", err)
	}
	return
}

// MarshalJSON serializes the object into a JSON object.
// Only valid data will be serialized, meaning, you can control what gets serialized by using Select to
// select only the fields you want when you query for the object. Another way to control the output
// is to call MarshalStringMap, modify the map, then encode the map.
func (o *rootUnBase) MarshalJSON() (data []byte, err error) {
	v := o.MarshalStringMap()
	return json.Marshal(v)
}

// MarshalStringMap serializes the object into a string map of interfaces.
// Only valid data will be serialized, meaning, you can control what gets serialized by using Select to
// select only the fields you want when you query for the object. The keys are the same as the json keys.
func (o *rootUnBase) MarshalStringMap() map[string]interface{} {
	v := make(map[string]interface{})

	if o.idIsLoaded {
		v["id"] = o.id
	}

	if o.nameIsLoaded {
		v["name"] = o.name
	}

	if obj := o.revLeafUn; obj != nil {
		v["leafUn"] = obj.MarshalStringMap()
	}
	for _k, _v := range o._aliases {
		v[_k] = _v
	}
	return v
}

// UnmarshalJSON unmarshalls the given json data into the RootUn. The RootUn can be a
// newly created object, or one loaded from the database.
//
// After unmarshalling, the object is not  saved. You must call Save to insert it into the database
// or update it.
//
// Unmarshalling of sub-objects, as in objects linked via foreign keys, is not currently supported.
//
// The fields it expects are:
//
//	"id" - string
//	"name" - string
func (o *rootUnBase) UnmarshalJSON(data []byte) (err error) {
	var v map[string]interface{}
	if len(data) == 0 {
		return
	}
	d := json.NewDecoder(bytes.NewReader(data))
	d.UseNumber() // use a number to avoid precision errors
	if err = d.Decode(&v); err != nil {
		return err
	}
	return o.UnmarshalStringMap(v)
}

// UnmarshalStringMap will load the values from the stringmap into the object.
//
// Override this in RootUn to modify the json before sending it here.
func (o *rootUnBase) UnmarshalStringMap(m map[string]interface{}) (err error) {
	for k, v := range m {
		switch k {

		case "id":
			{
				if v == nil {
					return fmt.Errorf("field %s cannot be null", k)
				}

				if s, ok := v.(string); !ok {
					return fmt.Errorf("json field %s must be a string", k)
				} else {
					o.SetID(s)
				}
			}

		case "name":
			{
				if v == nil {
					return fmt.Errorf("field %s cannot be null", k)
				}

				if s, ok := v.(string); !ok {
					return fmt.Errorf("json field %s must be a string", k)
				} else {
					o.SetName(s)
				}
			}

		case "leafUn":
			v2 := NewLeafUn()
			m2, ok := v.(map[string]any)
			if !ok {
				return fmt.Errorf("json field %s must be a map", k)
			}
			err = v2.UnmarshalStringMap(m2)
			if err != nil {
				return
			}
			o.SetLeafUn(v2)

		}
	}
	return
}
