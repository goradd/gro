// Code generated by goradd-orm. DO NOT EDIT.

package goradd_unit

import (
	"bytes"
	"context"
	"encoding/gob"
	"encoding/json"
	"testing"

	"github.com/goradd/orm/_test/gen/orm/goradd_unit/node"
	"github.com/goradd/orm/pkg/op"
	"github.com/goradd/orm/pkg/test"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

// createMinimalSampleTwoKey creates an unsaved minimal version of a TwoKey object
// for testing.
func createMinimalSampleTwoKey() *TwoKey {
	obj := NewTwoKey()
	updateMinimalSampleTwoKey(obj)

	obj.SetDirectory(test.RandomValue[string](50))

	return obj
}

// updateMinimalSampleTwoKey sets the values of a minimal sample to new, random values.
func updateMinimalSampleTwoKey(obj *TwoKey) {

	obj.SetServer(test.RandomValue[string](50))

	obj.SetFileName(test.RandomValue[string](50))

}

// createMaximalSampleTwoKey creates an unsaved version of a TwoKey object
// for testing that includes references to minimal objects.
func createMaximalSampleTwoKey(ctx context.Context) *TwoKey {
	obj := NewTwoKey()
	obj.SetDirectory(test.RandomValue[string](50))
	updateMaximalSampleTwoKey(ctx, obj)
	return obj
}

// updateMaximalSampleTwoKey sets all the maximal sample values to new values.
// This will set new values for references, so save the old values and delete them.
func updateMaximalSampleTwoKey(ctx context.Context, obj *TwoKey) {
	updateMinimalSampleTwoKey(obj)

}

// deleteSampleTwoKey deletes an object created and saved by one of the sample creator functions.
func deleteSampleTwoKey(ctx context.Context, obj *TwoKey) {
	if obj == nil {
		return
	}

	_ = obj.Delete(ctx)
}

// assertEqualFieldsTwoKey compares two objects and asserts that the basic fields are equal.
func assertEqualFieldsTwoKey(t *testing.T, obj1, obj2 *TwoKey) {
	if obj1.ServerIsLoaded() && obj2.ServerIsLoaded() { // only check loaded values
		assert.EqualValues(t, obj1.Server(), obj2.Server())
	}
	if obj1.DirectoryIsLoaded() && obj2.DirectoryIsLoaded() { // only check loaded values
		assert.EqualValues(t, obj1.Directory(), obj2.Directory())
	}
	if obj1.FileNameIsLoaded() && obj2.FileNameIsLoaded() { // only check loaded values
		assert.EqualValues(t, obj1.FileName(), obj2.FileName())
	}

}

func TestTwoKey_SetServer(t *testing.T) {

	obj := NewTwoKey()

	assert.True(t, obj.IsNew())
	val := test.RandomValue[string](50)
	obj.SetServer(val)
	assert.Equal(t, val, obj.Server())

	// test default
	obj.SetServer("")
	assert.EqualValues(t, "", obj.Server(), "set default")

	// test panic on setting value larger than maximum size allowed
	val = test.RandomValue[string](51)
	assert.Panics(t, func() {
		obj.SetServer(val)
	})
}
func TestTwoKey_SetDirectory(t *testing.T) {

	obj := NewTwoKey()

	assert.True(t, obj.IsNew())
	val := test.RandomValue[string](50)
	obj.SetDirectory(val)
	assert.Equal(t, val, obj.Directory())

	// test default
	obj.SetDirectory("")
	assert.EqualValues(t, "", obj.Directory(), "set default")

	// test panic on setting value larger than maximum size allowed
	val = test.RandomValue[string](51)
	assert.Panics(t, func() {
		obj.SetDirectory(val)
	})
}
func TestTwoKey_SetFileName(t *testing.T) {

	obj := NewTwoKey()

	assert.True(t, obj.IsNew())
	val := test.RandomValue[string](50)
	obj.SetFileName(val)
	assert.Equal(t, val, obj.FileName())

	// test default
	obj.SetFileName("")
	assert.EqualValues(t, "", obj.FileName(), "set default")

	// test panic on setting value larger than maximum size allowed
	val = test.RandomValue[string](51)
	assert.Panics(t, func() {
		obj.SetFileName(val)
	})
}

func TestTwoKey_Copy(t *testing.T) {
	obj := createMinimalSampleTwoKey()

	obj2 := obj.Copy()

	assert.Equal(t, obj.Server(), obj2.Server())
	assert.Equal(t, obj.Directory(), obj2.Directory())
	assert.Equal(t, obj.FileName(), obj2.FileName())

}

func TestTwoKey_BasicInsert(t *testing.T) {
	obj := createMinimalSampleTwoKey()
	ctx := context.Background()
	assert.NoError(t, obj.Save(ctx))
	defer deleteSampleTwoKey(ctx, obj)

	// Test retrieval
	obj2, err := LoadTwoKey(ctx, obj.PrimaryKey())
	require.NotNil(t, obj2)
	assert.NoError(t, err)

	assert.Equal(t, obj2.PrimaryKey(), obj2.OriginalPrimaryKey())

	assert.True(t, obj2.ServerIsLoaded())
	// test that setting it to the same value will not change the dirty bit
	assert.False(t, obj2.serverIsDirty)
	obj2.SetServer(obj2.Server())
	assert.False(t, obj2.serverIsDirty)

	assert.True(t, obj2.DirectoryIsLoaded())
	assert.Panics(t, func() {
		obj2.SetDirectory(obj2.Directory())
	})

	assert.True(t, obj2.FileNameIsLoaded())
	// test that setting it to the same value will not change the dirty bit
	assert.False(t, obj2.fileNameIsDirty)
	obj2.SetFileName(obj2.FileName())
	assert.False(t, obj2.fileNameIsDirty)

}

func TestTwoKey_InsertPanics(t *testing.T) {
	obj := createMinimalSampleTwoKey()
	_ = obj
	ctx := context.Background()
	_ = ctx

	obj.serverIsLoaded = false
	assert.Panics(t, func() { obj.Save(ctx) })
	obj.serverIsLoaded = true

	obj.directoryIsLoaded = false
	assert.Panics(t, func() { obj.Save(ctx) })
	obj.directoryIsLoaded = true

	obj.fileNameIsLoaded = false
	assert.Panics(t, func() { obj.Save(ctx) })
	obj.fileNameIsLoaded = true

}

func TestTwoKey_BasicUpdate(t *testing.T) {
	obj := createMinimalSampleTwoKey()
	ctx := context.Background()
	assert.NoError(t, obj.Save(ctx))
	defer deleteSampleTwoKey(ctx, obj)
	updateMinimalSampleTwoKey(obj)
	assert.NoError(t, obj.Save(ctx))
	obj2, err := LoadTwoKey(ctx, obj.PrimaryKey())
	assert.NoError(t, err)

	assert.Equal(t, obj2.Server(), obj.Server(), "Server did not update")
	assert.Equal(t, obj2.Directory(), obj.Directory(), "Directory did not update")
	assert.Equal(t, obj2.FileName(), obj.FileName(), "FileName did not update")
}

func TestTwoKey_ReferenceLoad(t *testing.T) {
	ctx := context.Background()
	obj := createMaximalSampleTwoKey(ctx)
	assert.NoError(t, obj.Save(ctx))
	defer deleteSampleTwoKey(ctx, obj)

	// Test that referenced objects were saved and assigned ids

	// Test lazy loading
	obj2, err := LoadTwoKey(ctx, obj.PrimaryKey())
	assert.NoError(t, err)
	objPkOnly, err2 := LoadTwoKey(ctx, obj.PrimaryKey(),
		node.TwoKey().Directory())
	assert.NoError(t, err2)
	_ = obj2 // avoid error if there are no references
	_ = objPkOnly

	// test eager loading
	obj3, _ := LoadTwoKey(ctx, obj.PrimaryKey(), node.TwoKey().Server(),
		node.TwoKey().Directory(),
		node.TwoKey().FileName(),
	)
	_ = obj3 // avoid error if there are no references

}

func TestTwoKey_ReferenceUpdateNewObjects(t *testing.T) {
	ctx := context.Background()
	obj := createMaximalSampleTwoKey(ctx)
	assert.NoError(t, obj.Save(ctx))
	defer deleteSampleTwoKey(ctx, obj)

	obj2, _ := LoadTwoKey(ctx, obj.PrimaryKey())
	updateMaximalSampleTwoKey(ctx, obj2)
	assert.NoError(t, obj2.Save(ctx))
	defer deleteSampleTwoKey(ctx, obj2)

	obj3, _ := LoadTwoKey(ctx, obj2.PrimaryKey())
	_ = obj3 // avoid error if there are no references

}

func TestTwoKey_ReferenceUpdateOldObjects(t *testing.T) {
	ctx := context.Background()
	obj := createMaximalSampleTwoKey(ctx)
	assert.NoError(t, obj.Save(ctx))
	defer deleteSampleTwoKey(ctx, obj)

	assert.NoError(t, obj.Save(ctx))

	obj2, _ := LoadTwoKey(ctx, obj.PrimaryKey(), node.TwoKey().Server(),
		node.TwoKey().Directory(),
		node.TwoKey().FileName(),
	)
	_ = obj2 // avoid error if there are no references

}
func TestTwoKey_EmptyPrimaryKeyGetter(t *testing.T) {
	obj := NewTwoKey()

	assert.Zero(t, obj.Directory())
}

func TestTwoKey_Getters(t *testing.T) {
	obj := createMinimalSampleTwoKey()

	ctx := context.Background()
	require.NoError(t, obj.Save(ctx))
	defer deleteSampleTwoKey(ctx, obj)

	has, _ := HasTwoKey(ctx, obj.PrimaryKey())
	assert.True(t, has)

	obj2, _ := LoadTwoKey(ctx, obj.PrimaryKey(),
		node.TwoKey().Directory())
	assert.Equal(t, obj.PrimaryKey(), obj2.PrimaryKey())

	assert.Equal(t, obj.Server(), obj.Get(node.TwoKey().Server().Identifier))
	assert.Panics(t, func() { obj2.Server() })
	assert.Nil(t, obj2.Get(node.TwoKey().Server().Identifier))
	assert.Equal(t, obj.Directory(), obj.Get(node.TwoKey().Directory().Identifier))
	assert.Equal(t, obj.FileName(), obj.Get(node.TwoKey().FileName().Identifier))
	assert.Panics(t, func() { obj2.FileName() })
	assert.Nil(t, obj2.Get(node.TwoKey().FileName().Identifier))
}

func TestTwoKey_QueryLoad(t *testing.T) {
	obj := createMinimalSampleTwoKey()
	ctx := context.Background()
	assert.NoError(t, obj.Save(ctx))
	defer deleteSampleTwoKey(ctx, obj)

	objs, err := QueryTwoKeys(ctx).
		Where(op.Equal(node.TwoKey().Directory(), obj.Directory())).
		OrderBy(node.TwoKey().Directory()). // exercise order by
		Limit(1, 0).                        // exercise limit
		Calculation(node.TwoKey(), "IsTrue", op.Equal("A", "A")).
		Load()
	assert.NoError(t, err)
	assert.Equal(t, obj.PrimaryKey(), objs[0].PrimaryKey())
	assert.True(t, objs[0].GetAlias("IsTrue").Bool())
}
func TestTwoKey_QueryLoadI(t *testing.T) {
	obj := createMinimalSampleTwoKey()
	ctx := context.Background()
	err := obj.Save(ctx)
	assert.NoError(t, err)
	defer deleteSampleTwoKey(ctx, obj)

	objs, _ := QueryTwoKeys(ctx).
		Where(op.Equal(node.TwoKey().Directory(), obj.Directory())).
		LoadI()

	assert.Equal(t, obj.PrimaryKey(), objs[0].Get("Directory"))
}
func TestTwoKey_QueryCursor(t *testing.T) {
	obj := createMinimalSampleTwoKey()
	ctx := context.Background()
	assert.NoError(t, obj.Save(ctx))
	defer deleteSampleTwoKey(ctx, obj)

	cursor, err := QueryTwoKeys(ctx).
		Where(op.Equal(node.TwoKey().Directory(), obj.Directory())).
		LoadCursor()
	require.NoError(t, err)
	obj2, err2 := cursor.Next()
	assert.Equal(t, obj.PrimaryKey(), obj2.PrimaryKey())
	require.NoError(t, err2)
	obj2, err2 = cursor.Next()
	assert.Nil(t, obj2)
	require.NoError(t, err2)
	assert.NoError(t, cursor.Close())

	// test empty cursor result
	cursor, err = QueryTwoKeys(ctx).
		Where(op.Equal("B", "A")).
		LoadCursor()
	require.NoError(t, err)

	obj2, err = cursor.Next()
	assert.Nil(t, obj2)
	require.NoError(t, err)
	assert.NoError(t, cursor.Close())
}
func TestTwoKey_Count(t *testing.T) {
	ctx := context.Background()
	obj := createMaximalSampleTwoKey(ctx)
	err := obj.Save(ctx)
	assert.NoError(t, err)
	defer deleteSampleTwoKey(ctx, obj)
	assert.Positive(t, func() int { i, _ := CountTwoKeys(ctx); return i }())

}

func TestTwoKey_MarshalJSON(t *testing.T) {
	obj := createMinimalSampleTwoKey()

	b, err := json.Marshal(obj)
	assert.NoError(t, err)

	obj2 := NewTwoKey()
	err = json.Unmarshal(b, &obj2)
	assert.NoError(t, err)

	assertEqualFieldsTwoKey(t, obj, obj2)
}

func TestTwoKey_MarshalBinary(t *testing.T) {
	obj := createMinimalSampleTwoKey()

	b, err := obj.MarshalBinary()
	assert.NoError(t, err)

	obj2 := NewTwoKey()
	err = obj2.UnmarshalBinary(b)
	assert.NoError(t, err)

	assertEqualFieldsTwoKey(t, obj, obj2)
}

func TestTwoKey_FailingMarshalBinary(t *testing.T) {
	obj := createMinimalSampleTwoKey()
	var err error

	for i := 0; i < 12; i++ {
		enc := &test.GobEncoder{Count: i}
		err = obj.encodeTo(enc)
		assert.Error(t, err)
	}
	// do it again with aliases
	obj._aliases = make(map[string]any)
	for i := 0; i < 13; i++ {
		enc := &test.GobEncoder{Count: i}
		err = obj.encodeTo(enc)
		assert.Error(t, err)
	}
}

func TestTwoKey_FailingUnmarshalBinary(t *testing.T) {
	obj := createMinimalSampleTwoKey()
	b, err := obj.MarshalBinary()
	assert.NoError(t, err)
	obj2 := NewTwoKey()
	for i := 0; i < 12; i++ {
		buf := bytes.NewReader(b)
		dec := &test.GobDecoder{Decoder: gob.NewDecoder(buf), Count: i}
		err = obj2.decodeFrom(dec)
		assert.Error(t, err)
	}

	// do it again with aliases
	obj = createMinimalSampleTwoKey()
	obj._aliases = map[string]any{"a": 1}
	b, err = obj.MarshalBinary()
	assert.NoError(t, err)

	obj2 = NewTwoKey()
	for i := 0; i < 13; i++ {
		buf := bytes.NewReader(b)
		dec := &test.GobDecoder{Decoder: gob.NewDecoder(buf), Count: i}
		err = obj2.decodeFrom(dec)
		assert.Error(t, err)
	}
}
