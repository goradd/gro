// Code generated by goradd-orm. DO NOT EDIT.

package goradd_unit

import (
	"bytes"
	"context"
	"encoding/gob"
	"encoding/json"
	"fmt"
	"unicode/utf8"

	"github.com/goradd/anyutil"
	"github.com/goradd/maps"
	"github.com/goradd/orm/_test/gen/orm/goradd_unit/node"
	"github.com/goradd/orm/pkg/broadcast"
	"github.com/goradd/orm/pkg/db"
	"github.com/goradd/orm/pkg/op"
	"github.com/goradd/orm/pkg/query"
)

// RootLBase is embedded in a RootL object and provides the ORM access to the database.
// The member variables of the structure are private and should not normally be accessed by the RootL embedder.
// Instead, use the accessor functions.
type rootLBase struct {
	id              string
	idIsLoaded      bool
	idIsDirty       bool
	name            string
	nameIsLoaded    bool
	nameIsDirty     bool
	groLock         int64
	groLockIsLoaded bool

	// Reverse references
	leafLs        maps.SliceMap[string, *LeafL] // Objects in the order they were queried
	leafLsIsDirty bool

	// Custom aliases, if specified
	_aliases map[string]any

	// Indicates whether this is a new object, or one loaded from the database. Used by Save to know whether to Insert or Update.
	_restored bool

	_originalPK string
}

// IDs used to access the RootL object fields by name using the Get function.
// doc: type=RootL
const (
	RootLIDField      = `id`
	RootLNameField    = `name`
	RootLGroLockField = `groLock`
	RootLLeafLField   = `leafLs`
)

const RootLIDMaxLength = 32    // The number of runes the column can hold
const RootLNameMaxLength = 100 // The number of runes the column can hold

// Initialize or re-initialize a RootL database object to default values.
// The primary key will get a temporary unique value which will be replaced when the object is saved.
func (o *rootLBase) Initialize() {
	o.id = db.TemporaryPrimaryKey()
	o.idIsLoaded = true
	o.idIsDirty = false

	o.name = ""
	o.nameIsLoaded = false
	o.nameIsDirty = false

	o.groLock = 0
	o.groLockIsLoaded = false

	// Reverse reference objects.

	o.leafLs.Clear()
	o.leafLsIsDirty = false

	o._aliases = nil
	o._restored = false
}

// Copy copies most fields to a new RootL object.
// Forward reference ids will be copied, but reverse and many-many references will not.
// Attached objects will not be included in the copy.
// Automatically generated fields will not be included in the copy.
// The primary key field will not be copied, since it is normally auto-generated.
// Call Save() on the new object to save it into the database.
// Copy might panic if any fields in the database were set to a size larger than the
// maximum size through a process that accessed the database outside of the ORM.
func (o *rootLBase) Copy() (newObject *RootL) {
	newObject = NewRootL()
	if o.idIsLoaded {
		newObject.SetID(o.id)
	}
	if o.nameIsLoaded {
		newObject.SetName(o.name)
	}
	return
}

// OriginalPrimaryKey returns the value of the primary key that was originally loaded into the object when it was
// read from the database.
func (o *rootLBase) OriginalPrimaryKey() string {
	return o._originalPK
}

// PrimaryKey returns the value of the primary key of the record.
func (o *rootLBase) PrimaryKey() string {
	if o._restored && !o.idIsLoaded {
		panic("ID was not selected in the last query and has not been set, and so PrimaryKey is not valid")
	}
	return o.id
}

// SetPrimaryKey sets the value of the primary key in the object, to be saved later in the database using the Save() function.
// Normally you will not need to call this function, since the primary key value is automatically generated by the
// database driver. Exceptions might include importing data to a new database, or correcting primary key conflicts when
// merging data.
// You cannot change a primary key for a record that has been written to the database. While SQL databases will
// allow it, NoSql databases will not. Save a copy and delete this one instead.
func (o *rootLBase) SetPrimaryKey(v string) {
	o.SetID(v)
}

// ID returns the loaded value of the id field in the database.
func (o *rootLBase) ID() string {
	if o._restored && !o.idIsLoaded {
		panic("ID was not selected in the last query and has not been set, and so is not valid")
	}
	return o.id
}

// IDIsLoaded returns true if the value was loaded from the database or has been set.
func (o *rootLBase) IDIsLoaded() bool {
	return o.idIsLoaded
}

// SetID sets the value of ID in the object, to be saved later in the database using the Save() function.
// Normally you will not need to call this function, since the ID value is automatically generated by the
// database driver. Exceptions might include importing data to a new database, or correcting primary key conflicts when
// merging data.
// You cannot change a primary key for a record that has been written to the database. While SQL databases will
// allow it, NoSql databases will not. Save a copy and delete this one instead.
func (o *rootLBase) SetID(v string) {
	if o._restored {
		panic("error: Do not change a primary key for a record that has been saved. Instead, save a copy and delete the original.")
	}
	if utf8.RuneCountInString(v) > RootLIDMaxLength {
		panic("attempted to set RootL.ID to a value larger than its maximum length in runes")
	}
	o.idIsLoaded = true
	o.idIsDirty = true
	o.id = v
}

// Name returns the value of the loaded name field in the database.
func (o *rootLBase) Name() string {
	if o._restored && !o.nameIsLoaded {
		panic("Name was not selected in the last query and has not been set, and so is not valid")
	}
	return o.name
}

// NameIsLoaded returns true if the value was loaded from the database or has been set.
func (o *rootLBase) NameIsLoaded() bool {
	return o.nameIsLoaded
}

// SetName sets the value of Name in the object, to be saved later in the database using the Save() function.
func (o *rootLBase) SetName(v string) {
	if utf8.RuneCountInString(v) > RootLNameMaxLength {
		panic("attempted to set RootL.Name to a value larger than its maximum length in runes")
	}
	if o._restored &&
		o.nameIsLoaded && // if it was not selected, then make sure it gets set, since our end comparison won't be valid
		o.name == v {
		// no change
		return
	}

	o.nameIsLoaded = true
	o.name = v
	o.nameIsDirty = true
}

// GroLock returns the value of the loaded gro_lock field in the database.
func (o *rootLBase) GroLock() int64 {
	if o._restored && !o.groLockIsLoaded {
		panic("GroLock was not selected in the last query and has not been set, and so is not valid")
	}
	return o.groLock
}

// GroLockIsLoaded returns true if the value was loaded from the database or has been set.
func (o *rootLBase) GroLockIsLoaded() bool {
	return o.groLockIsLoaded
}

// GetAlias returns the value for the Alias node aliasKey that was returned in the most
// recent query.
func (o *rootLBase) GetAlias(aliasKey string) query.AliasValue {
	if a, ok := o._aliases[aliasKey]; ok {
		return query.NewAliasValue(a)
	} else {
		panic("Alias " + aliasKey + " not found.")
	}
}

// IsNew returns true if the object will create a new record when saved.
func (o *rootLBase) IsNew() bool {
	return !o._restored
}

// LeafL returns a single LeafL object by primary key, if one was loaded.
// Otherwise, it will return nil. It will not return LeafL objects that are not saved.
func (o *rootLBase) LeafL(pk string) *LeafL {
	v := o.leafLs.Get(pk)
	return v
}

// LeafLs returns a slice of LeafL objects if loaded.
func (o *rootLBase) LeafLs() []*LeafL {
	return o.leafLs.Values()
}

// LoadLeafLs loads a new slice of LeafL objects and returns it.
func (o *rootLBase) LoadLeafLs(ctx context.Context) ([]*LeafL, error) {
	if o.IsNew() {
		return nil, nil
	}
	for obj := range o.leafLs.ValuesIter() {
		if obj.IsDirty() {
			panic("You cannot load over items that have changed but have not been saved.")
		}
	}

	objs, err := LoadLeafLsByRootLID(ctx, o.PrimaryKey())
	if err != nil {
		return nil, err
	}
	o.leafLs.Clear()

	for _, obj := range objs {
		pk := obj.ID()
		o.leafLs.Set(pk, obj)
	}

	if o.leafLs.Len() == 0 {
		return nil, nil
	}
	return o.leafLs.Values(), nil
}

// CountLeafLs does a database query and returns the number of LeafL
// objects currently in the database that have a RootLID value that equals this objects primary key.
func (o *rootLBase) CountLeafLs(ctx context.Context) (int, error) {
	return CountLeafLsByRootLID(ctx, o.PrimaryKey())
}

// SetLeafLs associates the objects in objs with this RootL by setting
// their RootLID values to this object's primary key.
// WARNING! If it has LeafLs already associated with it that will not be associated after a save,
// Save will panic. Be sure to delete those LeafLs or otherwise fix those pointers before calling save.
func (o *rootLBase) SetLeafLs(objs ...*LeafL) {
	for obj := range o.leafLs.ValuesIter() {
		if obj.IsDirty() {
			panic("You cannot overwrite items that have changed but have not been saved.")
		}
	}

	o.leafLs.Clear()
	for _, obj := range objs {
		pk := obj.ID()
		o.leafLs.Set(pk, obj)
	}
	o.leafLsIsDirty = true
}

// LoadRootL returns a RootL from the database.
// selectNodes lets you provide nodes for selecting specific fields or additional fields from related tables.
// See [RootLsBuilder.Select] for more info.
func LoadRootL(ctx context.Context, pk string, selectNodes ...query.Node) (*RootL, error) {
	return queryRootLs(ctx).
		Where(op.Equal(node.RootL().ID(), pk)).
		Select(selectNodes...).
		Get()
}

// HasRootL returns true if a RootL with the given primary key exists in the database.
// doc: type=RootL
func HasRootL(ctx context.Context, pk string) (bool, error) {
	v, err := queryRootLs(ctx).
		Where(op.Equal(node.RootL().ID(), pk)).
		Count()
	return v > 0, err
}

// The RootLBuilder uses a builder pattern to create a query on the database.
// Create a RootLBuilder by calling QueryRootLs, which will select all
// the RootL object in the database. Then filter and arrange those objects
// by calling Where, Select, etc.
// End a query by calling either Load, LoadI, LoadCursor, Get, or Count.
// A RootLBuilder stores the context it will use to perform the query, and thus is
// meant to be a short-lived object. You should not save it for later use.
type RootLBuilder struct {
	builder *query.Builder
	ctx     context.Context
}

func newRootLBuilder(ctx context.Context) *RootLBuilder {
	b := RootLBuilder{
		builder: query.NewBuilder(node.RootL()),
		ctx:     ctx,
	}
	return &b
}

// Load terminates the query builder, performs the query, and returns a slice of RootL objects.
// If there are any errors, nil is returned and the specific error is stored in the context.
// If no results come back from the query, it will return a non-nil empty slice.
func (b *RootLBuilder) Load() (rootLs []*RootL, err error) {
	b.builder.Command = query.BuilderCommandLoad
	database := db.GetDatabase("goradd_unit")
	var results any

	ctx := b.ctx
	results, err = database.BuilderQuery(ctx, b.builder)
	if results == nil || err != nil {
		return
	}
	for _, item := range results.([]map[string]any) {
		o := new(RootL)
		o.unpack(item, o)
		rootLs = append(rootLs, o)
	}
	return
}

// LoadI terminates the query builder, performs the query, and returns a slice of interfaces.
// This can then satisfy a variety of interfaces that load arrays of objects, including KeyLabeler.
// If there are any errors, nil is returned and the specific error is stored in the context.
// If no results come back from the query, it will return a non-nil empty slice.
func (b *RootLBuilder) LoadI() (rootLs []query.OrmObj, err error) {
	b.builder.Command = query.BuilderCommandLoad
	database := db.GetDatabase("goradd_unit")
	var results any

	ctx := b.ctx
	results, err = database.BuilderQuery(ctx, b.builder)
	if results == nil || err != nil {
		return
	}
	for _, item := range results.([]map[string]any) {
		o := new(RootL)
		o.unpack(item, o)
		rootLs = append(rootLs, o)
	}
	return
}

// LoadCursor terminates the query builder, performs the query, and returns a cursor to the query.
//
// A query cursor is useful for dealing with large amounts of query results. However, there are some
// limitations to its use. When working with SQL databases, you cannot use a cursor while querying
// many-to-many or reverse relationships that will create an array of values.
//
// Call Next() on the returned cursor object to step through the results. Make sure you call Close
// on the cursor object when you are done. You should use
//
//	defer cursor.Close()
//
// to make sure the cursor gets closed.
func (b *RootLBuilder) LoadCursor() (rootLsCursor, error) {
	b.builder.Command = query.BuilderCommandLoadCursor
	database := db.GetDatabase("goradd_unit")
	result, err := database.BuilderQuery(b.ctx, b.builder)
	var cursor query.CursorI
	if result != nil {
		cursor = result.(query.CursorI)
	}
	return rootLsCursor{cursor}, err
}

type rootLsCursor struct {
	query.CursorI
}

// Next returns the current RootL object and moves the cursor to the next one.
//
// If there are no more records, it returns nil.
func (c rootLsCursor) Next() (*RootL, error) {
	if c.CursorI == nil {
		return nil, nil
	}

	row, err := c.CursorI.Next()
	if row == nil || err != nil {
		return nil, err
	}
	o := new(RootL)
	o.unpack(row, o)
	return o, nil
}

// Get is a convenience method to return only the first item found in a query.
// The entire query is performed, so you should generally use this only if you know
// you are selecting on one or very few items.
// If an error occurs, or no results are found, a nil is returned.
func (b *RootLBuilder) Get() (*RootL, error) {
	results, err := b.Load()
	if err != nil || len(results) == 0 {
		return nil, err
	}
	return results[0], nil
}

// Where adds a condition to filter what gets selected.
// Calling Where multiple times will AND the conditions together.
func (b *RootLBuilder) Where(c query.Node) *RootLBuilder {
	b.builder.Where(c)
	return b
}

// OrderBy specifies how the resulting data should be sorted.
// By default, the given nodes are sorted in ascending order.
// Add Descending() to the node to specify that it should be sorted in descending order.
func (b *RootLBuilder) OrderBy(nodes ...query.Sorter) *RootLBuilder {
	b.builder.OrderBy(nodes...)
	return b
}

// Limit will return a subset of the data, limited to the offset and number of rows specified.
// For large data sets and specific types of queries, this can be slow, because it will perform
// the entire query before computing the limit.
// You cannot limit a query that has embedded arrays.
func (b *RootLBuilder) Limit(maxRowCount int, offset int) *RootLBuilder {
	b.builder.Limit(maxRowCount, offset)
	return b
}

// Select specifies what specific columns will be loaded with data.
// By default, all the columns of the root_l table will be queried and loaded.
// If nodes contains columns from the root_l table, that will limit the columns queried and loaded to only those columns.
// If related tables are specified, then all the columns from those tables are queried, selected and joined to the result.
// If columns in related tables are specified, then only those columns will be queried and loaded.
// Depending on the query, additional columns may automatically be added to the query. In particular, primary key columns
// will be added in most situations. The exception to this would be in distinct queries, group by queries, or subqueries.
func (b *RootLBuilder) Select(nodes ...query.Node) *RootLBuilder {
	b.builder.Select(nodes...)
	return b
}

// Calculation adds operation as an aliased value onto base.
// After the query, you can read the data by passing alias to GetAlias on the returned object.
func (b *RootLBuilder) Calculation(base query.TableNodeI, alias string, operation query.OperationNodeI) *RootLBuilder {
	b.builder.Calculation(base, alias, operation)
	return b
}

// Distinct removes duplicates from the results of the query.
// Adding a Select() is usually required.
func (b *RootLBuilder) Distinct() *RootLBuilder {
	b.builder.Distinct()
	return b
}

// GroupBy controls how results are grouped when using aggregate functions with Calculation.
func (b *RootLBuilder) GroupBy(nodes ...query.Node) *RootLBuilder {
	b.builder.GroupBy(nodes...)
	return b
}

// Having does additional filtering on the results of the query after the query is performed.
func (b *RootLBuilder) Having(node query.Node) *RootLBuilder {
	b.builder.Having(node)
	return b
}

// Count terminates a query and returns just the number of items in the result.
// If you have Select or Calculation columns in the query, it will count NULL results as well.
// To not count NULL values, use Where in the builder with a NotNull operation.
// To count distinct combinations of items, call Distinct() on the builder.
func (b *RootLBuilder) Count() (int, error) {
	b.builder.Command = query.BuilderCommandCount
	database := db.GetDatabase("goradd_unit")

	ctx := b.ctx
	results, err := database.BuilderQuery(ctx, b.builder)
	if results == nil || err != nil {
		return 0, err
	}
	return results.(int), nil
}

// CountRootLs returns the total number of items in the root_l table.
func CountRootLs(ctx context.Context) (int, error) {
	return QueryRootLs(ctx).Count()
}

// unpack recursively transforms data coming from the database into ORM objects.
func (o *rootLBase) unpack(m map[string]interface{}, objThis *RootL) {

	if v, ok := m["id"]; ok && v != nil {
		if o.id, ok = v.(string); ok {
			o.idIsLoaded = true
			o.idIsDirty = false
			o._originalPK = o.id
		} else {
			panic("Wrong type found for id.")
		}
	} else {
		o.idIsLoaded = false
		o.id = ""
		o.idIsDirty = false
	}

	if v, ok := m["name"]; ok && v != nil {
		if o.name, ok = v.(string); ok {
			o.nameIsLoaded = true
			o.nameIsDirty = false
		} else {
			panic("Wrong type found for name.")
		}
	} else {
		o.nameIsLoaded = false
		o.name = ""
		o.nameIsDirty = false
	}

	if v, ok := m["groLock"]; ok && v != nil {
		if o.groLock, ok = v.(int64); ok {
			o.groLockIsLoaded = true
		} else {
			panic("Wrong type found for groLock.")
		}
	} else {
		o.groLockIsLoaded = false
		o.groLock = 0
	}

	// Reverse references

	if v, ok := m["leafLs"]; ok {
		switch v2 := v.(type) {
		case []map[string]any: // array expansion
			o.leafLs.Clear()
			o.leafLsIsDirty = false
			for _, v3 := range v2 {
				obj := new(LeafL)
				obj.unpack(v3, obj)
				o.leafLs.Set(obj.PrimaryKey(), obj)
			}
		default:
			panic("Wrong type found for leafLs object.")
		}
	} else {
		o.leafLs.Clear()
		o.leafLsIsDirty = false
	}

	if v, ok := m["aliases_"]; ok {
		o._aliases = v.(map[string]any)
	}

	o._restored = true

}

// save will update or insert the object, depending on the state of the object.
func (o *rootLBase) save(ctx context.Context) error {
	if o._restored {
		return o.update(ctx)
	} else {
		return o.insert(ctx)
	}
}

// update will update the values in the database, saving any changed values.
// If the table has auto-generated values, those will be updated automatically.
func (o *rootLBase) update(ctx context.Context) error {
	if !o._restored {
		panic("cannot update a record that was not originally read from the database.")
	}
	if !o.IsDirty() {
		return nil // nothing to save
	}

	var modifiedFields map[string]interface{}

	d := Database()
	err := db.WithTransaction(ctx, d, func(ctx context.Context) error {

		modifiedFields = getRootLUpdateFields(o)
		if len(modifiedFields) != 0 {
			err2 := d.Update(ctx, "root_l",
				map[string]any{
					"id": o._originalPK,
				},
				modifiedFields,
				"gro_lock",
				o.GroLock(),
			)
			if err2 != nil {
				return err2
			}
		}

		if o.leafLsIsDirty {
			// relation connection changed

			// Since the other side of the relationship cannot be null, there cannot be objects that will be detached.
			if oldObjs, err := QueryLeafLs(ctx).
				Where(op.Equal(node.LeafL().RootLID(), o.ID())).
				Select(node.LeafL().RootLID()).
				Select(node.LeafL().GroLock()).
				Load(); err != nil {
				return err
			} else {
				for _, obj := range oldObjs {
					if !o.leafLs.Has(obj.PrimaryKey()) {
						err = obj.Delete(ctx) // old object is not in group of new objects, so delete it since it has a non-null reference to o.
						if err != nil {
							return err
						}
					}
				}
				keys := o.leafLs.Keys() // Make a copy of the keys, since we will change the slicemap while iterating
				for i, k := range keys {
					obj := o.leafLs.Get(k)
					if obj == nil {
						// object was deleted during save?
						continue
					}
					obj.SetRootLID(o.PrimaryKey())
					obj.rootLIDIsDirty = true // force a change in case data is stale
					if err = obj.Save(ctx); err != nil {
						return err
					}
					if obj.PrimaryKey() != k {
						// update slice map key without changing order
						o.leafLs.Delete(k)
						o.leafLs.SetAt(i, obj.PrimaryKey(), obj)
					}
				}
			}

		} else {

			// save related objects in case internal values changed
			for obj := range o.leafLs.ValuesIter() {
				if err := obj.Save(ctx); err != nil {
					return err
				}
			}
		}

		return nil
	}) // transaction
	if err != nil {
		return err
	}
	// update generated lock value
	if l, ok := modifiedFields["gro_lock"]; ok {
		o.groLock = l.(int64)
		o.groLockIsLoaded = true
	}

	o.resetDirtyStatus()
	if len(modifiedFields) != 0 {
		broadcast.Update(ctx, "goradd_unit", "root_l", o._originalPK, anyutil.SortedKeys(modifiedFields)...)
	}

	return nil
}

// insert will insert the object into the database. Related items will be saved.
func (o *rootLBase) insert(ctx context.Context) (err error) {
	var insertFields map[string]interface{}
	d := Database()
	err = db.WithTransaction(ctx, d, func(ctx context.Context) error {
		if !o.nameIsLoaded {
			panic("a value for Name is required, and there is no default value. Call SetName() before inserting the record.")
		}
		insertFields = getRootLInsertFields(o)
		var newPK string
		newPK, err = d.Insert(ctx, "root_l", "id", insertFields)
		if err != nil {
			return err
		}
		o.id = newPK
		o._originalPK = newPK
		o.idIsLoaded = true

		if o.leafLs.Len() > 0 {
			keys := o.leafLs.Keys()
			for i, k := range keys {
				obj := o.leafLs.Get(k)
				obj.SetRootLID(newPK)
				if err = obj.Save(ctx); err != nil {
					return err
				}
				if obj.PrimaryKey() != k {
					o.leafLs.Delete(k)
					o.leafLs.SetAt(i, obj.PrimaryKey(), obj)
				}
			}
		}

		return nil

	}) // transaction

	if err != nil {
		return
	}
	if t, ok := insertFields["gro_lock"]; ok {
		o.groLock = t.(int64)
		o.groLockIsLoaded = true
	}

	o.resetDirtyStatus()
	o._restored = true
	broadcast.Insert(ctx, "goradd_unit", "root_l", o.PrimaryKey())
	return
}

// getUpdateFields returns the database columns that will be sent to the update process.
// This will include timestamp fields only if some other column has changed.
func (o *rootLBase) getUpdateFields() (fields map[string]interface{}) {
	fields = map[string]interface{}{}
	if o.idIsDirty {
		fields["id"] = o.id
	}
	if o.nameIsDirty {
		fields["name"] = o.name
	}
	return
}

// getInsertFields returns the fields that will be specified in an insert operation.
// Optional fields that have not been set and have no default will be returned as nil.
// NoSql databases should interpret this as no value. Sql databases should interpret this as
// explicitly setting a NULL value, which would override any database specific default value.
// Auto-generated fields will be returned with their generated values, except AutoPK fields, which are generated by the
// database driver and updated after the insert.
func (o *rootLBase) getInsertFields() (fields map[string]interface{}) {
	fields = map[string]interface{}{}
	if o.idIsDirty {
		fields["id"] = o.id
	}

	fields["name"] = o.name
	fields["gro_lock"] = db.RecordVersion(0)
	return
}

// Delete deletes the record from the database.
//
// Associated LeafL will also be deleted since their RootL fields are not nullable.
func (o *rootLBase) Delete(ctx context.Context) (err error) {
	if o == nil {
		return // allow deleting of a nil object to be a noop
	}
	if !o._restored {
		panic("Cannot delete a record that has no primary key value.")
	}
	d := Database()
	err = db.WithTransaction(ctx, d, func(ctx context.Context) error {

		{
			objs, err := QueryLeafLs(ctx).
				Where(op.Equal(node.LeafL().RootL().PrimaryKey(), o._originalPK)).
				Load()
			if err != nil {
				return err
			}
			for _, obj := range objs {
				if err = obj.Delete(ctx); err != nil {
					return err
				}
			}
			o.leafLs.Clear()
		}

		return d.Delete(ctx, "root_l",
			map[string]any{"id": o._originalPK},
			"gro_lock",
			o.GroLock(),
		)
	})

	if err != nil {
		return err
	}
	broadcast.Delete(ctx, "goradd_unit", "root_l", o._originalPK)
	return
}

// deleteRootL deletes the RootL with primary key pk from the database
// and handles associated records.
func deleteRootL(ctx context.Context, pk string) error {
	d := db.GetDatabase("goradd_unit")
	err := db.WithTransaction(ctx, d, func(ctx context.Context) error {
		if obj, err := LoadRootL(ctx,
			pk,
			node.RootL().ID(),
			node.RootL().GroLock(),
		); err != nil {
			return err
		} else if obj == nil {
			return db.NewRecordNotFoundError("root_l", pk)
		} else {
			if err := obj.Delete(ctx); err != nil {
				return err
			}
		}
		return nil
	})
	return err
}

// resetDirtyStatus resets the dirty status of every field in the object.
func (o *rootLBase) resetDirtyStatus() {
	o.idIsDirty = false
	o.nameIsDirty = false
	o.leafLsIsDirty = false

}

// IsDirty returns true if the object has been changed since it was read from the database or created.
func (o *rootLBase) IsDirty() (dirty bool) {
	dirty = o.idIsDirty ||
		o.nameIsDirty

	dirty = dirty ||
		o.leafLsIsDirty

	for obj := range o.leafLs.ValuesIter() {
		dirty = dirty || obj.IsDirty()
	}

	return
}

// Get returns the value of a field in the object based on the field's name.
// It will also get related objects if they are loaded.
// Invalid fields and objects are returned as nil.
// Get can be used to retrieve a value by using the Field() of a node.
func (o *rootLBase) Get(key string) interface{} {
	switch key {
	case RootLIDField:
		if !o.idIsLoaded {
			return nil
		}
		return o.id
	case RootLNameField:
		if !o.nameIsLoaded {
			return nil
		}
		return o.name
	case RootLGroLockField:
		if !o.groLockIsLoaded {
			return nil
		}
		return o.groLock
	case RootLLeafLField:
		return o.leafLs.Values()
	}
	return nil
}

// MarshalBinary serializes the object into a buffer that is deserializable using UnmarshalBinary.
// It should be used for transmitting database objects over the wire, or for temporary storage. It does not send
// a version number, so if the data format changes, its up to you to invalidate the old stored objects.
// The framework uses this to serialize the object when it is stored in a control.
func (o *rootLBase) MarshalBinary() ([]byte, error) {
	buf := new(bytes.Buffer)
	enc := gob.NewEncoder(buf)
	if err := o.encodeTo(enc); err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

func (o *rootLBase) encodeTo(enc db.Encoder) error {

	if err := enc.Encode(o.id); err != nil {
		return fmt.Errorf("error encoding RootL.id: %w", err)
	}
	if err := enc.Encode(o.idIsLoaded); err != nil {
		return fmt.Errorf("error encoding RootL.idIsLoaded: %w", err)
	}
	if err := enc.Encode(o.idIsDirty); err != nil {
		return fmt.Errorf("error encoding RootL.idIsDirty: %w", err)
	}

	if err := enc.Encode(o.name); err != nil {
		return fmt.Errorf("error encoding RootL.name: %w", err)
	}
	if err := enc.Encode(o.nameIsLoaded); err != nil {
		return fmt.Errorf("error encoding RootL.nameIsLoaded: %w", err)
	}
	if err := enc.Encode(o.nameIsDirty); err != nil {
		return fmt.Errorf("error encoding RootL.nameIsDirty: %w", err)
	}

	if err := enc.Encode(o.groLock); err != nil {
		return fmt.Errorf("error encoding RootL.groLock: %w", err)
	}
	if err := enc.Encode(o.groLockIsLoaded); err != nil {
		return fmt.Errorf("error encoding RootL.groLockIsLoaded: %w", err)
	}

	if err := enc.Encode(&o.leafLs); err != nil {
		return err
	}

	if err := enc.Encode(o.leafLsIsDirty); err != nil {
		return err
	}

	if o._aliases == nil {
		if err := enc.Encode(false); err != nil {
			return err
		}
	} else {
		if err := enc.Encode(true); err != nil {
			return err
		}
		if err := enc.Encode(o._aliases); err != nil {
			return fmt.Errorf("error encoding RootL._aliases: %w", err)
		}
	}

	if err := enc.Encode(o._restored); err != nil {
		return fmt.Errorf("error encoding RootL._restored: %w", err)
	}
	if err := enc.Encode(o._originalPK); err != nil {
		return fmt.Errorf("error encoding RootL._originalPK: %w", err)
	}
	return nil
}

// UnmarshalBinary converts a structure that was created with MarshalBinary into a RootL object.
func (o *rootLBase) UnmarshalBinary(data []byte) (err error) {
	buf := bytes.NewReader(data)
	dec := gob.NewDecoder(buf)
	return o.decodeFrom(dec)
}

func (o *rootLBase) decodeFrom(dec db.Decoder) (err error) {
	var isPtr bool

	_ = isPtr
	if err = dec.Decode(&o.id); err != nil {
		return fmt.Errorf("error decoding RootL.id: %w", err)
	}
	if err = dec.Decode(&o.idIsLoaded); err != nil {
		return fmt.Errorf("error decoding RootL.idIsLoaded: %w", err)
	}
	if err = dec.Decode(&o.idIsDirty); err != nil {
		return fmt.Errorf("error decoding RootL.idIsDirty: %w", err)
	}

	if err = dec.Decode(&o.name); err != nil {
		return fmt.Errorf("error decoding RootL.name: %w", err)
	}
	if err = dec.Decode(&o.nameIsLoaded); err != nil {
		return fmt.Errorf("error decoding RootL.nameIsLoaded: %w", err)
	}
	if err = dec.Decode(&o.nameIsDirty); err != nil {
		return fmt.Errorf("error decoding RootL.nameIsDirty: %w", err)
	}

	if err = dec.Decode(&o.groLock); err != nil {
		return fmt.Errorf("error decoding RootL.groLock: %w", err)
	}
	if err = dec.Decode(&o.groLockIsLoaded); err != nil {
		return fmt.Errorf("error decoding RootL.groLockIsLoaded: %w", err)
	}

	if err = dec.Decode(&o.leafLs); err != nil {
		return fmt.Errorf("error decoding RootL.leafLs: %w", err)
	}

	if err = dec.Decode(&o.leafLsIsDirty); err != nil {
		return fmt.Errorf("error decoding RootL.leafLsIsDirty: %w", err)
	}

	if err = dec.Decode(&isPtr); err != nil {
		return fmt.Errorf("error decoding RootL._aliases isPtr: %w", err)
	}
	if isPtr {
		if err = dec.Decode(&o._aliases); err != nil {
			return fmt.Errorf("error decoding RootL._aliases: %w", err)
		}
	}

	if err = dec.Decode(&o._restored); err != nil {
		return fmt.Errorf("error decoding RootL._restored: %w", err)
	}
	if err = dec.Decode(&o._originalPK); err != nil {
		return fmt.Errorf("error decoding RootL._originalPK: %w", err)
	}
	return
}

// MarshalJSON serializes the object into a JSON object.
// Only valid data will be serialized, meaning, you can control what gets serialized by using Select to
// select only the fields you want when you query for the object. Another way to control the output
// is to call MarshalStringMap, modify the map, then encode the map.
func (o *rootLBase) MarshalJSON() (data []byte, err error) {
	v := o.MarshalStringMap()
	return json.Marshal(v)
}

// MarshalStringMap serializes the object into a string map of interfaces.
// Only valid data will be serialized, meaning, you can control what gets serialized by using Select to
// select only the fields you want when you query for the object. The keys are the same as the json keys.
func (o *rootLBase) MarshalStringMap() map[string]interface{} {
	v := make(map[string]interface{})

	if o.idIsLoaded {
		v["id"] = o.id
	}

	if o.nameIsLoaded {
		v["name"] = o.name
	}

	if o.groLockIsLoaded {
		v["groLock"] = o.groLock
	}

	if o.leafLs.Len() != 0 {
		var vals []map[string]interface{}
		for obj := range o.leafLs.ValuesIter() {
			vals = append(vals, obj.MarshalStringMap())
		}
		v["leafLs"] = vals
	}
	for _k, _v := range o._aliases {
		v[_k] = _v
	}
	return v
}

// UnmarshalJSON unmarshalls the given json data into the RootL. The RootL can be a
// newly created object, or one loaded from the database.
//
// After unmarshalling, the object is not  saved. You must call Save to insert it into the database
// or update it.
//
// Unmarshalling of sub-objects, as in objects linked via foreign keys, is not currently supported.
//
// The fields it expects are:
//
//	"id" - string
//	"name" - string
//	"groLock" - int64
func (o *rootLBase) UnmarshalJSON(data []byte) (err error) {
	var v map[string]interface{}
	if len(data) == 0 {
		return
	}
	d := json.NewDecoder(bytes.NewReader(data))
	d.UseNumber() // use a number to avoid precision errors
	if err = d.Decode(&v); err != nil {
		return err
	}
	return o.UnmarshalStringMap(v)
}

// UnmarshalStringMap will load the values from the stringmap into the object.
//
// Override this in RootL to modify the json before sending it here.
func (o *rootLBase) UnmarshalStringMap(m map[string]interface{}) (err error) {
	for k, v := range m {
		switch k {

		case "id":
			{
				if v == nil {
					return fmt.Errorf("field %s cannot be null", k)
				}

				if s, ok := v.(string); !ok {
					return fmt.Errorf("json field %s must be a string", k)
				} else {
					o.SetID(s)
				}
			}
		case "name":
			{
				if v == nil {
					return fmt.Errorf("field %s cannot be null", k)
				}

				if s, ok := v.(string); !ok {
					return fmt.Errorf("json field %s must be a string", k)
				} else {
					o.SetName(s)
				}
			}
		case "leafLs":
			v2, ok := v.([]any)
			if !ok {
				return fmt.Errorf("json field %s must be an array of maps", k)
			}
			var s []*LeafL
			for _, i2 := range v2 {
				m2, ok := i2.(map[string]any)
				if !ok {
					return fmt.Errorf("json field %s must be an array of maps", k)
				}
				v3 := NewLeafL()
				err = v3.UnmarshalStringMap(m2)
				if err != nil {
					return
				}
				s = append(s, v3)
			}
			o.SetLeafLs(s...)

		}
	}
	return
}
