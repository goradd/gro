// Code generated by goradd-orm. DO NOT EDIT.

package goradd_unit

import (
	"bytes"
	"context"
	"encoding/base64"
	"encoding/gob"
	"encoding/json"
	"fmt"
	"unicode/utf8"

	"github.com/goradd/all"
	"github.com/goradd/orm/_test/gen/orm/goradd_unit/node"
	"github.com/goradd/orm/pkg/broadcast"
	"github.com/goradd/orm/pkg/db"
	"github.com/goradd/orm/pkg/op"
	"github.com/goradd/orm/pkg/query"
)

// UnsupportedTypeBase is embedded in a UnsupportedType object and provides the ORM access to the database.
// The member variables of the structure are private and should not normally be accessed by the UnsupportedType embedder.
// Instead, use the accessor functions.
type unsupportedTypeBase struct {
	typeSerial        string
	typeSerialIsValid bool
	typeSerialIsDirty bool

	typeSet        []byte
	typeSetIsValid bool
	typeSetIsDirty bool

	typeEnumerated        []byte
	typeEnumeratedIsValid bool
	typeEnumeratedIsDirty bool

	typeDecimal        string
	typeDecimalIsValid bool
	typeDecimalIsDirty bool

	typeDouble        float64
	typeDoubleIsValid bool
	typeDoubleIsDirty bool

	typeGeo        []byte
	typeGeoIsValid bool
	typeGeoIsDirty bool

	typeTinyBlob        []byte
	typeTinyBlobIsValid bool
	typeTinyBlobIsDirty bool

	typeMediumBlob        []byte
	typeMediumBlobIsValid bool
	typeMediumBlobIsDirty bool

	typeVarbinary        []byte
	typeVarbinaryIsValid bool
	typeVarbinaryIsDirty bool

	typeLongtext        string
	typeLongtextIsValid bool
	typeLongtextIsDirty bool

	typeBinary        []byte
	typeBinaryIsValid bool
	typeBinaryIsDirty bool

	typeSmall        int
	typeSmallIsValid bool
	typeSmallIsDirty bool

	typeMedium        int
	typeMediumIsValid bool
	typeMediumIsDirty bool

	typeBig        int64
	typeBigIsValid bool
	typeBigIsDirty bool

	typePolygon        []byte
	typePolygonIsValid bool
	typePolygonIsDirty bool

	typeUnsigned        uint
	typeUnsignedIsValid bool
	typeUnsignedIsDirty bool

	typeMultfk1        string
	typeMultfk1IsValid bool
	typeMultfk1IsDirty bool

	typeMultifk2        string
	typeMultifk2IsValid bool
	typeMultifk2IsDirty bool

	// Custom aliases, if specified
	_aliases map[string]any

	// Indicates whether this is a new object, or one loaded from the database. Used by Save to know whether to Insert or Update.
	_restored bool

	_originalPK string
}

// IDs used to access the UnsupportedType object fields by name using the Get function.
// doc: type=UnsupportedType
const (
	UnsupportedType_TypeSerial     = `TypeSerial`
	UnsupportedType_TypeSet        = `TypeSet`
	UnsupportedType_TypeEnumerated = `TypeEnumerated`
	UnsupportedType_TypeDecimal    = `TypeDecimal`
	UnsupportedType_TypeDouble     = `TypeDouble`
	UnsupportedType_TypeGeo        = `TypeGeo`
	UnsupportedType_TypeTinyBlob   = `TypeTinyBlob`
	UnsupportedType_TypeMediumBlob = `TypeMediumBlob`
	UnsupportedType_TypeVarbinary  = `TypeVarbinary`
	UnsupportedType_TypeLongtext   = `TypeLongtext`
	UnsupportedType_TypeBinary     = `TypeBinary`
	UnsupportedType_TypeSmall      = `TypeSmall`
	UnsupportedType_TypeMedium     = `TypeMedium`
	UnsupportedType_TypeBig        = `TypeBig`
	UnsupportedType_TypePolygon    = `TypePolygon`
	UnsupportedType_TypeUnsigned   = `TypeUnsigned`
	UnsupportedType_TypeMultfk1    = `TypeMultfk1`
	UnsupportedType_TypeMultifk2   = `TypeMultifk2`
)

const UnsupportedTypeTypeSetMaxLength = 5               // The number of bytes the column can hold
const UnsupportedTypeTypeEnumeratedMaxLength = 1        // The number of bytes the column can hold
const UnsupportedTypeTypeDecimalMaxLength = 13          // The number of runes the column can hold
const UnsupportedTypeTypeTinyBlobMaxLength = 255        // The number of bytes the column can hold
const UnsupportedTypeTypeMediumBlobMaxLength = 16777215 // The number of bytes the column can hold
const UnsupportedTypeTypeLongtextMaxLength = 4294967295 // The number of runes the column can hold
const UnsupportedTypeTypeSmallMax = 32767
const UnsupportedTypeTypeSmallMin = -32768
const UnsupportedTypeTypeMediumMax = 8388607
const UnsupportedTypeTypeMediumMin = -8388608
const UnsupportedTypeTypeUnsignedMax = 4294967295
const UnsupportedTypeTypeUnsignedMin = 0
const UnsupportedTypeTypeMultfk1MaxLength = 50  // The number of runes the column can hold
const UnsupportedTypeTypeMultifk2MaxLength = 50 // The number of runes the column can hold

// Initialize or re-initialize a UnsupportedType database object to default values.
// The primary key will get a temporary negative number which will be replaced when the object is saved.
// Multiple calls to Initialize are not guaranteed to create sequential values for the primary key.
func (o *unsupportedTypeBase) Initialize() {

	newObjectPkCounter = newObjectPkCounter - 1
	o.typeSerial = fmt.Sprintf("%d", newObjectPkCounter)

	o.typeSerialIsValid = false
	o.typeSerialIsDirty = false

	o.typeSet = []byte(nil)

	o.typeSetIsValid = false
	o.typeSetIsDirty = false

	o.typeEnumerated = []byte(nil)

	o.typeEnumeratedIsValid = false
	o.typeEnumeratedIsDirty = false

	o.typeDecimal = ""

	o.typeDecimalIsValid = false
	o.typeDecimalIsDirty = false

	o.typeDouble = 0

	o.typeDoubleIsValid = false
	o.typeDoubleIsDirty = false

	o.typeGeo = []byte(nil)

	o.typeGeoIsValid = false
	o.typeGeoIsDirty = false

	o.typeTinyBlob = []byte(nil)

	o.typeTinyBlobIsValid = false
	o.typeTinyBlobIsDirty = false

	o.typeMediumBlob = []byte(nil)

	o.typeMediumBlobIsValid = false
	o.typeMediumBlobIsDirty = false

	o.typeVarbinary = []byte(nil)

	o.typeVarbinaryIsValid = false
	o.typeVarbinaryIsDirty = false

	o.typeLongtext = ""

	o.typeLongtextIsValid = false
	o.typeLongtextIsDirty = false

	o.typeBinary = []byte(nil)

	o.typeBinaryIsValid = false
	o.typeBinaryIsDirty = false

	o.typeSmall = 0

	o.typeSmallIsValid = false
	o.typeSmallIsDirty = false

	o.typeMedium = 0

	o.typeMediumIsValid = false
	o.typeMediumIsDirty = false

	o.typeBig = 0

	o.typeBigIsValid = false
	o.typeBigIsDirty = false

	o.typePolygon = []byte(nil)

	o.typePolygonIsValid = false
	o.typePolygonIsDirty = false

	o.typeUnsigned = 0x0

	o.typeUnsignedIsValid = false
	o.typeUnsignedIsDirty = false

	o.typeMultfk1 = ""

	o.typeMultfk1IsValid = false
	o.typeMultfk1IsDirty = false

	o.typeMultifk2 = ""

	o.typeMultifk2IsValid = false
	o.typeMultifk2IsDirty = false

	o._restored = false
}

// PrimaryKey returns the current value of the primary key field.
func (o *unsupportedTypeBase) PrimaryKey() string {
	return o.typeSerial
}

// OriginalPrimaryKey returns the value of the primary key that was originally loaded into the object when it was
// read from the database.
func (o *unsupportedTypeBase) OriginalPrimaryKey() string {
	return o._originalPK
}

// Copy copies all valid fields to a new UnsupportedType object.
// Forward reference ids will be copied, but reverse and many-many references will not.
// Attached objects will not be included in the copy.
// Call Save() on the new object to save it into the database.
// Copy might panic if any fields in the database were set to a size larger than the
// maximum size through a process that accessed the database outside of the ORM.
func (o *unsupportedTypeBase) Copy() (newObject *UnsupportedType) {
	newObject = NewUnsupportedType()
	if o.typeSetIsValid {
		newObject.SetTypeSet(o.typeSet)
	}
	if o.typeEnumeratedIsValid {
		newObject.SetTypeEnumerated(o.typeEnumerated)
	}
	if o.typeDecimalIsValid {
		newObject.SetTypeDecimal(o.typeDecimal)
	}
	if o.typeDoubleIsValid {
		newObject.SetTypeDouble(o.typeDouble)
	}
	if o.typeGeoIsValid {
		newObject.SetTypeGeo(o.typeGeo)
	}
	if o.typeTinyBlobIsValid {
		newObject.SetTypeTinyBlob(o.typeTinyBlob)
	}
	if o.typeMediumBlobIsValid {
		newObject.SetTypeMediumBlob(o.typeMediumBlob)
	}
	if o.typeVarbinaryIsValid {
		newObject.SetTypeVarbinary(o.typeVarbinary)
	}
	if o.typeLongtextIsValid {
		newObject.SetTypeLongtext(o.typeLongtext)
	}
	if o.typeBinaryIsValid {
		newObject.SetTypeBinary(o.typeBinary)
	}
	if o.typeSmallIsValid {
		newObject.SetTypeSmall(o.typeSmall)
	}
	if o.typeMediumIsValid {
		newObject.SetTypeMedium(o.typeMedium)
	}
	if o.typeBigIsValid {
		newObject.SetTypeBig(o.typeBig)
	}
	if o.typePolygonIsValid {
		newObject.SetTypePolygon(o.typePolygon)
	}
	if o.typeUnsignedIsValid {
		newObject.SetTypeUnsigned(o.typeUnsigned)
	}
	if o.typeMultfk1IsValid {
		newObject.SetTypeMultfk1(o.typeMultfk1)
	}
	if o.typeMultifk2IsValid {
		newObject.SetTypeMultifk2(o.typeMultifk2)
	}
	return
}

// TypeSerial returns the loaded value of TypeSerial or
// the zero value if not loaded. Call TypeSerialIsValid() to determine
// if it is loaded.
func (o *unsupportedTypeBase) TypeSerial() string {
	return fmt.Sprint(o.typeSerial)
}

// TypeSerialIsValid returns true if the value was loaded from the database or has been set.
func (o *unsupportedTypeBase) TypeSerialIsValid() bool {
	return o._restored && o.typeSerialIsValid
}

// TypeSet returns the loaded value of TypeSet.
func (o *unsupportedTypeBase) TypeSet() []byte {
	if o._restored && !o.typeSetIsValid {
		panic("TypeSet was not selected in the last query and has not been set, and so is not valid")
	}
	return o.typeSet
}

// TypeSetIsValid returns true if the value was loaded from the database or has been set.
func (o *unsupportedTypeBase) TypeSetIsValid() bool {
	return o.typeSetIsValid
}

// SetTypeSet sets the value of TypeSet in the object, to be saved later using the Save() function.
func (o *unsupportedTypeBase) SetTypeSet(typeSet []byte) {
	o.typeSetIsValid = true
	if len(typeSet) > UnsupportedTypeTypeSetMaxLength {
		panic("attempted to set UnsupportedType.TypeSet to a value larger than its maximum length")
	}
	o.typeSet = typeSet // TODO: Copy bytes??
	o.typeSetIsDirty = true

}

// TypeEnumerated returns the loaded value of TypeEnumerated.
func (o *unsupportedTypeBase) TypeEnumerated() []byte {
	if o._restored && !o.typeEnumeratedIsValid {
		panic("TypeEnumerated was not selected in the last query and has not been set, and so is not valid")
	}
	return o.typeEnumerated
}

// TypeEnumeratedIsValid returns true if the value was loaded from the database or has been set.
func (o *unsupportedTypeBase) TypeEnumeratedIsValid() bool {
	return o.typeEnumeratedIsValid
}

// SetTypeEnumerated sets the value of TypeEnumerated in the object, to be saved later using the Save() function.
func (o *unsupportedTypeBase) SetTypeEnumerated(typeEnumerated []byte) {
	o.typeEnumeratedIsValid = true
	if len(typeEnumerated) > UnsupportedTypeTypeEnumeratedMaxLength {
		panic("attempted to set UnsupportedType.TypeEnumerated to a value larger than its maximum length")
	}
	o.typeEnumerated = typeEnumerated // TODO: Copy bytes??
	o.typeEnumeratedIsDirty = true

}

// TypeDecimal returns the loaded value of TypeDecimal.
func (o *unsupportedTypeBase) TypeDecimal() string {
	if o._restored && !o.typeDecimalIsValid {
		panic("TypeDecimal was not selected in the last query and has not been set, and so is not valid")
	}
	return o.typeDecimal
}

// TypeDecimalIsValid returns true if the value was loaded from the database or has been set.
func (o *unsupportedTypeBase) TypeDecimalIsValid() bool {
	return o.typeDecimalIsValid
}

// SetTypeDecimal sets the value of TypeDecimal in the object, to be saved later using the Save() function.
func (o *unsupportedTypeBase) SetTypeDecimal(typeDecimal string) {
	o.typeDecimalIsValid = true
	if utf8.RuneCountInString(typeDecimal) > UnsupportedTypeTypeDecimalMaxLength {
		panic("attempted to set UnsupportedType.TypeDecimal to a value larger than its maximum length in runes")
	}
	if o.typeDecimal != typeDecimal || !o._restored {
		o.typeDecimal = typeDecimal
		o.typeDecimalIsDirty = true
	}

}

// TypeDouble returns the loaded value of TypeDouble.
func (o *unsupportedTypeBase) TypeDouble() float64 {
	if o._restored && !o.typeDoubleIsValid {
		panic("TypeDouble was not selected in the last query and has not been set, and so is not valid")
	}
	return o.typeDouble
}

// TypeDoubleIsValid returns true if the value was loaded from the database or has been set.
func (o *unsupportedTypeBase) TypeDoubleIsValid() bool {
	return o.typeDoubleIsValid
}

// SetTypeDouble sets the value of TypeDouble in the object, to be saved later using the Save() function.
func (o *unsupportedTypeBase) SetTypeDouble(typeDouble float64) {
	o.typeDoubleIsValid = true
	if o.typeDouble != typeDouble || !o._restored {
		o.typeDouble = typeDouble
		o.typeDoubleIsDirty = true
	}

}

// TypeGeo returns the loaded value of TypeGeo.
func (o *unsupportedTypeBase) TypeGeo() []byte {
	if o._restored && !o.typeGeoIsValid {
		panic("TypeGeo was not selected in the last query and has not been set, and so is not valid")
	}
	return o.typeGeo
}

// TypeGeoIsValid returns true if the value was loaded from the database or has been set.
func (o *unsupportedTypeBase) TypeGeoIsValid() bool {
	return o.typeGeoIsValid
}

// SetTypeGeo sets the value of TypeGeo in the object, to be saved later using the Save() function.
func (o *unsupportedTypeBase) SetTypeGeo(typeGeo []byte) {
	o.typeGeoIsValid = true
	o.typeGeo = typeGeo // TODO: Copy bytes??
	o.typeGeoIsDirty = true

}

// TypeTinyBlob returns the loaded value of TypeTinyBlob.
func (o *unsupportedTypeBase) TypeTinyBlob() []byte {
	if o._restored && !o.typeTinyBlobIsValid {
		panic("TypeTinyBlob was not selected in the last query and has not been set, and so is not valid")
	}
	return o.typeTinyBlob
}

// TypeTinyBlobIsValid returns true if the value was loaded from the database or has been set.
func (o *unsupportedTypeBase) TypeTinyBlobIsValid() bool {
	return o.typeTinyBlobIsValid
}

// SetTypeTinyBlob sets the value of TypeTinyBlob in the object, to be saved later using the Save() function.
func (o *unsupportedTypeBase) SetTypeTinyBlob(typeTinyBlob []byte) {
	o.typeTinyBlobIsValid = true
	if len(typeTinyBlob) > UnsupportedTypeTypeTinyBlobMaxLength {
		panic("attempted to set UnsupportedType.TypeTinyBlob to a value larger than its maximum length")
	}
	o.typeTinyBlob = typeTinyBlob // TODO: Copy bytes??
	o.typeTinyBlobIsDirty = true

}

// TypeMediumBlob returns the loaded value of TypeMediumBlob.
func (o *unsupportedTypeBase) TypeMediumBlob() []byte {
	if o._restored && !o.typeMediumBlobIsValid {
		panic("TypeMediumBlob was not selected in the last query and has not been set, and so is not valid")
	}
	return o.typeMediumBlob
}

// TypeMediumBlobIsValid returns true if the value was loaded from the database or has been set.
func (o *unsupportedTypeBase) TypeMediumBlobIsValid() bool {
	return o.typeMediumBlobIsValid
}

// SetTypeMediumBlob sets the value of TypeMediumBlob in the object, to be saved later using the Save() function.
func (o *unsupportedTypeBase) SetTypeMediumBlob(typeMediumBlob []byte) {
	o.typeMediumBlobIsValid = true
	if len(typeMediumBlob) > UnsupportedTypeTypeMediumBlobMaxLength {
		panic("attempted to set UnsupportedType.TypeMediumBlob to a value larger than its maximum length")
	}
	o.typeMediumBlob = typeMediumBlob // TODO: Copy bytes??
	o.typeMediumBlobIsDirty = true

}

// TypeVarbinary returns the loaded value of TypeVarbinary.
func (o *unsupportedTypeBase) TypeVarbinary() []byte {
	if o._restored && !o.typeVarbinaryIsValid {
		panic("TypeVarbinary was not selected in the last query and has not been set, and so is not valid")
	}
	return o.typeVarbinary
}

// TypeVarbinaryIsValid returns true if the value was loaded from the database or has been set.
func (o *unsupportedTypeBase) TypeVarbinaryIsValid() bool {
	return o.typeVarbinaryIsValid
}

// SetTypeVarbinary sets the value of TypeVarbinary in the object, to be saved later using the Save() function.
func (o *unsupportedTypeBase) SetTypeVarbinary(typeVarbinary []byte) {
	o.typeVarbinaryIsValid = true
	o.typeVarbinary = typeVarbinary // TODO: Copy bytes??
	o.typeVarbinaryIsDirty = true

}

// TypeLongtext returns the loaded value of TypeLongtext.
func (o *unsupportedTypeBase) TypeLongtext() string {
	if o._restored && !o.typeLongtextIsValid {
		panic("TypeLongtext was not selected in the last query and has not been set, and so is not valid")
	}
	return o.typeLongtext
}

// TypeLongtextIsValid returns true if the value was loaded from the database or has been set.
func (o *unsupportedTypeBase) TypeLongtextIsValid() bool {
	return o.typeLongtextIsValid
}

// SetTypeLongtext sets the value of TypeLongtext in the object, to be saved later using the Save() function.
func (o *unsupportedTypeBase) SetTypeLongtext(typeLongtext string) {
	o.typeLongtextIsValid = true
	if utf8.RuneCountInString(typeLongtext) > UnsupportedTypeTypeLongtextMaxLength {
		panic("attempted to set UnsupportedType.TypeLongtext to a value larger than its maximum length in runes")
	}
	if o.typeLongtext != typeLongtext || !o._restored {
		o.typeLongtext = typeLongtext
		o.typeLongtextIsDirty = true
	}

}

// TypeBinary returns the loaded value of TypeBinary.
func (o *unsupportedTypeBase) TypeBinary() []byte {
	if o._restored && !o.typeBinaryIsValid {
		panic("TypeBinary was not selected in the last query and has not been set, and so is not valid")
	}
	return o.typeBinary
}

// TypeBinaryIsValid returns true if the value was loaded from the database or has been set.
func (o *unsupportedTypeBase) TypeBinaryIsValid() bool {
	return o.typeBinaryIsValid
}

// SetTypeBinary sets the value of TypeBinary in the object, to be saved later using the Save() function.
func (o *unsupportedTypeBase) SetTypeBinary(typeBinary []byte) {
	o.typeBinaryIsValid = true
	o.typeBinary = typeBinary // TODO: Copy bytes??
	o.typeBinaryIsDirty = true

}

// TypeSmall returns the loaded value of TypeSmall.
func (o *unsupportedTypeBase) TypeSmall() int {
	if o._restored && !o.typeSmallIsValid {
		panic("TypeSmall was not selected in the last query and has not been set, and so is not valid")
	}
	return o.typeSmall
}

// TypeSmallIsValid returns true if the value was loaded from the database or has been set.
func (o *unsupportedTypeBase) TypeSmallIsValid() bool {
	return o.typeSmallIsValid
}

// SetTypeSmall sets the value of TypeSmall in the object, to be saved later using the Save() function.
func (o *unsupportedTypeBase) SetTypeSmall(typeSmall int) {
	o.typeSmallIsValid = true
	if o.typeSmall != typeSmall || !o._restored {
		o.typeSmall = typeSmall
		o.typeSmallIsDirty = true
	}

}

// TypeMedium returns the loaded value of TypeMedium.
func (o *unsupportedTypeBase) TypeMedium() int {
	if o._restored && !o.typeMediumIsValid {
		panic("TypeMedium was not selected in the last query and has not been set, and so is not valid")
	}
	return o.typeMedium
}

// TypeMediumIsValid returns true if the value was loaded from the database or has been set.
func (o *unsupportedTypeBase) TypeMediumIsValid() bool {
	return o.typeMediumIsValid
}

// SetTypeMedium sets the value of TypeMedium in the object, to be saved later using the Save() function.
func (o *unsupportedTypeBase) SetTypeMedium(typeMedium int) {
	o.typeMediumIsValid = true
	if o.typeMedium != typeMedium || !o._restored {
		o.typeMedium = typeMedium
		o.typeMediumIsDirty = true
	}

}

// TypeBig returns the loaded value of TypeBig.
func (o *unsupportedTypeBase) TypeBig() int64 {
	if o._restored && !o.typeBigIsValid {
		panic("TypeBig was not selected in the last query and has not been set, and so is not valid")
	}
	return o.typeBig
}

// TypeBigIsValid returns true if the value was loaded from the database or has been set.
func (o *unsupportedTypeBase) TypeBigIsValid() bool {
	return o.typeBigIsValid
}

// SetTypeBig sets the value of TypeBig in the object, to be saved later using the Save() function.
func (o *unsupportedTypeBase) SetTypeBig(typeBig int64) {
	o.typeBigIsValid = true
	if o.typeBig != typeBig || !o._restored {
		o.typeBig = typeBig
		o.typeBigIsDirty = true
	}

}

// TypePolygon returns the loaded value of TypePolygon.
func (o *unsupportedTypeBase) TypePolygon() []byte {
	if o._restored && !o.typePolygonIsValid {
		panic("TypePolygon was not selected in the last query and has not been set, and so is not valid")
	}
	return o.typePolygon
}

// TypePolygonIsValid returns true if the value was loaded from the database or has been set.
func (o *unsupportedTypeBase) TypePolygonIsValid() bool {
	return o.typePolygonIsValid
}

// SetTypePolygon sets the value of TypePolygon in the object, to be saved later using the Save() function.
func (o *unsupportedTypeBase) SetTypePolygon(typePolygon []byte) {
	o.typePolygonIsValid = true
	o.typePolygon = typePolygon // TODO: Copy bytes??
	o.typePolygonIsDirty = true

}

// TypeUnsigned returns the loaded value of TypeUnsigned.
func (o *unsupportedTypeBase) TypeUnsigned() uint {
	if o._restored && !o.typeUnsignedIsValid {
		panic("TypeUnsigned was not selected in the last query and has not been set, and so is not valid")
	}
	return o.typeUnsigned
}

// TypeUnsignedIsValid returns true if the value was loaded from the database or has been set.
func (o *unsupportedTypeBase) TypeUnsignedIsValid() bool {
	return o.typeUnsignedIsValid
}

// SetTypeUnsigned sets the value of TypeUnsigned in the object, to be saved later using the Save() function.
func (o *unsupportedTypeBase) SetTypeUnsigned(typeUnsigned uint) {
	o.typeUnsignedIsValid = true
	if o.typeUnsigned != typeUnsigned || !o._restored {
		o.typeUnsigned = typeUnsigned
		o.typeUnsignedIsDirty = true
	}

}

// TypeMultfk1 returns the loaded value of TypeMultfk1.
func (o *unsupportedTypeBase) TypeMultfk1() string {
	if o._restored && !o.typeMultfk1IsValid {
		panic("TypeMultfk1 was not selected in the last query and has not been set, and so is not valid")
	}
	return o.typeMultfk1
}

// TypeMultfk1IsValid returns true if the value was loaded from the database or has been set.
func (o *unsupportedTypeBase) TypeMultfk1IsValid() bool {
	return o.typeMultfk1IsValid
}

// SetTypeMultfk1 sets the value of TypeMultfk1 in the object, to be saved later using the Save() function.
func (o *unsupportedTypeBase) SetTypeMultfk1(typeMultfk1 string) {
	o.typeMultfk1IsValid = true
	if utf8.RuneCountInString(typeMultfk1) > UnsupportedTypeTypeMultfk1MaxLength {
		panic("attempted to set UnsupportedType.TypeMultfk1 to a value larger than its maximum length in runes")
	}
	if o.typeMultfk1 != typeMultfk1 || !o._restored {
		o.typeMultfk1 = typeMultfk1
		o.typeMultfk1IsDirty = true
	}

}

// TypeMultifk2 returns the loaded value of TypeMultifk2.
func (o *unsupportedTypeBase) TypeMultifk2() string {
	if o._restored && !o.typeMultifk2IsValid {
		panic("TypeMultifk2 was not selected in the last query and has not been set, and so is not valid")
	}
	return o.typeMultifk2
}

// TypeMultifk2IsValid returns true if the value was loaded from the database or has been set.
func (o *unsupportedTypeBase) TypeMultifk2IsValid() bool {
	return o.typeMultifk2IsValid
}

// SetTypeMultifk2 sets the value of TypeMultifk2 in the object, to be saved later using the Save() function.
func (o *unsupportedTypeBase) SetTypeMultifk2(typeMultifk2 string) {
	o.typeMultifk2IsValid = true
	if utf8.RuneCountInString(typeMultifk2) > UnsupportedTypeTypeMultifk2MaxLength {
		panic("attempted to set UnsupportedType.TypeMultifk2 to a value larger than its maximum length in runes")
	}
	if o.typeMultifk2 != typeMultifk2 || !o._restored {
		o.typeMultifk2 = typeMultifk2
		o.typeMultifk2IsDirty = true
	}

}

// GetAlias returns the alias for the given key.
func (o *unsupportedTypeBase) GetAlias(key string) query.AliasValue {
	if a, ok := o._aliases[key]; ok {
		return query.NewAliasValue(a)
	} else {
		panic("Alias " + key + " not found.")
	}
}

// IsNew returns true if the object will create a new record when saved.
func (o *unsupportedTypeBase) IsNew() bool {
	return !o._restored
}

// LoadUnsupportedType returns a UnsupportedType from the database.
// joinOrSelectNodes lets you provide nodes for joining to other tables or selecting specific fields.
// Table nodes will be considered Join nodes, and column nodes will be Select nodes.
// See [UnsupportedTypeBuilder.Join] and [UnsupportedTypesBuilder.Select] for more info.
func LoadUnsupportedType(ctx context.Context, typeSerial string, joinOrSelectNodes ...query.Node) *UnsupportedType {
	return queryUnsupportedTypes(ctx).
		Where(op.Equal(node.UnsupportedType().TypeSerial(), typeSerial)).
		joinOrSelect(joinOrSelectNodes...).
		Get()
}

// HasUnsupportedType returns true if a UnsupportedType with the given primaryKey exists in the database.
// doc: type=UnsupportedType
func HasUnsupportedType(ctx context.Context, typeSerial string) bool {
	return queryUnsupportedTypes(ctx).
		Where(op.Equal(node.UnsupportedType().TypeSerial(), typeSerial)).
		Count(false) == 1
}

// The UnsupportedTypeBuilder uses the query.BuilderI interface to build a query.
// All query operations go through this query builder.
// End a query by calling either Load, LoadCursor, Get, Count, or Delete
type UnsupportedTypeBuilder interface {
	// Join adds node n to the node tree so that its fields will appear in the query.
	// Optionally add conditions to filter what gets included. Multiple conditions are anded.
	Join(n query.Node, conditions ...query.Node) UnsupportedTypeBuilder

	// Where adds a condition to filter what gets selected.
	// Calling Where multiple times will AND the conditions together.
	Where(c query.Node) UnsupportedTypeBuilder

	// OrderBy specifies how the resulting data should be sorted.
	// By default, the given nodes are sorted in ascending order.
	// Add Descending() to the node to specify that it should be sorted in descending order.
	OrderBy(nodes ...query.Sorter) UnsupportedTypeBuilder

	// Limit will return a subset of the data, limited to the offset and number of rows specified.
	// For large data sets and specific types of queries, this can be slow, because it will perform
	// the entire query before computing the limit.
	// You cannot limit a query that has embedded arrays.
	Limit(maxRowCount int, offset int) UnsupportedTypeBuilder

	// Select optimizes the query to only return the specified fields.
	// Once you put a Select in your query, you must specify all the fields that you will eventually read out.
	// Some fields, like primary keys, are always selected.
	// If you are using a GroupBy, most database drivers will only allow selecting on fields in the GroupBy, and
	// doing otherwise will result in an error.
	Select(nodes ...query.Node) UnsupportedTypeBuilder

	// Calculation adds a calculation node with an aliased name.
	// After the query, you can read the data using GetAlias() on a returned object.
	Calculation(name string, n query.Aliaser) UnsupportedTypeBuilder

	// Distinct removes duplicates from the results of the query.
	// Adding a Select() is usually required.
	Distinct() UnsupportedTypeBuilder

	// GroupBy controls how results are grouped when using aggregate functions with Calculation.
	GroupBy(nodes ...query.Node) UnsupportedTypeBuilder

	// Having does additional filtering on the results of the query after the query is performed.
	Having(node query.Node) UnsupportedTypeBuilder

	// Load terminates the query builder, performs the query, and returns a slice of UnsupportedType objects.
	// If there are any errors, nil is returned and the specific error is stored in the context.
	// If no results come back from the query, it will return a non-nil empty slice.
	Load() []*UnsupportedType
	// Load terminates the query builder, performs the query, and returns a slice of interfaces.
	// This can then satisfy a general interface that loads arrays of objects.
	// If there are any errors, nil is returned and the specific error is stored in the context.
	// If no results come back from the query, it will return a non-nil empty slice.
	LoadI() []any

	// LoadCursor terminates the query builder, performs the query, and returns a cursor to the query.
	//
	// A query cursor is useful for dealing with large amounts of query results. However, there are some
	// limitations to its use. When working with SQL databases, you cannot use a cursor while querying
	// many-to-many or reverse relationships that will create an array of values.
	//
	// Call Next() on the returned cursor object to step through the results. Make sure you call Close
	// on the cursor object when you are done. You should use
	//   defer cursor.Close()
	// to make sure the cursor gets closed.
	LoadCursor() unsupportedTypesCursor

	// Get is a convenience method to return only the first item found in a query.
	// The entire query is performed, so you should generally use this only if you know
	// you are selecting on one or very few items.
	//
	// If an error occurs, or no results are found, a nil is returned.
	// In the case of an error, the error is returned in the context.
	Get() *UnsupportedType

	// Count terminates a query and returns just the number of items selected.
	// distinct wll count the number of distinct items, ignoring duplicates.
	// nodes will select individual fields, and should be accompanied by a GroupBy.
	Count(distinct bool, nodes ...query.Node) int

	// Delete uses the query builder to delete a group of records that match the criteria
	Delete()

	// Subquery terminates the query builder and tags it as a subquery within a larger query.
	// You MUST include what you are selecting by adding Calculation or Select functions on the subquery builder.
	// Generally you would use this as a node to a Calculation function on the surrounding query builder.
	Subquery() *query.SubqueryNode

	joinOrSelect(nodes ...query.Node) UnsupportedTypeBuilder
}

type unsupportedTypeQueryBuilder struct {
	builder *query.Builder
}

func newUnsupportedTypeBuilder(ctx context.Context) UnsupportedTypeBuilder {
	b := unsupportedTypeQueryBuilder{
		builder: query.NewBuilder(ctx),
	}
	return b.Join(node.UnsupportedType()) // seed builder with the top table
}

// Load terminates the query builder, performs the query, and returns a slice of UnsupportedType objects.
// If there are any errors, nil is returned and the specific error is stored in the context.
// If no results come back from the query, it will return a non-nil empty slice.
func (b *unsupportedTypeQueryBuilder) Load() (unsupportedTypes []*UnsupportedType) {
	b.builder.Command = query.BuilderCommandLoad
	database := db.GetDatabase("goradd_unit")
	results := database.BuilderQuery(b.builder.Ctx, b.builder)
	if results == nil {
		return
	}
	for _, item := range results.([]map[string]any) {
		o := new(UnsupportedType)
		o.load(item, o, nil, "")
		unsupportedTypes = append(unsupportedTypes, o)
	}
	return
}

// Load terminates the query builder, performs the query, and returns a slice of interfaces.
// This can then satisfy a general interface that loads arrays of objects.
// If there are any errors, nil is returned and the specific error is stored in the context.
// If no results come back from the query, it will return a non-nil empty slice.
func (b *unsupportedTypeQueryBuilder) LoadI() (unsupportedTypes []any) {
	b.builder.Command = query.BuilderCommandLoad
	database := db.GetDatabase("goradd_unit")
	results := database.BuilderQuery(b.builder.Ctx, b.builder)
	if results == nil {
		return
	}
	for _, item := range results.([]map[string]any) {
		o := new(UnsupportedType)
		o.load(item, o, nil, "")
		unsupportedTypes = append(unsupportedTypes, o)
	}
	return
}

// LoadCursor terminates the query builder, performs the query, and returns a cursor to the query.
//
// A query cursor is useful for dealing with large amounts of query results. However, there are some
// limitations to its use. When working with SQL databases, you cannot use a cursor while querying
// many-to-many or reverse relationships that will create an array of values.
//
// Call Next() on the returned cursor object to step through the results. Make sure you call Close
// on the cursor object when you are done. You should use
//
//	defer cursor.Close()
//
// to make sure the cursor gets closed.
func (b *unsupportedTypeQueryBuilder) LoadCursor() unsupportedTypesCursor {
	b.builder.Command = query.BuilderCommandLoadCursor
	database := db.GetDatabase("goradd_unit")
	result := database.BuilderQuery(b.builder.Ctx, b.builder)
	if result == nil {
		return unsupportedTypesCursor{}
	}
	cursor := result.(query.CursorI)

	return unsupportedTypesCursor{cursor}
}

type unsupportedTypesCursor struct {
	query.CursorI
}

// Next returns the current UnsupportedType object and moves the cursor to the next one.
//
// If there are no more records, it returns nil.
func (c unsupportedTypesCursor) Next() *UnsupportedType {
	if c.CursorI == nil {
		return nil
	}

	row := c.CursorI.Next()
	if row == nil {
		return nil
	}
	o := new(UnsupportedType)
	o.load(row, o, nil, "")
	return o
}

// Get is a convenience method to return only the first item found in a query.
// The entire query is performed, so you should generally use this only if you know
// you are selecting on one or very few items.
//
// If an error occurs, or no results are found, a nil is returned.
// In the case of an error, the error is returned in the context.
func (b *unsupportedTypeQueryBuilder) Get() *UnsupportedType {
	results := b.Load()
	if results != nil && len(results) > 0 {
		obj := results[0]
		return obj
	} else {
		return nil
	}
}

// Join adds node n to the node tree so that its fields will appear in the query.
// Optionally add conditions to filter what gets included. Multiple conditions are anded.
func (b *unsupportedTypeQueryBuilder) Join(n query.Node, conditions ...query.Node) UnsupportedTypeBuilder {
	if query.RootNode(n).TableName_() != "unsupported_type" {
		panic("you can only join a node that is rooted at node.UnsupportedType()")
	}

	var condition query.Node
	if len(conditions) > 1 {
		condition = op.And(conditions)
	} else if len(conditions) == 1 {
		condition = conditions[0]
	}
	b.builder.Join(n, condition)
	return b
}

// Where adds a condition to filter what gets selected.
// Calling Where multiple times will AND the conditions together.
func (b *unsupportedTypeQueryBuilder) Where(c query.Node) UnsupportedTypeBuilder {
	b.builder.Where(c)
	return b
}

// OrderBy specifies how the resulting data should be sorted.
// By default, the given nodes are sorted in ascending order.
// Add Descending() to the node to specify that it should be sorted in descending order.
func (b *unsupportedTypeQueryBuilder) OrderBy(nodes ...query.Sorter) UnsupportedTypeBuilder {
	b.builder.OrderBy(nodes...)
	return b
}

// Limit will return a subset of the data, limited to the offset and number of rows specified.
// For large data sets and specific types of queries, this can be slow, because it will perform
// the entire query before computing the limit.
// You cannot limit a query that has embedded arrays.
func (b *unsupportedTypeQueryBuilder) Limit(maxRowCount int, offset int) UnsupportedTypeBuilder {
	b.builder.Limit(maxRowCount, offset)
	return b
}

// Select optimizes the query to only return the specified fields.
// Once you put a Select in your query, you must specify all the fields that you will eventually read out.
func (b *unsupportedTypeQueryBuilder) Select(nodes ...query.Node) UnsupportedTypeBuilder {
	b.builder.Select(nodes...)
	return b
}

// Calculation adds a calculation node with an aliased name.
// After the query, you can read the data using GetAlias() on a returned object.
func (b *unsupportedTypeQueryBuilder) Calculation(name string, n query.Aliaser) UnsupportedTypeBuilder {
	b.builder.Calculation(name, n)
	return b
}

// Distinct removes duplicates from the results of the query.
// Adding a Select() is usually required.
func (b *unsupportedTypeQueryBuilder) Distinct() UnsupportedTypeBuilder {
	b.builder.Distinct()
	return b
}

// GroupBy controls how results are grouped when using aggregate functions with Calculation.
func (b *unsupportedTypeQueryBuilder) GroupBy(nodes ...query.Node) UnsupportedTypeBuilder {
	b.builder.GroupBy(nodes...)
	return b
}

// Having does additional filtering on the results of the query after the query is performed.
func (b *unsupportedTypeQueryBuilder) Having(node query.Node) UnsupportedTypeBuilder {
	b.builder.Having(node)
	return b
}

// Count terminates a query and returns just the number of items selected.
// distinct wll count the number of distinct items, ignoring duplicates.
// nodes will select individual fields, and should be accompanied by a GroupBy.
func (b *unsupportedTypeQueryBuilder) Count(distinct bool, nodes ...query.Node) int {
	b.builder.Command = query.BuilderCommandCount
	if distinct {
		b.builder.Distinct()
	}
	database := db.GetDatabase("goradd_unit")
	results := database.BuilderQuery(b.builder.Ctx, b.builder)
	if results == nil {
		return 0
	}
	return results.(int)
}

// Delete uses the query builder to delete a group of records that match the criteria
func (b *unsupportedTypeQueryBuilder) Delete() {
	b.builder.Command = query.BuilderCommandDelete
	database := db.GetDatabase("goradd_unit")
	database.BuilderQuery(b.builder.Ctx, b.builder)
	broadcast.BulkChange(b.builder.Context(), "goradd_unit", "unsupported_type")
}

// Subquery terminates the query builder and tags it as a subquery within a larger query.
// You MUST include what you are selecting by adding Calculation or Select functions on the subquery builder.
// Generally you would use this as a node to a Calculation function on the surrounding query builder.
func (b *unsupportedTypeQueryBuilder) Subquery() *query.SubqueryNode {
	return b.builder.Subquery()
}

// joinOrSelect is a private helper function for the Load* functions
func (b *unsupportedTypeQueryBuilder) joinOrSelect(nodes ...query.Node) UnsupportedTypeBuilder {
	for _, n := range nodes {
		switch n.(type) {
		case query.TableNodeI:
			b.builder.Join(n, nil)
		case *query.ColumnNode:
			b.Select(n)
		}
	}
	return b
}

// CountUnsupportedTypeByTypeSerial queries the database and returns the number of UnsupportedType objects that
// have typeSerial.
// doc: type=UnsupportedType
func CountUnsupportedTypeByTypeSerial(ctx context.Context, typeSerial string) int {
	return int(queryUnsupportedTypes(ctx).Where(op.Equal(node.UnsupportedType().TypeSerial(), typeSerial)).Count(false))
}

// CountUnsupportedTypeByTypeSet queries the database and returns the number of UnsupportedType objects that
// have typeSet.
// doc: type=UnsupportedType
func CountUnsupportedTypeByTypeSet(ctx context.Context, typeSet []byte) int {
	return int(queryUnsupportedTypes(ctx).Where(op.Equal(node.UnsupportedType().TypeSet(), typeSet)).Count(false))
}

// CountUnsupportedTypeByTypeEnumerated queries the database and returns the number of UnsupportedType objects that
// have typeEnumerated.
// doc: type=UnsupportedType
func CountUnsupportedTypeByTypeEnumerated(ctx context.Context, typeEnumerated []byte) int {
	return int(queryUnsupportedTypes(ctx).Where(op.Equal(node.UnsupportedType().TypeEnumerated(), typeEnumerated)).Count(false))
}

// CountUnsupportedTypeByTypeDecimal queries the database and returns the number of UnsupportedType objects that
// have typeDecimal.
// doc: type=UnsupportedType
func CountUnsupportedTypeByTypeDecimal(ctx context.Context, typeDecimal string) int {
	return int(queryUnsupportedTypes(ctx).Where(op.Equal(node.UnsupportedType().TypeDecimal(), typeDecimal)).Count(false))
}

// CountUnsupportedTypeByTypeDouble queries the database and returns the number of UnsupportedType objects that
// have typeDouble.
// doc: type=UnsupportedType
func CountUnsupportedTypeByTypeDouble(ctx context.Context, typeDouble float64) int {
	return int(queryUnsupportedTypes(ctx).Where(op.Equal(node.UnsupportedType().TypeDouble(), typeDouble)).Count(false))
}

// CountUnsupportedTypeByTypeGeo queries the database and returns the number of UnsupportedType objects that
// have typeGeo.
// doc: type=UnsupportedType
func CountUnsupportedTypeByTypeGeo(ctx context.Context, typeGeo []byte) int {
	return int(queryUnsupportedTypes(ctx).Where(op.Equal(node.UnsupportedType().TypeGeo(), typeGeo)).Count(false))
}

// CountUnsupportedTypeByTypeTinyBlob queries the database and returns the number of UnsupportedType objects that
// have typeTinyBlob.
// doc: type=UnsupportedType
func CountUnsupportedTypeByTypeTinyBlob(ctx context.Context, typeTinyBlob []byte) int {
	return int(queryUnsupportedTypes(ctx).Where(op.Equal(node.UnsupportedType().TypeTinyBlob(), typeTinyBlob)).Count(false))
}

// CountUnsupportedTypeByTypeMediumBlob queries the database and returns the number of UnsupportedType objects that
// have typeMediumBlob.
// doc: type=UnsupportedType
func CountUnsupportedTypeByTypeMediumBlob(ctx context.Context, typeMediumBlob []byte) int {
	return int(queryUnsupportedTypes(ctx).Where(op.Equal(node.UnsupportedType().TypeMediumBlob(), typeMediumBlob)).Count(false))
}

// CountUnsupportedTypeByTypeVarbinary queries the database and returns the number of UnsupportedType objects that
// have typeVarbinary.
// doc: type=UnsupportedType
func CountUnsupportedTypeByTypeVarbinary(ctx context.Context, typeVarbinary []byte) int {
	return int(queryUnsupportedTypes(ctx).Where(op.Equal(node.UnsupportedType().TypeVarbinary(), typeVarbinary)).Count(false))
}

// CountUnsupportedTypeByTypeLongtext queries the database and returns the number of UnsupportedType objects that
// have typeLongtext.
// doc: type=UnsupportedType
func CountUnsupportedTypeByTypeLongtext(ctx context.Context, typeLongtext string) int {
	return int(queryUnsupportedTypes(ctx).Where(op.Equal(node.UnsupportedType().TypeLongtext(), typeLongtext)).Count(false))
}

// CountUnsupportedTypeByTypeBinary queries the database and returns the number of UnsupportedType objects that
// have typeBinary.
// doc: type=UnsupportedType
func CountUnsupportedTypeByTypeBinary(ctx context.Context, typeBinary []byte) int {
	return int(queryUnsupportedTypes(ctx).Where(op.Equal(node.UnsupportedType().TypeBinary(), typeBinary)).Count(false))
}

// CountUnsupportedTypeByTypeSmall queries the database and returns the number of UnsupportedType objects that
// have typeSmall.
// doc: type=UnsupportedType
func CountUnsupportedTypeByTypeSmall(ctx context.Context, typeSmall int) int {
	return int(queryUnsupportedTypes(ctx).Where(op.Equal(node.UnsupportedType().TypeSmall(), typeSmall)).Count(false))
}

// CountUnsupportedTypeByTypeMedium queries the database and returns the number of UnsupportedType objects that
// have typeMedium.
// doc: type=UnsupportedType
func CountUnsupportedTypeByTypeMedium(ctx context.Context, typeMedium int) int {
	return int(queryUnsupportedTypes(ctx).Where(op.Equal(node.UnsupportedType().TypeMedium(), typeMedium)).Count(false))
}

// CountUnsupportedTypeByTypeBig queries the database and returns the number of UnsupportedType objects that
// have typeBig.
// doc: type=UnsupportedType
func CountUnsupportedTypeByTypeBig(ctx context.Context, typeBig int64) int {
	return int(queryUnsupportedTypes(ctx).Where(op.Equal(node.UnsupportedType().TypeBig(), typeBig)).Count(false))
}

// CountUnsupportedTypeByTypePolygon queries the database and returns the number of UnsupportedType objects that
// have typePolygon.
// doc: type=UnsupportedType
func CountUnsupportedTypeByTypePolygon(ctx context.Context, typePolygon []byte) int {
	return int(queryUnsupportedTypes(ctx).Where(op.Equal(node.UnsupportedType().TypePolygon(), typePolygon)).Count(false))
}

// CountUnsupportedTypeByTypeUnsigned queries the database and returns the number of UnsupportedType objects that
// have typeUnsigned.
// doc: type=UnsupportedType
func CountUnsupportedTypeByTypeUnsigned(ctx context.Context, typeUnsigned uint) int {
	return int(queryUnsupportedTypes(ctx).Where(op.Equal(node.UnsupportedType().TypeUnsigned(), typeUnsigned)).Count(false))
}

// CountUnsupportedTypeByTypeMultfk1 queries the database and returns the number of UnsupportedType objects that
// have typeMultfk1.
// doc: type=UnsupportedType
func CountUnsupportedTypeByTypeMultfk1(ctx context.Context, typeMultfk1 string) int {
	return int(queryUnsupportedTypes(ctx).Where(op.Equal(node.UnsupportedType().TypeMultfk1(), typeMultfk1)).Count(false))
}

// CountUnsupportedTypeByTypeMultifk2 queries the database and returns the number of UnsupportedType objects that
// have typeMultifk2.
// doc: type=UnsupportedType
func CountUnsupportedTypeByTypeMultifk2(ctx context.Context, typeMultifk2 string) int {
	return int(queryUnsupportedTypes(ctx).Where(op.Equal(node.UnsupportedType().TypeMultifk2(), typeMultifk2)).Count(false))
}

// load is the private loader that transforms data coming from the database into a tree structure reflecting the relationships
// between the object chain requested by the user in the query.
// Care must be taken in the query, as Select clauses might not be honored if the child object has fields selected which the parent object does not have.
func (o *unsupportedTypeBase) load(m map[string]interface{}, objThis *UnsupportedType, objParent interface{}, parentKey string) {

	if v, ok := m["type_serial"]; ok && v != nil {
		if o.typeSerial, ok = v.(string); ok {
			o.typeSerialIsValid = true
			o.typeSerialIsDirty = false

			o._originalPK = o.typeSerial

		} else {
			panic("Wrong type found for type_serial.")
		}
	} else {
		o.typeSerialIsValid = false
		o.typeSerial = ""
	}

	if v, ok := m["type_set"]; ok && v != nil {
		if o.typeSet, ok = v.([]byte); ok {
			o.typeSetIsValid = true
			o.typeSetIsDirty = false

		} else {
			panic("Wrong type found for type_set.")
		}
	} else {
		o.typeSetIsValid = false
		o.typeSet = []byte(nil)
	}

	if v, ok := m["type_enumerated"]; ok && v != nil {
		if o.typeEnumerated, ok = v.([]byte); ok {
			o.typeEnumeratedIsValid = true
			o.typeEnumeratedIsDirty = false

		} else {
			panic("Wrong type found for type_enumerated.")
		}
	} else {
		o.typeEnumeratedIsValid = false
		o.typeEnumerated = []byte(nil)
	}

	if v, ok := m["type_decimal"]; ok && v != nil {
		if o.typeDecimal, ok = v.(string); ok {
			o.typeDecimalIsValid = true
			o.typeDecimalIsDirty = false

		} else {
			panic("Wrong type found for type_decimal.")
		}
	} else {
		o.typeDecimalIsValid = false
		o.typeDecimal = ""
	}

	if v, ok := m["type_double"]; ok && v != nil {
		if o.typeDouble, ok = v.(float64); ok {
			o.typeDoubleIsValid = true
			o.typeDoubleIsDirty = false

		} else {
			panic("Wrong type found for type_double.")
		}
	} else {
		o.typeDoubleIsValid = false
		o.typeDouble = 0
	}

	if v, ok := m["type_geo"]; ok && v != nil {
		if o.typeGeo, ok = v.([]byte); ok {
			o.typeGeoIsValid = true
			o.typeGeoIsDirty = false

		} else {
			panic("Wrong type found for type_geo.")
		}
	} else {
		o.typeGeoIsValid = false
		o.typeGeo = []byte(nil)
	}

	if v, ok := m["type_tiny_blob"]; ok && v != nil {
		if o.typeTinyBlob, ok = v.([]byte); ok {
			o.typeTinyBlobIsValid = true
			o.typeTinyBlobIsDirty = false

		} else {
			panic("Wrong type found for type_tiny_blob.")
		}
	} else {
		o.typeTinyBlobIsValid = false
		o.typeTinyBlob = []byte(nil)
	}

	if v, ok := m["type_medium_blob"]; ok && v != nil {
		if o.typeMediumBlob, ok = v.([]byte); ok {
			o.typeMediumBlobIsValid = true
			o.typeMediumBlobIsDirty = false

		} else {
			panic("Wrong type found for type_medium_blob.")
		}
	} else {
		o.typeMediumBlobIsValid = false
		o.typeMediumBlob = []byte(nil)
	}

	if v, ok := m["type_varbinary"]; ok && v != nil {
		if o.typeVarbinary, ok = v.([]byte); ok {
			o.typeVarbinaryIsValid = true
			o.typeVarbinaryIsDirty = false

		} else {
			panic("Wrong type found for type_varbinary.")
		}
	} else {
		o.typeVarbinaryIsValid = false
		o.typeVarbinary = []byte(nil)
	}

	if v, ok := m["type_longtext"]; ok && v != nil {
		if o.typeLongtext, ok = v.(string); ok {
			o.typeLongtextIsValid = true
			o.typeLongtextIsDirty = false

		} else {
			panic("Wrong type found for type_longtext.")
		}
	} else {
		o.typeLongtextIsValid = false
		o.typeLongtext = ""
	}

	if v, ok := m["type_binary"]; ok && v != nil {
		if o.typeBinary, ok = v.([]byte); ok {
			o.typeBinaryIsValid = true
			o.typeBinaryIsDirty = false

		} else {
			panic("Wrong type found for type_binary.")
		}
	} else {
		o.typeBinaryIsValid = false
		o.typeBinary = []byte(nil)
	}

	if v, ok := m["type_small"]; ok && v != nil {
		if o.typeSmall, ok = v.(int); ok {
			o.typeSmallIsValid = true
			o.typeSmallIsDirty = false

		} else {
			panic("Wrong type found for type_small.")
		}
	} else {
		o.typeSmallIsValid = false
		o.typeSmall = 0
	}

	if v, ok := m["type_medium"]; ok && v != nil {
		if o.typeMedium, ok = v.(int); ok {
			o.typeMediumIsValid = true
			o.typeMediumIsDirty = false

		} else {
			panic("Wrong type found for type_medium.")
		}
	} else {
		o.typeMediumIsValid = false
		o.typeMedium = 0
	}

	if v, ok := m["type_big"]; ok && v != nil {
		if o.typeBig, ok = v.(int64); ok {
			o.typeBigIsValid = true
			o.typeBigIsDirty = false

		} else {
			panic("Wrong type found for type_big.")
		}
	} else {
		o.typeBigIsValid = false
		o.typeBig = 0
	}

	if v, ok := m["type_polygon"]; ok && v != nil {
		if o.typePolygon, ok = v.([]byte); ok {
			o.typePolygonIsValid = true
			o.typePolygonIsDirty = false

		} else {
			panic("Wrong type found for type_polygon.")
		}
	} else {
		o.typePolygonIsValid = false
		o.typePolygon = []byte(nil)
	}

	if v, ok := m["type_unsigned"]; ok && v != nil {
		if o.typeUnsigned, ok = v.(uint); ok {
			o.typeUnsignedIsValid = true
			o.typeUnsignedIsDirty = false

		} else {
			panic("Wrong type found for type_unsigned.")
		}
	} else {
		o.typeUnsignedIsValid = false
		o.typeUnsigned = 0x0
	}

	if v, ok := m["type_multFk1"]; ok && v != nil {
		if o.typeMultfk1, ok = v.(string); ok {
			o.typeMultfk1IsValid = true
			o.typeMultfk1IsDirty = false

		} else {
			panic("Wrong type found for type_multFk1.")
		}
	} else {
		o.typeMultfk1IsValid = false
		o.typeMultfk1 = ""
	}

	if v, ok := m["type_multiFk2"]; ok && v != nil {
		if o.typeMultifk2, ok = v.(string); ok {
			o.typeMultifk2IsValid = true
			o.typeMultifk2IsDirty = false

		} else {
			panic("Wrong type found for type_multiFk2.")
		}
	} else {
		o.typeMultifk2IsValid = false
		o.typeMultifk2 = ""
	}

	if v, ok := m["aliases_"]; ok {
		o._aliases = map[string]interface{}(v.(db.ValueMap))
	}

	o._restored = true

}

// Save will update or insert the object, depending on the state of the object.
// If it has any auto-generated ids, those will be updated.
func (o *unsupportedTypeBase) Save(ctx context.Context) {
	if o._restored {
		o.update(ctx)
	} else {
		o.insert(ctx)
	}
}

// update will update the values in the database, saving any changed values.
func (o *unsupportedTypeBase) update(ctx context.Context) {
	if !o._restored {
		panic("cannot update a record that was not originally read from the database.")
	}

	var modifiedFields map[string]interface{}
	d := Database()
	db.ExecuteTransaction(ctx, d, func() {

		// TODO: Perform all reads and consistency checks before saves

		// Save all modified fields to the database
		modifiedFields = o.getModifiedFields()
		if len(modifiedFields) != 0 {
			d.Update(ctx, "unsupported_type", modifiedFields, map[string]any{"type_serial": o._originalPK})
		}

	}) // transaction

	o.resetDirtyStatus()
	if len(modifiedFields) != 0 {
		broadcast.Update(ctx, "goradd_unit", "unsupported_type", o._originalPK, all.SortedKeys(modifiedFields)...)
	}
}

// insert will insert the object into the database. Related items will be saved.
func (o *unsupportedTypeBase) insert(ctx context.Context) {
	d := Database()
	db.ExecuteTransaction(ctx, d, func() {

		if !o.typeSetIsValid {
			panic("a value for TypeSet is required, and there is no default value. Call SetTypeSet() before inserting the record.")
		}

		if !o.typeEnumeratedIsValid {
			panic("a value for TypeEnumerated is required, and there is no default value. Call SetTypeEnumerated() before inserting the record.")
		}

		if !o.typeDecimalIsValid {
			panic("a value for TypeDecimal is required, and there is no default value. Call SetTypeDecimal() before inserting the record.")
		}

		if !o.typeDoubleIsValid {
			panic("a value for TypeDouble is required, and there is no default value. Call SetTypeDouble() before inserting the record.")
		}

		if !o.typeGeoIsValid {
			panic("a value for TypeGeo is required, and there is no default value. Call SetTypeGeo() before inserting the record.")
		}

		if !o.typeTinyBlobIsValid {
			panic("a value for TypeTinyBlob is required, and there is no default value. Call SetTypeTinyBlob() before inserting the record.")
		}

		if !o.typeMediumBlobIsValid {
			panic("a value for TypeMediumBlob is required, and there is no default value. Call SetTypeMediumBlob() before inserting the record.")
		}

		if !o.typeVarbinaryIsValid {
			panic("a value for TypeVarbinary is required, and there is no default value. Call SetTypeVarbinary() before inserting the record.")
		}

		if !o.typeLongtextIsValid {
			panic("a value for TypeLongtext is required, and there is no default value. Call SetTypeLongtext() before inserting the record.")
		}

		if !o.typeBinaryIsValid {
			panic("a value for TypeBinary is required, and there is no default value. Call SetTypeBinary() before inserting the record.")
		}

		if !o.typeSmallIsValid {
			panic("a value for TypeSmall is required, and there is no default value. Call SetTypeSmall() before inserting the record.")
		}

		if !o.typeMediumIsValid {
			panic("a value for TypeMedium is required, and there is no default value. Call SetTypeMedium() before inserting the record.")
		}

		if !o.typeBigIsValid {
			panic("a value for TypeBig is required, and there is no default value. Call SetTypeBig() before inserting the record.")
		}

		if !o.typePolygonIsValid {
			panic("a value for TypePolygon is required, and there is no default value. Call SetTypePolygon() before inserting the record.")
		}

		if !o.typeUnsignedIsValid {
			panic("a value for TypeUnsigned is required, and there is no default value. Call SetTypeUnsigned() before inserting the record.")
		}

		if !o.typeMultfk1IsValid {
			panic("a value for TypeMultfk1 is required, and there is no default value. Call SetTypeMultfk1() before inserting the record.")
		}

		if !o.typeMultifk2IsValid {
			panic("a value for TypeMultifk2 is required, and there is no default value. Call SetTypeMultifk2() before inserting the record.")
		}

		m := o.getValidFields()

		id := d.Insert(ctx, "unsupported_type", m)
		o.typeSerial = id
		o._originalPK = id

	}) // transaction

	o.resetDirtyStatus()
	o._restored = true
	broadcast.Insert(ctx, "goradd_unit", "unsupported_type", o.PrimaryKey())
}

// getModifiedFields returns the database columns that have been modified. This
// will determine which specific fields are sent to the database to be changed.
func (o *unsupportedTypeBase) getModifiedFields() (fields map[string]interface{}) {
	fields = map[string]interface{}{}
	if o.typeSerialIsDirty {
		fields["type_serial"] = o.typeSerial
	}
	if o.typeSetIsDirty {
		fields["type_set"] = o.typeSet
	}
	if o.typeEnumeratedIsDirty {
		fields["type_enumerated"] = o.typeEnumerated
	}
	if o.typeDecimalIsDirty {
		fields["type_decimal"] = o.typeDecimal
	}
	if o.typeDoubleIsDirty {
		fields["type_double"] = o.typeDouble
	}
	if o.typeGeoIsDirty {
		fields["type_geo"] = o.typeGeo
	}
	if o.typeTinyBlobIsDirty {
		fields["type_tiny_blob"] = o.typeTinyBlob
	}
	if o.typeMediumBlobIsDirty {
		fields["type_medium_blob"] = o.typeMediumBlob
	}
	if o.typeVarbinaryIsDirty {
		fields["type_varbinary"] = o.typeVarbinary
	}
	if o.typeLongtextIsDirty {
		fields["type_longtext"] = o.typeLongtext
	}
	if o.typeBinaryIsDirty {
		fields["type_binary"] = o.typeBinary
	}
	if o.typeSmallIsDirty {
		fields["type_small"] = o.typeSmall
	}
	if o.typeMediumIsDirty {
		fields["type_medium"] = o.typeMedium
	}
	if o.typeBigIsDirty {
		fields["type_big"] = o.typeBig
	}
	if o.typePolygonIsDirty {
		fields["type_polygon"] = o.typePolygon
	}
	if o.typeUnsignedIsDirty {
		fields["type_unsigned"] = o.typeUnsigned
	}
	if o.typeMultfk1IsDirty {
		fields["type_multFk1"] = o.typeMultfk1
	}
	if o.typeMultifk2IsDirty {
		fields["type_multiFk2"] = o.typeMultifk2
	}
	return
}

// getValidFields returns the fields that have valid data in them in a form ready to send to the database.
func (o *unsupportedTypeBase) getValidFields() (fields map[string]interface{}) {
	fields = map[string]interface{}{}

	if o.typeSetIsValid {

		fields["type_set"] = o.typeSet

	}

	if o.typeEnumeratedIsValid {

		fields["type_enumerated"] = o.typeEnumerated

	}

	if o.typeDecimalIsValid {

		fields["type_decimal"] = o.typeDecimal

	}

	if o.typeDoubleIsValid {

		fields["type_double"] = o.typeDouble

	}

	if o.typeGeoIsValid {

		fields["type_geo"] = o.typeGeo

	}

	if o.typeTinyBlobIsValid {

		fields["type_tiny_blob"] = o.typeTinyBlob

	}

	if o.typeMediumBlobIsValid {

		fields["type_medium_blob"] = o.typeMediumBlob

	}

	if o.typeVarbinaryIsValid {

		fields["type_varbinary"] = o.typeVarbinary

	}

	if o.typeLongtextIsValid {

		fields["type_longtext"] = o.typeLongtext

	}

	if o.typeBinaryIsValid {

		fields["type_binary"] = o.typeBinary

	}

	if o.typeSmallIsValid {

		fields["type_small"] = o.typeSmall

	}

	if o.typeMediumIsValid {

		fields["type_medium"] = o.typeMedium

	}

	if o.typeBigIsValid {

		fields["type_big"] = o.typeBig

	}

	if o.typePolygonIsValid {

		fields["type_polygon"] = o.typePolygon

	}

	if o.typeUnsignedIsValid {

		fields["type_unsigned"] = o.typeUnsigned

	}

	if o.typeMultfk1IsValid {

		fields["type_multFk1"] = o.typeMultfk1

	}

	if o.typeMultifk2IsValid {

		fields["type_multiFk2"] = o.typeMultifk2

	}
	return
}

// Delete deletes the record from the database.
func (o *unsupportedTypeBase) Delete(ctx context.Context) {
	if !o._restored {
		panic("Cannot delete a record that has no primary key value.")
	}
	d := Database()
	d.Delete(ctx, "unsupported_type", map[string]any{"TypeSerial": o.typeSerial})
	broadcast.Delete(ctx, "goradd_unit", "unsupported_type", fmt.Sprint(o.typeSerial))
}

// deleteUnsupportedType deletes the associated record from the database.
func deleteUnsupportedType(ctx context.Context, pk string) {
	d := db.GetDatabase("goradd_unit")
	d.Delete(ctx, "unsupported_type", map[string]any{"TypeSerial": pk})
	broadcast.Delete(ctx, "goradd_unit", "unsupported_type", fmt.Sprint(pk))
}

// resetDirtyStatus resets the dirty status of every field in the object.
func (o *unsupportedTypeBase) resetDirtyStatus() {
	o.typeSerialIsDirty = false
	o.typeSetIsDirty = false
	o.typeEnumeratedIsDirty = false
	o.typeDecimalIsDirty = false
	o.typeDoubleIsDirty = false
	o.typeGeoIsDirty = false
	o.typeTinyBlobIsDirty = false
	o.typeMediumBlobIsDirty = false
	o.typeVarbinaryIsDirty = false
	o.typeLongtextIsDirty = false
	o.typeBinaryIsDirty = false
	o.typeSmallIsDirty = false
	o.typeMediumIsDirty = false
	o.typeBigIsDirty = false
	o.typePolygonIsDirty = false
	o.typeUnsignedIsDirty = false
	o.typeMultfk1IsDirty = false
	o.typeMultifk2IsDirty = false

}

// IsDirty returns true if the object has been changed since it was read from the database.
func (o *unsupportedTypeBase) IsDirty() (dirty bool) {
	dirty = o.typeSerialIsDirty ||
		o.typeSetIsDirty ||
		o.typeEnumeratedIsDirty ||
		o.typeDecimalIsDirty ||
		o.typeDoubleIsDirty ||
		o.typeGeoIsDirty ||
		o.typeTinyBlobIsDirty ||
		o.typeMediumBlobIsDirty ||
		o.typeVarbinaryIsDirty ||
		o.typeLongtextIsDirty ||
		o.typeBinaryIsDirty ||
		o.typeSmallIsDirty ||
		o.typeMediumIsDirty ||
		o.typeBigIsDirty ||
		o.typePolygonIsDirty ||
		o.typeUnsignedIsDirty ||
		o.typeMultfk1IsDirty ||
		o.typeMultifk2IsDirty

	return
}

// Get returns the value of a field in the object based on the field's name.
// It will also get related objects if they are loaded.
// Invalid fields and objects are returned as nil
func (o *unsupportedTypeBase) Get(key string) interface{} {

	switch key {

	case "TypeSerial":
		if !o.typeSerialIsValid {
			return nil
		}
		return o.typeSerial

	case "TypeSet":
		if !o.typeSetIsValid {
			return nil
		}
		return o.typeSet

	case "TypeEnumerated":
		if !o.typeEnumeratedIsValid {
			return nil
		}
		return o.typeEnumerated

	case "TypeDecimal":
		if !o.typeDecimalIsValid {
			return nil
		}
		return o.typeDecimal

	case "TypeDouble":
		if !o.typeDoubleIsValid {
			return nil
		}
		return o.typeDouble

	case "TypeGeo":
		if !o.typeGeoIsValid {
			return nil
		}
		return o.typeGeo

	case "TypeTinyBlob":
		if !o.typeTinyBlobIsValid {
			return nil
		}
		return o.typeTinyBlob

	case "TypeMediumBlob":
		if !o.typeMediumBlobIsValid {
			return nil
		}
		return o.typeMediumBlob

	case "TypeVarbinary":
		if !o.typeVarbinaryIsValid {
			return nil
		}
		return o.typeVarbinary

	case "TypeLongtext":
		if !o.typeLongtextIsValid {
			return nil
		}
		return o.typeLongtext

	case "TypeBinary":
		if !o.typeBinaryIsValid {
			return nil
		}
		return o.typeBinary

	case "TypeSmall":
		if !o.typeSmallIsValid {
			return nil
		}
		return o.typeSmall

	case "TypeMedium":
		if !o.typeMediumIsValid {
			return nil
		}
		return o.typeMedium

	case "TypeBig":
		if !o.typeBigIsValid {
			return nil
		}
		return o.typeBig

	case "TypePolygon":
		if !o.typePolygonIsValid {
			return nil
		}
		return o.typePolygon

	case "TypeUnsigned":
		if !o.typeUnsignedIsValid {
			return nil
		}
		return o.typeUnsigned

	case "TypeMultfk1":
		if !o.typeMultfk1IsValid {
			return nil
		}
		return o.typeMultfk1

	case "TypeMultifk2":
		if !o.typeMultifk2IsValid {
			return nil
		}
		return o.typeMultifk2

	}
	return nil
}

// MarshalBinary serializes the object into a buffer that is deserializable using UnmarshalBinary.
// It should be used for transmitting database objects over the wire, or for temporary storage. It does not send
// a version number, so if the data format changes, its up to you to invalidate the old stored objects.
// The framework uses this to serialize the object when it is stored in a control.
func (o *unsupportedTypeBase) MarshalBinary() ([]byte, error) {
	buf := new(bytes.Buffer)
	encoder := gob.NewEncoder(buf)

	if err := encoder.Encode(o.typeSerial); err != nil {
		return nil, fmt.Errorf("error encoding UnsupportedType.typeSerial: %w", err)
	}
	if err := encoder.Encode(o.typeSerialIsValid); err != nil {
		return nil, fmt.Errorf("error encoding UnsupportedType.typeSerialIsValid: %w", err)
	}
	if err := encoder.Encode(o.typeSerialIsDirty); err != nil {
		return nil, fmt.Errorf("error encoding UnsupportedType.typeSerialIsDirty: %w", err)
	}

	if err := encoder.Encode(o.typeSet); err != nil {
		return nil, fmt.Errorf("error encoding UnsupportedType.typeSet: %w", err)
	}
	if err := encoder.Encode(o.typeSetIsValid); err != nil {
		return nil, fmt.Errorf("error encoding UnsupportedType.typeSetIsValid: %w", err)
	}
	if err := encoder.Encode(o.typeSetIsDirty); err != nil {
		return nil, fmt.Errorf("error encoding UnsupportedType.typeSetIsDirty: %w", err)
	}

	if err := encoder.Encode(o.typeEnumerated); err != nil {
		return nil, fmt.Errorf("error encoding UnsupportedType.typeEnumerated: %w", err)
	}
	if err := encoder.Encode(o.typeEnumeratedIsValid); err != nil {
		return nil, fmt.Errorf("error encoding UnsupportedType.typeEnumeratedIsValid: %w", err)
	}
	if err := encoder.Encode(o.typeEnumeratedIsDirty); err != nil {
		return nil, fmt.Errorf("error encoding UnsupportedType.typeEnumeratedIsDirty: %w", err)
	}

	if err := encoder.Encode(o.typeDecimal); err != nil {
		return nil, fmt.Errorf("error encoding UnsupportedType.typeDecimal: %w", err)
	}
	if err := encoder.Encode(o.typeDecimalIsValid); err != nil {
		return nil, fmt.Errorf("error encoding UnsupportedType.typeDecimalIsValid: %w", err)
	}
	if err := encoder.Encode(o.typeDecimalIsDirty); err != nil {
		return nil, fmt.Errorf("error encoding UnsupportedType.typeDecimalIsDirty: %w", err)
	}

	if err := encoder.Encode(o.typeDouble); err != nil {
		return nil, fmt.Errorf("error encoding UnsupportedType.typeDouble: %w", err)
	}
	if err := encoder.Encode(o.typeDoubleIsValid); err != nil {
		return nil, fmt.Errorf("error encoding UnsupportedType.typeDoubleIsValid: %w", err)
	}
	if err := encoder.Encode(o.typeDoubleIsDirty); err != nil {
		return nil, fmt.Errorf("error encoding UnsupportedType.typeDoubleIsDirty: %w", err)
	}

	if err := encoder.Encode(o.typeGeo); err != nil {
		return nil, fmt.Errorf("error encoding UnsupportedType.typeGeo: %w", err)
	}
	if err := encoder.Encode(o.typeGeoIsValid); err != nil {
		return nil, fmt.Errorf("error encoding UnsupportedType.typeGeoIsValid: %w", err)
	}
	if err := encoder.Encode(o.typeGeoIsDirty); err != nil {
		return nil, fmt.Errorf("error encoding UnsupportedType.typeGeoIsDirty: %w", err)
	}

	if err := encoder.Encode(o.typeTinyBlob); err != nil {
		return nil, fmt.Errorf("error encoding UnsupportedType.typeTinyBlob: %w", err)
	}
	if err := encoder.Encode(o.typeTinyBlobIsValid); err != nil {
		return nil, fmt.Errorf("error encoding UnsupportedType.typeTinyBlobIsValid: %w", err)
	}
	if err := encoder.Encode(o.typeTinyBlobIsDirty); err != nil {
		return nil, fmt.Errorf("error encoding UnsupportedType.typeTinyBlobIsDirty: %w", err)
	}

	if err := encoder.Encode(o.typeMediumBlob); err != nil {
		return nil, fmt.Errorf("error encoding UnsupportedType.typeMediumBlob: %w", err)
	}
	if err := encoder.Encode(o.typeMediumBlobIsValid); err != nil {
		return nil, fmt.Errorf("error encoding UnsupportedType.typeMediumBlobIsValid: %w", err)
	}
	if err := encoder.Encode(o.typeMediumBlobIsDirty); err != nil {
		return nil, fmt.Errorf("error encoding UnsupportedType.typeMediumBlobIsDirty: %w", err)
	}

	if err := encoder.Encode(o.typeVarbinary); err != nil {
		return nil, fmt.Errorf("error encoding UnsupportedType.typeVarbinary: %w", err)
	}
	if err := encoder.Encode(o.typeVarbinaryIsValid); err != nil {
		return nil, fmt.Errorf("error encoding UnsupportedType.typeVarbinaryIsValid: %w", err)
	}
	if err := encoder.Encode(o.typeVarbinaryIsDirty); err != nil {
		return nil, fmt.Errorf("error encoding UnsupportedType.typeVarbinaryIsDirty: %w", err)
	}

	if err := encoder.Encode(o.typeLongtext); err != nil {
		return nil, fmt.Errorf("error encoding UnsupportedType.typeLongtext: %w", err)
	}
	if err := encoder.Encode(o.typeLongtextIsValid); err != nil {
		return nil, fmt.Errorf("error encoding UnsupportedType.typeLongtextIsValid: %w", err)
	}
	if err := encoder.Encode(o.typeLongtextIsDirty); err != nil {
		return nil, fmt.Errorf("error encoding UnsupportedType.typeLongtextIsDirty: %w", err)
	}

	if err := encoder.Encode(o.typeBinary); err != nil {
		return nil, fmt.Errorf("error encoding UnsupportedType.typeBinary: %w", err)
	}
	if err := encoder.Encode(o.typeBinaryIsValid); err != nil {
		return nil, fmt.Errorf("error encoding UnsupportedType.typeBinaryIsValid: %w", err)
	}
	if err := encoder.Encode(o.typeBinaryIsDirty); err != nil {
		return nil, fmt.Errorf("error encoding UnsupportedType.typeBinaryIsDirty: %w", err)
	}

	if err := encoder.Encode(o.typeSmall); err != nil {
		return nil, fmt.Errorf("error encoding UnsupportedType.typeSmall: %w", err)
	}
	if err := encoder.Encode(o.typeSmallIsValid); err != nil {
		return nil, fmt.Errorf("error encoding UnsupportedType.typeSmallIsValid: %w", err)
	}
	if err := encoder.Encode(o.typeSmallIsDirty); err != nil {
		return nil, fmt.Errorf("error encoding UnsupportedType.typeSmallIsDirty: %w", err)
	}

	if err := encoder.Encode(o.typeMedium); err != nil {
		return nil, fmt.Errorf("error encoding UnsupportedType.typeMedium: %w", err)
	}
	if err := encoder.Encode(o.typeMediumIsValid); err != nil {
		return nil, fmt.Errorf("error encoding UnsupportedType.typeMediumIsValid: %w", err)
	}
	if err := encoder.Encode(o.typeMediumIsDirty); err != nil {
		return nil, fmt.Errorf("error encoding UnsupportedType.typeMediumIsDirty: %w", err)
	}

	if err := encoder.Encode(o.typeBig); err != nil {
		return nil, fmt.Errorf("error encoding UnsupportedType.typeBig: %w", err)
	}
	if err := encoder.Encode(o.typeBigIsValid); err != nil {
		return nil, fmt.Errorf("error encoding UnsupportedType.typeBigIsValid: %w", err)
	}
	if err := encoder.Encode(o.typeBigIsDirty); err != nil {
		return nil, fmt.Errorf("error encoding UnsupportedType.typeBigIsDirty: %w", err)
	}

	if err := encoder.Encode(o.typePolygon); err != nil {
		return nil, fmt.Errorf("error encoding UnsupportedType.typePolygon: %w", err)
	}
	if err := encoder.Encode(o.typePolygonIsValid); err != nil {
		return nil, fmt.Errorf("error encoding UnsupportedType.typePolygonIsValid: %w", err)
	}
	if err := encoder.Encode(o.typePolygonIsDirty); err != nil {
		return nil, fmt.Errorf("error encoding UnsupportedType.typePolygonIsDirty: %w", err)
	}

	if err := encoder.Encode(o.typeUnsigned); err != nil {
		return nil, fmt.Errorf("error encoding UnsupportedType.typeUnsigned: %w", err)
	}
	if err := encoder.Encode(o.typeUnsignedIsValid); err != nil {
		return nil, fmt.Errorf("error encoding UnsupportedType.typeUnsignedIsValid: %w", err)
	}
	if err := encoder.Encode(o.typeUnsignedIsDirty); err != nil {
		return nil, fmt.Errorf("error encoding UnsupportedType.typeUnsignedIsDirty: %w", err)
	}

	if err := encoder.Encode(o.typeMultfk1); err != nil {
		return nil, fmt.Errorf("error encoding UnsupportedType.typeMultfk1: %w", err)
	}
	if err := encoder.Encode(o.typeMultfk1IsValid); err != nil {
		return nil, fmt.Errorf("error encoding UnsupportedType.typeMultfk1IsValid: %w", err)
	}
	if err := encoder.Encode(o.typeMultfk1IsDirty); err != nil {
		return nil, fmt.Errorf("error encoding UnsupportedType.typeMultfk1IsDirty: %w", err)
	}

	if err := encoder.Encode(o.typeMultifk2); err != nil {
		return nil, fmt.Errorf("error encoding UnsupportedType.typeMultifk2: %w", err)
	}
	if err := encoder.Encode(o.typeMultifk2IsValid); err != nil {
		return nil, fmt.Errorf("error encoding UnsupportedType.typeMultifk2IsValid: %w", err)
	}
	if err := encoder.Encode(o.typeMultifk2IsDirty); err != nil {
		return nil, fmt.Errorf("error encoding UnsupportedType.typeMultifk2IsDirty: %w", err)
	}

	if o._aliases == nil {
		if err := encoder.Encode(false); err != nil {
			return nil, err
		}
	} else {
		if err := encoder.Encode(true); err != nil {
			return nil, err
		}
		if err := encoder.Encode(o._aliases); err != nil {
			return nil, fmt.Errorf("error encoding UnsupportedType._aliases: %w", err)
		}
	}

	if err := encoder.Encode(o._restored); err != nil {
		return nil, fmt.Errorf("error encoding UnsupportedType._restored: %w", err)
	}
	if err := encoder.Encode(o._originalPK); err != nil {
		return nil, fmt.Errorf("error encoding UnsupportedType._originalPK: %w", err)
	}

	return buf.Bytes(), nil

	return buf.Bytes(), nil
}

// UnmarshalBinary converts a structure that was created with MarshalBinary into a UnsupportedType object.
func (o *unsupportedTypeBase) UnmarshalBinary(data []byte) (err error) {

	buf := bytes.NewBuffer(data)
	dec := gob.NewDecoder(buf)
	var isPtr bool

	_ = isPtr
	if err = dec.Decode(&o.typeSerial); err != nil {
		return fmt.Errorf("error decoding UnsupportedType.typeSerial: %w", err)
	}
	if err = dec.Decode(&o.typeSerialIsValid); err != nil {
		return fmt.Errorf("error decoding UnsupportedType.typeSerialIsValid: %w", err)
	}
	if err = dec.Decode(&o.typeSerialIsDirty); err != nil {
		return fmt.Errorf("error decoding UnsupportedType.typeSerialIsDirty: %w", err)
	}

	if err = dec.Decode(&o.typeSet); err != nil {
		return fmt.Errorf("error decoding UnsupportedType.typeSet: %w", err)
	}
	if err = dec.Decode(&o.typeSetIsValid); err != nil {
		return fmt.Errorf("error decoding UnsupportedType.typeSetIsValid: %w", err)
	}
	if err = dec.Decode(&o.typeSetIsDirty); err != nil {
		return fmt.Errorf("error decoding UnsupportedType.typeSetIsDirty: %w", err)
	}

	if err = dec.Decode(&o.typeEnumerated); err != nil {
		return fmt.Errorf("error decoding UnsupportedType.typeEnumerated: %w", err)
	}
	if err = dec.Decode(&o.typeEnumeratedIsValid); err != nil {
		return fmt.Errorf("error decoding UnsupportedType.typeEnumeratedIsValid: %w", err)
	}
	if err = dec.Decode(&o.typeEnumeratedIsDirty); err != nil {
		return fmt.Errorf("error decoding UnsupportedType.typeEnumeratedIsDirty: %w", err)
	}

	if err = dec.Decode(&o.typeDecimal); err != nil {
		return fmt.Errorf("error decoding UnsupportedType.typeDecimal: %w", err)
	}
	if err = dec.Decode(&o.typeDecimalIsValid); err != nil {
		return fmt.Errorf("error decoding UnsupportedType.typeDecimalIsValid: %w", err)
	}
	if err = dec.Decode(&o.typeDecimalIsDirty); err != nil {
		return fmt.Errorf("error decoding UnsupportedType.typeDecimalIsDirty: %w", err)
	}

	if err = dec.Decode(&o.typeDouble); err != nil {
		return fmt.Errorf("error decoding UnsupportedType.typeDouble: %w", err)
	}
	if err = dec.Decode(&o.typeDoubleIsValid); err != nil {
		return fmt.Errorf("error decoding UnsupportedType.typeDoubleIsValid: %w", err)
	}
	if err = dec.Decode(&o.typeDoubleIsDirty); err != nil {
		return fmt.Errorf("error decoding UnsupportedType.typeDoubleIsDirty: %w", err)
	}

	if err = dec.Decode(&o.typeGeo); err != nil {
		return fmt.Errorf("error decoding UnsupportedType.typeGeo: %w", err)
	}
	if err = dec.Decode(&o.typeGeoIsValid); err != nil {
		return fmt.Errorf("error decoding UnsupportedType.typeGeoIsValid: %w", err)
	}
	if err = dec.Decode(&o.typeGeoIsDirty); err != nil {
		return fmt.Errorf("error decoding UnsupportedType.typeGeoIsDirty: %w", err)
	}

	if err = dec.Decode(&o.typeTinyBlob); err != nil {
		return fmt.Errorf("error decoding UnsupportedType.typeTinyBlob: %w", err)
	}
	if err = dec.Decode(&o.typeTinyBlobIsValid); err != nil {
		return fmt.Errorf("error decoding UnsupportedType.typeTinyBlobIsValid: %w", err)
	}
	if err = dec.Decode(&o.typeTinyBlobIsDirty); err != nil {
		return fmt.Errorf("error decoding UnsupportedType.typeTinyBlobIsDirty: %w", err)
	}

	if err = dec.Decode(&o.typeMediumBlob); err != nil {
		return fmt.Errorf("error decoding UnsupportedType.typeMediumBlob: %w", err)
	}
	if err = dec.Decode(&o.typeMediumBlobIsValid); err != nil {
		return fmt.Errorf("error decoding UnsupportedType.typeMediumBlobIsValid: %w", err)
	}
	if err = dec.Decode(&o.typeMediumBlobIsDirty); err != nil {
		return fmt.Errorf("error decoding UnsupportedType.typeMediumBlobIsDirty: %w", err)
	}

	if err = dec.Decode(&o.typeVarbinary); err != nil {
		return fmt.Errorf("error decoding UnsupportedType.typeVarbinary: %w", err)
	}
	if err = dec.Decode(&o.typeVarbinaryIsValid); err != nil {
		return fmt.Errorf("error decoding UnsupportedType.typeVarbinaryIsValid: %w", err)
	}
	if err = dec.Decode(&o.typeVarbinaryIsDirty); err != nil {
		return fmt.Errorf("error decoding UnsupportedType.typeVarbinaryIsDirty: %w", err)
	}

	if err = dec.Decode(&o.typeLongtext); err != nil {
		return fmt.Errorf("error decoding UnsupportedType.typeLongtext: %w", err)
	}
	if err = dec.Decode(&o.typeLongtextIsValid); err != nil {
		return fmt.Errorf("error decoding UnsupportedType.typeLongtextIsValid: %w", err)
	}
	if err = dec.Decode(&o.typeLongtextIsDirty); err != nil {
		return fmt.Errorf("error decoding UnsupportedType.typeLongtextIsDirty: %w", err)
	}

	if err = dec.Decode(&o.typeBinary); err != nil {
		return fmt.Errorf("error decoding UnsupportedType.typeBinary: %w", err)
	}
	if err = dec.Decode(&o.typeBinaryIsValid); err != nil {
		return fmt.Errorf("error decoding UnsupportedType.typeBinaryIsValid: %w", err)
	}
	if err = dec.Decode(&o.typeBinaryIsDirty); err != nil {
		return fmt.Errorf("error decoding UnsupportedType.typeBinaryIsDirty: %w", err)
	}

	if err = dec.Decode(&o.typeSmall); err != nil {
		return fmt.Errorf("error decoding UnsupportedType.typeSmall: %w", err)
	}
	if err = dec.Decode(&o.typeSmallIsValid); err != nil {
		return fmt.Errorf("error decoding UnsupportedType.typeSmallIsValid: %w", err)
	}
	if err = dec.Decode(&o.typeSmallIsDirty); err != nil {
		return fmt.Errorf("error decoding UnsupportedType.typeSmallIsDirty: %w", err)
	}

	if err = dec.Decode(&o.typeMedium); err != nil {
		return fmt.Errorf("error decoding UnsupportedType.typeMedium: %w", err)
	}
	if err = dec.Decode(&o.typeMediumIsValid); err != nil {
		return fmt.Errorf("error decoding UnsupportedType.typeMediumIsValid: %w", err)
	}
	if err = dec.Decode(&o.typeMediumIsDirty); err != nil {
		return fmt.Errorf("error decoding UnsupportedType.typeMediumIsDirty: %w", err)
	}

	if err = dec.Decode(&o.typeBig); err != nil {
		return fmt.Errorf("error decoding UnsupportedType.typeBig: %w", err)
	}
	if err = dec.Decode(&o.typeBigIsValid); err != nil {
		return fmt.Errorf("error decoding UnsupportedType.typeBigIsValid: %w", err)
	}
	if err = dec.Decode(&o.typeBigIsDirty); err != nil {
		return fmt.Errorf("error decoding UnsupportedType.typeBigIsDirty: %w", err)
	}

	if err = dec.Decode(&o.typePolygon); err != nil {
		return fmt.Errorf("error decoding UnsupportedType.typePolygon: %w", err)
	}
	if err = dec.Decode(&o.typePolygonIsValid); err != nil {
		return fmt.Errorf("error decoding UnsupportedType.typePolygonIsValid: %w", err)
	}
	if err = dec.Decode(&o.typePolygonIsDirty); err != nil {
		return fmt.Errorf("error decoding UnsupportedType.typePolygonIsDirty: %w", err)
	}

	if err = dec.Decode(&o.typeUnsigned); err != nil {
		return fmt.Errorf("error decoding UnsupportedType.typeUnsigned: %w", err)
	}
	if err = dec.Decode(&o.typeUnsignedIsValid); err != nil {
		return fmt.Errorf("error decoding UnsupportedType.typeUnsignedIsValid: %w", err)
	}
	if err = dec.Decode(&o.typeUnsignedIsDirty); err != nil {
		return fmt.Errorf("error decoding UnsupportedType.typeUnsignedIsDirty: %w", err)
	}

	if err = dec.Decode(&o.typeMultfk1); err != nil {
		return fmt.Errorf("error decoding UnsupportedType.typeMultfk1: %w", err)
	}
	if err = dec.Decode(&o.typeMultfk1IsValid); err != nil {
		return fmt.Errorf("error decoding UnsupportedType.typeMultfk1IsValid: %w", err)
	}
	if err = dec.Decode(&o.typeMultfk1IsDirty); err != nil {
		return fmt.Errorf("error decoding UnsupportedType.typeMultfk1IsDirty: %w", err)
	}

	if err = dec.Decode(&o.typeMultifk2); err != nil {
		return fmt.Errorf("error decoding UnsupportedType.typeMultifk2: %w", err)
	}
	if err = dec.Decode(&o.typeMultifk2IsValid); err != nil {
		return fmt.Errorf("error decoding UnsupportedType.typeMultifk2IsValid: %w", err)
	}
	if err = dec.Decode(&o.typeMultifk2IsDirty); err != nil {
		return fmt.Errorf("error decoding UnsupportedType.typeMultifk2IsDirty: %w", err)
	}

	return
}

// MarshalJSON serializes the object into a JSON object.
// Only valid data will be serialized, meaning, you can control what gets serialized by using Select to
// select only the fields you want when you query for the object. Another way to control the output
// is to call MarshalStringMap, modify the map, then encode the map.
func (o *unsupportedTypeBase) MarshalJSON() (data []byte, err error) {
	v := o.MarshalStringMap()
	return json.Marshal(v)
}

// MarshalStringMap serializes the object into a string map of interfaces.
// Only valid data will be serialized, meaning, you can control what gets serialized by using Select to
// select only the fields you want when you query for the object. The keys are the same as the json keys.
func (o *unsupportedTypeBase) MarshalStringMap() map[string]interface{} {
	v := make(map[string]interface{})

	if o.typeSerialIsValid {
		v["typeSerial"] = o.typeSerial
	}

	if o.typeSetIsValid {
		v["typeSet"] = o.typeSet
	}

	if o.typeEnumeratedIsValid {
		v["typeEnumerated"] = o.typeEnumerated
	}

	if o.typeDecimalIsValid {
		v["typeDecimal"] = o.typeDecimal
	}

	if o.typeDoubleIsValid {
		v["typeDouble"] = o.typeDouble
	}

	if o.typeGeoIsValid {
		v["typeGeo"] = o.typeGeo
	}

	if o.typeTinyBlobIsValid {
		v["typeTinyBlob"] = o.typeTinyBlob
	}

	if o.typeMediumBlobIsValid {
		v["typeMediumBlob"] = o.typeMediumBlob
	}

	if o.typeVarbinaryIsValid {
		v["typeVarbinary"] = o.typeVarbinary
	}

	if o.typeLongtextIsValid {
		v["typeLongtext"] = o.typeLongtext
	}

	if o.typeBinaryIsValid {
		v["typeBinary"] = o.typeBinary
	}

	if o.typeSmallIsValid {
		v["typeSmall"] = o.typeSmall
	}

	if o.typeMediumIsValid {
		v["typeMedium"] = o.typeMedium
	}

	if o.typeBigIsValid {
		v["typeBig"] = o.typeBig
	}

	if o.typePolygonIsValid {
		v["typePolygon"] = o.typePolygon
	}

	if o.typeUnsignedIsValid {
		v["typeUnsigned"] = o.typeUnsigned
	}

	if o.typeMultfk1IsValid {
		v["typeMultfk1"] = o.typeMultfk1
	}

	if o.typeMultifk2IsValid {
		v["typeMultifk2"] = o.typeMultifk2
	}

	for _k, _v := range o._aliases {
		v[_k] = _v
	}
	return v
}

// UnmarshalJSON unmarshalls the given json data into the UnsupportedType. The UnsupportedType can be a
// newly created object, or one loaded from the database.
//
// After unmarshalling, the object is not  saved. You must call Save to insert it into the database
// or update it.
//
// Unmarshalling of sub-objects, as in objects linked via foreign keys, is not currently supported.
//
// The fields it expects are:
//
//	"typeSerial" - string
//	"typeSet" - []byte
//	"typeEnumerated" - []byte
//	"typeDecimal" - string
//	"typeDouble" - float64
//	"typeGeo" - []byte
//	"typeTinyBlob" - []byte
//	"typeMediumBlob" - []byte
//	"typeVarbinary" - []byte
//	"typeLongtext" - string
//	"typeBinary" - []byte
//	"typeSmall" - int
//	"typeMedium" - int
//	"typeBig" - int64
//	"typePolygon" - []byte
//	"typeUnsigned" - uint
//	"typeMultfk1" - string
//	"typeMultifk2" - string
func (o *unsupportedTypeBase) UnmarshalJSON(data []byte) (err error) {
	var v map[string]interface{}
	if err = json.Unmarshal(data, &v); err != nil {
		return err
	}
	return o.UnmarshalStringMap(v)
}

// UnmarshalStringMap will load the values from the stringmap into the object.
//
// Override this in UnsupportedType to modify the json before sending it here.
func (o *unsupportedTypeBase) UnmarshalStringMap(m map[string]interface{}) (err error) {
	for k, v := range m {
		switch k {

		case "typeSet":
			{
				if v == nil {
					return fmt.Errorf("json field %s cannot be null", k)
				}

				switch d := v.(type) {
				case string:
					{
						// A base 64 encoded string
						if b, err2 := base64.StdEncoding.DecodeString(d); err2 == nil {
							o.SetTypeSet(b)
						} else {
							return fmt.Errorf("json field %s must be either a Base64 encoded string or an array of byte values", k)
						}
					}
				case []interface{}:
					{
						// An array of byte values. Unfortunately, these come through as float64s, and so need to be converted
						b := make([]byte, len(d), len(d))
						for i, b1 := range d {
							if f, ok := b1.(float64); !ok {
								return fmt.Errorf("json field %s must be either a Base64 encoded string or an array of byte values", k)
							} else {
								b[i] = uint8(f)
							}
						}
						o.SetTypeSet(b)
					}
				default:
					return fmt.Errorf("json field %s must be either a Base64 encoded string or an array of byte values", k)
				}

			}

		case "typeEnumerated":
			{
				if v == nil {
					return fmt.Errorf("json field %s cannot be null", k)
				}

				switch d := v.(type) {
				case string:
					{
						// A base 64 encoded string
						if b, err2 := base64.StdEncoding.DecodeString(d); err2 == nil {
							o.SetTypeEnumerated(b)
						} else {
							return fmt.Errorf("json field %s must be either a Base64 encoded string or an array of byte values", k)
						}
					}
				case []interface{}:
					{
						// An array of byte values. Unfortunately, these come through as float64s, and so need to be converted
						b := make([]byte, len(d), len(d))
						for i, b1 := range d {
							if f, ok := b1.(float64); !ok {
								return fmt.Errorf("json field %s must be either a Base64 encoded string or an array of byte values", k)
							} else {
								b[i] = uint8(f)
							}
						}
						o.SetTypeEnumerated(b)
					}
				default:
					return fmt.Errorf("json field %s must be either a Base64 encoded string or an array of byte values", k)
				}

			}

		case "typeDecimal":
			{
				if v == nil {
					return fmt.Errorf("json field %s cannot be null", k)
				}

				if s, ok := v.(string); !ok {
					return fmt.Errorf("json field %s must be a string", k)
				} else {
					o.SetTypeDecimal(s)
				}
			}

		case "typeDouble":
			{
				if v == nil {
					return fmt.Errorf("json field %s cannot be null", k)
				}

				if n, ok := v.(float64); ok {
					o.SetTypeDouble(n)
				} else {
					return fmt.Errorf("json field %s must be a number", k)
				}
			}

		case "typeGeo":
			{
				if v == nil {
					return fmt.Errorf("json field %s cannot be null", k)
				}

				switch d := v.(type) {
				case string:
					{
						// A base 64 encoded string
						if b, err2 := base64.StdEncoding.DecodeString(d); err2 == nil {
							o.SetTypeGeo(b)
						} else {
							return fmt.Errorf("json field %s must be either a Base64 encoded string or an array of byte values", k)
						}
					}
				case []interface{}:
					{
						// An array of byte values. Unfortunately, these come through as float64s, and so need to be converted
						b := make([]byte, len(d), len(d))
						for i, b1 := range d {
							if f, ok := b1.(float64); !ok {
								return fmt.Errorf("json field %s must be either a Base64 encoded string or an array of byte values", k)
							} else {
								b[i] = uint8(f)
							}
						}
						o.SetTypeGeo(b)
					}
				default:
					return fmt.Errorf("json field %s must be either a Base64 encoded string or an array of byte values", k)
				}

			}

		case "typeTinyBlob":
			{
				if v == nil {
					return fmt.Errorf("json field %s cannot be null", k)
				}

				switch d := v.(type) {
				case string:
					{
						// A base 64 encoded string
						if b, err2 := base64.StdEncoding.DecodeString(d); err2 == nil {
							o.SetTypeTinyBlob(b)
						} else {
							return fmt.Errorf("json field %s must be either a Base64 encoded string or an array of byte values", k)
						}
					}
				case []interface{}:
					{
						// An array of byte values. Unfortunately, these come through as float64s, and so need to be converted
						b := make([]byte, len(d), len(d))
						for i, b1 := range d {
							if f, ok := b1.(float64); !ok {
								return fmt.Errorf("json field %s must be either a Base64 encoded string or an array of byte values", k)
							} else {
								b[i] = uint8(f)
							}
						}
						o.SetTypeTinyBlob(b)
					}
				default:
					return fmt.Errorf("json field %s must be either a Base64 encoded string or an array of byte values", k)
				}

			}

		case "typeMediumBlob":
			{
				if v == nil {
					return fmt.Errorf("json field %s cannot be null", k)
				}

				switch d := v.(type) {
				case string:
					{
						// A base 64 encoded string
						if b, err2 := base64.StdEncoding.DecodeString(d); err2 == nil {
							o.SetTypeMediumBlob(b)
						} else {
							return fmt.Errorf("json field %s must be either a Base64 encoded string or an array of byte values", k)
						}
					}
				case []interface{}:
					{
						// An array of byte values. Unfortunately, these come through as float64s, and so need to be converted
						b := make([]byte, len(d), len(d))
						for i, b1 := range d {
							if f, ok := b1.(float64); !ok {
								return fmt.Errorf("json field %s must be either a Base64 encoded string or an array of byte values", k)
							} else {
								b[i] = uint8(f)
							}
						}
						o.SetTypeMediumBlob(b)
					}
				default:
					return fmt.Errorf("json field %s must be either a Base64 encoded string or an array of byte values", k)
				}

			}

		case "typeVarbinary":
			{
				if v == nil {
					return fmt.Errorf("json field %s cannot be null", k)
				}

				switch d := v.(type) {
				case string:
					{
						// A base 64 encoded string
						if b, err2 := base64.StdEncoding.DecodeString(d); err2 == nil {
							o.SetTypeVarbinary(b)
						} else {
							return fmt.Errorf("json field %s must be either a Base64 encoded string or an array of byte values", k)
						}
					}
				case []interface{}:
					{
						// An array of byte values. Unfortunately, these come through as float64s, and so need to be converted
						b := make([]byte, len(d), len(d))
						for i, b1 := range d {
							if f, ok := b1.(float64); !ok {
								return fmt.Errorf("json field %s must be either a Base64 encoded string or an array of byte values", k)
							} else {
								b[i] = uint8(f)
							}
						}
						o.SetTypeVarbinary(b)
					}
				default:
					return fmt.Errorf("json field %s must be either a Base64 encoded string or an array of byte values", k)
				}

			}

		case "typeLongtext":
			{
				if v == nil {
					return fmt.Errorf("json field %s cannot be null", k)
				}

				if s, ok := v.(string); !ok {
					return fmt.Errorf("json field %s must be a string", k)
				} else {
					o.SetTypeLongtext(s)
				}
			}

		case "typeBinary":
			{
				if v == nil {
					return fmt.Errorf("json field %s cannot be null", k)
				}

				switch d := v.(type) {
				case string:
					{
						// A base 64 encoded string
						if b, err2 := base64.StdEncoding.DecodeString(d); err2 == nil {
							o.SetTypeBinary(b)
						} else {
							return fmt.Errorf("json field %s must be either a Base64 encoded string or an array of byte values", k)
						}
					}
				case []interface{}:
					{
						// An array of byte values. Unfortunately, these come through as float64s, and so need to be converted
						b := make([]byte, len(d), len(d))
						for i, b1 := range d {
							if f, ok := b1.(float64); !ok {
								return fmt.Errorf("json field %s must be either a Base64 encoded string or an array of byte values", k)
							} else {
								b[i] = uint8(f)
							}
						}
						o.SetTypeBinary(b)
					}
				default:
					return fmt.Errorf("json field %s must be either a Base64 encoded string or an array of byte values", k)
				}

			}

		case "typeSmall":
			{
				if v == nil {
					return fmt.Errorf("json field %s cannot be null", k)
				}

				if n, ok := v.(int); ok {
					o.SetTypeSmall(int(n))
				} else if n, ok := v.(float64); ok {
					o.SetTypeSmall(int(n))
				} else {
					return fmt.Errorf("json field %s must be a number", k)
				}
			}

		case "typeMedium":
			{
				if v == nil {
					return fmt.Errorf("json field %s cannot be null", k)
				}

				if n, ok := v.(int); ok {
					o.SetTypeMedium(int(n))
				} else if n, ok := v.(float64); ok {
					o.SetTypeMedium(int(n))
				} else {
					return fmt.Errorf("json field %s must be a number", k)
				}
			}

		case "typeBig":
			{
				if v == nil {
					return fmt.Errorf("json field %s cannot be null", k)
				}

				if n, ok := v.(int); ok {
					o.SetTypeBig(int64(n))
				} else if n, ok := v.(float64); ok {
					o.SetTypeBig(int64(n))
				} else {
					return fmt.Errorf("json field %s must be a number", k)
				}
			}

		case "typePolygon":
			{
				if v == nil {
					return fmt.Errorf("json field %s cannot be null", k)
				}

				switch d := v.(type) {
				case string:
					{
						// A base 64 encoded string
						if b, err2 := base64.StdEncoding.DecodeString(d); err2 == nil {
							o.SetTypePolygon(b)
						} else {
							return fmt.Errorf("json field %s must be either a Base64 encoded string or an array of byte values", k)
						}
					}
				case []interface{}:
					{
						// An array of byte values. Unfortunately, these come through as float64s, and so need to be converted
						b := make([]byte, len(d), len(d))
						for i, b1 := range d {
							if f, ok := b1.(float64); !ok {
								return fmt.Errorf("json field %s must be either a Base64 encoded string or an array of byte values", k)
							} else {
								b[i] = uint8(f)
							}
						}
						o.SetTypePolygon(b)
					}
				default:
					return fmt.Errorf("json field %s must be either a Base64 encoded string or an array of byte values", k)
				}

			}

		case "typeUnsigned":
			{
				if v == nil {
					return fmt.Errorf("json field %s cannot be null", k)
				}

				if n, ok := v.(int); ok {
					o.SetTypeUnsigned(uint(n))
				} else if n, ok := v.(float64); ok {
					o.SetTypeUnsigned(uint(n))
				} else {
					return fmt.Errorf("json field %s must be a number", k)
				}
			}

		case "typeMultfk1":
			{
				if v == nil {
					return fmt.Errorf("json field %s cannot be null", k)
				}

				if s, ok := v.(string); !ok {
					return fmt.Errorf("json field %s must be a string", k)
				} else {
					o.SetTypeMultfk1(s)
				}
			}

		case "typeMultifk2":
			{
				if v == nil {
					return fmt.Errorf("json field %s cannot be null", k)
				}

				if s, ok := v.(string); !ok {
					return fmt.Errorf("json field %s must be a string", k)
				} else {
					o.SetTypeMultifk2(s)
				}
			}

		}
	}
	return
}
