// Code generated by goradd-orm. DO NOT EDIT.

package goradd_unit

import (
	"bytes"
	"context"
	"encoding/base64"
	"encoding/gob"
	"encoding/json"
	"fmt"
	"slices"
	"unicode/utf8"

	"github.com/goradd/anyutil"
	"github.com/goradd/gro/_test/gen/orm/goradd_unit/node"
	"github.com/goradd/gro/pkg/broadcast"
	"github.com/goradd/gro/pkg/db"
	"github.com/goradd/gro/pkg/op"
	"github.com/goradd/gro/pkg/query"
)

// UnsupportedTypeBase is embedded in a UnsupportedType object and provides the ORM access to the database.
// The member variables of the structure are private and should not normally be accessed by the UnsupportedType embedder.
// Instead, use the accessor functions.
type unsupportedTypeBase struct {
	typeSerial             uint64
	typeSerialIsLoaded     bool
	typeSerialIsDirty      bool
	typeSet                []byte
	typeSetIsLoaded        bool
	typeSetIsDirty         bool
	typeEnumerated         []byte
	typeEnumeratedIsLoaded bool
	typeEnumeratedIsDirty  bool
	typeGeo                []byte
	typeGeoIsLoaded        bool
	typeGeoIsDirty         bool
	typeTinyblob           []byte
	typeTinyblobIsLoaded   bool
	typeTinyblobIsDirty    bool
	typeBinary             []byte
	typeBinaryIsLoaded     bool
	typeBinaryIsDirty      bool
	typeSmall              int
	typeSmallIsLoaded      bool
	typeSmallIsDirty       bool
	typeMedium             int
	typeMediumIsLoaded     bool
	typeMediumIsDirty      bool
	typePolygon            []byte
	typePolygonIsLoaded    bool
	typePolygonIsDirty     bool
	typeMultFk1            string
	typeMultFk1IsLoaded    bool
	typeMultFk1IsDirty     bool
	typeMultiFk2           string
	typeMultiFk2IsLoaded   bool
	typeMultiFk2IsDirty    bool

	// Custom aliases, if specified
	_aliases map[string]any

	// Indicates whether this is a new object, or one loaded from the database. Used by Save to know whether to Insert or Update.
	_restored bool

	_originalPK uint64
}

// IDs used to access the UnsupportedType object fields by name using the Get function.
// doc: type=UnsupportedType
const (
	UnsupportedTypeTypeSerialField     = `typeSerial`
	UnsupportedTypeTypeSetField        = `typeSet`
	UnsupportedTypeTypeEnumeratedField = `typeEnumerated`
	UnsupportedTypeTypeGeoField        = `typeGeo`
	UnsupportedTypeTypeTinyblobField   = `typeTinyblob`
	UnsupportedTypeTypeBinaryField     = `typeBinary`
	UnsupportedTypeTypeSmallField      = `typeSmall`
	UnsupportedTypeTypeMediumField     = `typeMedium`
	UnsupportedTypeTypePolygonField    = `typePolygon`
	UnsupportedTypeTypeMultFk1Field    = `typeMultFk1`
	UnsupportedTypeTypeMultiFk2Field   = `typeMultiFk2`
)

const UnsupportedTypeTypeSetMaxLength = 5        // The number of bytes the column can hold
const UnsupportedTypeTypeEnumeratedMaxLength = 1 // The number of bytes the column can hold
const UnsupportedTypeTypeTinyblobMaxLength = 255 // The number of bytes the column can hold
const UnsupportedTypeTypeSmallMax = 32767
const UnsupportedTypeTypeSmallMin = -32768
const UnsupportedTypeTypeMediumMax = 8388607
const UnsupportedTypeTypeMediumMin = -8388608
const UnsupportedTypeTypeMultFk1MaxLength = 50  // The number of runes the column can hold
const UnsupportedTypeTypeMultiFk2MaxLength = 50 // The number of runes the column can hold

// Initialize or re-initialize a UnsupportedType database object to default values.
func (o *unsupportedTypeBase) Initialize() {
	o.typeSerial = 0x0
	o.typeSerialIsLoaded = false
	o.typeSerialIsDirty = false

	o.typeSet = []byte{}
	o.typeSetIsLoaded = false
	o.typeSetIsDirty = false

	o.typeEnumerated = []byte{}
	o.typeEnumeratedIsLoaded = false
	o.typeEnumeratedIsDirty = false

	o.typeGeo = []byte{}
	o.typeGeoIsLoaded = false
	o.typeGeoIsDirty = false

	o.typeTinyblob = []byte{}
	o.typeTinyblobIsLoaded = false
	o.typeTinyblobIsDirty = false

	o.typeBinary = []byte{}
	o.typeBinaryIsLoaded = false
	o.typeBinaryIsDirty = false

	o.typeSmall = 0
	o.typeSmallIsLoaded = false
	o.typeSmallIsDirty = false

	o.typeMedium = 0
	o.typeMediumIsLoaded = false
	o.typeMediumIsDirty = false

	o.typePolygon = []byte{}
	o.typePolygonIsLoaded = false
	o.typePolygonIsDirty = false

	o.typeMultFk1 = ""
	o.typeMultFk1IsLoaded = false
	o.typeMultFk1IsDirty = false

	o.typeMultiFk2 = ""
	o.typeMultiFk2IsLoaded = false
	o.typeMultiFk2IsDirty = false

	o._aliases = nil
	o._restored = false
}

// Copy copies most fields to a new UnsupportedType object.
// Forward reference ids will be copied, but reverse and many-many references will not.
// Attached objects will not be included in the copy.
// Automatically generated fields will not be included in the copy.
// The primary key field will not be copied. You will need to manually set the primary key field before saving.
// Call Save() on the new object to save it into the database.
// Copy might panic if any fields in the database were set to a size larger than the
// maximum size through a process that accessed the database outside of the ORM.
func (o *unsupportedTypeBase) Copy() (newObject *UnsupportedType) {
	newObject = NewUnsupportedType()
	if o.typeSerialIsLoaded {
		newObject.SetTypeSerial(o.typeSerial)
	}
	if o.typeSetIsLoaded {
		newObject.SetTypeSet(o.typeSet)
	}
	if o.typeEnumeratedIsLoaded {
		newObject.SetTypeEnumerated(o.typeEnumerated)
	}
	if o.typeGeoIsLoaded {
		newObject.SetTypeGeo(o.typeGeo)
	}
	if o.typeTinyblobIsLoaded {
		newObject.SetTypeTinyblob(o.typeTinyblob)
	}
	if o.typeBinaryIsLoaded {
		newObject.SetTypeBinary(o.typeBinary)
	}
	if o.typeSmallIsLoaded {
		newObject.SetTypeSmall(o.typeSmall)
	}
	if o.typeMediumIsLoaded {
		newObject.SetTypeMedium(o.typeMedium)
	}
	if o.typePolygonIsLoaded {
		newObject.SetTypePolygon(o.typePolygon)
	}
	if o.typeMultFk1IsLoaded {
		newObject.SetTypeMultFk1(o.typeMultFk1)
	}
	if o.typeMultiFk2IsLoaded {
		newObject.SetTypeMultiFk2(o.typeMultiFk2)
	}
	return
}

// OriginalPrimaryKey returns the value of the primary key that was originally loaded into the object when it was
// read from the database.
func (o *unsupportedTypeBase) OriginalPrimaryKey() uint64 {
	return o._originalPK
}

// PrimaryKey returns the value of the primary key of the record.
func (o *unsupportedTypeBase) PrimaryKey() uint64 {
	if o._restored && !o.typeSerialIsLoaded {
		panic("TypeSerial was not selected in the last query and has not been set, and so PrimaryKey is not valid")
	}
	return o.typeSerial
}

// SetPrimaryKey sets the value of the primary key in the object, to be saved later in the database using the Save() function.
// You cannot change a primary key for a record that has been written to the database. While SQL databases will
// allow it, NoSql databases will not. Save a copy and delete this one instead.
func (o *unsupportedTypeBase) SetPrimaryKey(v uint64) {
	o.SetTypeSerial(v)
}

// TypeSerial returns the loaded value of the type_serial field in the database.
func (o *unsupportedTypeBase) TypeSerial() uint64 {
	if o._restored && !o.typeSerialIsLoaded {
		panic("TypeSerial was not selected in the last query and has not been set, and so is not valid")
	}
	return o.typeSerial
}

// TypeSerialIsLoaded returns true if the value was loaded from the database or has been set.
func (o *unsupportedTypeBase) TypeSerialIsLoaded() bool {
	return o.typeSerialIsLoaded
}

// SetTypeSerial sets the value of TypeSerial in the object, to be saved later in the database using the Save() function.
// You cannot change a primary key for a record that has been written to the database. While SQL databases will
// allow it, NoSql databases will not. Save a copy and delete this one instead.
func (o *unsupportedTypeBase) SetTypeSerial(v uint64) {
	if o._restored {
		panic("error: Do not change a primary key for a record that has been saved. Instead, save a copy and delete the original.")
	}
	o.typeSerialIsLoaded = true
	o.typeSerialIsDirty = true
	o.typeSerial = v
}

// TypeSet returns the value of the loaded type_set field in the database.
func (o *unsupportedTypeBase) TypeSet() []byte {
	if o._restored && !o.typeSetIsLoaded {
		panic("TypeSet was not selected in the last query and has not been set, and so is not valid")
	}
	return o.typeSet
}

// TypeSetIsLoaded returns true if the value was loaded from the database or has been set.
func (o *unsupportedTypeBase) TypeSetIsLoaded() bool {
	return o.typeSetIsLoaded
}

// SetTypeSet copies the value of TypeSet, to be saved later in the database using the Save() function.
// Passing nil will set type_set to an empty array.
func (o *unsupportedTypeBase) SetTypeSet(v []byte) {

	if len(v) > UnsupportedTypeTypeSetMaxLength {
		panic("attempted to set UnsupportedType.TypeSet to a value larger than its maximum length")
	}

	if o._restored &&
		o.typeSetIsLoaded && // if it was not selected, then make sure it gets set, since our end comparison won't be valid
		bytes.Equal(o.typeSet, v) {
		// no change
		return
	}

	o.typeSetIsLoaded = true
	if v == nil {
		o.typeSet = []byte{}
	} else {
		o.typeSet = slices.Clone(v)
	}
	o.typeSetIsDirty = true
}

// TypeEnumerated returns the value of the loaded type_enumerated field in the database.
func (o *unsupportedTypeBase) TypeEnumerated() []byte {
	if o._restored && !o.typeEnumeratedIsLoaded {
		panic("TypeEnumerated was not selected in the last query and has not been set, and so is not valid")
	}
	return o.typeEnumerated
}

// TypeEnumeratedIsLoaded returns true if the value was loaded from the database or has been set.
func (o *unsupportedTypeBase) TypeEnumeratedIsLoaded() bool {
	return o.typeEnumeratedIsLoaded
}

// SetTypeEnumerated copies the value of TypeEnumerated, to be saved later in the database using the Save() function.
// Passing nil will set type_enumerated to an empty array.
func (o *unsupportedTypeBase) SetTypeEnumerated(v []byte) {

	if len(v) > UnsupportedTypeTypeEnumeratedMaxLength {
		panic("attempted to set UnsupportedType.TypeEnumerated to a value larger than its maximum length")
	}

	if o._restored &&
		o.typeEnumeratedIsLoaded && // if it was not selected, then make sure it gets set, since our end comparison won't be valid
		bytes.Equal(o.typeEnumerated, v) {
		// no change
		return
	}

	o.typeEnumeratedIsLoaded = true
	if v == nil {
		o.typeEnumerated = []byte{}
	} else {
		o.typeEnumerated = slices.Clone(v)
	}
	o.typeEnumeratedIsDirty = true
}

// TypeGeo returns the value of the loaded type_geo field in the database.
func (o *unsupportedTypeBase) TypeGeo() []byte {
	if o._restored && !o.typeGeoIsLoaded {
		panic("TypeGeo was not selected in the last query and has not been set, and so is not valid")
	}
	return o.typeGeo
}

// TypeGeoIsLoaded returns true if the value was loaded from the database or has been set.
func (o *unsupportedTypeBase) TypeGeoIsLoaded() bool {
	return o.typeGeoIsLoaded
}

// SetTypeGeo copies the value of TypeGeo, to be saved later in the database using the Save() function.
// Passing nil will set type_geo to an empty array.
func (o *unsupportedTypeBase) SetTypeGeo(v []byte) {

	if o._restored &&
		o.typeGeoIsLoaded && // if it was not selected, then make sure it gets set, since our end comparison won't be valid
		bytes.Equal(o.typeGeo, v) {
		// no change
		return
	}

	o.typeGeoIsLoaded = true
	if v == nil {
		o.typeGeo = []byte{}
	} else {
		o.typeGeo = slices.Clone(v)
	}
	o.typeGeoIsDirty = true
}

// TypeTinyblob returns the value of the loaded type_tinyblob field in the database.
func (o *unsupportedTypeBase) TypeTinyblob() []byte {
	if o._restored && !o.typeTinyblobIsLoaded {
		panic("TypeTinyblob was not selected in the last query and has not been set, and so is not valid")
	}
	return o.typeTinyblob
}

// TypeTinyblobIsLoaded returns true if the value was loaded from the database or has been set.
func (o *unsupportedTypeBase) TypeTinyblobIsLoaded() bool {
	return o.typeTinyblobIsLoaded
}

// SetTypeTinyblob copies the value of TypeTinyblob, to be saved later in the database using the Save() function.
// Passing nil will set type_tinyblob to an empty array.
func (o *unsupportedTypeBase) SetTypeTinyblob(v []byte) {

	if len(v) > UnsupportedTypeTypeTinyblobMaxLength {
		panic("attempted to set UnsupportedType.TypeTinyblob to a value larger than its maximum length")
	}

	if o._restored &&
		o.typeTinyblobIsLoaded && // if it was not selected, then make sure it gets set, since our end comparison won't be valid
		bytes.Equal(o.typeTinyblob, v) {
		// no change
		return
	}

	o.typeTinyblobIsLoaded = true
	if v == nil {
		o.typeTinyblob = []byte{}
	} else {
		o.typeTinyblob = slices.Clone(v)
	}
	o.typeTinyblobIsDirty = true
}

// TypeBinary returns the value of the loaded type_binary field in the database.
func (o *unsupportedTypeBase) TypeBinary() []byte {
	if o._restored && !o.typeBinaryIsLoaded {
		panic("TypeBinary was not selected in the last query and has not been set, and so is not valid")
	}
	return o.typeBinary
}

// TypeBinaryIsLoaded returns true if the value was loaded from the database or has been set.
func (o *unsupportedTypeBase) TypeBinaryIsLoaded() bool {
	return o.typeBinaryIsLoaded
}

// SetTypeBinary copies the value of TypeBinary, to be saved later in the database using the Save() function.
// Passing nil will set type_binary to an empty array.
func (o *unsupportedTypeBase) SetTypeBinary(v []byte) {

	if o._restored &&
		o.typeBinaryIsLoaded && // if it was not selected, then make sure it gets set, since our end comparison won't be valid
		bytes.Equal(o.typeBinary, v) {
		// no change
		return
	}

	o.typeBinaryIsLoaded = true
	if v == nil {
		o.typeBinary = []byte{}
	} else {
		o.typeBinary = slices.Clone(v)
	}
	o.typeBinaryIsDirty = true
}

// TypeSmall returns the value of the loaded type_small field in the database.
func (o *unsupportedTypeBase) TypeSmall() int {
	if o._restored && !o.typeSmallIsLoaded {
		panic("TypeSmall was not selected in the last query and has not been set, and so is not valid")
	}
	return o.typeSmall
}

// TypeSmallIsLoaded returns true if the value was loaded from the database or has been set.
func (o *unsupportedTypeBase) TypeSmallIsLoaded() bool {
	return o.typeSmallIsLoaded
}

// SetTypeSmall sets the value of TypeSmall in the object, to be saved later in the database using the Save() function.
func (o *unsupportedTypeBase) SetTypeSmall(v int) {
	if o._restored &&
		o.typeSmallIsLoaded && // if it was not selected, then make sure it gets set, since our end comparison won't be valid
		o.typeSmall == v {
		// no change
		return
	}

	o.typeSmallIsLoaded = true
	o.typeSmall = v
	o.typeSmallIsDirty = true
}

// TypeMedium returns the value of the loaded type_medium field in the database.
func (o *unsupportedTypeBase) TypeMedium() int {
	if o._restored && !o.typeMediumIsLoaded {
		panic("TypeMedium was not selected in the last query and has not been set, and so is not valid")
	}
	return o.typeMedium
}

// TypeMediumIsLoaded returns true if the value was loaded from the database or has been set.
func (o *unsupportedTypeBase) TypeMediumIsLoaded() bool {
	return o.typeMediumIsLoaded
}

// SetTypeMedium sets the value of TypeMedium in the object, to be saved later in the database using the Save() function.
func (o *unsupportedTypeBase) SetTypeMedium(v int) {
	if o._restored &&
		o.typeMediumIsLoaded && // if it was not selected, then make sure it gets set, since our end comparison won't be valid
		o.typeMedium == v {
		// no change
		return
	}

	o.typeMediumIsLoaded = true
	o.typeMedium = v
	o.typeMediumIsDirty = true
}

// TypePolygon returns the value of the loaded type_polygon field in the database.
func (o *unsupportedTypeBase) TypePolygon() []byte {
	if o._restored && !o.typePolygonIsLoaded {
		panic("TypePolygon was not selected in the last query and has not been set, and so is not valid")
	}
	return o.typePolygon
}

// TypePolygonIsLoaded returns true if the value was loaded from the database or has been set.
func (o *unsupportedTypeBase) TypePolygonIsLoaded() bool {
	return o.typePolygonIsLoaded
}

// SetTypePolygon copies the value of TypePolygon, to be saved later in the database using the Save() function.
// Passing nil will set type_polygon to an empty array.
func (o *unsupportedTypeBase) SetTypePolygon(v []byte) {

	if o._restored &&
		o.typePolygonIsLoaded && // if it was not selected, then make sure it gets set, since our end comparison won't be valid
		bytes.Equal(o.typePolygon, v) {
		// no change
		return
	}

	o.typePolygonIsLoaded = true
	if v == nil {
		o.typePolygon = []byte{}
	} else {
		o.typePolygon = slices.Clone(v)
	}
	o.typePolygonIsDirty = true
}

// TypeMultFk1 returns the value of the loaded type_mult_fk1 field in the database.
func (o *unsupportedTypeBase) TypeMultFk1() string {
	if o._restored && !o.typeMultFk1IsLoaded {
		panic("TypeMultFk1 was not selected in the last query and has not been set, and so is not valid")
	}
	return o.typeMultFk1
}

// TypeMultFk1IsLoaded returns true if the value was loaded from the database or has been set.
func (o *unsupportedTypeBase) TypeMultFk1IsLoaded() bool {
	return o.typeMultFk1IsLoaded
}

// SetTypeMultFk1 sets the value of TypeMultFk1 in the object, to be saved later in the database using the Save() function.
func (o *unsupportedTypeBase) SetTypeMultFk1(v string) {
	if utf8.RuneCountInString(v) > UnsupportedTypeTypeMultFk1MaxLength {
		panic("attempted to set UnsupportedType.TypeMultFk1 to a value larger than its maximum length in runes")
	}
	if o._restored &&
		o.typeMultFk1IsLoaded && // if it was not selected, then make sure it gets set, since our end comparison won't be valid
		o.typeMultFk1 == v {
		// no change
		return
	}

	o.typeMultFk1IsLoaded = true
	o.typeMultFk1 = v
	o.typeMultFk1IsDirty = true
}

// TypeMultiFk2 returns the value of the loaded type_multi_fk2 field in the database.
func (o *unsupportedTypeBase) TypeMultiFk2() string {
	if o._restored && !o.typeMultiFk2IsLoaded {
		panic("TypeMultiFk2 was not selected in the last query and has not been set, and so is not valid")
	}
	return o.typeMultiFk2
}

// TypeMultiFk2IsLoaded returns true if the value was loaded from the database or has been set.
func (o *unsupportedTypeBase) TypeMultiFk2IsLoaded() bool {
	return o.typeMultiFk2IsLoaded
}

// SetTypeMultiFk2 sets the value of TypeMultiFk2 in the object, to be saved later in the database using the Save() function.
func (o *unsupportedTypeBase) SetTypeMultiFk2(v string) {
	if utf8.RuneCountInString(v) > UnsupportedTypeTypeMultiFk2MaxLength {
		panic("attempted to set UnsupportedType.TypeMultiFk2 to a value larger than its maximum length in runes")
	}
	if o._restored &&
		o.typeMultiFk2IsLoaded && // if it was not selected, then make sure it gets set, since our end comparison won't be valid
		o.typeMultiFk2 == v {
		// no change
		return
	}

	o.typeMultiFk2IsLoaded = true
	o.typeMultiFk2 = v
	o.typeMultiFk2IsDirty = true
}

// GetAlias returns the value for the Alias node aliasKey that was returned in the most
// recent query.
func (o *unsupportedTypeBase) GetAlias(aliasKey string) query.AliasValue {
	if a, ok := o._aliases[aliasKey]; ok {
		return query.NewAliasValue(a)
	} else {
		panic("Alias " + aliasKey + " not found.")
	}
}

// IsNew returns true if the object will create a new record when saved.
func (o *unsupportedTypeBase) IsNew() bool {
	return !o._restored
}

// LoadUnsupportedType returns a UnsupportedType from the database.
// selectNodes lets you provide nodes for selecting specific fields or additional fields from related tables.
// See [UnsupportedTypesBuilder.Select] for more info.
func LoadUnsupportedType(ctx context.Context, pk uint64, selectNodes ...query.Node) (*UnsupportedType, error) {
	return queryUnsupportedTypes(ctx).
		Where(op.Equal(node.UnsupportedType().TypeSerial(), pk)).
		Select(selectNodes...).
		Get()
}

// HasUnsupportedType returns true if a UnsupportedType with the given primary key exists in the database.
// doc: type=UnsupportedType
func HasUnsupportedType(ctx context.Context, pk uint64) (bool, error) {
	v, err := queryUnsupportedTypes(ctx).
		Where(op.Equal(node.UnsupportedType().TypeSerial(), pk)).
		Count()
	return v > 0, err
}

// LoadUnsupportedTypesByTypeMultFk1TypeMultiFk2 queries UnsupportedType objects by the given index values.
// selectNodes optionally let you provide nodes for joining to other tables or selecting specific fields.
// See [UnsupportedTypesBuilder.Select].
// If you need a more elaborate query, use QueryUnsupportedTypes() to start a query builder.
func LoadUnsupportedTypesByTypeMultFk1TypeMultiFk2(ctx context.Context, typeMultFk1 string, typeMultiFk2 string, selectNodes ...query.Node) ([]*UnsupportedType, error) {
	q := queryUnsupportedTypes(ctx)
	q = q.Where(op.Equal(node.UnsupportedType().TypeMultFk1(), typeMultFk1))
	q = q.Where(op.Equal(node.UnsupportedType().TypeMultiFk2(), typeMultiFk2))
	return q.Select(selectNodes...).Load()
}

// HasUnsupportedTypeByTypeMultFk1TypeMultiFk2 returns true if the
// given index values exist in the database.
// doc: type=UnsupportedType
func HasUnsupportedTypeByTypeMultFk1TypeMultiFk2(ctx context.Context, typeMultFk1 string, typeMultiFk2 string) (bool, error) {
	q := queryUnsupportedTypes(ctx)
	q = q.Where(op.Equal(node.UnsupportedType().TypeMultFk1(), typeMultFk1))
	q = q.Where(op.Equal(node.UnsupportedType().TypeMultiFk2(), typeMultiFk2))
	v, err := q.Count()
	return v > 0, err
}

// The UnsupportedTypeBuilder uses a builder pattern to create a query on the database.
// Create a UnsupportedTypeBuilder by calling QueryUnsupportedTypes, which will select all
// the UnsupportedType object in the database. Then filter and arrange those objects
// by calling Where, Select, etc.
// End a query by calling either Load, LoadI, LoadCursor, Get, or Count.
// A UnsupportedTypeBuilder stores the context it will use to perform the query, and thus is
// meant to be a short-lived object. You should not save it for later use.
type UnsupportedTypeBuilder struct {
	builder *query.Builder
	ctx     context.Context
}

func newUnsupportedTypeBuilder(ctx context.Context) *UnsupportedTypeBuilder {
	b := UnsupportedTypeBuilder{
		builder: query.NewBuilder(node.UnsupportedType()),
		ctx:     ctx,
	}
	return &b
}

// Load terminates the query builder, performs the query, and returns a slice of UnsupportedType objects.
// If there are any errors, nil is returned and the specific error is stored in the context.
// If no results come back from the query, it will return a non-nil empty slice.
func (b *UnsupportedTypeBuilder) Load() (unsupportedTypes []*UnsupportedType, err error) {
	b.builder.Command = query.BuilderCommandLoad
	database := db.GetDatabase("goradd_unit")
	var results any

	ctx := b.ctx
	results, err = database.BuilderQuery(ctx, b.builder)
	if results == nil || err != nil {
		return
	}
	for _, item := range results.([]map[string]any) {
		o := new(UnsupportedType)
		o.unpack(item, o)
		unsupportedTypes = append(unsupportedTypes, o)
	}
	return
}

// LoadI terminates the query builder, performs the query, and returns a slice of interfaces.
// This can then satisfy a variety of interfaces that load arrays of objects, including KeyLabeler.
// If there are any errors, nil is returned and the specific error is stored in the context.
// If no results come back from the query, it will return a non-nil empty slice.
func (b *UnsupportedTypeBuilder) LoadI() (unsupportedTypes []query.OrmObj, err error) {
	b.builder.Command = query.BuilderCommandLoad
	database := db.GetDatabase("goradd_unit")
	var results any

	ctx := b.ctx
	results, err = database.BuilderQuery(ctx, b.builder)
	if results == nil || err != nil {
		return
	}
	for _, item := range results.([]map[string]any) {
		o := new(UnsupportedType)
		o.unpack(item, o)
		unsupportedTypes = append(unsupportedTypes, o)
	}
	return
}

// LoadCursor terminates the query builder, performs the query, and returns a cursor to the query.
//
// A query cursor is useful for dealing with large amounts of query results. However, there are some
// limitations to its use. When working with SQL databases, you cannot use a cursor while querying
// many-to-many or reverse relationships that will create an array of values.
//
// Call Next() on the returned cursor object to step through the results. Make sure you call Close
// on the cursor object when you are done. You should use
//
//	defer cursor.Close()
//
// to make sure the cursor gets closed.
func (b *UnsupportedTypeBuilder) LoadCursor() (unsupportedTypesCursor, error) {
	b.builder.Command = query.BuilderCommandLoadCursor
	database := db.GetDatabase("goradd_unit")
	result, err := database.BuilderQuery(b.ctx, b.builder)
	var cursor query.CursorI
	if result != nil {
		cursor = result.(query.CursorI)
	}
	return unsupportedTypesCursor{cursor}, err
}

type unsupportedTypesCursor struct {
	query.CursorI
}

// Next returns the current UnsupportedType object and moves the cursor to the next one.
//
// If there are no more records, it returns nil.
func (c unsupportedTypesCursor) Next() (*UnsupportedType, error) {
	if c.CursorI == nil {
		return nil, nil
	}

	row, err := c.CursorI.Next()
	if row == nil || err != nil {
		return nil, err
	}
	o := new(UnsupportedType)
	o.unpack(row, o)
	return o, nil
}

// Get is a convenience method to return only the first item found in a query.
// The entire query is performed, so you should generally use this only if you know
// you are selecting on one or very few items.
// If an error occurs, or no results are found, a nil is returned.
func (b *UnsupportedTypeBuilder) Get() (*UnsupportedType, error) {
	results, err := b.Load()
	if err != nil || len(results) == 0 {
		return nil, err
	}
	return results[0], nil
}

// Where adds a condition to filter what gets selected.
// Calling Where multiple times will AND the conditions together.
func (b *UnsupportedTypeBuilder) Where(c query.Node) *UnsupportedTypeBuilder {
	b.builder.Where(c)
	return b
}

// OrderBy specifies how the resulting data should be sorted.
// By default, the given nodes are sorted in ascending order.
// Add Descending() to the node to specify that it should be sorted in descending order.
func (b *UnsupportedTypeBuilder) OrderBy(nodes ...query.Sorter) *UnsupportedTypeBuilder {
	b.builder.OrderBy(nodes...)
	return b
}

// Limit will return a subset of the data, limited to the offset and number of rows specified.
// For large data sets and specific types of queries, this can be slow, because it will perform
// the entire query before computing the limit.
// You cannot limit a query that has embedded arrays.
func (b *UnsupportedTypeBuilder) Limit(maxRowCount int, offset int) *UnsupportedTypeBuilder {
	b.builder.Limit(maxRowCount, offset)
	return b
}

// Select specifies what specific columns will be loaded with data.
// By default, all the columns of the unsupported_type table will be queried and loaded.
// If nodes contains columns from the unsupported_type table, that will limit the columns queried and loaded to only those columns.
// If related tables are specified, then all the columns from those tables are queried, selected and joined to the result.
// If columns in related tables are specified, then only those columns will be queried and loaded.
// Depending on the query, additional columns may automatically be added to the query. In particular, primary key columns
// will be added in most situations. The exception to this would be in distinct queries, group by queries, or subqueries.
func (b *UnsupportedTypeBuilder) Select(nodes ...query.Node) *UnsupportedTypeBuilder {
	b.builder.Select(nodes...)
	return b
}

// Calculation adds operation as an aliased value onto base.
// After the query, you can read the data by passing alias to GetAlias on the returned object.
func (b *UnsupportedTypeBuilder) Calculation(base query.TableNodeI, alias string, operation query.OperationNodeI) *UnsupportedTypeBuilder {
	b.builder.Calculation(base, alias, operation)
	return b
}

// Distinct removes duplicates from the results of the query.
// Adding a Select() is usually required.
func (b *UnsupportedTypeBuilder) Distinct() *UnsupportedTypeBuilder {
	b.builder.Distinct()
	return b
}

// GroupBy controls how results are grouped when using aggregate functions with Calculation.
func (b *UnsupportedTypeBuilder) GroupBy(nodes ...query.Node) *UnsupportedTypeBuilder {
	b.builder.GroupBy(nodes...)
	return b
}

// Having does additional filtering on the results of the query after the query is performed.
func (b *UnsupportedTypeBuilder) Having(node query.Node) *UnsupportedTypeBuilder {
	b.builder.Having(node)
	return b
}

// Count terminates a query and returns just the number of items in the result.
// If you have Select or Calculation columns in the query, it will count NULL results as well.
// To not count NULL values, use Where in the builder with a NotNull operation.
// To count distinct combinations of items, call Distinct() on the builder.
func (b *UnsupportedTypeBuilder) Count() (int, error) {
	b.builder.Command = query.BuilderCommandCount
	database := db.GetDatabase("goradd_unit")

	ctx := b.ctx
	results, err := database.BuilderQuery(ctx, b.builder)
	if results == nil || err != nil {
		return 0, err
	}
	return results.(int), nil
}

// CountUnsupportedTypes returns the total number of items in the unsupported_type table.
func CountUnsupportedTypes(ctx context.Context) (int, error) {
	return QueryUnsupportedTypes(ctx).Count()
}

// CountUnsupportedTypesByTypeMultFk1TypeMultiFk2 queries the database and returns the number of UnsupportedType objects that
// have typeMultFk1 and typeMultiFk2.
// doc: type=UnsupportedType
func CountUnsupportedTypesByTypeMultFk1TypeMultiFk2(ctx context.Context, typeMultFk1 string, typeMultiFk2 string) (int, error) {
	v_typeMultFk1 := typeMultFk1
	v_typeMultiFk2 := typeMultiFk2
	return QueryUnsupportedTypes(ctx).
		Where(op.Equal(node.UnsupportedType().TypeMultFk1(), v_typeMultFk1)).
		Where(op.Equal(node.UnsupportedType().TypeMultiFk2(), v_typeMultiFk2)).
		Count()
}

// unpack recursively transforms data coming from the database into ORM objects.
func (o *unsupportedTypeBase) unpack(m map[string]interface{}, objThis *UnsupportedType) {

	if v, ok := m["typeSerial"]; ok && v != nil {
		if o.typeSerial, ok = v.(uint64); ok {
			o.typeSerialIsLoaded = true
			o.typeSerialIsDirty = false
			o._originalPK = o.typeSerial
		} else {
			panic("Wrong type found for typeSerial.")
		}
	} else {
		o.typeSerialIsLoaded = false
		o.typeSerial = 0x0
		o.typeSerialIsDirty = false
	}

	if v, ok := m["typeSet"]; ok && v != nil {
		if o.typeSet, ok = v.([]byte); ok {
			o.typeSetIsLoaded = true
			o.typeSetIsDirty = false
		} else {
			panic("Wrong type found for typeSet.")
		}
	} else {
		o.typeSetIsLoaded = false
		o.typeSet = []byte{}
		o.typeSetIsDirty = false
	}

	if v, ok := m["typeEnumerated"]; ok && v != nil {
		if o.typeEnumerated, ok = v.([]byte); ok {
			o.typeEnumeratedIsLoaded = true
			o.typeEnumeratedIsDirty = false
		} else {
			panic("Wrong type found for typeEnumerated.")
		}
	} else {
		o.typeEnumeratedIsLoaded = false
		o.typeEnumerated = []byte{}
		o.typeEnumeratedIsDirty = false
	}

	if v, ok := m["typeGeo"]; ok && v != nil {
		if o.typeGeo, ok = v.([]byte); ok {
			o.typeGeoIsLoaded = true
			o.typeGeoIsDirty = false
		} else {
			panic("Wrong type found for typeGeo.")
		}
	} else {
		o.typeGeoIsLoaded = false
		o.typeGeo = []byte{}
		o.typeGeoIsDirty = false
	}

	if v, ok := m["typeTinyblob"]; ok && v != nil {
		if o.typeTinyblob, ok = v.([]byte); ok {
			o.typeTinyblobIsLoaded = true
			o.typeTinyblobIsDirty = false
		} else {
			panic("Wrong type found for typeTinyblob.")
		}
	} else {
		o.typeTinyblobIsLoaded = false
		o.typeTinyblob = []byte{}
		o.typeTinyblobIsDirty = false
	}

	if v, ok := m["typeBinary"]; ok && v != nil {
		if o.typeBinary, ok = v.([]byte); ok {
			o.typeBinaryIsLoaded = true
			o.typeBinaryIsDirty = false
		} else {
			panic("Wrong type found for typeBinary.")
		}
	} else {
		o.typeBinaryIsLoaded = false
		o.typeBinary = []byte{}
		o.typeBinaryIsDirty = false
	}

	if v, ok := m["typeSmall"]; ok && v != nil {
		if o.typeSmall, ok = v.(int); ok {
			o.typeSmallIsLoaded = true
			o.typeSmallIsDirty = false
		} else {
			panic("Wrong type found for typeSmall.")
		}
	} else {
		o.typeSmallIsLoaded = false
		o.typeSmall = 0
		o.typeSmallIsDirty = false
	}

	if v, ok := m["typeMedium"]; ok && v != nil {
		if o.typeMedium, ok = v.(int); ok {
			o.typeMediumIsLoaded = true
			o.typeMediumIsDirty = false
		} else {
			panic("Wrong type found for typeMedium.")
		}
	} else {
		o.typeMediumIsLoaded = false
		o.typeMedium = 0
		o.typeMediumIsDirty = false
	}

	if v, ok := m["typePolygon"]; ok && v != nil {
		if o.typePolygon, ok = v.([]byte); ok {
			o.typePolygonIsLoaded = true
			o.typePolygonIsDirty = false
		} else {
			panic("Wrong type found for typePolygon.")
		}
	} else {
		o.typePolygonIsLoaded = false
		o.typePolygon = []byte{}
		o.typePolygonIsDirty = false
	}

	if v, ok := m["typeMultFk1"]; ok && v != nil {
		if o.typeMultFk1, ok = v.(string); ok {
			o.typeMultFk1IsLoaded = true
			o.typeMultFk1IsDirty = false
		} else {
			panic("Wrong type found for typeMultFk1.")
		}
	} else {
		o.typeMultFk1IsLoaded = false
		o.typeMultFk1 = ""
		o.typeMultFk1IsDirty = false
	}

	if v, ok := m["typeMultiFk2"]; ok && v != nil {
		if o.typeMultiFk2, ok = v.(string); ok {
			o.typeMultiFk2IsLoaded = true
			o.typeMultiFk2IsDirty = false
		} else {
			panic("Wrong type found for typeMultiFk2.")
		}
	} else {
		o.typeMultiFk2IsLoaded = false
		o.typeMultiFk2 = ""
		o.typeMultiFk2IsDirty = false
	}

	if v, ok := m["aliases_"]; ok {
		o._aliases = v.(map[string]any)
	}

	o._restored = true

}

// save will update or insert the object, depending on the state of the object.
func (o *unsupportedTypeBase) save(ctx context.Context) error {
	if o._restored {
		return o.update(ctx)
	} else {
		return o.insert(ctx)
	}
}

// update will update the values in the database, saving any changed values.
// If the table has auto-generated values, those will be updated automatically.
func (o *unsupportedTypeBase) update(ctx context.Context) error {
	if !o._restored {
		panic("cannot update a record that was not originally read from the database.")
	}
	if !o.IsDirty() {
		return nil // nothing to save
	}

	var modifiedFields map[string]interface{}

	d := Database()
	err := db.WithTransaction(ctx, d, func(ctx context.Context) error {

		modifiedFields = getUnsupportedTypeUpdateFields(o)
		if len(modifiedFields) != 0 {
			err2 := d.Update(ctx, "unsupported_type",
				map[string]any{
					"type_serial": o._originalPK,
				},
				modifiedFields,
				"",
				0,
			)
			if err2 != nil {
				return err2
			}
		}

		return nil
	}) // transaction
	if err != nil {
		return err
	}

	o.resetDirtyStatus()
	if len(modifiedFields) != 0 {
		broadcast.Update(ctx, "goradd_unit", "unsupported_type", o._originalPK, anyutil.SortedKeys(modifiedFields)...)
	}

	return nil
}

// insert will insert the object into the database. Related items will be saved.
func (o *unsupportedTypeBase) insert(ctx context.Context) (err error) {
	var insertFields map[string]interface{}
	d := Database()
	err = db.WithTransaction(ctx, d, func(ctx context.Context) error {
		if !o.typeSerialIsLoaded {
			panic("a value for TypeSerial is required, and there is no default value. Call SetTypeSerial() before inserting the record.")
		}
		if !o.typeSetIsLoaded {
			panic("a value for TypeSet is required, and there is no default value. Call SetTypeSet() before inserting the record.")
		}
		if !o.typeEnumeratedIsLoaded {
			panic("a value for TypeEnumerated is required, and there is no default value. Call SetTypeEnumerated() before inserting the record.")
		}
		if !o.typeGeoIsLoaded {
			panic("a value for TypeGeo is required, and there is no default value. Call SetTypeGeo() before inserting the record.")
		}
		if !o.typeTinyblobIsLoaded {
			panic("a value for TypeTinyblob is required, and there is no default value. Call SetTypeTinyblob() before inserting the record.")
		}
		if !o.typeBinaryIsLoaded {
			panic("a value for TypeBinary is required, and there is no default value. Call SetTypeBinary() before inserting the record.")
		}
		if !o.typeSmallIsLoaded {
			panic("a value for TypeSmall is required, and there is no default value. Call SetTypeSmall() before inserting the record.")
		}
		if !o.typeMediumIsLoaded {
			panic("a value for TypeMedium is required, and there is no default value. Call SetTypeMedium() before inserting the record.")
		}
		if !o.typePolygonIsLoaded {
			panic("a value for TypePolygon is required, and there is no default value. Call SetTypePolygon() before inserting the record.")
		}
		if !o.typeMultFk1IsLoaded {
			panic("a value for TypeMultFk1 is required, and there is no default value. Call SetTypeMultFk1() before inserting the record.")
		}
		if !o.typeMultiFk2IsLoaded {
			panic("a value for TypeMultiFk2 is required, and there is no default value. Call SetTypeMultiFk2() before inserting the record.")
		}
		insertFields = getUnsupportedTypeInsertFields(o)
		var newPK uint64
		_, err = d.Insert(ctx, "unsupported_type", "", insertFields)
		if err != nil {
			return err
		}
		o._originalPK = o.PrimaryKey()
		newPK = o.PrimaryKey()
		_ = newPK

		return nil

	}) // transaction

	if err != nil {
		return
	}

	o.resetDirtyStatus()
	o._restored = true
	broadcast.Insert(ctx, "goradd_unit", "unsupported_type", o.PrimaryKey())
	return
}

// getUpdateFields returns the database columns that will be sent to the update process.
// This will include timestamp fields only if some other column has changed.
func (o *unsupportedTypeBase) getUpdateFields() (fields map[string]interface{}) {
	fields = map[string]interface{}{}
	if o.typeSerialIsDirty {
		fields["type_serial"] = o.typeSerial
	}
	if o.typeSetIsDirty {
		fields["type_set"] = o.typeSet
	}
	if o.typeEnumeratedIsDirty {
		fields["type_enumerated"] = o.typeEnumerated
	}
	if o.typeGeoIsDirty {
		fields["type_geo"] = o.typeGeo
	}
	if o.typeTinyblobIsDirty {
		fields["type_tinyblob"] = o.typeTinyblob
	}
	if o.typeBinaryIsDirty {
		fields["type_binary"] = o.typeBinary
	}
	if o.typeSmallIsDirty {
		fields["type_small"] = o.typeSmall
	}
	if o.typeMediumIsDirty {
		fields["type_medium"] = o.typeMedium
	}
	if o.typePolygonIsDirty {
		fields["type_polygon"] = o.typePolygon
	}
	if o.typeMultFk1IsDirty {
		fields["type_mult_fk1"] = o.typeMultFk1
	}
	if o.typeMultiFk2IsDirty {
		fields["type_multi_fk2"] = o.typeMultiFk2
	}
	return
}

// getInsertFields returns the fields that will be specified in an insert operation.
// Optional fields that have not been set and have no default will be returned as nil.
// NoSql databases should interpret this as no value. Sql databases should interpret this as
// explicitly setting a NULL value, which would override any database specific default value.
// Auto-generated fields will be returned with their generated values, except AutoPK fields, which are generated by the
// database driver and updated after the insert.
func (o *unsupportedTypeBase) getInsertFields() (fields map[string]interface{}) {
	fields = map[string]interface{}{}

	fields["type_serial"] = o.typeSerial

	fields["type_set"] = o.typeSet

	fields["type_enumerated"] = o.typeEnumerated

	fields["type_geo"] = o.typeGeo

	fields["type_tinyblob"] = o.typeTinyblob

	fields["type_binary"] = o.typeBinary

	fields["type_small"] = o.typeSmall

	fields["type_medium"] = o.typeMedium

	fields["type_polygon"] = o.typePolygon

	fields["type_mult_fk1"] = o.typeMultFk1

	fields["type_multi_fk2"] = o.typeMultiFk2
	return
}

// Delete deletes the record from the database.
func (o *unsupportedTypeBase) Delete(ctx context.Context) (err error) {
	if o == nil {
		return // allow deleting of a nil object to be a noop
	}
	if !o._restored {
		panic("Cannot delete a record that has no primary key value.")
	}
	d := Database()
	err = d.Delete(ctx, "unsupported_type",
		map[string]any{
			"type_serial": o._originalPK,
		},
		"",
		0,
	)
	if err != nil {
		return err
	}
	broadcast.Delete(ctx, "goradd_unit", "unsupported_type", o._originalPK)
	return
}

// deleteUnsupportedType deletes the UnsupportedType with primary key pk from the database
// and handles associated records.
func deleteUnsupportedType(ctx context.Context, pk uint64) error {
	d := db.GetDatabase("goradd_unit")
	err := d.Delete(ctx, "unsupported_type",
		map[string]any{
			"type_serial": pk,
		},
		"", 0)

	if err != nil {
		return err
	}
	broadcast.Delete(ctx, "goradd_unit", "unsupported_type", pk)
	return err
}

// resetDirtyStatus resets the dirty status of every field in the object.
func (o *unsupportedTypeBase) resetDirtyStatus() {
	o.typeSerialIsDirty = false
	o.typeSetIsDirty = false
	o.typeEnumeratedIsDirty = false
	o.typeGeoIsDirty = false
	o.typeTinyblobIsDirty = false
	o.typeBinaryIsDirty = false
	o.typeSmallIsDirty = false
	o.typeMediumIsDirty = false
	o.typePolygonIsDirty = false
	o.typeMultFk1IsDirty = false
	o.typeMultiFk2IsDirty = false

}

// IsDirty returns true if the object has been changed since it was read from the database or created.
func (o *unsupportedTypeBase) IsDirty() (dirty bool) {
	dirty = o.typeSerialIsDirty ||
		o.typeSetIsDirty ||
		o.typeEnumeratedIsDirty ||
		o.typeGeoIsDirty ||
		o.typeTinyblobIsDirty ||
		o.typeBinaryIsDirty ||
		o.typeSmallIsDirty ||
		o.typeMediumIsDirty ||
		o.typePolygonIsDirty ||
		o.typeMultFk1IsDirty ||
		o.typeMultiFk2IsDirty

	return
}

// Get returns the value of a field in the object based on the field's name.
// It will also get related objects if they are loaded.
// Invalid fields and objects are returned as nil.
// Get can be used to retrieve a value by using the Field() of a node.
func (o *unsupportedTypeBase) Get(key string) interface{} {
	switch key {
	case UnsupportedTypeTypeSerialField:
		if !o.typeSerialIsLoaded {
			return nil
		}
		return o.typeSerial
	case UnsupportedTypeTypeSetField:
		if !o.typeSetIsLoaded {
			return nil
		}
		return o.typeSet
	case UnsupportedTypeTypeEnumeratedField:
		if !o.typeEnumeratedIsLoaded {
			return nil
		}
		return o.typeEnumerated
	case UnsupportedTypeTypeGeoField:
		if !o.typeGeoIsLoaded {
			return nil
		}
		return o.typeGeo
	case UnsupportedTypeTypeTinyblobField:
		if !o.typeTinyblobIsLoaded {
			return nil
		}
		return o.typeTinyblob
	case UnsupportedTypeTypeBinaryField:
		if !o.typeBinaryIsLoaded {
			return nil
		}
		return o.typeBinary
	case UnsupportedTypeTypeSmallField:
		if !o.typeSmallIsLoaded {
			return nil
		}
		return o.typeSmall
	case UnsupportedTypeTypeMediumField:
		if !o.typeMediumIsLoaded {
			return nil
		}
		return o.typeMedium
	case UnsupportedTypeTypePolygonField:
		if !o.typePolygonIsLoaded {
			return nil
		}
		return o.typePolygon
	case UnsupportedTypeTypeMultFk1Field:
		if !o.typeMultFk1IsLoaded {
			return nil
		}
		return o.typeMultFk1
	case UnsupportedTypeTypeMultiFk2Field:
		if !o.typeMultiFk2IsLoaded {
			return nil
		}
		return o.typeMultiFk2
	}
	return nil
}

// MarshalBinary serializes the object into a buffer that is deserializable using UnmarshalBinary.
// It should be used for transmitting database objects over the wire, or for temporary storage. It does not send
// a version number, so if the data format changes, its up to you to invalidate the old stored objects.
// The framework uses this to serialize the object when it is stored in a control.
func (o *unsupportedTypeBase) MarshalBinary() ([]byte, error) {
	buf := new(bytes.Buffer)
	enc := gob.NewEncoder(buf)
	if err := o.encodeTo(enc); err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

func (o *unsupportedTypeBase) encodeTo(enc db.Encoder) error {

	if err := enc.Encode(o.typeSerial); err != nil {
		return fmt.Errorf("error encoding UnsupportedType.typeSerial: %w", err)
	}
	if err := enc.Encode(o.typeSerialIsLoaded); err != nil {
		return fmt.Errorf("error encoding UnsupportedType.typeSerialIsLoaded: %w", err)
	}
	if err := enc.Encode(o.typeSerialIsDirty); err != nil {
		return fmt.Errorf("error encoding UnsupportedType.typeSerialIsDirty: %w", err)
	}

	if err := enc.Encode(o.typeSet); err != nil {
		return fmt.Errorf("error encoding UnsupportedType.typeSet: %w", err)
	}
	if err := enc.Encode(o.typeSetIsLoaded); err != nil {
		return fmt.Errorf("error encoding UnsupportedType.typeSetIsLoaded: %w", err)
	}
	if err := enc.Encode(o.typeSetIsDirty); err != nil {
		return fmt.Errorf("error encoding UnsupportedType.typeSetIsDirty: %w", err)
	}

	if err := enc.Encode(o.typeEnumerated); err != nil {
		return fmt.Errorf("error encoding UnsupportedType.typeEnumerated: %w", err)
	}
	if err := enc.Encode(o.typeEnumeratedIsLoaded); err != nil {
		return fmt.Errorf("error encoding UnsupportedType.typeEnumeratedIsLoaded: %w", err)
	}
	if err := enc.Encode(o.typeEnumeratedIsDirty); err != nil {
		return fmt.Errorf("error encoding UnsupportedType.typeEnumeratedIsDirty: %w", err)
	}

	if err := enc.Encode(o.typeGeo); err != nil {
		return fmt.Errorf("error encoding UnsupportedType.typeGeo: %w", err)
	}
	if err := enc.Encode(o.typeGeoIsLoaded); err != nil {
		return fmt.Errorf("error encoding UnsupportedType.typeGeoIsLoaded: %w", err)
	}
	if err := enc.Encode(o.typeGeoIsDirty); err != nil {
		return fmt.Errorf("error encoding UnsupportedType.typeGeoIsDirty: %w", err)
	}

	if err := enc.Encode(o.typeTinyblob); err != nil {
		return fmt.Errorf("error encoding UnsupportedType.typeTinyblob: %w", err)
	}
	if err := enc.Encode(o.typeTinyblobIsLoaded); err != nil {
		return fmt.Errorf("error encoding UnsupportedType.typeTinyblobIsLoaded: %w", err)
	}
	if err := enc.Encode(o.typeTinyblobIsDirty); err != nil {
		return fmt.Errorf("error encoding UnsupportedType.typeTinyblobIsDirty: %w", err)
	}

	if err := enc.Encode(o.typeBinary); err != nil {
		return fmt.Errorf("error encoding UnsupportedType.typeBinary: %w", err)
	}
	if err := enc.Encode(o.typeBinaryIsLoaded); err != nil {
		return fmt.Errorf("error encoding UnsupportedType.typeBinaryIsLoaded: %w", err)
	}
	if err := enc.Encode(o.typeBinaryIsDirty); err != nil {
		return fmt.Errorf("error encoding UnsupportedType.typeBinaryIsDirty: %w", err)
	}

	if err := enc.Encode(o.typeSmall); err != nil {
		return fmt.Errorf("error encoding UnsupportedType.typeSmall: %w", err)
	}
	if err := enc.Encode(o.typeSmallIsLoaded); err != nil {
		return fmt.Errorf("error encoding UnsupportedType.typeSmallIsLoaded: %w", err)
	}
	if err := enc.Encode(o.typeSmallIsDirty); err != nil {
		return fmt.Errorf("error encoding UnsupportedType.typeSmallIsDirty: %w", err)
	}

	if err := enc.Encode(o.typeMedium); err != nil {
		return fmt.Errorf("error encoding UnsupportedType.typeMedium: %w", err)
	}
	if err := enc.Encode(o.typeMediumIsLoaded); err != nil {
		return fmt.Errorf("error encoding UnsupportedType.typeMediumIsLoaded: %w", err)
	}
	if err := enc.Encode(o.typeMediumIsDirty); err != nil {
		return fmt.Errorf("error encoding UnsupportedType.typeMediumIsDirty: %w", err)
	}

	if err := enc.Encode(o.typePolygon); err != nil {
		return fmt.Errorf("error encoding UnsupportedType.typePolygon: %w", err)
	}
	if err := enc.Encode(o.typePolygonIsLoaded); err != nil {
		return fmt.Errorf("error encoding UnsupportedType.typePolygonIsLoaded: %w", err)
	}
	if err := enc.Encode(o.typePolygonIsDirty); err != nil {
		return fmt.Errorf("error encoding UnsupportedType.typePolygonIsDirty: %w", err)
	}

	if err := enc.Encode(o.typeMultFk1); err != nil {
		return fmt.Errorf("error encoding UnsupportedType.typeMultFk1: %w", err)
	}
	if err := enc.Encode(o.typeMultFk1IsLoaded); err != nil {
		return fmt.Errorf("error encoding UnsupportedType.typeMultFk1IsLoaded: %w", err)
	}
	if err := enc.Encode(o.typeMultFk1IsDirty); err != nil {
		return fmt.Errorf("error encoding UnsupportedType.typeMultFk1IsDirty: %w", err)
	}

	if err := enc.Encode(o.typeMultiFk2); err != nil {
		return fmt.Errorf("error encoding UnsupportedType.typeMultiFk2: %w", err)
	}
	if err := enc.Encode(o.typeMultiFk2IsLoaded); err != nil {
		return fmt.Errorf("error encoding UnsupportedType.typeMultiFk2IsLoaded: %w", err)
	}
	if err := enc.Encode(o.typeMultiFk2IsDirty); err != nil {
		return fmt.Errorf("error encoding UnsupportedType.typeMultiFk2IsDirty: %w", err)
	}

	if o._aliases == nil {
		if err := enc.Encode(false); err != nil {
			return err
		}
	} else {
		if err := enc.Encode(true); err != nil {
			return err
		}
		if err := enc.Encode(o._aliases); err != nil {
			return fmt.Errorf("error encoding UnsupportedType._aliases: %w", err)
		}
	}

	if err := enc.Encode(o._restored); err != nil {
		return fmt.Errorf("error encoding UnsupportedType._restored: %w", err)
	}
	if err := enc.Encode(o._originalPK); err != nil {
		return fmt.Errorf("error encoding UnsupportedType._originalPK: %w", err)
	}
	return nil
}

// UnmarshalBinary converts a structure that was created with MarshalBinary into a UnsupportedType object.
func (o *unsupportedTypeBase) UnmarshalBinary(data []byte) (err error) {
	buf := bytes.NewReader(data)
	dec := gob.NewDecoder(buf)
	return o.decodeFrom(dec)
}

func (o *unsupportedTypeBase) decodeFrom(dec db.Decoder) (err error) {
	var isPtr bool

	_ = isPtr
	if err = dec.Decode(&o.typeSerial); err != nil {
		return fmt.Errorf("error decoding UnsupportedType.typeSerial: %w", err)
	}
	if err = dec.Decode(&o.typeSerialIsLoaded); err != nil {
		return fmt.Errorf("error decoding UnsupportedType.typeSerialIsLoaded: %w", err)
	}
	if err = dec.Decode(&o.typeSerialIsDirty); err != nil {
		return fmt.Errorf("error decoding UnsupportedType.typeSerialIsDirty: %w", err)
	}

	if err = dec.Decode(&o.typeSet); err != nil {
		return fmt.Errorf("error decoding UnsupportedType.typeSet: %w", err)
	}
	if err = dec.Decode(&o.typeSetIsLoaded); err != nil {
		return fmt.Errorf("error decoding UnsupportedType.typeSetIsLoaded: %w", err)
	}
	if err = dec.Decode(&o.typeSetIsDirty); err != nil {
		return fmt.Errorf("error decoding UnsupportedType.typeSetIsDirty: %w", err)
	}

	if err = dec.Decode(&o.typeEnumerated); err != nil {
		return fmt.Errorf("error decoding UnsupportedType.typeEnumerated: %w", err)
	}
	if err = dec.Decode(&o.typeEnumeratedIsLoaded); err != nil {
		return fmt.Errorf("error decoding UnsupportedType.typeEnumeratedIsLoaded: %w", err)
	}
	if err = dec.Decode(&o.typeEnumeratedIsDirty); err != nil {
		return fmt.Errorf("error decoding UnsupportedType.typeEnumeratedIsDirty: %w", err)
	}

	if err = dec.Decode(&o.typeGeo); err != nil {
		return fmt.Errorf("error decoding UnsupportedType.typeGeo: %w", err)
	}
	if err = dec.Decode(&o.typeGeoIsLoaded); err != nil {
		return fmt.Errorf("error decoding UnsupportedType.typeGeoIsLoaded: %w", err)
	}
	if err = dec.Decode(&o.typeGeoIsDirty); err != nil {
		return fmt.Errorf("error decoding UnsupportedType.typeGeoIsDirty: %w", err)
	}

	if err = dec.Decode(&o.typeTinyblob); err != nil {
		return fmt.Errorf("error decoding UnsupportedType.typeTinyblob: %w", err)
	}
	if err = dec.Decode(&o.typeTinyblobIsLoaded); err != nil {
		return fmt.Errorf("error decoding UnsupportedType.typeTinyblobIsLoaded: %w", err)
	}
	if err = dec.Decode(&o.typeTinyblobIsDirty); err != nil {
		return fmt.Errorf("error decoding UnsupportedType.typeTinyblobIsDirty: %w", err)
	}

	if err = dec.Decode(&o.typeBinary); err != nil {
		return fmt.Errorf("error decoding UnsupportedType.typeBinary: %w", err)
	}
	if err = dec.Decode(&o.typeBinaryIsLoaded); err != nil {
		return fmt.Errorf("error decoding UnsupportedType.typeBinaryIsLoaded: %w", err)
	}
	if err = dec.Decode(&o.typeBinaryIsDirty); err != nil {
		return fmt.Errorf("error decoding UnsupportedType.typeBinaryIsDirty: %w", err)
	}

	if err = dec.Decode(&o.typeSmall); err != nil {
		return fmt.Errorf("error decoding UnsupportedType.typeSmall: %w", err)
	}
	if err = dec.Decode(&o.typeSmallIsLoaded); err != nil {
		return fmt.Errorf("error decoding UnsupportedType.typeSmallIsLoaded: %w", err)
	}
	if err = dec.Decode(&o.typeSmallIsDirty); err != nil {
		return fmt.Errorf("error decoding UnsupportedType.typeSmallIsDirty: %w", err)
	}

	if err = dec.Decode(&o.typeMedium); err != nil {
		return fmt.Errorf("error decoding UnsupportedType.typeMedium: %w", err)
	}
	if err = dec.Decode(&o.typeMediumIsLoaded); err != nil {
		return fmt.Errorf("error decoding UnsupportedType.typeMediumIsLoaded: %w", err)
	}
	if err = dec.Decode(&o.typeMediumIsDirty); err != nil {
		return fmt.Errorf("error decoding UnsupportedType.typeMediumIsDirty: %w", err)
	}

	if err = dec.Decode(&o.typePolygon); err != nil {
		return fmt.Errorf("error decoding UnsupportedType.typePolygon: %w", err)
	}
	if err = dec.Decode(&o.typePolygonIsLoaded); err != nil {
		return fmt.Errorf("error decoding UnsupportedType.typePolygonIsLoaded: %w", err)
	}
	if err = dec.Decode(&o.typePolygonIsDirty); err != nil {
		return fmt.Errorf("error decoding UnsupportedType.typePolygonIsDirty: %w", err)
	}

	if err = dec.Decode(&o.typeMultFk1); err != nil {
		return fmt.Errorf("error decoding UnsupportedType.typeMultFk1: %w", err)
	}
	if err = dec.Decode(&o.typeMultFk1IsLoaded); err != nil {
		return fmt.Errorf("error decoding UnsupportedType.typeMultFk1IsLoaded: %w", err)
	}
	if err = dec.Decode(&o.typeMultFk1IsDirty); err != nil {
		return fmt.Errorf("error decoding UnsupportedType.typeMultFk1IsDirty: %w", err)
	}

	if err = dec.Decode(&o.typeMultiFk2); err != nil {
		return fmt.Errorf("error decoding UnsupportedType.typeMultiFk2: %w", err)
	}
	if err = dec.Decode(&o.typeMultiFk2IsLoaded); err != nil {
		return fmt.Errorf("error decoding UnsupportedType.typeMultiFk2IsLoaded: %w", err)
	}
	if err = dec.Decode(&o.typeMultiFk2IsDirty); err != nil {
		return fmt.Errorf("error decoding UnsupportedType.typeMultiFk2IsDirty: %w", err)
	}

	if err = dec.Decode(&isPtr); err != nil {
		return fmt.Errorf("error decoding UnsupportedType._aliases isPtr: %w", err)
	}
	if isPtr {
		if err = dec.Decode(&o._aliases); err != nil {
			return fmt.Errorf("error decoding UnsupportedType._aliases: %w", err)
		}
	}

	if err = dec.Decode(&o._restored); err != nil {
		return fmt.Errorf("error decoding UnsupportedType._restored: %w", err)
	}
	if err = dec.Decode(&o._originalPK); err != nil {
		return fmt.Errorf("error decoding UnsupportedType._originalPK: %w", err)
	}
	return
}

// MarshalJSON serializes the object into a JSON object.
// Only valid data will be serialized, meaning, you can control what gets serialized by using Select to
// select only the fields you want when you query for the object. Another way to control the output
// is to call MarshalStringMap, modify the map, then encode the map.
func (o *unsupportedTypeBase) MarshalJSON() (data []byte, err error) {
	v := o.MarshalStringMap()
	return json.Marshal(v)
}

// MarshalStringMap serializes the object into a string map of interfaces.
// Only valid data will be serialized, meaning, you can control what gets serialized by using Select to
// select only the fields you want when you query for the object. The keys are the same as the json keys.
func (o *unsupportedTypeBase) MarshalStringMap() map[string]interface{} {
	v := make(map[string]interface{})

	if o.typeSerialIsLoaded {
		v["typeSerial"] = o.typeSerial
	}

	if o.typeSetIsLoaded {
		v["typeSet"] = o.typeSet
	}

	if o.typeEnumeratedIsLoaded {
		v["typeEnumerated"] = o.typeEnumerated
	}

	if o.typeGeoIsLoaded {
		v["typeGeo"] = o.typeGeo
	}

	if o.typeTinyblobIsLoaded {
		v["typeTinyblob"] = o.typeTinyblob
	}

	if o.typeBinaryIsLoaded {
		v["typeBinary"] = o.typeBinary
	}

	if o.typeSmallIsLoaded {
		v["typeSmall"] = o.typeSmall
	}

	if o.typeMediumIsLoaded {
		v["typeMedium"] = o.typeMedium
	}

	if o.typePolygonIsLoaded {
		v["typePolygon"] = o.typePolygon
	}

	if o.typeMultFk1IsLoaded {
		v["typeMultFk1"] = o.typeMultFk1
	}

	if o.typeMultiFk2IsLoaded {
		v["typeMultiFk2"] = o.typeMultiFk2
	}

	for _k, _v := range o._aliases {
		v[_k] = _v
	}
	return v
}

// UnmarshalJSON unmarshalls the given json data into the UnsupportedType. The UnsupportedType can be a
// newly created object, or one loaded from the database.
//
// After unmarshalling, the object is not  saved. You must call Save to insert it into the database
// or update it.
//
// Unmarshalling of sub-objects, as in objects linked via foreign keys, is not currently supported.
//
// The fields it expects are:
//
//	"typeSerial" - uint64
//	"typeSet" - []byte
//	"typeEnumerated" - []byte
//	"typeGeo" - []byte
//	"typeTinyblob" - []byte
//	"typeBinary" - []byte
//	"typeSmall" - int
//	"typeMedium" - int
//	"typePolygon" - []byte
//	"typeMultFk1" - string
//	"typeMultiFk2" - string
func (o *unsupportedTypeBase) UnmarshalJSON(data []byte) (err error) {
	var v map[string]interface{}
	if len(data) == 0 {
		return
	}
	d := json.NewDecoder(bytes.NewReader(data))
	d.UseNumber() // use a number to avoid precision errors
	if err = d.Decode(&v); err != nil {
		return err
	}
	return o.UnmarshalStringMap(v)
}

// UnmarshalStringMap will load the values from the stringmap into the object.
//
// Override this in UnsupportedType to modify the json before sending it here.
func (o *unsupportedTypeBase) UnmarshalStringMap(m map[string]interface{}) (err error) {
	for k, v := range m {
		switch k {

		case "typeSerial":
			{
				if v == nil {
					return fmt.Errorf("field %s cannot be null", k)
				}

				switch n := v.(type) {
				case json.Number:
					n2, err := n.Int64()
					if err != nil {
						return err
					}
					o.SetTypeSerial(uint64(n2))
				case uint64:
					o.SetTypeSerial(n)
				case int:
					o.SetTypeSerial(uint64(n))
				case float64:
					o.SetTypeSerial(uint64(n))
				default:
					return fmt.Errorf("field %s must be a number", k)
				}
			}
		case "typeSet":
			{
				if v == nil {
					return fmt.Errorf("field %s cannot be null", k)
				}

				switch d := v.(type) {
				case string:
					{
						// A base 64 encoded string
						if b, err2 := base64.StdEncoding.DecodeString(d); err2 == nil {
							o.SetTypeSet(b)
						} else {
							return fmt.Errorf("json field %s must be either a Base64 encoded string or an array of byte values", k)
						}
					}
				case []interface{}:
					{
						// An array of byte values. Unfortunately, these come through as float64s, and so need to be converted
						b := make([]byte, len(d), len(d))
						for i, b1 := range d {
							if f, ok := b1.(float64); !ok {
								return fmt.Errorf("json field %s must be either a Base64 encoded string or an array of byte values", k)
							} else {
								b[i] = uint8(f)
							}
						}
						o.SetTypeSet(b)
					}
				default:
					return fmt.Errorf("json field %s must be either a Base64 encoded string or an array of byte values", k)
				}

			}
		case "typeEnumerated":
			{
				if v == nil {
					return fmt.Errorf("field %s cannot be null", k)
				}

				switch d := v.(type) {
				case string:
					{
						// A base 64 encoded string
						if b, err2 := base64.StdEncoding.DecodeString(d); err2 == nil {
							o.SetTypeEnumerated(b)
						} else {
							return fmt.Errorf("json field %s must be either a Base64 encoded string or an array of byte values", k)
						}
					}
				case []interface{}:
					{
						// An array of byte values. Unfortunately, these come through as float64s, and so need to be converted
						b := make([]byte, len(d), len(d))
						for i, b1 := range d {
							if f, ok := b1.(float64); !ok {
								return fmt.Errorf("json field %s must be either a Base64 encoded string or an array of byte values", k)
							} else {
								b[i] = uint8(f)
							}
						}
						o.SetTypeEnumerated(b)
					}
				default:
					return fmt.Errorf("json field %s must be either a Base64 encoded string or an array of byte values", k)
				}

			}
		case "typeGeo":
			{
				if v == nil {
					return fmt.Errorf("field %s cannot be null", k)
				}

				switch d := v.(type) {
				case string:
					{
						// A base 64 encoded string
						if b, err2 := base64.StdEncoding.DecodeString(d); err2 == nil {
							o.SetTypeGeo(b)
						} else {
							return fmt.Errorf("json field %s must be either a Base64 encoded string or an array of byte values", k)
						}
					}
				case []interface{}:
					{
						// An array of byte values. Unfortunately, these come through as float64s, and so need to be converted
						b := make([]byte, len(d), len(d))
						for i, b1 := range d {
							if f, ok := b1.(float64); !ok {
								return fmt.Errorf("json field %s must be either a Base64 encoded string or an array of byte values", k)
							} else {
								b[i] = uint8(f)
							}
						}
						o.SetTypeGeo(b)
					}
				default:
					return fmt.Errorf("json field %s must be either a Base64 encoded string or an array of byte values", k)
				}

			}
		case "typeTinyblob":
			{
				if v == nil {
					return fmt.Errorf("field %s cannot be null", k)
				}

				switch d := v.(type) {
				case string:
					{
						// A base 64 encoded string
						if b, err2 := base64.StdEncoding.DecodeString(d); err2 == nil {
							o.SetTypeTinyblob(b)
						} else {
							return fmt.Errorf("json field %s must be either a Base64 encoded string or an array of byte values", k)
						}
					}
				case []interface{}:
					{
						// An array of byte values. Unfortunately, these come through as float64s, and so need to be converted
						b := make([]byte, len(d), len(d))
						for i, b1 := range d {
							if f, ok := b1.(float64); !ok {
								return fmt.Errorf("json field %s must be either a Base64 encoded string or an array of byte values", k)
							} else {
								b[i] = uint8(f)
							}
						}
						o.SetTypeTinyblob(b)
					}
				default:
					return fmt.Errorf("json field %s must be either a Base64 encoded string or an array of byte values", k)
				}

			}
		case "typeBinary":
			{
				if v == nil {
					return fmt.Errorf("field %s cannot be null", k)
				}

				switch d := v.(type) {
				case string:
					{
						// A base 64 encoded string
						if b, err2 := base64.StdEncoding.DecodeString(d); err2 == nil {
							o.SetTypeBinary(b)
						} else {
							return fmt.Errorf("json field %s must be either a Base64 encoded string or an array of byte values", k)
						}
					}
				case []interface{}:
					{
						// An array of byte values. Unfortunately, these come through as float64s, and so need to be converted
						b := make([]byte, len(d), len(d))
						for i, b1 := range d {
							if f, ok := b1.(float64); !ok {
								return fmt.Errorf("json field %s must be either a Base64 encoded string or an array of byte values", k)
							} else {
								b[i] = uint8(f)
							}
						}
						o.SetTypeBinary(b)
					}
				default:
					return fmt.Errorf("json field %s must be either a Base64 encoded string or an array of byte values", k)
				}

			}
		case "typeSmall":
			{
				if v == nil {
					return fmt.Errorf("field %s cannot be null", k)
				}

				switch n := v.(type) {
				case json.Number:
					n2, err := n.Int64()
					if err != nil {
						return err
					}
					o.SetTypeSmall(int(n2))
				case int:
					o.SetTypeSmall(n)
				case float64:
					o.SetTypeSmall(int(n))
				default:
					return fmt.Errorf("field %s must be a number", k)
				}
			}
		case "typeMedium":
			{
				if v == nil {
					return fmt.Errorf("field %s cannot be null", k)
				}

				switch n := v.(type) {
				case json.Number:
					n2, err := n.Int64()
					if err != nil {
						return err
					}
					o.SetTypeMedium(int(n2))
				case int:
					o.SetTypeMedium(n)
				case float64:
					o.SetTypeMedium(int(n))
				default:
					return fmt.Errorf("field %s must be a number", k)
				}
			}
		case "typePolygon":
			{
				if v == nil {
					return fmt.Errorf("field %s cannot be null", k)
				}

				switch d := v.(type) {
				case string:
					{
						// A base 64 encoded string
						if b, err2 := base64.StdEncoding.DecodeString(d); err2 == nil {
							o.SetTypePolygon(b)
						} else {
							return fmt.Errorf("json field %s must be either a Base64 encoded string or an array of byte values", k)
						}
					}
				case []interface{}:
					{
						// An array of byte values. Unfortunately, these come through as float64s, and so need to be converted
						b := make([]byte, len(d), len(d))
						for i, b1 := range d {
							if f, ok := b1.(float64); !ok {
								return fmt.Errorf("json field %s must be either a Base64 encoded string or an array of byte values", k)
							} else {
								b[i] = uint8(f)
							}
						}
						o.SetTypePolygon(b)
					}
				default:
					return fmt.Errorf("json field %s must be either a Base64 encoded string or an array of byte values", k)
				}

			}
		case "typeMultFk1":
			{
				if v == nil {
					return fmt.Errorf("field %s cannot be null", k)
				}

				if s, ok := v.(string); !ok {
					return fmt.Errorf("json field %s must be a string", k)
				} else {
					o.SetTypeMultFk1(s)
				}
			}
		case "typeMultiFk2":
			{
				if v == nil {
					return fmt.Errorf("field %s cannot be null", k)
				}

				if s, ok := v.(string); !ok {
					return fmt.Errorf("json field %s must be a string", k)
				} else {
					o.SetTypeMultiFk2(s)
				}
			}
		}
	}
	return
}
