// Code generated by goradd-orm. DO NOT EDIT.

package goradd_unit

import (
	"context"
	"testing"

	"github.com/goradd/orm/pkg/db"
	"github.com/goradd/orm/pkg/test"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestForwardCascadeUnique_SetName(t *testing.T) {

	obj := NewForwardCascadeUnique()
	name := test.RandomValue[string](100)
	obj.SetName(name)
	assert.Equal(t, name, obj.Name())

	// test default
	obj.SetName("")
	assert.EqualValues(t, "", obj.Name(), "set default")

	// test panic on setting value larger than maximum size allowed
	name = test.RandomValue[string](101)
	assert.Panics(t, func() {
		obj.SetName(name)
	})
}
func TestForwardCascadeUnique_SetReverseID(t *testing.T) {

	obj := NewForwardCascadeUnique()
	reverseID := test.RandomValue[string](0)
	obj.SetReverseID(reverseID)
	assert.Equal(t, reverseID, obj.ReverseID())
	assert.False(t, obj.ReverseIDIsNull())

	// Test NULL
	obj.SetReverseIDToNull()
	assert.Equal(t, "", obj.ReverseID())
	assert.True(t, obj.ReverseIDIsNull())

	// test default
	obj.SetReverseID("")
	assert.EqualValues(t, "", obj.ReverseID(), "set default")

}

// createMinimalSampleForwardCascadeUnique creates and saves a minimal version of a ForwardCascadeUnique object
// for testing.
func createMinimalSampleForwardCascadeUnique(ctx context.Context) *ForwardCascadeUnique {
	obj := NewForwardCascadeUnique()

	name := test.RandomValue[string](100)
	obj.SetName(name)

	obj.Save(ctx)
	return obj
}
func TestForwardCascadeUnique_CRUD(t *testing.T) {
	obj := NewForwardCascadeUnique()
	ctx := db.NewContext(nil)

	name := test.RandomValue[string](100)
	obj.SetName(name)

	objReverse := createMinimalSampleReverse(ctx)
	defer objReverse.Delete(ctx)
	obj.SetReverse(objReverse)

	err := obj.Save(ctx)
	assert.NoError(t, err)
	defer obj.Delete(ctx)

	// Test retrieval
	obj2 := LoadForwardCascadeUnique(ctx, obj.PrimaryKey())
	require.NotNil(t, obj2)

	assert.True(t, obj2.IDIsValid())

	assert.True(t, obj2.NameIsValid())
	assert.Equal(t, name, obj2.Name())

	assert.True(t, obj2.ReverseIDIsValid())
	assert.False(t, obj2.ReverseIDIsNull())
	assert.NotEmpty(t, obj2.ReverseID())

}
