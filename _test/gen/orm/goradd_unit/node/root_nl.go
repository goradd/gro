// Code generated by goradd-orm. DO NOT EDIT.

package node

import (
	"bytes"
	"encoding/gob"

	"github.com/goradd/orm/pkg/query"
	"github.com/goradd/orm/pkg/schema"
)

// RootNlNode is the builder interface to the RootNl nodes.
type RootNlNode interface {
	query.TableNodeI
	PrimaryKey() *query.ColumnNode
	// ID represents the id column in the database.
	ID() *query.ColumnNode
	// Name represents the name column in the database.
	Name() *query.ColumnNode
	// GroLock represents the gro_lock column in the database.
	GroLock() *query.ColumnNode
	// LeafNls represents the LeafNls reference to LeafNl objects.
	LeafNls() LeafNlNode
}

// rootNlTable represents the root_nl table in a query. It uses a builder pattern to chain
// together other tables and columns to form a node chain in a query.
//
// To use the rootNlTable, call [RootNl()] to start a reference chain when querying the root_nl table.
type rootNlTable struct {
}

type rootNlReference struct {
	rootNlTable
	query.ReferenceNode
}

// RootNl returns a table node that starts a node chain that begins with the root_nl table.
func RootNl() RootNlNode {
	return rootNlTable{}
}

// TableName_ returns the query name of the table the node is associated with.
func (n rootNlTable) TableName_() string {
	return "root_nl"
}

// NodeType_ returns the query.NodeType of the node.
func (n rootNlTable) NodeType_() query.NodeType {
	return query.TableNodeType
}

// DatabaseKey_ returns the database key of the database the node is associated with.
func (n rootNlTable) DatabaseKey_() string {
	return "goradd_unit"
}

// ColumnNodes_ returns a list of all the column nodes in this node.
func (n rootNlTable) ColumnNodes_() (nodes []query.Node) {
	nodes = append(nodes, n.ID())
	nodes = append(nodes, n.Name())
	nodes = append(nodes, n.GroLock())
	return nodes
}

func (n *rootNlReference) ColumnNodes_() (nodes []query.Node) {
	nodes = n.rootNlTable.ColumnNodes_()
	for _, cn := range nodes {
		query.NodeSetParent(cn, n)
	}
	return
}

func (n *rootNlReference) NodeType_() query.NodeType {
	return query.ReferenceNodeType
}

// PrimaryKey returns a node that points to the primary key column.
func (n rootNlTable) PrimaryKey() *query.ColumnNode {
	return n.ID()
}

// PrimaryKey returns a node that points to the primary key column.
func (n *rootNlReference) PrimaryKey() *query.ColumnNode {
	return n.ID()
}

func (n rootNlTable) ID() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:     "id",
		Identifier:    "ID",
		ReceiverType:  query.ColTypeString,
		SchemaType:    schema.ColTypeAutoPrimaryKey,
		SchemaSubType: schema.ColSubTypeNone,
		IsPrimaryKey:  true,
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n *rootNlReference) ID() *query.ColumnNode {
	cn := n.rootNlTable.ID()
	query.NodeSetParent(cn, n)
	return cn
}

func (n rootNlTable) Name() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:     "name",
		Identifier:    "Name",
		ReceiverType:  query.ColTypeString,
		SchemaType:    schema.ColTypeString,
		SchemaSubType: schema.ColSubTypeNone,
		IsPrimaryKey:  false,
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n *rootNlReference) Name() *query.ColumnNode {
	cn := n.rootNlTable.Name()
	query.NodeSetParent(cn, n)
	return cn
}

func (n rootNlTable) GroLock() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:     "gro_lock",
		Identifier:    "GroLock",
		ReceiverType:  query.ColTypeInteger64,
		SchemaType:    schema.ColTypeInt,
		SchemaSubType: schema.ColSubTypeLock,
		IsPrimaryKey:  false,
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n *rootNlReference) GroLock() *query.ColumnNode {
	cn := n.rootNlTable.GroLock()
	query.NodeSetParent(cn, n)
	return cn
}

// LeafNls represents the many-to-one relationship formed by the reverse reference from the
// root_nl_id column in the leaf_nl table.
func (n rootNlTable) LeafNls() LeafNlNode {
	cn := &leafNlReverse{
		ReverseNode: query.ReverseNode{
			ColumnQueryName: "root_nl_id",
			Identifier:      "LeafNls",
			ReceiverType:    query.ColTypeString,
			IsUnique:        false,
		},
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n *rootNlReference) LeafNls() LeafNlNode {
	cn := n.rootNlTable.LeafNls().(*leafNlReverse)
	query.NodeSetParent(cn, n)
	return cn
}

func (n rootNlTable) GobEncode() (data []byte, err error) {
	return
}

func (n *rootNlTable) GobDecode(data []byte) (err error) {
	return
}

func (n *rootNlReference) GobEncode() (data []byte, err error) {
	var buf bytes.Buffer
	e := gob.NewEncoder(&buf)

	if err = e.Encode(&n.ReferenceNode); err != nil {
		panic(err)
	}
	data = buf.Bytes()
	return
}

func (n *rootNlReference) GobDecode(data []byte) (err error) {
	buf := bytes.NewBuffer(data)
	dec := gob.NewDecoder(buf)

	if err = dec.Decode(&n.ReferenceNode); err != nil {
		panic(err)
	}
	return
}

func init() {
	gob.Register(new(rootNlTable))
	gob.Register(new(rootNlReference))
}
