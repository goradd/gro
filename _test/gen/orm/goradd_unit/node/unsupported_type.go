// Code generated by goradd-orm. DO NOT EDIT.

package node

import (
	"encoding/gob"

	"github.com/goradd/orm/pkg/query"
)

// UnsupportedTypeNodeI is the builder interface to the UnsupportedType nodes.
type UnsupportedTypeNodeI interface {
	query.NodeI
	PrimaryKeyNode() *query.ColumnNode
	// TypeSerial represents the type_serial column in the database.
	TypeSerial() *query.ColumnNode
	// TypeSet represents the type_set column in the database.
	TypeSet() *query.ColumnNode
	// TypeEnum represents the type_enum column in the database.
	TypeEnum() *query.ColumnNode
	// TypeDecimal represents the type_decimal column in the database.
	TypeDecimal() *query.ColumnNode
	// TypeDouble represents the type_double column in the database.
	TypeDouble() *query.ColumnNode
	// TypeGeo represents the type_geo column in the database.
	TypeGeo() *query.ColumnNode
	// TypeTinyBlob represents the type_tiny_blob column in the database.
	TypeTinyBlob() *query.ColumnNode
	// TypeMediumBlob represents the type_medium_blob column in the database.
	TypeMediumBlob() *query.ColumnNode
	// TypeVarbinary represents the type_varbinary column in the database.
	TypeVarbinary() *query.ColumnNode
	// TypeLongtext represents the type_longtext column in the database.
	TypeLongtext() *query.ColumnNode
	// TypeBinary represents the type_binary column in the database.
	TypeBinary() *query.ColumnNode
	// TypeSmall represents the type_small column in the database.
	TypeSmall() *query.ColumnNode
	// TypeMedium represents the type_medium column in the database.
	TypeMedium() *query.ColumnNode
	// TypeBig represents the type_big column in the database.
	TypeBig() *query.ColumnNode
	// TypePolygon represents the type_polygon column in the database.
	TypePolygon() *query.ColumnNode
	// TypeUnsigned represents the type_unsigned column in the database.
	TypeUnsigned() *query.ColumnNode
	// TypeMultfk1 represents the type_multFk1 column in the database.
	TypeMultfk1() *query.ColumnNode
	// TypeMultifk2 represents the type_multiFk2 column in the database.
	TypeMultifk2() *query.ColumnNode
}

// UnsupportedTypeExpander is the builder interface for UnsupportedTypes that are expandable.
type UnsupportedTypeExpander interface {
	UnsupportedTypeNodeI
	// Expand causes the node to produce separate rows with individual items, rather than a single row with an array of items.
	Expand() UnsupportedTypeNodeI
}

// unsupportedTypeTable represents the unsupported_type table in a query. It uses a builder pattern to chain
// together other tables and columns to form a node chain in a query.
//
// To use the unsupportedTypeTable, call [UnsupportedType()] to start a reference chain when querying the unsupported_type table.
type unsupportedTypeTable struct {
}

type unsupportedTypeReverse struct {
	unsupportedTypeTable
	reverseColumn *query.ColumnNode
}

// UnsupportedType returns a table node that starts a node chain that begins with the unsupported_type table.
func UnsupportedType() UnsupportedTypeNodeI {
	// Table nodes are empty structs, and do not have pointer receivers,
	var n unsupportedTypeTable
	return n
}

// SelectNodes_ is used internally by the framework to return the list of all the column nodes.
func (n unsupportedTypeTable) SelectNodes_() (nodes []*query.ColumnNode) {
	nodes = append(nodes, n.TypeSerial())
	nodes = append(nodes, n.TypeSet())
	nodes = append(nodes, n.TypeEnum())
	nodes = append(nodes, n.TypeDecimal())
	nodes = append(nodes, n.TypeDouble())
	nodes = append(nodes, n.TypeGeo())
	nodes = append(nodes, n.TypeTinyBlob())
	nodes = append(nodes, n.TypeMediumBlob())
	nodes = append(nodes, n.TypeVarbinary())
	nodes = append(nodes, n.TypeLongtext())
	nodes = append(nodes, n.TypeBinary())
	nodes = append(nodes, n.TypeSmall())
	nodes = append(nodes, n.TypeMedium())
	nodes = append(nodes, n.TypeBig())
	nodes = append(nodes, n.TypePolygon())
	nodes = append(nodes, n.TypeUnsigned())
	nodes = append(nodes, n.TypeMultfk1())
	nodes = append(nodes, n.TypeMultifk2())
	return nodes
}

// Copy_ is used internally by the framework to deep copy the node.
func (n unsupportedTypeTable) Copy_() query.NodeI {
	// Table nodes are empty so just offer a copy
	var t unsupportedTypeTable
	return t
}

// PrimaryKeyNode returns a node that points to the primary key column, if
// a single primary key exists in the table.
func (n unsupportedTypeTable) PrimaryKeyNode() *query.ColumnNode {
	return n.TypeSerial()
}

// TypeSerial represents the type_serial column in the database.
func (n unsupportedTypeTable) TypeSerial() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd_unit",
		"unsupported_type",
		"type_serial",
		"TypeSerial",
		query.ColTypeString,
		true,
	)
	query.SetParentNode(cn, n)
	return cn
}

// TypeSet represents the type_set column in the database.
func (n unsupportedTypeTable) TypeSet() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd_unit",
		"unsupported_type",
		"type_set",
		"TypeSet",
		query.ColTypeUnknown,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

// TypeEnum represents the type_enum column in the database.
func (n unsupportedTypeTable) TypeEnum() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd_unit",
		"unsupported_type",
		"type_enum",
		"TypeEnum",
		query.ColTypeUnknown,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

// TypeDecimal represents the type_decimal column in the database.
func (n unsupportedTypeTable) TypeDecimal() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd_unit",
		"unsupported_type",
		"type_decimal",
		"TypeDecimal",
		query.ColTypeString,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

// TypeDouble represents the type_double column in the database.
func (n unsupportedTypeTable) TypeDouble() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd_unit",
		"unsupported_type",
		"type_double",
		"TypeDouble",
		query.ColTypeFloat64,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

// TypeGeo represents the type_geo column in the database.
func (n unsupportedTypeTable) TypeGeo() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd_unit",
		"unsupported_type",
		"type_geo",
		"TypeGeo",
		query.ColTypeUnknown,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

// TypeTinyBlob represents the type_tiny_blob column in the database.
func (n unsupportedTypeTable) TypeTinyBlob() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd_unit",
		"unsupported_type",
		"type_tiny_blob",
		"TypeTinyBlob",
		query.ColTypeBytes,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

// TypeMediumBlob represents the type_medium_blob column in the database.
func (n unsupportedTypeTable) TypeMediumBlob() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd_unit",
		"unsupported_type",
		"type_medium_blob",
		"TypeMediumBlob",
		query.ColTypeBytes,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

// TypeVarbinary represents the type_varbinary column in the database.
func (n unsupportedTypeTable) TypeVarbinary() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd_unit",
		"unsupported_type",
		"type_varbinary",
		"TypeVarbinary",
		query.ColTypeUnknown,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

// TypeLongtext represents the type_longtext column in the database.
func (n unsupportedTypeTable) TypeLongtext() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd_unit",
		"unsupported_type",
		"type_longtext",
		"TypeLongtext",
		query.ColTypeString,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

// TypeBinary represents the type_binary column in the database.
func (n unsupportedTypeTable) TypeBinary() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd_unit",
		"unsupported_type",
		"type_binary",
		"TypeBinary",
		query.ColTypeUnknown,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

// TypeSmall represents the type_small column in the database.
func (n unsupportedTypeTable) TypeSmall() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd_unit",
		"unsupported_type",
		"type_small",
		"TypeSmall",
		query.ColTypeInteger,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

// TypeMedium represents the type_medium column in the database.
func (n unsupportedTypeTable) TypeMedium() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd_unit",
		"unsupported_type",
		"type_medium",
		"TypeMedium",
		query.ColTypeInteger,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

// TypeBig represents the type_big column in the database.
func (n unsupportedTypeTable) TypeBig() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd_unit",
		"unsupported_type",
		"type_big",
		"TypeBig",
		query.ColTypeInteger64,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

// TypePolygon represents the type_polygon column in the database.
func (n unsupportedTypeTable) TypePolygon() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd_unit",
		"unsupported_type",
		"type_polygon",
		"TypePolygon",
		query.ColTypeUnknown,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

// TypeUnsigned represents the type_unsigned column in the database.
func (n unsupportedTypeTable) TypeUnsigned() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd_unit",
		"unsupported_type",
		"type_unsigned",
		"TypeUnsigned",
		query.ColTypeUnsigned,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

// TypeMultfk1 represents the type_multFk1 column in the database.
func (n unsupportedTypeTable) TypeMultfk1() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd_unit",
		"unsupported_type",
		"type_multFk1",
		"TypeMultfk1",
		query.ColTypeString,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

// TypeMultifk2 represents the type_multiFk2 column in the database.
func (n unsupportedTypeTable) TypeMultifk2() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd_unit",
		"unsupported_type",
		"type_multiFk2",
		"TypeMultifk2",
		query.ColTypeString,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

func init() {
	gob.Register(new(unsupportedTypeTable))
	gob.Register(new(unsupportedTypeReverse))
}
