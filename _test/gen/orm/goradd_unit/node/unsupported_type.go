// Code generated by goradd-orm. DO NOT EDIT.

package node

import (
	"encoding/gob"

	"github.com/goradd/orm/pkg/query"
	"github.com/goradd/orm/pkg/schema"
)

// UnsupportedTypeNode is the builder interface to the UnsupportedType nodes.
type UnsupportedTypeNode interface {
	query.TableNodeI
	// PrimaryKey returns the column node representing the primary key of the table
	PrimaryKey() *query.ColumnNode
	// TypeSerial represents the type_serial column in the database.
	TypeSerial() *query.ColumnNode
	// TypeSet represents the type_set column in the database.
	TypeSet() *query.ColumnNode
	// TypeEnumerated represents the type_enumerated column in the database.
	TypeEnumerated() *query.ColumnNode
	// TypeGeo represents the type_geo column in the database.
	TypeGeo() *query.ColumnNode
	// TypeTinyblob represents the type_tinyblob column in the database.
	TypeTinyblob() *query.ColumnNode
	// TypeBinary represents the type_binary column in the database.
	TypeBinary() *query.ColumnNode
	// TypeSmall represents the type_small column in the database.
	TypeSmall() *query.ColumnNode
	// TypeMedium represents the type_medium column in the database.
	TypeMedium() *query.ColumnNode
	// TypePolygon represents the type_polygon column in the database.
	TypePolygon() *query.ColumnNode
	// TypeMultFk1 represents the type_mult_fk1 column in the database.
	TypeMultFk1() *query.ColumnNode
	// TypeMultiFk2 represents the type_multi_fk2 column in the database.
	TypeMultiFk2() *query.ColumnNode
}

// unsupportedTypeTable represents the unsupported_type table in a query. It uses a builder pattern to chain
// together other tables and columns to form a node chain in a query.
//
// To use the unsupportedTypeTable, call [UnsupportedType()] to start a reference chain when querying the unsupported_type table.
type unsupportedTypeTable struct {
}

// UnsupportedType returns a table node that starts a node chain that begins with the unsupported_type table.
func UnsupportedType() UnsupportedTypeNode {
	return unsupportedTypeTable{}
}

// TableName_ returns the query name of the table the node is associated with.
func (n unsupportedTypeTable) TableName_() string {
	return "unsupported_type"
}

// NodeType_ returns the query.NodeType of the node.
func (n unsupportedTypeTable) NodeType_() query.NodeType {
	return query.TableNodeType
}

// DatabaseKey_ returns the database key of the database the node is associated with.
func (n unsupportedTypeTable) DatabaseKey_() string {
	return "goradd_unit"
}

// ColumnNodes_ returns a list of all the column nodes in this node.
func (n unsupportedTypeTable) ColumnNodes_() (nodes []query.Node) {
	nodes = append(nodes, n.TypeSerial())
	nodes = append(nodes, n.TypeSet())
	nodes = append(nodes, n.TypeEnumerated())
	nodes = append(nodes, n.TypeGeo())
	nodes = append(nodes, n.TypeTinyblob())
	nodes = append(nodes, n.TypeBinary())
	nodes = append(nodes, n.TypeSmall())
	nodes = append(nodes, n.TypeMedium())
	nodes = append(nodes, n.TypePolygon())
	nodes = append(nodes, n.TypeMultFk1())
	nodes = append(nodes, n.TypeMultiFk2())
	return nodes
}

// PrimaryKeys returns the primary key column nodes to satisfy the PrimaryKeyer interface.
func (n unsupportedTypeTable) PrimaryKeys() []*query.ColumnNode {
	return []*query.ColumnNode{
		n.TypeSerial(),
	}
}

// PrimaryKey returns the single primary key column node.
func (n unsupportedTypeTable) PrimaryKey() *query.ColumnNode {
	return n.TypeSerial()
}

func (n unsupportedTypeTable) TypeSerial() *query.ColumnNode {
	cn := query.NewColumnNode(
		"type_serial",
		"typeSerial",
		query.ColTypeUnsigned64,
		schema.ColTypeUint,
		schema.ColSubTypeNone,
		true,
		n,
	)
	return cn
}

func (n unsupportedTypeTable) TypeSet() *query.ColumnNode {
	cn := query.NewColumnNode(
		"type_set",
		"typeSet",
		query.ColTypeUnknown,
		schema.ColTypeUnknown,
		schema.ColSubTypeNone,
		false,
		n,
	)
	return cn
}

func (n unsupportedTypeTable) TypeEnumerated() *query.ColumnNode {
	cn := query.NewColumnNode(
		"type_enumerated",
		"typeEnumerated",
		query.ColTypeUnknown,
		schema.ColTypeUnknown,
		schema.ColSubTypeNone,
		false,
		n,
	)
	return cn
}

func (n unsupportedTypeTable) TypeGeo() *query.ColumnNode {
	cn := query.NewColumnNode(
		"type_geo",
		"typeGeo",
		query.ColTypeUnknown,
		schema.ColTypeUnknown,
		schema.ColSubTypeNone,
		false,
		n,
	)
	return cn
}

func (n unsupportedTypeTable) TypeTinyblob() *query.ColumnNode {
	cn := query.NewColumnNode(
		"type_tinyblob",
		"typeTinyblob",
		query.ColTypeBytes,
		schema.ColTypeBytes,
		schema.ColSubTypeNone,
		false,
		n,
	)
	return cn
}

func (n unsupportedTypeTable) TypeBinary() *query.ColumnNode {
	cn := query.NewColumnNode(
		"type_binary",
		"typeBinary",
		query.ColTypeUnknown,
		schema.ColTypeUnknown,
		schema.ColSubTypeNone,
		false,
		n,
	)
	return cn
}

func (n unsupportedTypeTable) TypeSmall() *query.ColumnNode {
	cn := query.NewColumnNode(
		"type_small",
		"typeSmall",
		query.ColTypeInteger,
		schema.ColTypeInt,
		schema.ColSubTypeNone,
		false,
		n,
	)
	return cn
}

func (n unsupportedTypeTable) TypeMedium() *query.ColumnNode {
	cn := query.NewColumnNode(
		"type_medium",
		"typeMedium",
		query.ColTypeInteger,
		schema.ColTypeInt,
		schema.ColSubTypeNone,
		false,
		n,
	)
	return cn
}

func (n unsupportedTypeTable) TypePolygon() *query.ColumnNode {
	cn := query.NewColumnNode(
		"type_polygon",
		"typePolygon",
		query.ColTypeUnknown,
		schema.ColTypeUnknown,
		schema.ColSubTypeNone,
		false,
		n,
	)
	return cn
}

func (n unsupportedTypeTable) TypeMultFk1() *query.ColumnNode {
	cn := query.NewColumnNode(
		"type_mult_fk1",
		"typeMultFk1",
		query.ColTypeString,
		schema.ColTypeString,
		schema.ColSubTypeNone,
		false,
		n,
	)
	return cn
}

func (n unsupportedTypeTable) TypeMultiFk2() *query.ColumnNode {
	cn := query.NewColumnNode(
		"type_multi_fk2",
		"typeMultiFk2",
		query.ColTypeString,
		schema.ColTypeString,
		schema.ColSubTypeNone,
		false,
		n,
	)
	return cn
}

func (n unsupportedTypeTable) GobEncode() (data []byte, err error) {
	return
}

func (n *unsupportedTypeTable) GobDecode(data []byte) (err error) {
	return
}

func init() {
	gob.Register(new(unsupportedTypeTable))
}
