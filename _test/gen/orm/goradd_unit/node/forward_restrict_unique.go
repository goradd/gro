// Code generated by goradd-orm. DO NOT EDIT.

package node

import (
	"bytes"
	"encoding/gob"

	"github.com/goradd/orm/pkg/query"
)

// ForwardRestrictUniqueNodeI is the builder interface to the ForwardRestrictUnique nodes.
type ForwardRestrictUniqueNodeI interface {
	query.NodeI
	PrimaryKeyNode() *query.ColumnNode
	// ID represents the id column in the database.
	ID() *query.ColumnNode
	// Name represents the name column in the database.
	Name() *query.ColumnNode
	// ReverseID represents the reverse_id column in the database.
	ReverseID() *query.ColumnNode
	// Reverse represents the Reverse reference to a Reverse object.
	Reverse() ReverseNodeI
}

// ForwardRestrictUniqueExpander is the builder interface for ForwardRestrictUniques that are expandable.
type ForwardRestrictUniqueExpander interface {
	ForwardRestrictUniqueNodeI
	// Expand causes the node to produce separate rows with individual items, rather than a single row with an array of items.
	Expand()
}

// forwardRestrictUniqueTable represents the forward_restrict_unique table in a query. It uses a builder pattern to chain
// together other tables and columns to form a node chain in a query.
//
// To use the forwardRestrictUniqueTable, call [ForwardRestrictUnique()] to start a reference chain when querying the forward_restrict_unique table.
type forwardRestrictUniqueTable struct {
}

type forwardRestrictUniqueReverse struct {
	forwardRestrictUniqueTable
	query.ReverseNode
}

// ForwardRestrictUnique returns a table node that starts a node chain that begins with the forward_restrict_unique table.
func ForwardRestrictUnique() ForwardRestrictUniqueNodeI {
	return forwardRestrictUniqueTable{}
}

// TableName_ returns the query name of the table the node is associated with.
func (n forwardRestrictUniqueTable) TableName_() string {
	return "forward_restrict_unique"
}

// NodeType_ returns the query.NodeType of the node.
func (n forwardRestrictUniqueTable) NodeType_() query.NodeType {
	return query.TableNodeType
}

// DatabaseKey_ returns the database key of the database the node is associated with.
func (n forwardRestrictUniqueTable) DatabaseKey_() string {
	return "goradd_unit"
}

// ColumnNodes_ is used internally by the framework to return the list of all the column nodes.
// This may include reference nodes to enum types.
func (n forwardRestrictUniqueTable) ColumnNodes_() (nodes []query.NodeI) {
	nodes = append(nodes, n.ID())
	nodes = append(nodes, n.Name())
	nodes = append(nodes, n.ReverseID())
	return nodes
}

func (n *forwardRestrictUniqueReverse) ColumnNodes_() (nodes []query.NodeI) {
	nodes = n.forwardRestrictUniqueTable.ColumnNodes_()
	for _, cn := range nodes {
		cn.(query.NodeLinker).SetParent(n)
	}
	return
}

// Columns_ is used internally by the framework to return the list of all the columns in the table.
func (n forwardRestrictUniqueTable) Columns_() []string {
	return []string{
		"id",
		"name",
		"reverse_id",
	}
}

// IsEnum_ is used internally by the framework to determine if the current table is an enumerated type.
func (n forwardRestrictUniqueTable) IsEnum_() bool {
	return false
}

func (n *forwardRestrictUniqueReverse) NodeType_() query.NodeType {
	return query.ReverseNodeType
}

// PrimaryKeyNode returns a node that points to the primary key column.
func (n forwardRestrictUniqueTable) PrimaryKeyNode() *query.ColumnNode {
	return n.ID()
}

func (n *forwardRestrictUniqueReverse) PrimaryKeyNode() *query.ColumnNode {
	return n.ID()
}

func (n forwardRestrictUniqueTable) ID() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:    "id",
		Identifier:   "ID",
		ReceiverType: query.ColTypeString,
		IsPrimaryKey: true,
	}
	cn.SetParent(n)
	return cn
}

func (n *forwardRestrictUniqueReverse) ID() *query.ColumnNode {
	cn := n.forwardRestrictUniqueTable.ID()
	cn.SetParent(n)
	return cn
}

func (n forwardRestrictUniqueTable) Name() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:    "name",
		Identifier:   "Name",
		ReceiverType: query.ColTypeString,
		IsPrimaryKey: false,
	}
	cn.SetParent(n)
	return cn
}

func (n *forwardRestrictUniqueReverse) Name() *query.ColumnNode {
	cn := n.forwardRestrictUniqueTable.Name()
	cn.SetParent(n)
	return cn
}

func (n forwardRestrictUniqueTable) ReverseID() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:    "reverse_id",
		Identifier:   "ReverseID",
		ReceiverType: query.ColTypeString,
		IsPrimaryKey: false,
	}
	cn.SetParent(n)
	return cn
}

func (n *forwardRestrictUniqueReverse) ReverseID() *query.ColumnNode {
	cn := n.forwardRestrictUniqueTable.ReverseID()
	cn.SetParent(n)
	return cn
}

// Reverse represents the link to a Reverse object.
func (n forwardRestrictUniqueTable) Reverse() ReverseNodeI {
	cn := &reverseReference{
		ReferenceNode: query.ReferenceNode{
			ColumnQueryName: "reverse_id",
			Identifier:      "ReverseID",
			ReceiverType:    query.ColTypeString,
		},
	}
	cn.SetParent(n)
	return cn
}

func (n *forwardRestrictUniqueReverse) Reverse() ReverseNodeI {
	cn := n.forwardRestrictUniqueTable.Reverse().(*reverseReference)
	cn.SetParent(n)
	return cn
}

func (n forwardRestrictUniqueTable) GobEncode() (data []byte, err error) {
	return
}

func (n *forwardRestrictUniqueTable) GobDecode(data []byte) (err error) {
	return
}

func (n *forwardRestrictUniqueReverse) GobEncode() (data []byte, err error) {
	var buf bytes.Buffer
	e := gob.NewEncoder(&buf)

	if err = e.Encode(&n.ReverseNode); err != nil {
		panic(err)
	}
	data = buf.Bytes()
	return
}

func (n *forwardRestrictUniqueReverse) GobDecode(data []byte) (err error) {
	buf := bytes.NewBuffer(data)
	dec := gob.NewDecoder(buf)

	if err = dec.Decode(&n.ReverseNode); err != nil {
		panic(err)
	}
	return
}

func init() {
	gob.Register(new(forwardRestrictUniqueTable))
	gob.Register(new(forwardRestrictUniqueReverse))
}
