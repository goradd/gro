// Code generated by goradd-orm. DO NOT EDIT.

package node

import (
	"encoding/gob"

	"github.com/goradd/orm/pkg/query"
)

// ForwardNullNodeI is the builder interface to the ForwardNull nodes.
type ForwardNullNodeI interface {
	query.NodeI
	PrimaryKeyNode() *query.ColumnNode
	// ID represents the id column in the database.
	ID() *query.ColumnNode
	// Name represents the name column in the database.
	Name() *query.ColumnNode
	// ReverseID represents the reverse_id column in the database.
	ReverseID() *query.ColumnNode
	// Reverse represents the Reverse reference to a Reverse object.
	Reverse() ReverseNodeI
}

// ForwardNullExpander is the builder interface for ForwardNulls that are expandable.
type ForwardNullExpander interface {
	ForwardNullNodeI
	// Expand causes the node to produce separate rows with individual items, rather than a single row with an array of items.
	Expand() ForwardNullNodeI
}

// forwardNullTable represents the forward_null table in a query. It uses a builder pattern to chain
// together other tables and columns to form a node chain in a query.
//
// To use the forwardNullTable, call [ForwardNull()] to start a reference chain when querying the forward_null table.
type forwardNullTable struct {
}

type forwardNullReverse struct {
	forwardNullTable
	reverseColumn *query.ColumnNode
}

// ForwardNull returns a table node that starts a node chain that begins with the forward_null table.
func ForwardNull() ForwardNullNodeI {
	// Table nodes are empty structs, and do not have pointer receivers,
	var n forwardNullTable
	return n
}

// SelectNodes_ is used internally by the framework to return the list of all the column nodes.
func (n forwardNullTable) SelectNodes_() (nodes []*query.ColumnNode) {
	nodes = append(nodes, n.ID())
	nodes = append(nodes, n.Name())
	nodes = append(nodes, n.ReverseID())
	return nodes
}

// Copy_ is used internally by the framework to deep copy the node.
func (n forwardNullTable) Copy_() query.NodeI {
	// Table nodes are empty so just offer a copy
	var t forwardNullTable
	return t
}

// PrimaryKeyNode returns a node that points to the primary key column, if
// a single primary key exists in the table.
func (n forwardNullTable) PrimaryKeyNode() *query.ColumnNode {
	return n.ID()
}

// ID represents the id column in the database.
func (n forwardNullTable) ID() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd_unit",
		"forward_null",
		"id",
		"ID",
		query.ColTypeString,
		true,
	)
	query.SetParentNode(cn, n)
	return cn
}

// Name represents the name column in the database.
func (n forwardNullTable) Name() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd_unit",
		"forward_null",
		"name",
		"Name",
		query.ColTypeString,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

// ReverseID represents the reverse_id column in the database.
func (n forwardNullTable) ReverseID() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd_unit",
		"forward_null",
		"reverse_id",
		"ReverseID",
		query.ColTypeString,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

// Reverse represents the link to a Reverse object.
func (n forwardNullTable) Reverse() ReverseNodeI {
	cn := &ReverseNode{
		query.NewReferenceNode(
			"goradd_unit",
			"forward_null",
			"reverse_id",
			"ReverseID",
			"Reverse",
			"reverse",
			"id",
			false,
			query.ColTypeString,
		),
	}
	query.SetParentNode(cn, n)
	return cn
}

func init() {
	gob.Register(new(forwardNullTable))
	gob.Register(new(forwardNullReverse))
}
