// Code generated by goradd-orm. DO NOT EDIT.

package node

import (
	"bytes"
	"encoding/gob"

	"github.com/goradd/gro/pkg/query"
	"github.com/goradd/gro/pkg/schema"
)

// LeafUNode is the builder interface to the LeafU nodes.
type LeafUNode interface {
	query.TableNodeI
	// PrimaryKey returns the column node representing the primary key of the table
	PrimaryKey() *query.ColumnNode
	// ID represents the id column in the database.
	ID() *query.ColumnNode
	// Name represents the name column in the database.
	Name() *query.ColumnNode
	// RootUID represents the root_u_id foreign key column in the database
	// that references the RootU object.
	RootUID() *query.ColumnNode
	// RootU references the RootU object whose primary key is RootUID.
	RootU() RootUNode
}

// leafUTable represents the leaf_u table in a query. It uses a builder pattern to chain
// together other tables and columns to form a node chain in a query.
//
// To use the leafUTable, call [LeafU()] to start a reference chain when querying the leaf_u table.
type leafUTable struct {
}

type leafUReverse struct {
	leafUTable
	query.ReverseNode
}

// LeafU returns a table node that starts a node chain that begins with the leaf_u table.
func LeafU() LeafUNode {
	return leafUTable{}
}

// TableName_ returns the query name of the table the node is associated with.
func (n leafUTable) TableName_() string {
	return "leaf_u"
}

// NodeType_ returns the query.NodeType of the node.
func (n leafUTable) NodeType_() query.NodeType {
	return query.TableNodeType
}

// DatabaseKey_ returns the database key of the database the node is associated with.
func (n leafUTable) DatabaseKey_() string {
	return "goradd_unit"
}

// ColumnNodes_ returns a list of all the column nodes in this node.
func (n leafUTable) ColumnNodes_() (nodes []query.Node) {
	nodes = append(nodes, n.ID())
	nodes = append(nodes, n.Name())
	nodes = append(nodes, n.RootUID())
	return nodes
}

func (n *leafUReverse) ColumnNodes_() (nodes []query.Node) {
	nodes = n.leafUTable.ColumnNodes_()
	for _, cn := range nodes {
		query.NodeSetParent(cn, n)
	}
	return
}

func (n *leafUReverse) NodeType_() query.NodeType {
	return query.ReverseNodeType
}

// PrimaryKeys returns the primary key column nodes to satisfy the PrimaryKeyer interface.
func (n leafUTable) PrimaryKeys() []*query.ColumnNode {
	return []*query.ColumnNode{
		n.ID(),
	}
}

// PrimaryKey returns the single primary key column node.
func (n leafUTable) PrimaryKey() *query.ColumnNode {
	return n.ID()
}

// PrimaryKeys returns the primary key column nodes.
func (n *leafUReverse) PrimaryKeys() []*query.ColumnNode {
	return []*query.ColumnNode{
		n.ID(),
	}
}

// PrimaryKey returns the single primary key column node.
func (n leafUReverse) PrimaryKey() *query.ColumnNode {
	return n.ID()
}

func (n leafUTable) ID() *query.ColumnNode {
	cn := query.NewColumnNode(
		"id",
		"id",
		query.ColTypeString,
		schema.ColTypeAutoPrimaryKey,
		schema.ColSubTypeNone,
		true,
		n,
	)
	return cn
}

func (n *leafUReverse) ID() *query.ColumnNode {
	cn := n.leafUTable.ID()
	query.NodeSetParent(cn, n)
	return cn
}

func (n leafUTable) Name() *query.ColumnNode {
	cn := query.NewColumnNode(
		"name",
		"name",
		query.ColTypeString,
		schema.ColTypeString,
		schema.ColSubTypeNone,
		false,
		n,
	)
	return cn
}

func (n *leafUReverse) Name() *query.ColumnNode {
	cn := n.leafUTable.Name()
	query.NodeSetParent(cn, n)
	return cn
}

func (n leafUTable) RootUID() *query.ColumnNode {
	cn := query.NewColumnNode(
		"root_u_id",
		"rootUID",
		query.ColTypeString,
		schema.ColTypeString,
		schema.ColSubTypeNone,
		false,
		n,
	)
	return cn
}

func (n *leafUReverse) RootUID() *query.ColumnNode {
	cn := n.leafUTable.RootUID()
	query.NodeSetParent(cn, n)
	return cn
}

// RootU represents the link to a RootU object.
func (n leafUTable) RootU() RootUNode {
	cn := &rootUReference{
		ReferenceNode: query.ReferenceNode{
			ForeignKey: "root_u_id",
			PrimaryKey: "id",
			Field:      "rootU",
		},
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n *leafUReverse) RootU() RootUNode {
	cn := n.leafUTable.RootU().(*rootUReference)
	query.NodeSetParent(cn, n)
	return cn
}

func (n leafUTable) GobEncode() (data []byte, err error) {
	return
}

func (n *leafUTable) GobDecode(data []byte) (err error) {
	return
}

func (n *leafUReverse) GobEncode() (data []byte, err error) {
	var buf bytes.Buffer
	e := gob.NewEncoder(&buf)

	if err = e.Encode(&n.ReverseNode); err != nil {
		panic(err)
	}
	data = buf.Bytes()
	return
}

func (n *leafUReverse) GobDecode(data []byte) (err error) {
	buf := bytes.NewBuffer(data)
	dec := gob.NewDecoder(buf)

	if err = dec.Decode(&n.ReverseNode); err != nil {
		panic(err)
	}
	return
}

func init() {
	gob.Register(new(leafUTable))
	gob.Register(new(leafUReverse))
}
