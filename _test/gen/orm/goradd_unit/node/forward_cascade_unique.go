// Code generated by goradd-orm. DO NOT EDIT.

package node

import (
	"bytes"
	"encoding/gob"

	"github.com/goradd/orm/pkg/query"
)

// ForwardCascadeUniqueNode is the builder interface to the ForwardCascadeUnique nodes.
type ForwardCascadeUniqueNode interface {
	query.TableNodeI
	PrimaryKey() *query.ColumnNode
	// ID represents the id column in the database.
	ID() *query.ColumnNode
	// Name represents the name column in the database.
	Name() *query.ColumnNode
	// ReverseID represents the reverse_id column in the database.
	ReverseID() *query.ColumnNode
	// Reverse represents the Reverse reference to a Reverse object.
	Reverse() ReverseNode
}

// forwardCascadeUniqueTable represents the forward_cascade_unique table in a query. It uses a builder pattern to chain
// together other tables and columns to form a node chain in a query.
//
// To use the forwardCascadeUniqueTable, call [ForwardCascadeUnique()] to start a reference chain when querying the forward_cascade_unique table.
type forwardCascadeUniqueTable struct {
}

type forwardCascadeUniqueReverse struct {
	forwardCascadeUniqueTable
	query.ReverseNode
}

// ForwardCascadeUnique returns a table node that starts a node chain that begins with the forward_cascade_unique table.
func ForwardCascadeUnique() ForwardCascadeUniqueNode {
	return forwardCascadeUniqueTable{}
}

// TableName_ returns the query name of the table the node is associated with.
func (n forwardCascadeUniqueTable) TableName_() string {
	return "forward_cascade_unique"
}

// NodeType_ returns the query.NodeType of the node.
func (n forwardCascadeUniqueTable) NodeType_() query.NodeType {
	return query.TableNodeType
}

// DatabaseKey_ returns the database key of the database the node is associated with.
func (n forwardCascadeUniqueTable) DatabaseKey_() string {
	return "goradd_unit"
}

// ColumnNodes_ returns a list of all the column nodes in this node.
func (n forwardCascadeUniqueTable) ColumnNodes_() (nodes []query.Node) {
	nodes = append(nodes, n.ID())
	nodes = append(nodes, n.Name())
	nodes = append(nodes, n.ReverseID())
	return nodes
}

func (n *forwardCascadeUniqueReverse) ColumnNodes_() (nodes []query.Node) {
	nodes = n.forwardCascadeUniqueTable.ColumnNodes_()
	for _, cn := range nodes {
		query.NodeSetParent(cn, n)
	}
	return
}

// IsEnum_ is used internally by the framework to determine if the current table is an enumerated type.
func (n forwardCascadeUniqueTable) IsEnum_() bool {
	return false
}

func (n *forwardCascadeUniqueReverse) NodeType_() query.NodeType {
	return query.ReverseNodeType
}

// PrimaryKey returns a node that points to the primary key column.
func (n forwardCascadeUniqueTable) PrimaryKey() *query.ColumnNode {
	return n.ID()
}

// PrimaryKey returns a node that points to the primary key column.
func (n *forwardCascadeUniqueReverse) PrimaryKey() *query.ColumnNode {
	return n.ID()
}

func (n forwardCascadeUniqueTable) ID() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:    "id",
		Identifier:   "ID",
		ReceiverType: query.ColTypeString,
		IsPrimaryKey: true,
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n *forwardCascadeUniqueReverse) ID() *query.ColumnNode {
	cn := n.forwardCascadeUniqueTable.ID()
	query.NodeSetParent(cn, n)
	return cn
}

func (n forwardCascadeUniqueTable) Name() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:    "name",
		Identifier:   "Name",
		ReceiverType: query.ColTypeString,
		IsPrimaryKey: false,
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n *forwardCascadeUniqueReverse) Name() *query.ColumnNode {
	cn := n.forwardCascadeUniqueTable.Name()
	query.NodeSetParent(cn, n)
	return cn
}

func (n forwardCascadeUniqueTable) ReverseID() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:    "reverse_id",
		Identifier:   "ReverseID",
		ReceiverType: query.ColTypeString,
		IsPrimaryKey: false,
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n *forwardCascadeUniqueReverse) ReverseID() *query.ColumnNode {
	cn := n.forwardCascadeUniqueTable.ReverseID()
	query.NodeSetParent(cn, n)
	return cn
}

// Reverse represents the link to a Reverse object.
func (n forwardCascadeUniqueTable) Reverse() ReverseNode {
	cn := &reverseReference{
		ReferenceNode: query.ReferenceNode{
			ColumnQueryName: "reverse_id",
			Identifier:      "Reverse",
			ReceiverType:    query.ColTypeString,
		},
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n *forwardCascadeUniqueReverse) Reverse() ReverseNode {
	cn := n.forwardCascadeUniqueTable.Reverse().(*reverseReference)
	query.NodeSetParent(cn, n)
	return cn
}

func (n forwardCascadeUniqueTable) GobEncode() (data []byte, err error) {
	return
}

func (n *forwardCascadeUniqueTable) GobDecode(data []byte) (err error) {
	return
}

func (n *forwardCascadeUniqueReverse) GobEncode() (data []byte, err error) {
	var buf bytes.Buffer
	e := gob.NewEncoder(&buf)

	if err = e.Encode(&n.ReverseNode); err != nil {
		panic(err)
	}
	data = buf.Bytes()
	return
}

func (n *forwardCascadeUniqueReverse) GobDecode(data []byte) (err error) {
	buf := bytes.NewBuffer(data)
	dec := gob.NewDecoder(buf)

	if err = dec.Decode(&n.ReverseNode); err != nil {
		panic(err)
	}
	return
}

func init() {
	gob.Register(new(forwardCascadeUniqueTable))
	gob.Register(new(forwardCascadeUniqueReverse))
}
