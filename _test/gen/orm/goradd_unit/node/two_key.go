// Code generated by goradd-orm. DO NOT EDIT.

package node

import (
	"encoding/gob"

	"github.com/goradd/orm/pkg/query"
	"github.com/goradd/orm/pkg/schema"
)

// TwoKeyNode is the builder interface to the TwoKey nodes.
type TwoKeyNode interface {
	query.TableNodeI
	// Server represents the server column in the database.
	Server() *query.ColumnNode
	// Directory represents the directory column in the database.
	Directory() *query.ColumnNode
	// FileName represents the file_name column in the database.
	FileName() *query.ColumnNode
}

// twoKeyTable represents the two_key table in a query. It uses a builder pattern to chain
// together other tables and columns to form a node chain in a query.
//
// To use the twoKeyTable, call [TwoKey()] to start a reference chain when querying the two_key table.
type twoKeyTable struct {
}

// TwoKey returns a table node that starts a node chain that begins with the two_key table.
func TwoKey() TwoKeyNode {
	return twoKeyTable{}
}

// TableName_ returns the query name of the table the node is associated with.
func (n twoKeyTable) TableName_() string {
	return "two_key"
}

// NodeType_ returns the query.NodeType of the node.
func (n twoKeyTable) NodeType_() query.NodeType {
	return query.TableNodeType
}

// DatabaseKey_ returns the database key of the database the node is associated with.
func (n twoKeyTable) DatabaseKey_() string {
	return "goradd_unit"
}

// ColumnNodes_ returns a list of all the column nodes in this node.
func (n twoKeyTable) ColumnNodes_() (nodes []query.Node) {
	nodes = append(nodes, n.Server())
	nodes = append(nodes, n.Directory())
	nodes = append(nodes, n.FileName())
	return nodes
}

// PrimaryKeys returns the primary key column nodes to satisfy the PrimaryKeyer interface.
func (n twoKeyTable) PrimaryKeys() []*query.ColumnNode {
	return []*query.ColumnNode{
		n.Server(),
		n.Directory(),
	}
}

func (n twoKeyTable) Server() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:     "server",
		Identifier:    "Server",
		ReceiverType:  query.ColTypeString,
		SchemaType:    schema.ColTypeString,
		SchemaSubType: schema.ColSubTypeNone,
		IsPrimaryKey:  false,
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n twoKeyTable) Directory() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:     "directory",
		Identifier:    "Directory",
		ReceiverType:  query.ColTypeString,
		SchemaType:    schema.ColTypeString,
		SchemaSubType: schema.ColSubTypeNone,
		IsPrimaryKey:  false,
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n twoKeyTable) FileName() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:     "file_name",
		Identifier:    "FileName",
		ReceiverType:  query.ColTypeString,
		SchemaType:    schema.ColTypeString,
		SchemaSubType: schema.ColSubTypeNone,
		IsPrimaryKey:  false,
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n twoKeyTable) GobEncode() (data []byte, err error) {
	return
}

func (n *twoKeyTable) GobDecode(data []byte) (err error) {
	return
}

func init() {
	gob.Register(new(twoKeyTable))
}
