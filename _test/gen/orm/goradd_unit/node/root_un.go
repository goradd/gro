// Code generated by goradd-orm. DO NOT EDIT.

package node

import (
	"bytes"
	"encoding/gob"

	"github.com/goradd/orm/pkg/query"
	"github.com/goradd/orm/pkg/schema"
)

// RootUnNode is the builder interface to the RootUn nodes.
type RootUnNode interface {
	query.TableNodeI
	// PrimaryKey returns the column node representing the primary key of the table
	PrimaryKey() *query.ColumnNode
	// ID represents the id column in the database.
	ID() *query.ColumnNode
	// Name represents the name column in the database.
	Name() *query.ColumnNode
	// LeafUn represents the LeafUn reverse reference to a LeafUn object
	// through the RootUnID foreign key there.
	LeafUn() LeafUnNode
}

// rootUnTable represents the root_un table in a query. It uses a builder pattern to chain
// together other tables and columns to form a node chain in a query.
//
// To use the rootUnTable, call [RootUn()] to start a reference chain when querying the root_un table.
type rootUnTable struct {
}

type rootUnReference struct {
	rootUnTable
	query.ReferenceNode
}

// RootUn returns a table node that starts a node chain that begins with the root_un table.
func RootUn() RootUnNode {
	return rootUnTable{}
}

// TableName_ returns the query name of the table the node is associated with.
func (n rootUnTable) TableName_() string {
	return "root_un"
}

// NodeType_ returns the query.NodeType of the node.
func (n rootUnTable) NodeType_() query.NodeType {
	return query.TableNodeType
}

// DatabaseKey_ returns the database key of the database the node is associated with.
func (n rootUnTable) DatabaseKey_() string {
	return "goradd_unit"
}

// ColumnNodes_ returns a list of all the column nodes in this node.
func (n rootUnTable) ColumnNodes_() (nodes []query.Node) {
	nodes = append(nodes, n.ID())
	nodes = append(nodes, n.Name())
	return nodes
}

func (n *rootUnReference) ColumnNodes_() (nodes []query.Node) {
	nodes = n.rootUnTable.ColumnNodes_()
	for _, cn := range nodes {
		query.NodeSetParent(cn, n)
	}
	return
}

func (n *rootUnReference) NodeType_() query.NodeType {
	return query.ReferenceNodeType
}

// PrimaryKeys returns the primary key column nodes to satisfy the PrimaryKeyer interface.
func (n rootUnTable) PrimaryKeys() []*query.ColumnNode {
	return []*query.ColumnNode{
		n.ID(),
	}
}

// PrimaryKey returns the single primary key column node.
func (n rootUnTable) PrimaryKey() *query.ColumnNode {
	return n.ID()
}

// PrimaryKeys returns the primary key column nodes.
func (n *rootUnReference) PrimaryKeys() []*query.ColumnNode {
	return []*query.ColumnNode{
		n.ID(),
	}
}

// PrimaryKey returns the single primary key column node.
func (n rootUnReference) PrimaryKey() *query.ColumnNode {
	return n.ID()
}

func (n rootUnTable) ID() *query.ColumnNode {
	cn := query.NewColumnNode(
		"id",
		"id",
		query.ColTypeString,
		schema.ColTypeAutoPrimaryKey,
		schema.ColSubTypeNone,
		true,
		n,
	)
	return cn
}

func (n *rootUnReference) ID() *query.ColumnNode {
	cn := n.rootUnTable.ID()
	query.NodeSetParent(cn, n)
	return cn
}

func (n rootUnTable) Name() *query.ColumnNode {
	cn := query.NewColumnNode(
		"name",
		"name",
		query.ColTypeString,
		schema.ColTypeString,
		schema.ColSubTypeNone,
		false,
		n,
	)
	return cn
}

func (n *rootUnReference) Name() *query.ColumnNode {
	cn := n.rootUnTable.Name()
	query.NodeSetParent(cn, n)
	return cn
}

// LeafUn represents the one-to-one relationship formed by the reverse reference from the
// root_un_id column in the leaf_un table.
func (n rootUnTable) LeafUn() LeafUnNode {
	cn := &leafUnReverse{
		ReverseNode: query.ReverseNode{
			ForeignKey: "root_un_id",
			PrimaryKey: "id",
			Field:      "leafUn",
			IsUnique:   true,
		},
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n *rootUnReference) LeafUn() LeafUnNode {
	cn := n.rootUnTable.LeafUn().(*leafUnReverse)
	query.NodeSetParent(cn, n)
	return cn
}

func (n rootUnTable) GobEncode() (data []byte, err error) {
	return
}

func (n *rootUnTable) GobDecode(data []byte) (err error) {
	return
}

func (n *rootUnReference) GobEncode() (data []byte, err error) {
	var buf bytes.Buffer
	e := gob.NewEncoder(&buf)

	if err = e.Encode(&n.ReferenceNode); err != nil {
		panic(err)
	}
	data = buf.Bytes()
	return
}

func (n *rootUnReference) GobDecode(data []byte) (err error) {
	buf := bytes.NewBuffer(data)
	dec := gob.NewDecoder(buf)

	if err = dec.Decode(&n.ReferenceNode); err != nil {
		panic(err)
	}
	return
}

func init() {
	gob.Register(new(rootUnTable))
	gob.Register(new(rootUnReference))
}
