// Code generated by goradd-orm. DO NOT EDIT.

package node

import (
	"bytes"
	"encoding/gob"

	"github.com/goradd/orm/pkg/query"
)

// RootLNode is the builder interface to the RootL nodes.
type RootLNode interface {
	query.TableNodeI
	PrimaryKey() *query.ColumnNode
	// ID represents the id column in the database.
	ID() *query.ColumnNode
	// Name represents the name column in the database.
	Name() *query.ColumnNode
	// GroLock represents the gro_lock column in the database.
	GroLock() *query.ColumnNode
	// LeafLs represents the LeafLs reference to LeafL objects.
	LeafLs() LeafLNode
}

// rootLTable represents the root_l table in a query. It uses a builder pattern to chain
// together other tables and columns to form a node chain in a query.
//
// To use the rootLTable, call [RootL()] to start a reference chain when querying the root_l table.
type rootLTable struct {
}

type rootLReference struct {
	rootLTable
	query.ReferenceNode
}

// RootL returns a table node that starts a node chain that begins with the root_l table.
func RootL() RootLNode {
	return rootLTable{}
}

// TableName_ returns the query name of the table the node is associated with.
func (n rootLTable) TableName_() string {
	return "root_l"
}

// NodeType_ returns the query.NodeType of the node.
func (n rootLTable) NodeType_() query.NodeType {
	return query.TableNodeType
}

// DatabaseKey_ returns the database key of the database the node is associated with.
func (n rootLTable) DatabaseKey_() string {
	return "goradd_unit"
}

// ColumnNodes_ returns a list of all the column nodes in this node.
func (n rootLTable) ColumnNodes_() (nodes []query.Node) {
	nodes = append(nodes, n.ID())
	nodes = append(nodes, n.Name())
	nodes = append(nodes, n.GroLock())
	return nodes
}

func (n *rootLReference) ColumnNodes_() (nodes []query.Node) {
	nodes = n.rootLTable.ColumnNodes_()
	for _, cn := range nodes {
		query.NodeSetParent(cn, n)
	}
	return
}

func (n *rootLReference) NodeType_() query.NodeType {
	return query.ReferenceNodeType
}

// PrimaryKey returns a node that points to the primary key column.
func (n rootLTable) PrimaryKey() *query.ColumnNode {
	return n.ID()
}

// PrimaryKey returns a node that points to the primary key column.
func (n *rootLReference) PrimaryKey() *query.ColumnNode {
	return n.ID()
}

func (n rootLTable) ID() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:    "id",
		Identifier:   "ID",
		ReceiverType: query.ColTypeString,
		IsPrimaryKey: true,
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n *rootLReference) ID() *query.ColumnNode {
	cn := n.rootLTable.ID()
	query.NodeSetParent(cn, n)
	return cn
}

func (n rootLTable) Name() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:    "name",
		Identifier:   "Name",
		ReceiverType: query.ColTypeString,
		IsPrimaryKey: false,
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n *rootLReference) Name() *query.ColumnNode {
	cn := n.rootLTable.Name()
	query.NodeSetParent(cn, n)
	return cn
}

func (n rootLTable) GroLock() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:    "gro_lock",
		Identifier:   "GroLock",
		ReceiverType: query.ColTypeInteger64,
		IsPrimaryKey: false,
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n *rootLReference) GroLock() *query.ColumnNode {
	cn := n.rootLTable.GroLock()
	query.NodeSetParent(cn, n)
	return cn
}

// LeafLs represents the many-to-one relationship formed by the reverse reference from the
// root_l_id column in the leaf_l table.
func (n rootLTable) LeafLs() LeafLNode {
	cn := &leafLReverse{
		ReverseNode: query.ReverseNode{
			ColumnQueryName: "root_l_id",
			Identifier:      "LeafLs",
			ReceiverType:    query.ColTypeString,
			IsUnique:        false,
		},
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n *rootLReference) LeafLs() LeafLNode {
	cn := n.rootLTable.LeafLs().(*leafLReverse)
	query.NodeSetParent(cn, n)
	return cn
}

func (n rootLTable) GobEncode() (data []byte, err error) {
	return
}

func (n *rootLTable) GobDecode(data []byte) (err error) {
	return
}

func (n *rootLReference) GobEncode() (data []byte, err error) {
	var buf bytes.Buffer
	e := gob.NewEncoder(&buf)

	if err = e.Encode(&n.ReferenceNode); err != nil {
		panic(err)
	}
	data = buf.Bytes()
	return
}

func (n *rootLReference) GobDecode(data []byte) (err error) {
	buf := bytes.NewBuffer(data)
	dec := gob.NewDecoder(buf)

	if err = dec.Decode(&n.ReferenceNode); err != nil {
		panic(err)
	}
	return
}

func init() {
	gob.Register(new(rootLTable))
	gob.Register(new(rootLReference))
}
