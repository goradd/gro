// Code generated by goradd-orm. DO NOT EDIT.

package node

import (
	"bytes"
	"encoding/gob"

	"github.com/goradd/orm/pkg/query"
	"github.com/goradd/orm/pkg/schema"
)

// LeafUnlNode is the builder interface to the LeafUnl nodes.
type LeafUnlNode interface {
	query.TableNodeI
	// PrimaryKey returns the column node representing the primary key of the table
	PrimaryKey() *query.ColumnNode
	// ID represents the id column in the database.
	ID() *query.ColumnNode
	// Name represents the name column in the database.
	Name() *query.ColumnNode
	// GroLock represents the gro_lock column in the database.
	GroLock() *query.ColumnNode
	// RootUnlID represents the root_unl_id foreign key column in the database
	// that references the RootUnl object.
	RootUnlID() *query.ColumnNode
	// RootUnl references the RootUnl object whose primary key is RootUnlID.
	RootUnl() RootUnlNode
}

// leafUnlTable represents the leaf_unl table in a query. It uses a builder pattern to chain
// together other tables and columns to form a node chain in a query.
//
// To use the leafUnlTable, call [LeafUnl()] to start a reference chain when querying the leaf_unl table.
type leafUnlTable struct {
}

type leafUnlReverse struct {
	leafUnlTable
	query.ReverseNode
}

// LeafUnl returns a table node that starts a node chain that begins with the leaf_unl table.
func LeafUnl() LeafUnlNode {
	return leafUnlTable{}
}

// TableName_ returns the query name of the table the node is associated with.
func (n leafUnlTable) TableName_() string {
	return "leaf_unl"
}

// NodeType_ returns the query.NodeType of the node.
func (n leafUnlTable) NodeType_() query.NodeType {
	return query.TableNodeType
}

// DatabaseKey_ returns the database key of the database the node is associated with.
func (n leafUnlTable) DatabaseKey_() string {
	return "goradd_unit"
}

// ColumnNodes_ returns a list of all the column nodes in this node.
func (n leafUnlTable) ColumnNodes_() (nodes []query.Node) {
	nodes = append(nodes, n.ID())
	nodes = append(nodes, n.Name())
	nodes = append(nodes, n.GroLock())
	nodes = append(nodes, n.RootUnlID())
	return nodes
}

func (n *leafUnlReverse) ColumnNodes_() (nodes []query.Node) {
	nodes = n.leafUnlTable.ColumnNodes_()
	for _, cn := range nodes {
		query.NodeSetParent(cn, n)
	}
	return
}

func (n *leafUnlReverse) NodeType_() query.NodeType {
	return query.ReverseNodeType
}

// PrimaryKeys returns the primary key column nodes to satisfy the PrimaryKeyer interface.
func (n leafUnlTable) PrimaryKeys() []*query.ColumnNode {
	return []*query.ColumnNode{
		n.ID(),
	}
}

// PrimaryKey returns the single primary key column node.
func (n leafUnlTable) PrimaryKey() *query.ColumnNode {
	return n.ID()
}

// PrimaryKeys returns the primary key column nodes.
func (n *leafUnlReverse) PrimaryKeys() []*query.ColumnNode {
	return []*query.ColumnNode{
		n.ID(),
	}
}

// PrimaryKey returns the single primary key column node.
func (n leafUnlReverse) PrimaryKey() *query.ColumnNode {
	return n.ID()
}

func (n leafUnlTable) ID() *query.ColumnNode {
	cn := query.NewColumnNode(
		"id",
		"id",
		query.ColTypeString,
		schema.ColTypeAutoPrimaryKey,
		schema.ColSubTypeNone,
		true,
		n,
	)
	return cn
}

func (n *leafUnlReverse) ID() *query.ColumnNode {
	cn := n.leafUnlTable.ID()
	query.NodeSetParent(cn, n)
	return cn
}

func (n leafUnlTable) Name() *query.ColumnNode {
	cn := query.NewColumnNode(
		"name",
		"name",
		query.ColTypeString,
		schema.ColTypeString,
		schema.ColSubTypeNone,
		false,
		n,
	)
	return cn
}

func (n *leafUnlReverse) Name() *query.ColumnNode {
	cn := n.leafUnlTable.Name()
	query.NodeSetParent(cn, n)
	return cn
}

func (n leafUnlTable) GroLock() *query.ColumnNode {
	cn := query.NewColumnNode(
		"gro_lock",
		"groLock",
		query.ColTypeInteger64,
		schema.ColTypeInt,
		schema.ColSubTypeLock,
		false,
		n,
	)
	return cn
}

func (n *leafUnlReverse) GroLock() *query.ColumnNode {
	cn := n.leafUnlTable.GroLock()
	query.NodeSetParent(cn, n)
	return cn
}

func (n leafUnlTable) RootUnlID() *query.ColumnNode {
	cn := query.NewColumnNode(
		"root_unl_id",
		"rootUnlID",
		query.ColTypeString,
		schema.ColTypeString,
		schema.ColSubTypeNone,
		false,
		n,
	)
	return cn
}

func (n *leafUnlReverse) RootUnlID() *query.ColumnNode {
	cn := n.leafUnlTable.RootUnlID()
	query.NodeSetParent(cn, n)
	return cn
}

// RootUnl represents the link to a RootUnl object.
func (n leafUnlTable) RootUnl() RootUnlNode {
	cn := &rootUnlReference{
		ReferenceNode: query.ReferenceNode{
			ForeignKey: "root_unl_id",
			PrimaryKey: "id",
			Field:      "rootUnl",
		},
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n *leafUnlReverse) RootUnl() RootUnlNode {
	cn := n.leafUnlTable.RootUnl().(*rootUnlReference)
	query.NodeSetParent(cn, n)
	return cn
}

func (n leafUnlTable) GobEncode() (data []byte, err error) {
	return
}

func (n *leafUnlTable) GobDecode(data []byte) (err error) {
	return
}

func (n *leafUnlReverse) GobEncode() (data []byte, err error) {
	var buf bytes.Buffer
	e := gob.NewEncoder(&buf)

	if err = e.Encode(&n.ReverseNode); err != nil {
		panic(err)
	}
	data = buf.Bytes()
	return
}

func (n *leafUnlReverse) GobDecode(data []byte) (err error) {
	buf := bytes.NewBuffer(data)
	dec := gob.NewDecoder(buf)

	if err = dec.Decode(&n.ReverseNode); err != nil {
		panic(err)
	}
	return
}

func init() {
	gob.Register(new(leafUnlTable))
	gob.Register(new(leafUnlReverse))
}
