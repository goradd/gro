// Code generated by goradd-orm. DO NOT EDIT.

package node

import (
	"bytes"
	"encoding/gob"

	"github.com/goradd/orm/pkg/query"
	"github.com/goradd/orm/pkg/schema"
)

// RootNode is the builder interface to the Root nodes.
type RootNode interface {
	query.TableNodeI
	// PrimaryKey returns the column node representing the primary key of the table
	PrimaryKey() *query.ColumnNode
	// ID represents the id column in the database.
	ID() *query.ColumnNode
	// Name represents the name column in the database.
	Name() *query.ColumnNode
	// Leaf represents the Leaf reverse reference to Leaf objects
	// through the RootID foreign key there.
	Leafs() LeafNode
}

// rootTable represents the root table in a query. It uses a builder pattern to chain
// together other tables and columns to form a node chain in a query.
//
// To use the rootTable, call [Root()] to start a reference chain when querying the root table.
type rootTable struct {
}

type rootReference struct {
	rootTable
	query.ReferenceNode
}

// Root returns a table node that starts a node chain that begins with the root table.
func Root() RootNode {
	return rootTable{}
}

// TableName_ returns the query name of the table the node is associated with.
func (n rootTable) TableName_() string {
	return "root"
}

// NodeType_ returns the query.NodeType of the node.
func (n rootTable) NodeType_() query.NodeType {
	return query.TableNodeType
}

// DatabaseKey_ returns the database key of the database the node is associated with.
func (n rootTable) DatabaseKey_() string {
	return "goradd_unit"
}

// ColumnNodes_ returns a list of all the column nodes in this node.
func (n rootTable) ColumnNodes_() (nodes []query.Node) {
	nodes = append(nodes, n.ID())
	nodes = append(nodes, n.Name())
	return nodes
}

func (n *rootReference) ColumnNodes_() (nodes []query.Node) {
	nodes = n.rootTable.ColumnNodes_()
	for _, cn := range nodes {
		query.NodeSetParent(cn, n)
	}
	return
}

func (n *rootReference) NodeType_() query.NodeType {
	return query.ReferenceNodeType
}

// PrimaryKeys returns the primary key column nodes to satisfy the PrimaryKeyer interface.
func (n rootTable) PrimaryKeys() []*query.ColumnNode {
	return []*query.ColumnNode{
		n.ID(),
	}
}

// PrimaryKey returns the primary key column node.
func (n rootTable) PrimaryKey() *query.ColumnNode {
	return n.ID()
}

// PrimaryKeys returns the primary key column nodes.
func (n *rootReference) PrimaryKeys() []*query.ColumnNode {
	return []*query.ColumnNode{
		n.ID(),
	}
}

// PrimaryKey returns the primary key column nodes.
func (n rootReference) PrimaryKey() *query.ColumnNode {
	return n.ID()
}

func (n rootTable) ID() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:     "id",
		Identifier:    "ID",
		ReceiverType:  query.ColTypeString,
		SchemaType:    schema.ColTypeAutoPrimaryKey,
		SchemaSubType: schema.ColSubTypeNone,
		IsPrimaryKey:  true,
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n *rootReference) ID() *query.ColumnNode {
	cn := n.rootTable.ID()
	query.NodeSetParent(cn, n)
	return cn
}

func (n rootTable) Name() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:     "name",
		Identifier:    "Name",
		ReceiverType:  query.ColTypeString,
		SchemaType:    schema.ColTypeString,
		SchemaSubType: schema.ColSubTypeNone,
		IsPrimaryKey:  false,
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n *rootReference) Name() *query.ColumnNode {
	cn := n.rootTable.Name()
	query.NodeSetParent(cn, n)
	return cn
}

// Leaf represents the many-to-one relationship formed by the reverse reference from the
// root_id column in the leaf table.
func (n rootTable) Leafs() LeafNode {
	cn := &leafReverse{
		ReverseNode: query.ReverseNode{
			ForeignKey: "root_id",
			Identifier: "Leafs",
			IsUnique:   false,
		},
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n *rootReference) Leafs() LeafNode {
	cn := n.rootTable.Leafs().(*leafReverse)
	query.NodeSetParent(cn, n)
	return cn
}

func (n rootTable) GobEncode() (data []byte, err error) {
	return
}

func (n *rootTable) GobDecode(data []byte) (err error) {
	return
}

func (n *rootReference) GobEncode() (data []byte, err error) {
	var buf bytes.Buffer
	e := gob.NewEncoder(&buf)

	if err = e.Encode(&n.ReferenceNode); err != nil {
		panic(err)
	}
	data = buf.Bytes()
	return
}

func (n *rootReference) GobDecode(data []byte) (err error) {
	buf := bytes.NewBuffer(data)
	dec := gob.NewDecoder(buf)

	if err = dec.Decode(&n.ReferenceNode); err != nil {
		panic(err)
	}
	return
}

func init() {
	gob.Register(new(rootTable))
	gob.Register(new(rootReference))
}
