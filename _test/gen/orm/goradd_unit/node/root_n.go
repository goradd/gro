// Code generated by goradd-orm. DO NOT EDIT.

package node

import (
	"bytes"
	"encoding/gob"

	"github.com/goradd/orm/pkg/query"
	"github.com/goradd/orm/pkg/schema"
)

// RootNNode is the builder interface to the RootN nodes.
type RootNNode interface {
	query.TableNodeI
	// PrimaryKey returns the column node representing the primary key of the table
	PrimaryKey() *query.ColumnNode
	// ID represents the id column in the database.
	ID() *query.ColumnNode
	// Name represents the name column in the database.
	Name() *query.ColumnNode
	// RootNLeafN represents the RootNLeafN reverse reference to LeafN objects
	// through the RootNID foreign key there.
	RootNLeafNs() LeafNNode
}

// rootNTable represents the root_n table in a query. It uses a builder pattern to chain
// together other tables and columns to form a node chain in a query.
//
// To use the rootNTable, call [RootN()] to start a reference chain when querying the root_n table.
type rootNTable struct {
}

type rootNReference struct {
	rootNTable
	query.ReferenceNode
}

// RootN returns a table node that starts a node chain that begins with the root_n table.
func RootN() RootNNode {
	return rootNTable{}
}

// TableName_ returns the query name of the table the node is associated with.
func (n rootNTable) TableName_() string {
	return "root_n"
}

// NodeType_ returns the query.NodeType of the node.
func (n rootNTable) NodeType_() query.NodeType {
	return query.TableNodeType
}

// DatabaseKey_ returns the database key of the database the node is associated with.
func (n rootNTable) DatabaseKey_() string {
	return "goradd_unit"
}

// ColumnNodes_ returns a list of all the column nodes in this node.
func (n rootNTable) ColumnNodes_() (nodes []query.Node) {
	nodes = append(nodes, n.ID())
	nodes = append(nodes, n.Name())
	return nodes
}

func (n *rootNReference) ColumnNodes_() (nodes []query.Node) {
	nodes = n.rootNTable.ColumnNodes_()
	for _, cn := range nodes {
		query.NodeSetParent(cn, n)
	}
	return
}

func (n *rootNReference) NodeType_() query.NodeType {
	return query.ReferenceNodeType
}

// PrimaryKeys returns the primary key column nodes to satisfy the PrimaryKeyer interface.
func (n rootNTable) PrimaryKeys() []*query.ColumnNode {
	return []*query.ColumnNode{
		n.ID(),
	}
}

// PrimaryKey returns the primary key column node.
func (n rootNTable) PrimaryKey() *query.ColumnNode {
	return n.ID()
}

// PrimaryKeys returns the primary key column nodes.
func (n *rootNReference) PrimaryKeys() []*query.ColumnNode {
	return []*query.ColumnNode{
		n.ID(),
	}
}

// PrimaryKey returns the primary key column nodes.
func (n rootNReference) PrimaryKey() *query.ColumnNode {
	return n.ID()
}

func (n rootNTable) ID() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:     "id",
		Identifier:    "Value",
		ReceiverType:  query.ColTypeString,
		SchemaType:    schema.ColTypeAutoPrimaryKey,
		SchemaSubType: schema.ColSubTypeNone,
		IsPrimaryKey:  true,
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n *rootNReference) ID() *query.ColumnNode {
	cn := n.rootNTable.ID()
	query.NodeSetParent(cn, n)
	return cn
}

func (n rootNTable) Name() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:     "name",
		Identifier:    "Name",
		ReceiverType:  query.ColTypeString,
		SchemaType:    schema.ColTypeString,
		SchemaSubType: schema.ColSubTypeNone,
		IsPrimaryKey:  false,
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n *rootNReference) Name() *query.ColumnNode {
	cn := n.rootNTable.Name()
	query.NodeSetParent(cn, n)
	return cn
}

// RootNLeafN represents the many-to-one relationship formed by the reverse reference from the
// root_n_id column in the leaf_n table.
func (n rootNTable) RootNLeafNs() LeafNNode {
	cn := &leafNReverse{
		ReverseNode: query.ReverseNode{
			ForeignKey: "root_n_id",
			Identifier: "RootNLeafNs",
			IsUnique:   false,
		},
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n *rootNReference) RootNLeafNs() LeafNNode {
	cn := n.rootNTable.RootNLeafNs().(*leafNReverse)
	query.NodeSetParent(cn, n)
	return cn
}

func (n rootNTable) GobEncode() (data []byte, err error) {
	return
}

func (n *rootNTable) GobDecode(data []byte) (err error) {
	return
}

func (n *rootNReference) GobEncode() (data []byte, err error) {
	var buf bytes.Buffer
	e := gob.NewEncoder(&buf)

	if err = e.Encode(&n.ReferenceNode); err != nil {
		panic(err)
	}
	data = buf.Bytes()
	return
}

func (n *rootNReference) GobDecode(data []byte) (err error) {
	buf := bytes.NewBuffer(data)
	dec := gob.NewDecoder(buf)

	if err = dec.Decode(&n.ReferenceNode); err != nil {
		panic(err)
	}
	return
}

func init() {
	gob.Register(new(rootNTable))
	gob.Register(new(rootNReference))
}
