// Code generated by goradd-orm. DO NOT EDIT.

package node

import (
	"bytes"
	"encoding/gob"

	"github.com/goradd/orm/pkg/query"
	"github.com/goradd/orm/pkg/schema"
)

// RootUNode is the builder interface to the RootU nodes.
type RootUNode interface {
	query.TableNodeI
	// PrimaryKey returns the column node representing the primary key of the table
	PrimaryKey() *query.ColumnNode
	// ID represents the id column in the database.
	ID() *query.ColumnNode
	// Name represents the name column in the database.
	Name() *query.ColumnNode
	// RootULeafU represents the RootULeafU reverse reference to LeafU objects
	// through the RootUID foreign key there.
	RootULeafUs() LeafUNode
}

// rootUTable represents the root_u table in a query. It uses a builder pattern to chain
// together other tables and columns to form a node chain in a query.
//
// To use the rootUTable, call [RootU()] to start a reference chain when querying the root_u table.
type rootUTable struct {
}

type rootUReference struct {
	rootUTable
	query.ReferenceNode
}

// RootU returns a table node that starts a node chain that begins with the root_u table.
func RootU() RootUNode {
	return rootUTable{}
}

// TableName_ returns the query name of the table the node is associated with.
func (n rootUTable) TableName_() string {
	return "root_u"
}

// NodeType_ returns the query.NodeType of the node.
func (n rootUTable) NodeType_() query.NodeType {
	return query.TableNodeType
}

// DatabaseKey_ returns the database key of the database the node is associated with.
func (n rootUTable) DatabaseKey_() string {
	return "goradd_unit"
}

// ColumnNodes_ returns a list of all the column nodes in this node.
func (n rootUTable) ColumnNodes_() (nodes []query.Node) {
	nodes = append(nodes, n.ID())
	nodes = append(nodes, n.Name())
	return nodes
}

func (n *rootUReference) ColumnNodes_() (nodes []query.Node) {
	nodes = n.rootUTable.ColumnNodes_()
	for _, cn := range nodes {
		query.NodeSetParent(cn, n)
	}
	return
}

func (n *rootUReference) NodeType_() query.NodeType {
	return query.ReferenceNodeType
}

// PrimaryKeys returns the primary key column nodes to satisfy the PrimaryKeyer interface.
func (n rootUTable) PrimaryKeys() []*query.ColumnNode {
	return []*query.ColumnNode{
		n.ID(),
	}
}

// PrimaryKey returns the primary key column node.
func (n rootUTable) PrimaryKey() *query.ColumnNode {
	return n.ID()
}

// PrimaryKeys returns the primary key column nodes.
func (n *rootUReference) PrimaryKeys() []*query.ColumnNode {
	return []*query.ColumnNode{
		n.ID(),
	}
}

// PrimaryKey returns the primary key column nodes.
func (n rootUReference) PrimaryKey() *query.ColumnNode {
	return n.ID()
}

func (n rootUTable) ID() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:     "id",
		Identifier:    "Value",
		ReceiverType:  query.ColTypeString,
		SchemaType:    schema.ColTypeAutoPrimaryKey,
		SchemaSubType: schema.ColSubTypeNone,
		IsPrimaryKey:  true,
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n *rootUReference) ID() *query.ColumnNode {
	cn := n.rootUTable.ID()
	query.NodeSetParent(cn, n)
	return cn
}

func (n rootUTable) Name() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:     "name",
		Identifier:    "Name",
		ReceiverType:  query.ColTypeString,
		SchemaType:    schema.ColTypeString,
		SchemaSubType: schema.ColSubTypeNone,
		IsPrimaryKey:  false,
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n *rootUReference) Name() *query.ColumnNode {
	cn := n.rootUTable.Name()
	query.NodeSetParent(cn, n)
	return cn
}

// RootULeafU represents the many-to-one relationship formed by the reverse reference from the
// root_u_id column in the leaf_u table.
func (n rootUTable) RootULeafUs() LeafUNode {
	cn := &leafUReverse{
		ReverseNode: query.ReverseNode{
			ForeignKey: "root_u_id",
			Identifier: "RootULeafUs",
			IsUnique:   false,
		},
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n *rootUReference) RootULeafUs() LeafUNode {
	cn := n.rootUTable.RootULeafUs().(*leafUReverse)
	query.NodeSetParent(cn, n)
	return cn
}

func (n rootUTable) GobEncode() (data []byte, err error) {
	return
}

func (n *rootUTable) GobDecode(data []byte) (err error) {
	return
}

func (n *rootUReference) GobEncode() (data []byte, err error) {
	var buf bytes.Buffer
	e := gob.NewEncoder(&buf)

	if err = e.Encode(&n.ReferenceNode); err != nil {
		panic(err)
	}
	data = buf.Bytes()
	return
}

func (n *rootUReference) GobDecode(data []byte) (err error) {
	buf := bytes.NewBuffer(data)
	dec := gob.NewDecoder(buf)

	if err = dec.Decode(&n.ReferenceNode); err != nil {
		panic(err)
	}
	return
}

func init() {
	gob.Register(new(rootUTable))
	gob.Register(new(rootUReference))
}
