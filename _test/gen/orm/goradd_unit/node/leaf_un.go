// Code generated by goradd-orm. DO NOT EDIT.

package node

import (
	"bytes"
	"encoding/gob"

	"github.com/goradd/orm/pkg/query"
	"github.com/goradd/orm/pkg/schema"
)

// LeafUnNode is the builder interface to the LeafUn nodes.
type LeafUnNode interface {
	query.TableNodeI
	PrimaryKey() *query.ColumnNode
	// ID represents the id column in the database.
	ID() *query.ColumnNode
	// Name represents the name column in the database.
	Name() *query.ColumnNode
	// RootUnID represents the root_un_id column in the database.
	RootUnID() *query.ColumnNode
	// RootUn represents the RootUn reference to a RootUn object.
	RootUn() RootUnNode
}

// leafUnTable represents the leaf_un table in a query. It uses a builder pattern to chain
// together other tables and columns to form a node chain in a query.
//
// To use the leafUnTable, call [LeafUn()] to start a reference chain when querying the leaf_un table.
type leafUnTable struct {
}

type leafUnReverse struct {
	leafUnTable
	query.ReverseNode
}

// LeafUn returns a table node that starts a node chain that begins with the leaf_un table.
func LeafUn() LeafUnNode {
	return leafUnTable{}
}

// TableName_ returns the query name of the table the node is associated with.
func (n leafUnTable) TableName_() string {
	return "leaf_un"
}

// NodeType_ returns the query.NodeType of the node.
func (n leafUnTable) NodeType_() query.NodeType {
	return query.TableNodeType
}

// DatabaseKey_ returns the database key of the database the node is associated with.
func (n leafUnTable) DatabaseKey_() string {
	return "goradd_unit"
}

// ColumnNodes_ returns a list of all the column nodes in this node.
func (n leafUnTable) ColumnNodes_() (nodes []query.Node) {
	nodes = append(nodes, n.ID())
	nodes = append(nodes, n.Name())
	nodes = append(nodes, n.RootUnID())
	return nodes
}

func (n *leafUnReverse) ColumnNodes_() (nodes []query.Node) {
	nodes = n.leafUnTable.ColumnNodes_()
	for _, cn := range nodes {
		query.NodeSetParent(cn, n)
	}
	return
}

func (n *leafUnReverse) NodeType_() query.NodeType {
	return query.ReverseNodeType
}

// PrimaryKey returns a node that points to the primary key column.
func (n leafUnTable) PrimaryKey() *query.ColumnNode {
	return n.ID()
}

// PrimaryKey returns a node that points to the primary key column.
func (n *leafUnReverse) PrimaryKey() *query.ColumnNode {
	return n.ID()
}

func (n leafUnTable) ID() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:     "id",
		Identifier:    "ID",
		ReceiverType:  query.ColTypeString,
		SchemaType:    schema.ColTypeAutoPrimaryKey,
		SchemaSubType: schema.ColSubTypeNone,
		IsPrimaryKey:  true,
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n *leafUnReverse) ID() *query.ColumnNode {
	cn := n.leafUnTable.ID()
	query.NodeSetParent(cn, n)
	return cn
}

func (n leafUnTable) Name() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:     "name",
		Identifier:    "Name",
		ReceiverType:  query.ColTypeString,
		SchemaType:    schema.ColTypeString,
		SchemaSubType: schema.ColSubTypeNone,
		IsPrimaryKey:  false,
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n *leafUnReverse) Name() *query.ColumnNode {
	cn := n.leafUnTable.Name()
	query.NodeSetParent(cn, n)
	return cn
}

func (n leafUnTable) RootUnID() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:     "root_un_id",
		Identifier:    "RootUnID",
		ReceiverType:  query.ColTypeString,
		SchemaType:    schema.ColTypeReference,
		SchemaSubType: schema.ColSubTypeNone,
		IsPrimaryKey:  false,
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n *leafUnReverse) RootUnID() *query.ColumnNode {
	cn := n.leafUnTable.RootUnID()
	query.NodeSetParent(cn, n)
	return cn
}

// RootUn represents the link to a RootUn object.
func (n leafUnTable) RootUn() RootUnNode {
	cn := &rootUnReference{
		ReferenceNode: query.ReferenceNode{
			ColumnQueryName: "root_un_id",
			Identifier:      "RootUn",
			ReceiverType:    query.ColTypeString,
		},
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n *leafUnReverse) RootUn() RootUnNode {
	cn := n.leafUnTable.RootUn().(*rootUnReference)
	query.NodeSetParent(cn, n)
	return cn
}

func (n leafUnTable) GobEncode() (data []byte, err error) {
	return
}

func (n *leafUnTable) GobDecode(data []byte) (err error) {
	return
}

func (n *leafUnReverse) GobEncode() (data []byte, err error) {
	var buf bytes.Buffer
	e := gob.NewEncoder(&buf)

	if err = e.Encode(&n.ReverseNode); err != nil {
		panic(err)
	}
	data = buf.Bytes()
	return
}

func (n *leafUnReverse) GobDecode(data []byte) (err error) {
	buf := bytes.NewBuffer(data)
	dec := gob.NewDecoder(buf)

	if err = dec.Decode(&n.ReverseNode); err != nil {
		panic(err)
	}
	return
}

func init() {
	gob.Register(new(leafUnTable))
	gob.Register(new(leafUnReverse))
}
