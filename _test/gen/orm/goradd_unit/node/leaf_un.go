// Code generated by goradd-orm. DO NOT EDIT.

package node

import (
	"bytes"
	"encoding/gob"

	"github.com/goradd/gro/pkg/query"
	"github.com/goradd/gro/pkg/schema"
)

// LeafUnNode is the builder interface to the LeafUn nodes.
type LeafUnNode interface {
	query.TableNodeI
	// PrimaryKey returns the column node representing the primary key of the table
	PrimaryKey() *query.ColumnNode
	// ID represents the id column in the database.
	ID() *query.ColumnNode
	// Name represents the name column in the database.
	Name() *query.ColumnNode
	// RootUnID represents the root_un_id foreign key column in the database
	// that references the RootUn object.
	RootUnID() *query.ColumnNode
	// RootUn references the RootUn object whose primary key is RootUnID.
	RootUn() RootUnNode
}

// leafUnTable represents the leaf_un table in a query. It uses a builder pattern to chain
// together other tables and columns to form a node chain in a query.
//
// To use the leafUnTable, call [LeafUn()] to start a reference chain when querying the leaf_un table.
type leafUnTable struct {
}

type leafUnReverse struct {
	leafUnTable
	query.ReverseNode
}

// LeafUn returns a table node that starts a node chain that begins with the leaf_un table.
func LeafUn() LeafUnNode {
	return leafUnTable{}
}

// TableName_ returns the query name of the table the node is associated with.
func (n leafUnTable) TableName_() string {
	return "leaf_un"
}

// NodeType_ returns the query.NodeType of the node.
func (n leafUnTable) NodeType_() query.NodeType {
	return query.TableNodeType
}

// DatabaseKey_ returns the database key of the database the node is associated with.
func (n leafUnTable) DatabaseKey_() string {
	return "goradd_unit"
}

// ColumnNodes_ returns a list of all the column nodes in this node.
func (n leafUnTable) ColumnNodes_() (nodes []query.Node) {
	nodes = append(nodes, n.ID())
	nodes = append(nodes, n.Name())
	nodes = append(nodes, n.RootUnID())
	return nodes
}

func (n *leafUnReverse) ColumnNodes_() (nodes []query.Node) {
	nodes = n.leafUnTable.ColumnNodes_()
	for _, cn := range nodes {
		query.NodeSetParent(cn, n)
	}
	return
}

func (n *leafUnReverse) NodeType_() query.NodeType {
	return query.ReverseNodeType
}

// PrimaryKeys returns the primary key column nodes to satisfy the PrimaryKeyer interface.
func (n leafUnTable) PrimaryKeys() []*query.ColumnNode {
	return []*query.ColumnNode{
		n.ID(),
	}
}

// PrimaryKey returns the single primary key column node.
func (n leafUnTable) PrimaryKey() *query.ColumnNode {
	return n.ID()
}

// PrimaryKeys returns the primary key column nodes.
func (n *leafUnReverse) PrimaryKeys() []*query.ColumnNode {
	return []*query.ColumnNode{
		n.ID(),
	}
}

// PrimaryKey returns the single primary key column node.
func (n leafUnReverse) PrimaryKey() *query.ColumnNode {
	return n.ID()
}

func (n leafUnTable) ID() *query.ColumnNode {
	cn := query.NewColumnNode(
		"id",
		"id",
		query.ColTypeString,
		schema.ColTypeAutoPrimaryKey,
		schema.ColSubTypeNone,
		true,
		n,
	)
	return cn
}

func (n *leafUnReverse) ID() *query.ColumnNode {
	cn := n.leafUnTable.ID()
	query.NodeSetParent(cn, n)
	return cn
}

func (n leafUnTable) Name() *query.ColumnNode {
	cn := query.NewColumnNode(
		"name",
		"name",
		query.ColTypeString,
		schema.ColTypeString,
		schema.ColSubTypeNone,
		false,
		n,
	)
	return cn
}

func (n *leafUnReverse) Name() *query.ColumnNode {
	cn := n.leafUnTable.Name()
	query.NodeSetParent(cn, n)
	return cn
}

func (n leafUnTable) RootUnID() *query.ColumnNode {
	cn := query.NewColumnNode(
		"root_un_id",
		"rootUnID",
		query.ColTypeString,
		schema.ColTypeString,
		schema.ColSubTypeNone,
		false,
		n,
	)
	return cn
}

func (n *leafUnReverse) RootUnID() *query.ColumnNode {
	cn := n.leafUnTable.RootUnID()
	query.NodeSetParent(cn, n)
	return cn
}

// RootUn represents the link to a RootUn object.
func (n leafUnTable) RootUn() RootUnNode {
	cn := &rootUnReference{
		ReferenceNode: query.ReferenceNode{
			ForeignKey: "root_un_id",
			PrimaryKey: "id",
			Field:      "rootUn",
		},
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n *leafUnReverse) RootUn() RootUnNode {
	cn := n.leafUnTable.RootUn().(*rootUnReference)
	query.NodeSetParent(cn, n)
	return cn
}

func (n leafUnTable) GobEncode() (data []byte, err error) {
	return
}

func (n *leafUnTable) GobDecode(data []byte) (err error) {
	return
}

func (n *leafUnReverse) GobEncode() (data []byte, err error) {
	var buf bytes.Buffer
	e := gob.NewEncoder(&buf)

	if err = e.Encode(&n.ReverseNode); err != nil {
		panic(err)
	}
	data = buf.Bytes()
	return
}

func (n *leafUnReverse) GobDecode(data []byte) (err error) {
	buf := bytes.NewBuffer(data)
	dec := gob.NewDecoder(buf)

	if err = dec.Decode(&n.ReverseNode); err != nil {
		panic(err)
	}
	return
}

func init() {
	gob.Register(new(leafUnTable))
	gob.Register(new(leafUnReverse))
}
