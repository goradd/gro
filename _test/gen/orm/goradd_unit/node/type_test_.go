// Code generated by goradd-orm. DO NOT EDIT.

package node

import (
	"encoding/gob"

	"github.com/goradd/gro/pkg/query"
	"github.com/goradd/gro/pkg/schema"
)

// TypeTestNode is the builder interface to the TypeTest nodes.
type TypeTestNode interface {
	query.TableNodeI
	// PrimaryKey returns the column node representing the primary key of the table
	PrimaryKey() *query.ColumnNode
	// ID represents the id column in the database.
	ID() *query.ColumnNode
	// Date represents the date column in the database.
	Date() *query.ColumnNode
	// Time represents the time column in the database.
	Time() *query.ColumnNode
	// DateTime represents the date_time column in the database.
	DateTime() *query.ColumnNode
	// CreationTime represents the creation_time column in the database.
	CreationTime() *query.ColumnNode
	// ModifiedTime represents the modified_time column in the database.
	ModifiedTime() *query.ColumnNode
	// TestInt represents the test_int column in the database.
	TestInt() *query.ColumnNode
	// TestUnsigned represents the test_unsigned column in the database.
	TestUnsigned() *query.ColumnNode
	// TestInt64 represents the test_int64 column in the database.
	TestInt64() *query.ColumnNode
	// TestUint64 represents the test_uint64 column in the database.
	TestUint64() *query.ColumnNode
	// TestFloat32 represents the test_float32 column in the database.
	TestFloat32() *query.ColumnNode
	// TestFloat64 represents the test_float64 column in the database.
	TestFloat64() *query.ColumnNode
	// TestNumeric represents the test_numeric column in the database.
	TestNumeric() *query.ColumnNode
	// TestBool represents the test_bool column in the database.
	TestBool() *query.ColumnNode
	// TestUnlimitedString represents the test_unlimited_string column in the database.
	TestUnlimitedString() *query.ColumnNode
	// TestLimitedString represents the test_limited_string column in the database.
	TestLimitedString() *query.ColumnNode
	// TestLongstring represents the test_longstring column in the database.
	TestLongstring() *query.ColumnNode
	// TestUnlimitedBytes represents the test_unlimited_bytes column in the database.
	TestUnlimitedBytes() *query.ColumnNode
	// TestLimitedBytes represents the test_limited_bytes column in the database.
	TestLimitedBytes() *query.ColumnNode
	// TypeLongBytes represents the type_long_bytes column in the database.
	TypeLongBytes() *query.ColumnNode
}

// typeTestTable represents the type_test table in a query. It uses a builder pattern to chain
// together other tables and columns to form a node chain in a query.
//
// To use the typeTestTable, call [TypeTest()] to start a reference chain when querying the type_test table.
type typeTestTable struct {
}

// TypeTest returns a table node that starts a node chain that begins with the type_test table.
func TypeTest() TypeTestNode {
	return typeTestTable{}
}

// TableName_ returns the query name of the table the node is associated with.
func (n typeTestTable) TableName_() string {
	return "type_test"
}

// NodeType_ returns the query.NodeType of the node.
func (n typeTestTable) NodeType_() query.NodeType {
	return query.TableNodeType
}

// DatabaseKey_ returns the database key of the database the node is associated with.
func (n typeTestTable) DatabaseKey_() string {
	return "goradd_unit"
}

// ColumnNodes_ returns a list of all the column nodes in this node.
func (n typeTestTable) ColumnNodes_() (nodes []query.Node) {
	nodes = append(nodes, n.ID())
	nodes = append(nodes, n.Date())
	nodes = append(nodes, n.Time())
	nodes = append(nodes, n.DateTime())
	nodes = append(nodes, n.CreationTime())
	nodes = append(nodes, n.ModifiedTime())
	nodes = append(nodes, n.TestInt())
	nodes = append(nodes, n.TestUnsigned())
	nodes = append(nodes, n.TestInt64())
	nodes = append(nodes, n.TestUint64())
	nodes = append(nodes, n.TestFloat32())
	nodes = append(nodes, n.TestFloat64())
	nodes = append(nodes, n.TestNumeric())
	nodes = append(nodes, n.TestBool())
	nodes = append(nodes, n.TestUnlimitedString())
	nodes = append(nodes, n.TestLimitedString())
	nodes = append(nodes, n.TestLongstring())
	nodes = append(nodes, n.TestUnlimitedBytes())
	nodes = append(nodes, n.TestLimitedBytes())
	nodes = append(nodes, n.TypeLongBytes())
	return nodes
}

// PrimaryKeys returns the primary key column nodes to satisfy the PrimaryKeyer interface.
func (n typeTestTable) PrimaryKeys() []*query.ColumnNode {
	return []*query.ColumnNode{
		n.ID(),
	}
}

// PrimaryKey returns the single primary key column node.
func (n typeTestTable) PrimaryKey() *query.ColumnNode {
	return n.ID()
}

func (n typeTestTable) ID() *query.ColumnNode {
	cn := query.NewColumnNode(
		"id",
		"id",
		query.ColTypeString,
		schema.ColTypeAutoPrimaryKey,
		schema.ColSubTypeNone,
		true,
		n,
	)
	return cn
}

func (n typeTestTable) Date() *query.ColumnNode {
	cn := query.NewColumnNode(
		"date",
		"date",
		query.ColTypeTime,
		schema.ColTypeTime,
		schema.ColSubTypeDateOnly,
		false,
		n,
	)
	return cn
}

func (n typeTestTable) Time() *query.ColumnNode {
	cn := query.NewColumnNode(
		"time",
		"time",
		query.ColTypeTime,
		schema.ColTypeTime,
		schema.ColSubTypeTimeOnly,
		false,
		n,
	)
	return cn
}

func (n typeTestTable) DateTime() *query.ColumnNode {
	cn := query.NewColumnNode(
		"date_time",
		"dateTime",
		query.ColTypeTime,
		schema.ColTypeTime,
		schema.ColSubTypeNone,
		false,
		n,
	)
	return cn
}

func (n typeTestTable) CreationTime() *query.ColumnNode {
	cn := query.NewColumnNode(
		"creation_time",
		"creationTime",
		query.ColTypeTime,
		schema.ColTypeTime,
		schema.ColSubTypeNone,
		false,
		n,
	)
	return cn
}

func (n typeTestTable) ModifiedTime() *query.ColumnNode {
	cn := query.NewColumnNode(
		"modified_time",
		"modifiedTime",
		query.ColTypeTime,
		schema.ColTypeTime,
		schema.ColSubTypeNone,
		false,
		n,
	)
	return cn
}

func (n typeTestTable) TestInt() *query.ColumnNode {
	cn := query.NewColumnNode(
		"test_int",
		"testInt",
		query.ColTypeInteger,
		schema.ColTypeInt,
		schema.ColSubTypeNone,
		false,
		n,
	)
	return cn
}

func (n typeTestTable) TestUnsigned() *query.ColumnNode {
	cn := query.NewColumnNode(
		"test_unsigned",
		"testUnsigned",
		query.ColTypeUnsigned,
		schema.ColTypeUint,
		schema.ColSubTypeNone,
		false,
		n,
	)
	return cn
}

func (n typeTestTable) TestInt64() *query.ColumnNode {
	cn := query.NewColumnNode(
		"test_int64",
		"testInt64",
		query.ColTypeInteger64,
		schema.ColTypeInt,
		schema.ColSubTypeNone,
		false,
		n,
	)
	return cn
}

func (n typeTestTable) TestUint64() *query.ColumnNode {
	cn := query.NewColumnNode(
		"test_uint64",
		"testUint64",
		query.ColTypeUnsigned64,
		schema.ColTypeUint,
		schema.ColSubTypeNone,
		false,
		n,
	)
	return cn
}

func (n typeTestTable) TestFloat32() *query.ColumnNode {
	cn := query.NewColumnNode(
		"test_float32",
		"testFloat32",
		query.ColTypeFloat32,
		schema.ColTypeFloat,
		schema.ColSubTypeNone,
		false,
		n,
	)
	return cn
}

func (n typeTestTable) TestFloat64() *query.ColumnNode {
	cn := query.NewColumnNode(
		"test_float64",
		"testFloat64",
		query.ColTypeFloat64,
		schema.ColTypeFloat,
		schema.ColSubTypeNone,
		false,
		n,
	)
	return cn
}

func (n typeTestTable) TestNumeric() *query.ColumnNode {
	cn := query.NewColumnNode(
		"test_numeric",
		"testNumeric",
		query.ColTypeString,
		schema.ColTypeString,
		schema.ColSubTypeNumeric,
		false,
		n,
	)
	return cn
}

func (n typeTestTable) TestBool() *query.ColumnNode {
	cn := query.NewColumnNode(
		"test_bool",
		"testBool",
		query.ColTypeBool,
		schema.ColTypeBool,
		schema.ColSubTypeNone,
		false,
		n,
	)
	return cn
}

func (n typeTestTable) TestUnlimitedString() *query.ColumnNode {
	cn := query.NewColumnNode(
		"test_unlimited_string",
		"testUnlimitedString",
		query.ColTypeString,
		schema.ColTypeString,
		schema.ColSubTypeNone,
		false,
		n,
	)
	return cn
}

func (n typeTestTable) TestLimitedString() *query.ColumnNode {
	cn := query.NewColumnNode(
		"test_limited_string",
		"testLimitedString",
		query.ColTypeString,
		schema.ColTypeString,
		schema.ColSubTypeNone,
		false,
		n,
	)
	return cn
}

func (n typeTestTable) TestLongstring() *query.ColumnNode {
	cn := query.NewColumnNode(
		"test_longstring",
		"testLongstring",
		query.ColTypeString,
		schema.ColTypeString,
		schema.ColSubTypeNone,
		false,
		n,
	)
	return cn
}

func (n typeTestTable) TestUnlimitedBytes() *query.ColumnNode {
	cn := query.NewColumnNode(
		"test_unlimited_bytes",
		"testUnlimitedBytes",
		query.ColTypeBytes,
		schema.ColTypeBytes,
		schema.ColSubTypeNone,
		false,
		n,
	)
	return cn
}

func (n typeTestTable) TestLimitedBytes() *query.ColumnNode {
	cn := query.NewColumnNode(
		"test_limited_bytes",
		"testLimitedBytes",
		query.ColTypeBytes,
		schema.ColTypeBytes,
		schema.ColSubTypeNone,
		false,
		n,
	)
	return cn
}

func (n typeTestTable) TypeLongBytes() *query.ColumnNode {
	cn := query.NewColumnNode(
		"type_long_bytes",
		"typeLongBytes",
		query.ColTypeBytes,
		schema.ColTypeBytes,
		schema.ColSubTypeNone,
		false,
		n,
	)
	return cn
}

func (n typeTestTable) GobEncode() (data []byte, err error) {
	return
}

func (n *typeTestTable) GobDecode(data []byte) (err error) {
	return
}

func init() {
	gob.Register(new(typeTestTable))
}
