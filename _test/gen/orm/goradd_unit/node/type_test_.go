// Code generated by goradd-orm. DO NOT EDIT.

package node

import (
	"encoding/gob"

	"github.com/goradd/orm/pkg/query"
	"github.com/goradd/orm/pkg/schema"
)

// TypeTestNode is the builder interface to the TypeTest nodes.
type TypeTestNode interface {
	query.TableNodeI
	PrimaryKey() *query.ColumnNode
	// ID represents the id column in the database.
	ID() *query.ColumnNode
	// Date represents the date column in the database.
	Date() *query.ColumnNode
	// Time represents the time column in the database.
	Time() *query.ColumnNode
	// DateTime represents the date_time column in the database.
	DateTime() *query.ColumnNode
	// CreationTime represents the creation_time column in the database.
	CreationTime() *query.ColumnNode
	// ModifiedTime represents the modified_time column in the database.
	ModifiedTime() *query.ColumnNode
	// TestInt represents the test_int column in the database.
	TestInt() *query.ColumnNode
	// TestUnsigned represents the test_unsigned column in the database.
	TestUnsigned() *query.ColumnNode
	// TestInt64 represents the test_int64 column in the database.
	TestInt64() *query.ColumnNode
	// TestUint64 represents the test_uint64 column in the database.
	TestUint64() *query.ColumnNode
	// TestFloat32 represents the test_float32 column in the database.
	TestFloat32() *query.ColumnNode
	// TestFloat64 represents the test_float64 column in the database.
	TestFloat64() *query.ColumnNode
	// TestNumeric represents the test_numeric column in the database.
	TestNumeric() *query.ColumnNode
	// TestBool represents the test_bool column in the database.
	TestBool() *query.ColumnNode
	// TestUnlimitedString represents the test_unlimited_string column in the database.
	TestUnlimitedString() *query.ColumnNode
	// TestLimitedString represents the test_limited_string column in the database.
	TestLimitedString() *query.ColumnNode
	// TestLongstring represents the test_longstring column in the database.
	TestLongstring() *query.ColumnNode
	// TestUnlimitedBytes represents the test_unlimited_bytes column in the database.
	TestUnlimitedBytes() *query.ColumnNode
	// TestLimitedBytes represents the test_limited_bytes column in the database.
	TestLimitedBytes() *query.ColumnNode
	// TypeLongBytes represents the type_long_bytes column in the database.
	TypeLongBytes() *query.ColumnNode
}

// typeTestTable represents the type_test table in a query. It uses a builder pattern to chain
// together other tables and columns to form a node chain in a query.
//
// To use the typeTestTable, call [TypeTest()] to start a reference chain when querying the type_test table.
type typeTestTable struct {
}

// TypeTest returns a table node that starts a node chain that begins with the type_test table.
func TypeTest() TypeTestNode {
	return typeTestTable{}
}

// TableName_ returns the query name of the table the node is associated with.
func (n typeTestTable) TableName_() string {
	return "type_test"
}

// NodeType_ returns the query.NodeType of the node.
func (n typeTestTable) NodeType_() query.NodeType {
	return query.TableNodeType
}

// DatabaseKey_ returns the database key of the database the node is associated with.
func (n typeTestTable) DatabaseKey_() string {
	return "goradd_unit"
}

// ColumnNodes_ returns a list of all the column nodes in this node.
func (n typeTestTable) ColumnNodes_() (nodes []query.Node) {
	nodes = append(nodes, n.ID())
	nodes = append(nodes, n.Date())
	nodes = append(nodes, n.Time())
	nodes = append(nodes, n.DateTime())
	nodes = append(nodes, n.CreationTime())
	nodes = append(nodes, n.ModifiedTime())
	nodes = append(nodes, n.TestInt())
	nodes = append(nodes, n.TestUnsigned())
	nodes = append(nodes, n.TestInt64())
	nodes = append(nodes, n.TestUint64())
	nodes = append(nodes, n.TestFloat32())
	nodes = append(nodes, n.TestFloat64())
	nodes = append(nodes, n.TestNumeric())
	nodes = append(nodes, n.TestBool())
	nodes = append(nodes, n.TestUnlimitedString())
	nodes = append(nodes, n.TestLimitedString())
	nodes = append(nodes, n.TestLongstring())
	nodes = append(nodes, n.TestUnlimitedBytes())
	nodes = append(nodes, n.TestLimitedBytes())
	nodes = append(nodes, n.TypeLongBytes())
	return nodes
}

// PrimaryKey returns a node that points to the primary key column.
func (n typeTestTable) PrimaryKey() *query.ColumnNode {
	return n.ID()
}

func (n typeTestTable) ID() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:     "id",
		Identifier:    "ID",
		ReceiverType:  query.ColTypeString,
		SchemaType:    schema.ColTypeAutoPrimaryKey,
		SchemaSubType: schema.ColSubTypeNone,
		IsPrimaryKey:  true,
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n typeTestTable) Date() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:     "date",
		Identifier:    "Date",
		ReceiverType:  query.ColTypeTime,
		SchemaType:    schema.ColTypeTime,
		SchemaSubType: schema.ColSubTypeDateOnly,
		IsPrimaryKey:  false,
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n typeTestTable) Time() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:     "time",
		Identifier:    "Time",
		ReceiverType:  query.ColTypeTime,
		SchemaType:    schema.ColTypeTime,
		SchemaSubType: schema.ColSubTypeTimeOnly,
		IsPrimaryKey:  false,
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n typeTestTable) DateTime() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:     "date_time",
		Identifier:    "DateTime",
		ReceiverType:  query.ColTypeTime,
		SchemaType:    schema.ColTypeTime,
		SchemaSubType: schema.ColSubTypeNone,
		IsPrimaryKey:  false,
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n typeTestTable) CreationTime() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:     "creation_time",
		Identifier:    "CreationTime",
		ReceiverType:  query.ColTypeTime,
		SchemaType:    schema.ColTypeTime,
		SchemaSubType: schema.ColSubTypeNone,
		IsPrimaryKey:  false,
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n typeTestTable) ModifiedTime() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:     "modified_time",
		Identifier:    "ModifiedTime",
		ReceiverType:  query.ColTypeTime,
		SchemaType:    schema.ColTypeTime,
		SchemaSubType: schema.ColSubTypeNone,
		IsPrimaryKey:  false,
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n typeTestTable) TestInt() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:     "test_int",
		Identifier:    "TestInt",
		ReceiverType:  query.ColTypeInteger,
		SchemaType:    schema.ColTypeInt,
		SchemaSubType: schema.ColSubTypeNone,
		IsPrimaryKey:  false,
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n typeTestTable) TestUnsigned() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:     "test_unsigned",
		Identifier:    "TestUnsigned",
		ReceiverType:  query.ColTypeUnsigned,
		SchemaType:    schema.ColTypeUint,
		SchemaSubType: schema.ColSubTypeNone,
		IsPrimaryKey:  false,
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n typeTestTable) TestInt64() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:     "test_int64",
		Identifier:    "TestInt64",
		ReceiverType:  query.ColTypeInteger64,
		SchemaType:    schema.ColTypeInt,
		SchemaSubType: schema.ColSubTypeNone,
		IsPrimaryKey:  false,
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n typeTestTable) TestUint64() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:     "test_uint64",
		Identifier:    "TestUint64",
		ReceiverType:  query.ColTypeUnsigned64,
		SchemaType:    schema.ColTypeUint,
		SchemaSubType: schema.ColSubTypeNone,
		IsPrimaryKey:  false,
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n typeTestTable) TestFloat32() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:     "test_float32",
		Identifier:    "TestFloat32",
		ReceiverType:  query.ColTypeFloat32,
		SchemaType:    schema.ColTypeFloat,
		SchemaSubType: schema.ColSubTypeNone,
		IsPrimaryKey:  false,
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n typeTestTable) TestFloat64() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:     "test_float64",
		Identifier:    "TestFloat64",
		ReceiverType:  query.ColTypeFloat64,
		SchemaType:    schema.ColTypeFloat,
		SchemaSubType: schema.ColSubTypeNone,
		IsPrimaryKey:  false,
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n typeTestTable) TestNumeric() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:     "test_numeric",
		Identifier:    "TestNumeric",
		ReceiverType:  query.ColTypeString,
		SchemaType:    schema.ColTypeString,
		SchemaSubType: schema.ColSubTypeNumeric,
		IsPrimaryKey:  false,
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n typeTestTable) TestBool() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:     "test_bool",
		Identifier:    "TestBool",
		ReceiverType:  query.ColTypeBool,
		SchemaType:    schema.ColTypeBool,
		SchemaSubType: schema.ColSubTypeNone,
		IsPrimaryKey:  false,
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n typeTestTable) TestUnlimitedString() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:     "test_unlimited_string",
		Identifier:    "TestUnlimitedString",
		ReceiverType:  query.ColTypeString,
		SchemaType:    schema.ColTypeString,
		SchemaSubType: schema.ColSubTypeNone,
		IsPrimaryKey:  false,
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n typeTestTable) TestLimitedString() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:     "test_limited_string",
		Identifier:    "TestLimitedString",
		ReceiverType:  query.ColTypeString,
		SchemaType:    schema.ColTypeString,
		SchemaSubType: schema.ColSubTypeNone,
		IsPrimaryKey:  false,
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n typeTestTable) TestLongstring() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:     "test_longstring",
		Identifier:    "TestLongstring",
		ReceiverType:  query.ColTypeString,
		SchemaType:    schema.ColTypeString,
		SchemaSubType: schema.ColSubTypeNone,
		IsPrimaryKey:  false,
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n typeTestTable) TestUnlimitedBytes() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:     "test_unlimited_bytes",
		Identifier:    "TestUnlimitedBytes",
		ReceiverType:  query.ColTypeBytes,
		SchemaType:    schema.ColTypeBytes,
		SchemaSubType: schema.ColSubTypeNone,
		IsPrimaryKey:  false,
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n typeTestTable) TestLimitedBytes() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:     "test_limited_bytes",
		Identifier:    "TestLimitedBytes",
		ReceiverType:  query.ColTypeBytes,
		SchemaType:    schema.ColTypeBytes,
		SchemaSubType: schema.ColSubTypeNone,
		IsPrimaryKey:  false,
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n typeTestTable) TypeLongBytes() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:     "type_long_bytes",
		Identifier:    "TypeLongBytes",
		ReceiverType:  query.ColTypeBytes,
		SchemaType:    schema.ColTypeBytes,
		SchemaSubType: schema.ColSubTypeNone,
		IsPrimaryKey:  false,
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n typeTestTable) GobEncode() (data []byte, err error) {
	return
}

func (n *typeTestTable) GobDecode(data []byte) (err error) {
	return
}

func init() {
	gob.Register(new(typeTestTable))
}
