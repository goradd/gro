// Code generated by goradd-orm. DO NOT EDIT.

package node

import (
	"encoding/gob"

	"github.com/goradd/orm/pkg/query"
)

// TypeTestNodeI is the builder interface to the TypeTest nodes.
type TypeTestNodeI interface {
	query.NodeI
	PrimaryKeyNode() *query.ColumnNode
	// ID represents the id column in the database.
	ID() *query.ColumnNode
	// Date represents the date column in the database.
	Date() *query.ColumnNode
	// Time represents the time column in the database.
	Time() *query.ColumnNode
	// DateTime represents the date_time column in the database.
	DateTime() *query.ColumnNode
	// Ts represents the ts column in the database.
	Ts() *query.ColumnNode
	// TestInt represents the test_int column in the database.
	TestInt() *query.ColumnNode
	// TestFloat represents the test_float column in the database.
	TestFloat() *query.ColumnNode
	// TestDouble represents the test_double column in the database.
	TestDouble() *query.ColumnNode
	// TestText represents the test_text column in the database.
	TestText() *query.ColumnNode
	// TestBit represents the test_bit column in the database.
	TestBit() *query.ColumnNode
	// TestVarchar represents the test_varchar column in the database.
	TestVarchar() *query.ColumnNode
	// TestBlob represents the test_blob column in the database.
	TestBlob() *query.ColumnNode
}

// TypeTestExpander is the builder interface for TypeTests that are expandable.
type TypeTestExpander interface {
	TypeTestNodeI
	// Expand causes the node to produce separate rows with individual items, rather than a single row with an array of items.
	Expand() TypeTestNodeI
}

// typeTestTable represents the type_test table in a query. It uses a builder pattern to chain
// together other tables and columns to form a node chain in a query.
//
// To use the typeTestTable, call [TypeTest()] to start a reference chain when querying the type_test table.
type typeTestTable struct {
}

type typeTestReverse struct {
	typeTestTable
	reverseColumn *query.ColumnNode
}

// TypeTest returns a table node that starts a node chain that begins with the type_test table.
func TypeTest() TypeTestNodeI {
	// Table nodes are empty structs, and do not have pointer receivers,
	var n typeTestTable
	return n
}

// SelectNodes_ is used internally by the framework to return the list of all the column nodes.
func (n typeTestTable) SelectNodes_() (nodes []*query.ColumnNode) {
	nodes = append(nodes, n.ID())
	nodes = append(nodes, n.Date())
	nodes = append(nodes, n.Time())
	nodes = append(nodes, n.DateTime())
	nodes = append(nodes, n.Ts())
	nodes = append(nodes, n.TestInt())
	nodes = append(nodes, n.TestFloat())
	nodes = append(nodes, n.TestDouble())
	nodes = append(nodes, n.TestText())
	nodes = append(nodes, n.TestBit())
	nodes = append(nodes, n.TestVarchar())
	nodes = append(nodes, n.TestBlob())
	return nodes
}

// Copy_ is used internally by the framework to deep copy the node.
func (n typeTestTable) Copy_() query.NodeI {
	// Table nodes are empty so just offer a copy
	var t typeTestTable
	return t
}

// PrimaryKeyNode returns a node that points to the primary key column, if
// a single primary key exists in the table.
func (n typeTestTable) PrimaryKeyNode() *query.ColumnNode {
	return n.ID()
}

// ID represents the id column in the database.
func (n typeTestTable) ID() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd_unit",
		"type_test",
		"id",
		"ID",
		query.ColTypeString,
		true,
	)
	query.SetParentNode(cn, n)
	return cn
}

// Date represents the date column in the database.
func (n typeTestTable) Date() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd_unit",
		"type_test",
		"date",
		"Date",
		query.ColTypeTime,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

// Time represents the time column in the database.
func (n typeTestTable) Time() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd_unit",
		"type_test",
		"time",
		"Time",
		query.ColTypeTime,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

// DateTime represents the date_time column in the database.
func (n typeTestTable) DateTime() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd_unit",
		"type_test",
		"date_time",
		"DateTime",
		query.ColTypeTime,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

// Ts represents the ts column in the database.
func (n typeTestTable) Ts() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd_unit",
		"type_test",
		"ts",
		"Ts",
		query.ColTypeTime,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

// TestInt represents the test_int column in the database.
func (n typeTestTable) TestInt() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd_unit",
		"type_test",
		"test_int",
		"TestInt",
		query.ColTypeInteger,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

// TestFloat represents the test_float column in the database.
func (n typeTestTable) TestFloat() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd_unit",
		"type_test",
		"test_float",
		"TestFloat",
		query.ColTypeFloat32,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

// TestDouble represents the test_double column in the database.
func (n typeTestTable) TestDouble() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd_unit",
		"type_test",
		"test_double",
		"TestDouble",
		query.ColTypeFloat64,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

// TestText represents the test_text column in the database.
func (n typeTestTable) TestText() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd_unit",
		"type_test",
		"test_text",
		"TestText",
		query.ColTypeString,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

// TestBit represents the test_bit column in the database.
func (n typeTestTable) TestBit() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd_unit",
		"type_test",
		"test_bit",
		"TestBit",
		query.ColTypeBool,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

// TestVarchar represents the test_varchar column in the database.
func (n typeTestTable) TestVarchar() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd_unit",
		"type_test",
		"test_varchar",
		"TestVarchar",
		query.ColTypeString,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

// TestBlob represents the test_blob column in the database.
func (n typeTestTable) TestBlob() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd_unit",
		"type_test",
		"test_blob",
		"TestBlob",
		query.ColTypeBytes,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

func init() {
	gob.Register(new(typeTestTable))
	gob.Register(new(typeTestReverse))
}
