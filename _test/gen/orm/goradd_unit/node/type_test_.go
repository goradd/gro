// Code generated by goradd-orm. DO NOT EDIT.

package node

import (
	"bytes"
	"encoding/gob"

	"github.com/goradd/orm/pkg/query"
)

// TypeTestNodeI is the builder interface to the TypeTest nodes.
type TypeTestNodeI interface {
	query.Node
	PrimaryKeyNode() *query.ColumnNode
	// ID represents the id column in the database.
	ID() *query.ColumnNode
	// Date represents the date column in the database.
	Date() *query.ColumnNode
	// Time represents the time column in the database.
	Time() *query.ColumnNode
	// DateTime represents the date_time column in the database.
	DateTime() *query.ColumnNode
	// Ts represents the ts column in the database.
	Ts() *query.ColumnNode
	// TestInt represents the test_int column in the database.
	TestInt() *query.ColumnNode
	// TestFloat represents the test_float column in the database.
	TestFloat() *query.ColumnNode
	// TestDouble represents the test_double column in the database.
	TestDouble() *query.ColumnNode
	// TestText represents the test_text column in the database.
	TestText() *query.ColumnNode
	// TestBit represents the test_bit column in the database.
	TestBit() *query.ColumnNode
	// TestVarchar represents the test_varchar column in the database.
	TestVarchar() *query.ColumnNode
	// TestBlob represents the test_blob column in the database.
	TestBlob() *query.ColumnNode
}

// TypeTestExpander is the builder interface for TypeTests that are expandable.
type TypeTestExpander interface {
	TypeTestNodeI
	// Expand causes the node to produce separate rows with individual items, rather than a single row with an array of items.
	Expand()
}

// typeTestTable represents the type_test table in a query. It uses a builder pattern to chain
// together other tables and columns to form a node chain in a query.
//
// To use the typeTestTable, call [TypeTest()] to start a reference chain when querying the type_test table.
type typeTestTable struct {
}

type typeTestReverse struct {
	typeTestTable
	query.ReverseNode
}

// TypeTest returns a table node that starts a node chain that begins with the type_test table.
func TypeTest() TypeTestNodeI {
	return typeTestTable{}
}

// TableName_ returns the query name of the table the node is associated with.
func (n typeTestTable) TableName_() string {
	return "type_test"
}

// NodeType_ returns the query.NodeType of the node.
func (n typeTestTable) NodeType_() query.NodeType {
	return query.TableNodeType
}

// DatabaseKey_ returns the database key of the database the node is associated with.
func (n typeTestTable) DatabaseKey_() string {
	return "goradd_unit"
}

// ColumnNodes_ is used internally by the framework to return the list of all the column nodes.
// This may include reference nodes to enum types.
func (n typeTestTable) ColumnNodes_() (nodes []query.Node) {
	nodes = append(nodes, n.ID())
	nodes = append(nodes, n.Date())
	nodes = append(nodes, n.Time())
	nodes = append(nodes, n.DateTime())
	nodes = append(nodes, n.Ts())
	nodes = append(nodes, n.TestInt())
	nodes = append(nodes, n.TestFloat())
	nodes = append(nodes, n.TestDouble())
	nodes = append(nodes, n.TestText())
	nodes = append(nodes, n.TestBit())
	nodes = append(nodes, n.TestVarchar())
	nodes = append(nodes, n.TestBlob())
	return nodes
}

func (n *typeTestReverse) ColumnNodes_() (nodes []query.Node) {
	nodes = n.typeTestTable.ColumnNodes_()
	for _, cn := range nodes {
		cn.(query.Linker).SetParent(n)
	}
	return
}

// Columns_ is used internally by the framework to return the list of all the columns in the table.
func (n typeTestTable) Columns_() []string {
	return []string{
		"id",
		"date",
		"time",
		"date_time",
		"ts",
		"test_int",
		"test_float",
		"test_double",
		"test_text",
		"test_bit",
		"test_varchar",
		"test_blob",
	}
}

// IsEnum_ is used internally by the framework to determine if the current table is an enumerated type.
func (n typeTestTable) IsEnum_() bool {
	return false
}

func (n *typeTestReverse) NodeType_() query.NodeType {
	return query.ReverseNodeType
}

// PrimaryKeyNode returns a node that points to the primary key column.
func (n typeTestTable) PrimaryKeyNode() *query.ColumnNode {
	return n.ID()
}

func (n *typeTestReverse) PrimaryKeyNode() *query.ColumnNode {
	return n.ID()
}

func (n typeTestTable) ID() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:    "id",
		Identifier:   "ID",
		ReceiverType: query.ColTypeString,
		IsPrimaryKey: true,
	}
	cn.SetParent(n)
	return cn
}

func (n *typeTestReverse) ID() *query.ColumnNode {
	cn := n.typeTestTable.ID()
	cn.SetParent(n)
	return cn
}

func (n typeTestTable) Date() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:    "date",
		Identifier:   "Date",
		ReceiverType: query.ColTypeTime,
		IsPrimaryKey: false,
	}
	cn.SetParent(n)
	return cn
}

func (n *typeTestReverse) Date() *query.ColumnNode {
	cn := n.typeTestTable.Date()
	cn.SetParent(n)
	return cn
}

func (n typeTestTable) Time() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:    "time",
		Identifier:   "Time",
		ReceiverType: query.ColTypeTime,
		IsPrimaryKey: false,
	}
	cn.SetParent(n)
	return cn
}

func (n *typeTestReverse) Time() *query.ColumnNode {
	cn := n.typeTestTable.Time()
	cn.SetParent(n)
	return cn
}

func (n typeTestTable) DateTime() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:    "date_time",
		Identifier:   "DateTime",
		ReceiverType: query.ColTypeTime,
		IsPrimaryKey: false,
	}
	cn.SetParent(n)
	return cn
}

func (n *typeTestReverse) DateTime() *query.ColumnNode {
	cn := n.typeTestTable.DateTime()
	cn.SetParent(n)
	return cn
}

func (n typeTestTable) Ts() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:    "ts",
		Identifier:   "Ts",
		ReceiverType: query.ColTypeTime,
		IsPrimaryKey: false,
	}
	cn.SetParent(n)
	return cn
}

func (n *typeTestReverse) Ts() *query.ColumnNode {
	cn := n.typeTestTable.Ts()
	cn.SetParent(n)
	return cn
}

func (n typeTestTable) TestInt() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:    "test_int",
		Identifier:   "TestInt",
		ReceiverType: query.ColTypeInteger,
		IsPrimaryKey: false,
	}
	cn.SetParent(n)
	return cn
}

func (n *typeTestReverse) TestInt() *query.ColumnNode {
	cn := n.typeTestTable.TestInt()
	cn.SetParent(n)
	return cn
}

func (n typeTestTable) TestFloat() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:    "test_float",
		Identifier:   "TestFloat",
		ReceiverType: query.ColTypeFloat32,
		IsPrimaryKey: false,
	}
	cn.SetParent(n)
	return cn
}

func (n *typeTestReverse) TestFloat() *query.ColumnNode {
	cn := n.typeTestTable.TestFloat()
	cn.SetParent(n)
	return cn
}

func (n typeTestTable) TestDouble() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:    "test_double",
		Identifier:   "TestDouble",
		ReceiverType: query.ColTypeFloat64,
		IsPrimaryKey: false,
	}
	cn.SetParent(n)
	return cn
}

func (n *typeTestReverse) TestDouble() *query.ColumnNode {
	cn := n.typeTestTable.TestDouble()
	cn.SetParent(n)
	return cn
}

func (n typeTestTable) TestText() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:    "test_text",
		Identifier:   "TestText",
		ReceiverType: query.ColTypeString,
		IsPrimaryKey: false,
	}
	cn.SetParent(n)
	return cn
}

func (n *typeTestReverse) TestText() *query.ColumnNode {
	cn := n.typeTestTable.TestText()
	cn.SetParent(n)
	return cn
}

func (n typeTestTable) TestBit() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:    "test_bit",
		Identifier:   "TestBit",
		ReceiverType: query.ColTypeBool,
		IsPrimaryKey: false,
	}
	cn.SetParent(n)
	return cn
}

func (n *typeTestReverse) TestBit() *query.ColumnNode {
	cn := n.typeTestTable.TestBit()
	cn.SetParent(n)
	return cn
}

func (n typeTestTable) TestVarchar() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:    "test_varchar",
		Identifier:   "TestVarchar",
		ReceiverType: query.ColTypeString,
		IsPrimaryKey: false,
	}
	cn.SetParent(n)
	return cn
}

func (n *typeTestReverse) TestVarchar() *query.ColumnNode {
	cn := n.typeTestTable.TestVarchar()
	cn.SetParent(n)
	return cn
}

func (n typeTestTable) TestBlob() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:    "test_blob",
		Identifier:   "TestBlob",
		ReceiverType: query.ColTypeBytes,
		IsPrimaryKey: false,
	}
	cn.SetParent(n)
	return cn
}

func (n *typeTestReverse) TestBlob() *query.ColumnNode {
	cn := n.typeTestTable.TestBlob()
	cn.SetParent(n)
	return cn
}

func (n typeTestTable) GobEncode() (data []byte, err error) {
	return
}

func (n *typeTestTable) GobDecode(data []byte) (err error) {
	return
}

func (n *typeTestReverse) GobEncode() (data []byte, err error) {
	var buf bytes.Buffer
	e := gob.NewEncoder(&buf)

	if err = e.Encode(&n.ReverseNode); err != nil {
		panic(err)
	}
	data = buf.Bytes()
	return
}

func (n *typeTestReverse) GobDecode(data []byte) (err error) {
	buf := bytes.NewBuffer(data)
	dec := gob.NewDecoder(buf)

	if err = dec.Decode(&n.ReverseNode); err != nil {
		panic(err)
	}
	return
}

func init() {
	gob.Register(new(typeTestTable))
	gob.Register(new(typeTestReverse))
}
