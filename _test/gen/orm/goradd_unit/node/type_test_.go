// Code generated by goradd-orm. DO NOT EDIT.

package node

import (
	"bytes"
	"encoding/gob"

	"github.com/goradd/orm/pkg/query"
)

// TypeTestNode represents the type_test table in a query. It uses a builder pattern to chain
// together other tables and columns to form a node in a query.
//
// To use the TypeTestNode, call [TypeTest] to start a reference chain when querying the type_test table.
type TypeTestNode struct {
	// ReferenceNodeI is an internal object that represents the capabilities of the node. Since it is embedded, all
	// of its functions are exported and are callable along with the typeTestNode functions here.
	query.ReferenceNodeI
}

// TypeTest returns a table node that starts a node chain that begins with the type_test table.
func TypeTest() *TypeTestNode {
	n := TypeTestNode{
		query.NewTableNode("goradd_unit", "type_test", "TypeTest"),
	}
	query.SetParentNode(&n, nil)
	return &n
}

// SelectNodes_ is used internally by the framework to return the list of all the column nodes.
// doc: hide
func (n *TypeTestNode) SelectNodes_() (nodes []*query.ColumnNode) {
	nodes = append(nodes, n.ID())
	nodes = append(nodes, n.Date())
	nodes = append(nodes, n.Time())
	nodes = append(nodes, n.DateTime())
	nodes = append(nodes, n.Ts())
	nodes = append(nodes, n.TestInt())
	nodes = append(nodes, n.TestFloat())
	nodes = append(nodes, n.TestDouble())
	nodes = append(nodes, n.TestText())
	nodes = append(nodes, n.TestBit())
	nodes = append(nodes, n.TestVarchar())
	nodes = append(nodes, n.TestBlob())
	return nodes
}

// EmbeddedNode is used internally by the framework to return the embedded Reference node.
// doc: hide
func (n *TypeTestNode) EmbeddedNode_() query.NodeI {
	return n.ReferenceNodeI
}

// Copy_ is used internally by the framework to deep copy the node.
// doc: hide
func (n *TypeTestNode) Copy_() query.NodeI {
	return &TypeTestNode{query.CopyNode(n.ReferenceNodeI)}
}

// PrimaryKeyNode returns a node that points to the primary key column, if
// a single primary key exists in the table.
func (n *TypeTestNode) PrimaryKeyNode() *query.ColumnNode {
	return n.ID()
}

// ID represents the id column in the database.
func (n *TypeTestNode) ID() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd_unit",
		"type_test",
		"id",
		"ID",
		query.ColTypeString,
		true,
	)
	query.SetParentNode(cn, n)
	return cn
}

// Date represents the date column in the database.
func (n *TypeTestNode) Date() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd_unit",
		"type_test",
		"date",
		"Date",
		query.ColTypeTime,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

// Time represents the time column in the database.
func (n *TypeTestNode) Time() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd_unit",
		"type_test",
		"time",
		"Time",
		query.ColTypeTime,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

// DateTime represents the date_time column in the database.
func (n *TypeTestNode) DateTime() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd_unit",
		"type_test",
		"date_time",
		"DateTime",
		query.ColTypeTime,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

// Ts represents the ts column in the database.
func (n *TypeTestNode) Ts() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd_unit",
		"type_test",
		"ts",
		"Ts",
		query.ColTypeTime,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

// TestInt represents the test_int column in the database.
func (n *TypeTestNode) TestInt() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd_unit",
		"type_test",
		"test_int",
		"TestInt",
		query.ColTypeInteger,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

// TestFloat represents the test_float column in the database.
func (n *TypeTestNode) TestFloat() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd_unit",
		"type_test",
		"test_float",
		"TestFloat",
		query.ColTypeFloat32,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

// TestDouble represents the test_double column in the database.
func (n *TypeTestNode) TestDouble() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd_unit",
		"type_test",
		"test_double",
		"TestDouble",
		query.ColTypeFloat64,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

// TestText represents the test_text column in the database.
func (n *TypeTestNode) TestText() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd_unit",
		"type_test",
		"test_text",
		"TestText",
		query.ColTypeString,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

// TestBit represents the test_bit column in the database.
func (n *TypeTestNode) TestBit() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd_unit",
		"type_test",
		"test_bit",
		"TestBit",
		query.ColTypeBool,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

// TestVarchar represents the test_varchar column in the database.
func (n *TypeTestNode) TestVarchar() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd_unit",
		"type_test",
		"test_varchar",
		"TestVarchar",
		query.ColTypeString,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

// TestBlob represents the test_blob column in the database.
func (n *TypeTestNode) TestBlob() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd_unit",
		"type_test",
		"test_blob",
		"TestBlob",
		query.ColTypeBytes,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

type typeTestNodeEncoded struct {
	RefNode query.ReferenceNodeI
}

// GobEncode makes the node serializable.
// doc:hide
func (n *TypeTestNode) GobEncode() (data []byte, err error) {
	var buf bytes.Buffer
	e := gob.NewEncoder(&buf)

	s := typeTestNodeEncoded{
		RefNode: n.ReferenceNodeI,
	}

	if err = e.Encode(s); err != nil {
		panic(err)
	}
	data = buf.Bytes()
	return
}

// GobDecode makes the node deserializable.
// doc: hide
func (n *TypeTestNode) GobDecode(data []byte) (err error) {
	buf := bytes.NewBuffer(data)
	dec := gob.NewDecoder(buf)

	var s typeTestNodeEncoded
	if err = dec.Decode(&s); err != nil {
		panic(err)
	}
	n.ReferenceNodeI = s.RefNode
	query.SetParentNode(n, query.ParentNode(n)) // Reinforce types
	return
}
func init() {
	gob.Register(&TypeTestNode{})
}
