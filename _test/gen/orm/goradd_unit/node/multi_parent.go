// Code generated by goradd-orm. DO NOT EDIT.

package node

import (
	"bytes"
	"encoding/gob"

	"github.com/goradd/orm/pkg/query"
)

// MultiParentNode is the builder interface to the MultiParent nodes.
type MultiParentNode interface {
	query.TableNodeI
	PrimaryKey() *query.ColumnNode
	// ID represents the id column in the database.
	ID() *query.ColumnNode
	// Name represents the name column in the database.
	Name() *query.ColumnNode
	// Parent1ID represents the parent_1_id column in the database.
	Parent1ID() *query.ColumnNode
	// Parent1 represents the Parent1 reference to a MultiParent object.
	Parent1() MultiParentNode
	// Parent2ID represents the parent_2_id column in the database.
	Parent2ID() *query.ColumnNode
	// Parent2 represents the Parent2 reference to a MultiParent object.
	Parent2() MultiParentNode
	// Parent1MultiParents represents the Parent1MultiParents reference to MultiParent objects.
	Parent1MultiParents() MultiParentNode
	// Parent2MultiParents represents the Parent2MultiParents reference to MultiParent objects.
	Parent2MultiParents() MultiParentNode
}

// multiParentTable represents the multi_parent table in a query. It uses a builder pattern to chain
// together other tables and columns to form a node chain in a query.
//
// To use the multiParentTable, call [MultiParent()] to start a reference chain when querying the multi_parent table.
type multiParentTable struct {
}

type multiParentReference struct {
	multiParentTable
	query.ReferenceNode
}

type multiParentReverse struct {
	multiParentTable
	query.ReverseNode
}

// MultiParent returns a table node that starts a node chain that begins with the multi_parent table.
func MultiParent() MultiParentNode {
	return multiParentTable{}
}

// TableName_ returns the query name of the table the node is associated with.
func (n multiParentTable) TableName_() string {
	return "multi_parent"
}

// NodeType_ returns the query.NodeType of the node.
func (n multiParentTable) NodeType_() query.NodeType {
	return query.TableNodeType
}

// DatabaseKey_ returns the database key of the database the node is associated with.
func (n multiParentTable) DatabaseKey_() string {
	return "goradd_unit"
}

// ColumnNodes_ returns a list of all the column nodes in this node.
func (n multiParentTable) ColumnNodes_() (nodes []query.Node) {
	nodes = append(nodes, n.ID())
	nodes = append(nodes, n.Name())
	nodes = append(nodes, n.Parent1ID())
	nodes = append(nodes, n.Parent2ID())
	return nodes
}

func (n *multiParentReference) ColumnNodes_() (nodes []query.Node) {
	nodes = n.multiParentTable.ColumnNodes_()
	for _, cn := range nodes {
		query.NodeSetParent(cn, n)
	}
	return
}

func (n *multiParentReverse) ColumnNodes_() (nodes []query.Node) {
	nodes = n.multiParentTable.ColumnNodes_()
	for _, cn := range nodes {
		query.NodeSetParent(cn, n)
	}
	return
}

func (n *multiParentReference) NodeType_() query.NodeType {
	return query.ReferenceNodeType
}

func (n *multiParentReverse) NodeType_() query.NodeType {
	return query.ReverseNodeType
}

// PrimaryKey returns a node that points to the primary key column.
func (n multiParentTable) PrimaryKey() *query.ColumnNode {
	return n.ID()
}

// PrimaryKey returns a node that points to the primary key column.
func (n *multiParentReference) PrimaryKey() *query.ColumnNode {
	return n.ID()
}

// PrimaryKey returns a node that points to the primary key column.
func (n *multiParentReverse) PrimaryKey() *query.ColumnNode {
	return n.ID()
}

func (n multiParentTable) ID() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:    "id",
		Identifier:   "ID",
		ReceiverType: query.ColTypeString,
		IsPrimaryKey: true,
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n *multiParentReference) ID() *query.ColumnNode {
	cn := n.multiParentTable.ID()
	query.NodeSetParent(cn, n)
	return cn
}

func (n *multiParentReverse) ID() *query.ColumnNode {
	cn := n.multiParentTable.ID()
	query.NodeSetParent(cn, n)
	return cn
}

func (n multiParentTable) Name() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:    "name",
		Identifier:   "Name",
		ReceiverType: query.ColTypeString,
		IsPrimaryKey: false,
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n *multiParentReference) Name() *query.ColumnNode {
	cn := n.multiParentTable.Name()
	query.NodeSetParent(cn, n)
	return cn
}

func (n *multiParentReverse) Name() *query.ColumnNode {
	cn := n.multiParentTable.Name()
	query.NodeSetParent(cn, n)
	return cn
}

func (n multiParentTable) Parent1ID() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:    "parent_1_id",
		Identifier:   "Parent1ID",
		ReceiverType: query.ColTypeString,
		IsPrimaryKey: false,
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n *multiParentReference) Parent1ID() *query.ColumnNode {
	cn := n.multiParentTable.Parent1ID()
	query.NodeSetParent(cn, n)
	return cn
}

func (n *multiParentReverse) Parent1ID() *query.ColumnNode {
	cn := n.multiParentTable.Parent1ID()
	query.NodeSetParent(cn, n)
	return cn
}

// Parent1 represents the link to a MultiParent object.
func (n multiParentTable) Parent1() MultiParentNode {
	cn := &multiParentReference{
		ReferenceNode: query.ReferenceNode{
			ColumnQueryName: "parent_1_id",
			Identifier:      "Parent1",
			ReceiverType:    query.ColTypeString,
		},
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n *multiParentReference) Parent1() MultiParentNode {
	cn := n.multiParentTable.Parent1().(*multiParentReference)
	query.NodeSetParent(cn, n)
	return cn
}

func (n *multiParentReverse) Parent1() MultiParentNode {
	cn := n.multiParentTable.Parent1().(*multiParentReference)
	query.NodeSetParent(cn, n)
	return cn
}

func (n multiParentTable) Parent2ID() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:    "parent_2_id",
		Identifier:   "Parent2ID",
		ReceiverType: query.ColTypeString,
		IsPrimaryKey: false,
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n *multiParentReference) Parent2ID() *query.ColumnNode {
	cn := n.multiParentTable.Parent2ID()
	query.NodeSetParent(cn, n)
	return cn
}

func (n *multiParentReverse) Parent2ID() *query.ColumnNode {
	cn := n.multiParentTable.Parent2ID()
	query.NodeSetParent(cn, n)
	return cn
}

// Parent2 represents the link to a MultiParent object.
func (n multiParentTable) Parent2() MultiParentNode {
	cn := &multiParentReference{
		ReferenceNode: query.ReferenceNode{
			ColumnQueryName: "parent_2_id",
			Identifier:      "Parent2",
			ReceiverType:    query.ColTypeString,
		},
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n *multiParentReference) Parent2() MultiParentNode {
	cn := n.multiParentTable.Parent2().(*multiParentReference)
	query.NodeSetParent(cn, n)
	return cn
}

func (n *multiParentReverse) Parent2() MultiParentNode {
	cn := n.multiParentTable.Parent2().(*multiParentReference)
	query.NodeSetParent(cn, n)
	return cn
}

// Parent1MultiParents represents the many-to-one relationship formed by the reverse reference from the
// parent_1_id column in the multi_parent table.
func (n multiParentTable) Parent1MultiParents() MultiParentNode {
	cn := &multiParentReverse{
		ReverseNode: query.ReverseNode{
			ColumnQueryName: "parent_1_id",
			Identifier:      "Parent1MultiParents",
			ReceiverType:    query.ColTypeString,
			IsUnique:        false,
		},
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n *multiParentReference) Parent1MultiParents() MultiParentNode {
	cn := n.multiParentTable.Parent1MultiParents().(*multiParentReverse)
	query.NodeSetParent(cn, n)
	return cn
}

func (n *multiParentReverse) Parent1MultiParents() MultiParentNode {
	cn := n.multiParentTable.Parent1MultiParents().(*multiParentReverse)
	query.NodeSetParent(cn, n)
	return cn
}

// Parent2MultiParents represents the many-to-one relationship formed by the reverse reference from the
// parent_2_id column in the multi_parent table.
func (n multiParentTable) Parent2MultiParents() MultiParentNode {
	cn := &multiParentReverse{
		ReverseNode: query.ReverseNode{
			ColumnQueryName: "parent_2_id",
			Identifier:      "Parent2MultiParents",
			ReceiverType:    query.ColTypeString,
			IsUnique:        false,
		},
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n *multiParentReference) Parent2MultiParents() MultiParentNode {
	cn := n.multiParentTable.Parent2MultiParents().(*multiParentReverse)
	query.NodeSetParent(cn, n)
	return cn
}

func (n *multiParentReverse) Parent2MultiParents() MultiParentNode {
	cn := n.multiParentTable.Parent2MultiParents().(*multiParentReverse)
	query.NodeSetParent(cn, n)
	return cn
}

func (n multiParentTable) GobEncode() (data []byte, err error) {
	return
}

func (n *multiParentTable) GobDecode(data []byte) (err error) {
	return
}

func (n *multiParentReference) GobEncode() (data []byte, err error) {
	var buf bytes.Buffer
	e := gob.NewEncoder(&buf)

	if err = e.Encode(&n.ReferenceNode); err != nil {
		panic(err)
	}
	data = buf.Bytes()
	return
}

func (n *multiParentReference) GobDecode(data []byte) (err error) {
	buf := bytes.NewBuffer(data)
	dec := gob.NewDecoder(buf)

	if err = dec.Decode(&n.ReferenceNode); err != nil {
		panic(err)
	}
	return
}

func (n *multiParentReverse) GobEncode() (data []byte, err error) {
	var buf bytes.Buffer
	e := gob.NewEncoder(&buf)

	if err = e.Encode(&n.ReverseNode); err != nil {
		panic(err)
	}
	data = buf.Bytes()
	return
}

func (n *multiParentReverse) GobDecode(data []byte) (err error) {
	buf := bytes.NewBuffer(data)
	dec := gob.NewDecoder(buf)

	if err = dec.Decode(&n.ReverseNode); err != nil {
		panic(err)
	}
	return
}

func init() {
	gob.Register(new(multiParentTable))
	gob.Register(new(multiParentReference))
	gob.Register(new(multiParentReverse))
}
