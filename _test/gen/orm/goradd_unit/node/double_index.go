// Code generated by goradd-orm. DO NOT EDIT.

package node

import (
	"encoding/gob"

	"github.com/goradd/orm/pkg/query"
	"github.com/goradd/orm/pkg/schema"
)

// DoubleIndexNode is the builder interface to the DoubleIndex nodes.
type DoubleIndexNode interface {
	query.TableNodeI
	// PrimaryKey returns the column node representing the primary key of the table
	PrimaryKey() *query.ColumnNode
	// ID represents the id column in the database.
	ID() *query.ColumnNode
	// FieldInt represents the field_int column in the database.
	FieldInt() *query.ColumnNode
	// FieldString represents the field_string column in the database.
	FieldString() *query.ColumnNode
	// Field2Int represents the field2_int column in the database.
	Field2Int() *query.ColumnNode
	// Field2String represents the field2_string column in the database.
	Field2String() *query.ColumnNode
}

// doubleIndexTable represents the double_index table in a query. It uses a builder pattern to chain
// together other tables and columns to form a node chain in a query.
//
// To use the doubleIndexTable, call [DoubleIndex()] to start a reference chain when querying the double_index table.
type doubleIndexTable struct {
}

// DoubleIndex returns a table node that starts a node chain that begins with the double_index table.
func DoubleIndex() DoubleIndexNode {
	return doubleIndexTable{}
}

// TableName_ returns the query name of the table the node is associated with.
func (n doubleIndexTable) TableName_() string {
	return "double_index"
}

// NodeType_ returns the query.NodeType of the node.
func (n doubleIndexTable) NodeType_() query.NodeType {
	return query.TableNodeType
}

// DatabaseKey_ returns the database key of the database the node is associated with.
func (n doubleIndexTable) DatabaseKey_() string {
	return "goradd_unit"
}

// ColumnNodes_ returns a list of all the column nodes in this node.
func (n doubleIndexTable) ColumnNodes_() (nodes []query.Node) {
	nodes = append(nodes, n.ID())
	nodes = append(nodes, n.FieldInt())
	nodes = append(nodes, n.FieldString())
	nodes = append(nodes, n.Field2Int())
	nodes = append(nodes, n.Field2String())
	return nodes
}

// PrimaryKeys returns the primary key column nodes to satisfy the PrimaryKeyer interface.
func (n doubleIndexTable) PrimaryKeys() []*query.ColumnNode {
	return []*query.ColumnNode{
		n.ID(),
	}
}

// PrimaryKey returns the primary key column node.
func (n doubleIndexTable) PrimaryKey() *query.ColumnNode {
	return n.ID()
}

func (n doubleIndexTable) ID() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:     "id",
		Identifier:    "Value",
		ReceiverType:  query.ColTypeInteger,
		SchemaType:    schema.ColTypeInt,
		SchemaSubType: schema.ColSubTypeNone,
		IsPrimaryKey:  true,
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n doubleIndexTable) FieldInt() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:     "field_int",
		Identifier:    "FieldInt",
		ReceiverType:  query.ColTypeInteger,
		SchemaType:    schema.ColTypeInt,
		SchemaSubType: schema.ColSubTypeNone,
		IsPrimaryKey:  false,
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n doubleIndexTable) FieldString() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:     "field_string",
		Identifier:    "FieldString",
		ReceiverType:  query.ColTypeString,
		SchemaType:    schema.ColTypeString,
		SchemaSubType: schema.ColSubTypeNone,
		IsPrimaryKey:  false,
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n doubleIndexTable) Field2Int() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:     "field2_int",
		Identifier:    "Field2Int",
		ReceiverType:  query.ColTypeInteger,
		SchemaType:    schema.ColTypeInt,
		SchemaSubType: schema.ColSubTypeNone,
		IsPrimaryKey:  false,
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n doubleIndexTable) Field2String() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:     "field2_string",
		Identifier:    "Field2String",
		ReceiverType:  query.ColTypeString,
		SchemaType:    schema.ColTypeString,
		SchemaSubType: schema.ColSubTypeNone,
		IsPrimaryKey:  false,
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n doubleIndexTable) GobEncode() (data []byte, err error) {
	return
}

func (n *doubleIndexTable) GobDecode(data []byte) (err error) {
	return
}

func init() {
	gob.Register(new(doubleIndexTable))
}
