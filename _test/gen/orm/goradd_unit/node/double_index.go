// Code generated by goradd-orm. DO NOT EDIT.

package node

import (
	"bytes"
	"encoding/gob"

	"github.com/goradd/orm/pkg/query"
)

// DoubleIndexI is the builder interface to the DoubleIndex nodes.
type DoubleIndexNodeI interface {
	query.NodeI
	PrimaryKeyNode() *query.ColumnNode

	ID() *query.ColumnNode
	FieldInt() *query.ColumnNode
	FieldString() *query.ColumnNode
}

// DoubleIndexNode represents the double_index table in a query. It uses a builder pattern to chain
// together other tables and columns to form a node in a query.
//
// To use the DoubleIndexNode, call [DoubleIndex] to start a reference chain when querying the double_index table.
type DoubleIndexNode struct {
	// ReferenceNodeI is an internal object that represents the capabilities of the node. Since it is embedded, all
	// of its functions are exported and are callable along with the doubleIndexNode functions here.
	query.ReferenceNodeI
}

// DoubleIndex returns a table node that starts a node chain that begins with the double_index table.
func DoubleIndex() DoubleIndexNodeI {
	n := DoubleIndexNode{
		query.NewTableNode("goradd_unit", "double_index", "DoubleIndex"),
	}
	query.SetParentNode(&n, nil)
	return &n
}

// SelectNodes_ is used internally by the framework to return the list of all the column nodes.
// doc: hide
func (n *DoubleIndexNode) SelectNodes_() (nodes []*query.ColumnNode) {
	nodes = append(nodes, n.ID())
	nodes = append(nodes, n.FieldInt())
	nodes = append(nodes, n.FieldString())
	return nodes
}

// EmbeddedNode is used internally by the framework to return the embedded Reference node.
// doc: hide
func (n *DoubleIndexNode) EmbeddedNode_() query.NodeI {
	return n.ReferenceNodeI
}

// Copy_ is used internally by the framework to deep copy the node.
// doc: hide
func (n *DoubleIndexNode) Copy_() query.NodeI {
	return &DoubleIndexNode{query.CopyNode(n.ReferenceNodeI)}
}

// PrimaryKeyNode returns a node that points to the primary key column, if
// a single primary key exists in the table.
func (n *DoubleIndexNode) PrimaryKeyNode() *query.ColumnNode {
	return n.ID()
}

// ID represents the id column in the database.
func (n *DoubleIndexNode) ID() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd_unit",
		"double_index",
		"id",
		"ID",
		query.ColTypeInteger,
		true,
	)
	query.SetParentNode(cn, n)
	return cn
}

// FieldInt represents the field_int column in the database.
func (n *DoubleIndexNode) FieldInt() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd_unit",
		"double_index",
		"field_int",
		"FieldInt",
		query.ColTypeInteger,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

// FieldString represents the field_string column in the database.
func (n *DoubleIndexNode) FieldString() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd_unit",
		"double_index",
		"field_string",
		"FieldString",
		query.ColTypeString,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

type doubleIndexNodeEncoded struct {
	RefNode query.ReferenceNodeI
}

// GobEncode makes the node serializable.
// doc:hide
func (n *DoubleIndexNode) GobEncode() (data []byte, err error) {
	var buf bytes.Buffer
	e := gob.NewEncoder(&buf)

	s := doubleIndexNodeEncoded{
		RefNode: n.ReferenceNodeI,
	}

	if err = e.Encode(s); err != nil {
		panic(err)
	}
	data = buf.Bytes()
	return
}

// GobDecode makes the node deserializable.
// doc: hide
func (n *DoubleIndexNode) GobDecode(data []byte) (err error) {
	buf := bytes.NewBuffer(data)
	dec := gob.NewDecoder(buf)

	var s doubleIndexNodeEncoded
	if err = dec.Decode(&s); err != nil {
		panic(err)
	}
	n.ReferenceNodeI = s.RefNode
	query.SetParentNode(n, query.ParentNode(n)) // Reinforce types
	return
}
func init() {
	gob.Register(&DoubleIndexNode{})
}
