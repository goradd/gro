// Code generated by goradd-orm. DO NOT EDIT.

package node

import (
	"bytes"
	"encoding/gob"

	"github.com/goradd/orm/pkg/query"
)

// DoubleIndexNode is the builder interface to the DoubleIndex nodes.
type DoubleIndexNode interface {
	query.Node
	PrimaryKeyNode() *query.ColumnNode
	// ID represents the id column in the database.
	ID() *query.ColumnNode
	// FieldInt represents the field_int column in the database.
	FieldInt() *query.ColumnNode
	// FieldString represents the field_string column in the database.
	FieldString() *query.ColumnNode
}

// DoubleIndexExpander is the builder interface for DoubleIndices that are expandable.
type DoubleIndexExpander interface {
	DoubleIndexNode
	query.Expander
}

// doubleIndexTable represents the double_index table in a query. It uses a builder pattern to chain
// together other tables and columns to form a node chain in a query.
//
// To use the doubleIndexTable, call [DoubleIndex()] to start a reference chain when querying the double_index table.
type doubleIndexTable struct {
}

type doubleIndexReverse struct {
	doubleIndexTable
	query.ReverseNode
}

// DoubleIndex returns a table node that starts a node chain that begins with the double_index table.
func DoubleIndex() DoubleIndexNode {
	return doubleIndexTable{}
}

// TableName_ returns the query name of the table the node is associated with.
func (n doubleIndexTable) TableName_() string {
	return "double_index"
}

// NodeType_ returns the query.NodeType of the node.
func (n doubleIndexTable) NodeType_() query.NodeType {
	return query.TableNodeType
}

// DatabaseKey_ returns the database key of the database the node is associated with.
func (n doubleIndexTable) DatabaseKey_() string {
	return "goradd_unit"
}

// ColumnNodes_ is used internally by the framework to return the list of all the column nodes.
func (n doubleIndexTable) ColumnNodes_() (nodes []query.Node) {
	nodes = append(nodes, n.ID())
	nodes = append(nodes, n.FieldInt())
	nodes = append(nodes, n.FieldString())
	return nodes
}

func (n *doubleIndexReverse) ColumnNodes_() (nodes []query.Node) {
	nodes = n.doubleIndexTable.ColumnNodes_()
	for _, cn := range nodes {
		query.NodeSetParent(cn, n)
	}
	return
}

// IsEnum_ is used internally by the framework to determine if the current table is an enumerated type.
func (n doubleIndexTable) IsEnum_() bool {
	return false
}

func (n *doubleIndexReverse) NodeType_() query.NodeType {
	return query.ReverseNodeType
}

// PrimaryKeyNode returns a node that points to the primary key column.
func (n doubleIndexTable) PrimaryKeyNode() *query.ColumnNode {
	return n.ID()
}

func (n *doubleIndexReverse) PrimaryKeyNode() *query.ColumnNode {
	return n.ID()
}

func (n doubleIndexTable) ID() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:    "id",
		Identifier:   "ID",
		ReceiverType: query.ColTypeInteger,
		IsPrimaryKey: true,
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n *doubleIndexReverse) ID() *query.ColumnNode {
	cn := n.doubleIndexTable.ID()
	query.NodeSetParent(cn, n)
	return cn
}

func (n doubleIndexTable) FieldInt() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:    "field_int",
		Identifier:   "FieldInt",
		ReceiverType: query.ColTypeInteger,
		IsPrimaryKey: false,
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n *doubleIndexReverse) FieldInt() *query.ColumnNode {
	cn := n.doubleIndexTable.FieldInt()
	query.NodeSetParent(cn, n)
	return cn
}

func (n doubleIndexTable) FieldString() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:    "field_string",
		Identifier:   "FieldString",
		ReceiverType: query.ColTypeString,
		IsPrimaryKey: false,
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n *doubleIndexReverse) FieldString() *query.ColumnNode {
	cn := n.doubleIndexTable.FieldString()
	query.NodeSetParent(cn, n)
	return cn
}

func (n doubleIndexTable) GobEncode() (data []byte, err error) {
	return
}

func (n *doubleIndexTable) GobDecode(data []byte) (err error) {
	return
}

func (n *doubleIndexReverse) GobEncode() (data []byte, err error) {
	var buf bytes.Buffer
	e := gob.NewEncoder(&buf)

	if err = e.Encode(&n.ReverseNode); err != nil {
		panic(err)
	}
	data = buf.Bytes()
	return
}

func (n *doubleIndexReverse) GobDecode(data []byte) (err error) {
	buf := bytes.NewBuffer(data)
	dec := gob.NewDecoder(buf)

	if err = dec.Decode(&n.ReverseNode); err != nil {
		panic(err)
	}
	return
}

func init() {
	gob.Register(new(doubleIndexTable))
	gob.Register(new(doubleIndexReverse))
}
