// Code generated by goradd-orm. DO NOT EDIT.

package node

import (
	"encoding/gob"

	"github.com/goradd/orm/pkg/query"
)

// DoubleIndexNodeI is the builder interface to the DoubleIndex nodes.
type DoubleIndexNodeI interface {
	query.NodeI
	PrimaryKeyNode() *query.ColumnNode
	// ID represents the id column in the database.
	ID() *query.ColumnNode
	// FieldInt represents the field_int column in the database.
	FieldInt() *query.ColumnNode
	// FieldString represents the field_string column in the database.
	FieldString() *query.ColumnNode
}

// DoubleIndexExpander is the builder interface for DoubleIndices that are expandable.
type DoubleIndexExpander interface {
	DoubleIndexNodeI
	// Expand causes the node to produce separate rows with individual items, rather than a single row with an array of items.
	Expand() DoubleIndexNodeI
}

// doubleIndexTable represents the double_index table in a query. It uses a builder pattern to chain
// together other tables and columns to form a node chain in a query.
//
// To use the doubleIndexTable, call [DoubleIndex()] to start a reference chain when querying the double_index table.
type doubleIndexTable struct {
}

type doubleIndexReverse struct {
	doubleIndexTable
	reverseColumn *query.ColumnNode
}

// DoubleIndex returns a table node that starts a node chain that begins with the double_index table.
func DoubleIndex() DoubleIndexNodeI {
	// Table nodes are empty structs, and do not have pointer receivers,
	var n doubleIndexTable
	return n
}

// SelectNodes_ is used internally by the framework to return the list of all the column nodes.
func (n doubleIndexTable) SelectNodes_() (nodes []*query.ColumnNode) {
	nodes = append(nodes, n.ID())
	nodes = append(nodes, n.FieldInt())
	nodes = append(nodes, n.FieldString())
	return nodes
}

// Copy_ is used internally by the framework to deep copy the node.
func (n doubleIndexTable) Copy_() query.NodeI {
	// Table nodes are empty so just offer a copy
	var t doubleIndexTable
	return t
}

// PrimaryKeyNode returns a node that points to the primary key column, if
// a single primary key exists in the table.
func (n doubleIndexTable) PrimaryKeyNode() *query.ColumnNode {
	return n.ID()
}

// ID represents the id column in the database.
func (n doubleIndexTable) ID() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd_unit",
		"double_index",
		"id",
		"ID",
		query.ColTypeInteger,
		true,
	)
	query.SetParentNode(cn, n)
	return cn
}

// FieldInt represents the field_int column in the database.
func (n doubleIndexTable) FieldInt() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd_unit",
		"double_index",
		"field_int",
		"FieldInt",
		query.ColTypeInteger,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

// FieldString represents the field_string column in the database.
func (n doubleIndexTable) FieldString() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd_unit",
		"double_index",
		"field_string",
		"FieldString",
		query.ColTypeString,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

func init() {
	gob.Register(new(doubleIndexTable))
	gob.Register(new(doubleIndexReverse))
}
