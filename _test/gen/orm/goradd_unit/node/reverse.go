// Code generated by goradd-orm. DO NOT EDIT.

package node

import (
	"encoding/gob"

	"github.com/goradd/orm/pkg/query"
)

// ReverseNodeI is the builder interface to the Reverse nodes.
type ReverseNodeI interface {
	query.NodeI
	PrimaryKeyNode() *query.ColumnNode
	// ID represents the id column in the database.
	ID() *query.ColumnNode
	// Name represents the name column in the database.
	Name() *query.ColumnNode
	// ForwardCascades represents the ForwardCascade reference to ForwardCascade objects.
	ForwardCascades() ForwardCascadeExpander
	// ForwardCascadeUnique represents the ForwardCascadeUnique reference to a ForwardCascadeUnique object.
	ForwardCascadeUnique() ForwardCascadeUniqueNodeI
	// ForwardNulls represents the ForwardNull reference to ForwardNull objects.
	ForwardNulls() ForwardNullExpander
	// ForwardNullUnique represents the ForwardNullUnique reference to a ForwardNullUnique object.
	ForwardNullUnique() ForwardNullUniqueNodeI
	// ForwardRestricts represents the ForwardRestrict reference to ForwardRestrict objects.
	ForwardRestricts() ForwardRestrictExpander
	// ForwardRestrictUnique represents the ForwardRestrictUnique reference to a ForwardRestrictUnique object.
	ForwardRestrictUnique() ForwardRestrictUniqueNodeI
}

// ReverseExpander is the builder interface for Reverses that are expandable.
type ReverseExpander interface {
	ReverseNodeI
	// Expand causes the node to produce separate rows with individual items, rather than a single row with an array of items.
	Expand() ReverseNodeI
}

// reverseTable represents the reverse table in a query. It uses a builder pattern to chain
// together other tables and columns to form a node chain in a query.
//
// To use the reverseTable, call [Reverse()] to start a reference chain when querying the reverse table.
type reverseTable struct {
}

type reverseReference struct {
	reverseTable
	referenceColumn *query.ColumnNode
}

type reverseReverse struct {
	reverseTable
	reverseColumn *query.ColumnNode
}

// Reverse returns a table node that starts a node chain that begins with the reverse table.
func Reverse() ReverseNodeI {
	// Table nodes are empty structs, and do not have pointer receivers,
	var n reverseTable
	return n
}

// SelectNodes_ is used internally by the framework to return the list of all the column nodes.
func (n reverseTable) SelectNodes_() (nodes []*query.ColumnNode) {
	nodes = append(nodes, n.ID())
	nodes = append(nodes, n.Name())
	return nodes
}

// Copy_ is used internally by the framework to deep copy the node.
func (n reverseTable) Copy_() query.NodeI {
	// Table nodes are empty so just offer a copy
	var t reverseTable
	return t
}

// PrimaryKeyNode returns a node that points to the primary key column, if
// a single primary key exists in the table.
func (n reverseTable) PrimaryKeyNode() *query.ColumnNode {
	return n.ID()
}

// ID represents the id column in the database.
func (n reverseTable) ID() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd_unit",
		"reverse",
		"id",
		"ID",
		query.ColTypeString,
		true,
	)
	query.SetParentNode(cn, n)
	return cn
}

// Name represents the name column in the database.
func (n reverseTable) Name() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd_unit",
		"reverse",
		"name",
		"Name",
		query.ColTypeString,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

// ForwardCascades represents the many-to-one relationship formed by the reverse reference from the
// reverse_id column in the forward_cascade table.
func (n reverseTable) ForwardCascades() ForwardCascadeNodeI {
	cn := &ForwardCascadeNode{
		query.NewReverseReferenceNode(
			"goradd_unit",
			"reverse",
			"id",
			"ForwardCascades",
			"forward_cascade",
			"reverse_id",
			true,
		),
	}
	query.SetParentNode(cn, n)
	return cn
}

// ForwardCascadeUnique represents the one-to-one relationship formed by the reverse reference from the
// reverse_id column in the forward_cascade_unique table.
func (n reverseTable) ForwardCascadeUnique() ForwardCascadeUniqueNodeI {

	cn := &ForwardCascadeUniqueNode{
		query.NewReverseReferenceNode(
			"goradd_unit",
			"reverse",
			"id",
			"ForwardCascadeUnique",
			"forward_cascade_unique",
			"reverse_id",
			false,
		),
	}
	query.SetParentNode(cn, n)
	return cn

}

// ForwardNulls represents the many-to-one relationship formed by the reverse reference from the
// reverse_id column in the forward_null table.
func (n reverseTable) ForwardNulls() ForwardNullNodeI {
	cn := &ForwardNullNode{
		query.NewReverseReferenceNode(
			"goradd_unit",
			"reverse",
			"id",
			"ForwardNulls",
			"forward_null",
			"reverse_id",
			true,
		),
	}
	query.SetParentNode(cn, n)
	return cn
}

// ForwardNullUnique represents the one-to-one relationship formed by the reverse reference from the
// reverse_id column in the forward_null_unique table.
func (n reverseTable) ForwardNullUnique() ForwardNullUniqueNodeI {

	cn := &ForwardNullUniqueNode{
		query.NewReverseReferenceNode(
			"goradd_unit",
			"reverse",
			"id",
			"ForwardNullUnique",
			"forward_null_unique",
			"reverse_id",
			false,
		),
	}
	query.SetParentNode(cn, n)
	return cn

}

// ForwardRestricts represents the many-to-one relationship formed by the reverse reference from the
// reverse_id column in the forward_restrict table.
func (n reverseTable) ForwardRestricts() ForwardRestrictNodeI {
	cn := &ForwardRestrictNode{
		query.NewReverseReferenceNode(
			"goradd_unit",
			"reverse",
			"id",
			"ForwardRestricts",
			"forward_restrict",
			"reverse_id",
			true,
		),
	}
	query.SetParentNode(cn, n)
	return cn
}

// ForwardRestrictUnique represents the one-to-one relationship formed by the reverse reference from the
// reverse_id column in the forward_restrict_unique table.
func (n reverseTable) ForwardRestrictUnique() ForwardRestrictUniqueNodeI {

	cn := &ForwardRestrictUniqueNode{
		query.NewReverseReferenceNode(
			"goradd_unit",
			"reverse",
			"id",
			"ForwardRestrictUnique",
			"forward_restrict_unique",
			"reverse_id",
			false,
		),
	}
	query.SetParentNode(cn, n)
	return cn

}

func init() {
	gob.Register(new(reverseTable))
	gob.Register(new(reverseReference))
	gob.Register(new(reverseReverse))
}
