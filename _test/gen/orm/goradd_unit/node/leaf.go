// Code generated by goradd-orm. DO NOT EDIT.

package node

import (
	"bytes"
	"encoding/gob"

	"github.com/goradd/orm/pkg/query"
)

// LeafNode is the builder interface to the Leaf nodes.
type LeafNode interface {
	query.TableNodeI
	PrimaryKey() *query.ColumnNode
	// ID represents the id column in the database.
	ID() *query.ColumnNode
	// Name represents the name column in the database.
	Name() *query.ColumnNode
	// OptionalLeafRoots represents the OptionalLeafRoots reference to Root objects.
	OptionalLeafRoots() RootNode
	// RequiredLeafRoots represents the RequiredLeafRoots reference to Root objects.
	RequiredLeafRoots() RootNode
	// OptionalLeafUniqueRoot represents the OptionalLeafUniqueRoot reference to a Root object.
	OptionalLeafUniqueRoot() RootNode
	// RequiredLeafUniqueRoot represents the RequiredLeafUniqueRoot reference to a Root object.
	RequiredLeafUniqueRoot() RootNode
}

// leafTable represents the leaf table in a query. It uses a builder pattern to chain
// together other tables and columns to form a node chain in a query.
//
// To use the leafTable, call [Leaf()] to start a reference chain when querying the leaf table.
type leafTable struct {
}

type leafReference struct {
	leafTable
	query.ReferenceNode
}

// Leaf returns a table node that starts a node chain that begins with the leaf table.
func Leaf() LeafNode {
	return leafTable{}
}

// TableName_ returns the query name of the table the node is associated with.
func (n leafTable) TableName_() string {
	return "leaf"
}

// NodeType_ returns the query.NodeType of the node.
func (n leafTable) NodeType_() query.NodeType {
	return query.TableNodeType
}

// DatabaseKey_ returns the database key of the database the node is associated with.
func (n leafTable) DatabaseKey_() string {
	return "goradd_unit"
}

// ColumnNodes_ returns a list of all the column nodes in this node.
func (n leafTable) ColumnNodes_() (nodes []query.Node) {
	nodes = append(nodes, n.ID())
	nodes = append(nodes, n.Name())
	return nodes
}

func (n *leafReference) ColumnNodes_() (nodes []query.Node) {
	nodes = n.leafTable.ColumnNodes_()
	for _, cn := range nodes {
		query.NodeSetParent(cn, n)
	}
	return
}

func (n *leafReference) NodeType_() query.NodeType {
	return query.ReferenceNodeType
}

// PrimaryKey returns a node that points to the primary key column.
func (n leafTable) PrimaryKey() *query.ColumnNode {
	return n.ID()
}

// PrimaryKey returns a node that points to the primary key column.
func (n *leafReference) PrimaryKey() *query.ColumnNode {
	return n.ID()
}

func (n leafTable) ID() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:    "id",
		Identifier:   "ID",
		ReceiverType: query.ColTypeString,
		IsPrimaryKey: true,
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n *leafReference) ID() *query.ColumnNode {
	cn := n.leafTable.ID()
	query.NodeSetParent(cn, n)
	return cn
}

func (n leafTable) Name() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:    "name",
		Identifier:   "Name",
		ReceiverType: query.ColTypeString,
		IsPrimaryKey: false,
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n *leafReference) Name() *query.ColumnNode {
	cn := n.leafTable.Name()
	query.NodeSetParent(cn, n)
	return cn
}

// OptionalLeafRoots represents the many-to-one relationship formed by the reverse reference from the
// optional_leaf_id column in the root table.
func (n leafTable) OptionalLeafRoots() RootNode {
	cn := &rootReverse{
		ReverseNode: query.ReverseNode{
			ColumnQueryName: "optional_leaf_id",
			Identifier:      "OptionalLeafRoots",
			ReceiverType:    query.ColTypeString,
			IsUnique:        false,
		},
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n *leafReference) OptionalLeafRoots() RootNode {
	cn := n.leafTable.OptionalLeafRoots().(*rootReverse)
	query.NodeSetParent(cn, n)
	return cn
}

// RequiredLeafRoots represents the many-to-one relationship formed by the reverse reference from the
// required_leaf_id column in the root table.
func (n leafTable) RequiredLeafRoots() RootNode {
	cn := &rootReverse{
		ReverseNode: query.ReverseNode{
			ColumnQueryName: "required_leaf_id",
			Identifier:      "RequiredLeafRoots",
			ReceiverType:    query.ColTypeString,
			IsUnique:        false,
		},
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n *leafReference) RequiredLeafRoots() RootNode {
	cn := n.leafTable.RequiredLeafRoots().(*rootReverse)
	query.NodeSetParent(cn, n)
	return cn
}

// OptionalLeafUniqueRoot represents the one-to-one relationship formed by the reverse reference from the
// optional_leaf_unique_id column in the root table.
func (n leafTable) OptionalLeafUniqueRoot() RootNode {
	cn := &rootReverse{
		ReverseNode: query.ReverseNode{
			ColumnQueryName: "optional_leaf_unique_id",
			Identifier:      "OptionalLeafUniqueRoot",
			ReceiverType:    query.ColTypeString,
			IsUnique:        true,
		},
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n *leafReference) OptionalLeafUniqueRoot() RootNode {
	cn := n.leafTable.OptionalLeafUniqueRoot().(*rootReverse)
	query.NodeSetParent(cn, n)
	return cn
}

// RequiredLeafUniqueRoot represents the one-to-one relationship formed by the reverse reference from the
// required_leaf_unique_id column in the root table.
func (n leafTable) RequiredLeafUniqueRoot() RootNode {
	cn := &rootReverse{
		ReverseNode: query.ReverseNode{
			ColumnQueryName: "required_leaf_unique_id",
			Identifier:      "RequiredLeafUniqueRoot",
			ReceiverType:    query.ColTypeString,
			IsUnique:        true,
		},
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n *leafReference) RequiredLeafUniqueRoot() RootNode {
	cn := n.leafTable.RequiredLeafUniqueRoot().(*rootReverse)
	query.NodeSetParent(cn, n)
	return cn
}

func (n leafTable) GobEncode() (data []byte, err error) {
	return
}

func (n *leafTable) GobDecode(data []byte) (err error) {
	return
}

func (n *leafReference) GobEncode() (data []byte, err error) {
	var buf bytes.Buffer
	e := gob.NewEncoder(&buf)

	if err = e.Encode(&n.ReferenceNode); err != nil {
		panic(err)
	}
	data = buf.Bytes()
	return
}

func (n *leafReference) GobDecode(data []byte) (err error) {
	buf := bytes.NewBuffer(data)
	dec := gob.NewDecoder(buf)

	if err = dec.Decode(&n.ReferenceNode); err != nil {
		panic(err)
	}
	return
}

func init() {
	gob.Register(new(leafTable))
	gob.Register(new(leafReference))
}
