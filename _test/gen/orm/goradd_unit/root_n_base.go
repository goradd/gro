// Code generated by goradd-orm. DO NOT EDIT.

package goradd_unit

import (
	"bytes"
	"context"
	"encoding/gob"
	"encoding/json"
	"fmt"
	"unicode/utf8"

	"github.com/goradd/anyutil"
	"github.com/goradd/maps"
	"github.com/goradd/orm/_test/gen/orm/goradd_unit/node"
	"github.com/goradd/orm/pkg/broadcast"
	"github.com/goradd/orm/pkg/db"
	"github.com/goradd/orm/pkg/op"
	"github.com/goradd/orm/pkg/query"
)

// RootNBase is embedded in a RootN object and provides the ORM access to the database.
// The member variables of the structure are private and should not normally be accessed by the RootN embedder.
// Instead, use the accessor functions.
type rootNBase struct {
	id           string
	idIsLoaded   bool
	idIsDirty    bool
	name         string
	nameIsLoaded bool
	nameIsDirty  bool

	// Reverse references
	leafNs        maps.SliceMap[string, *LeafN] // Objects in the order they were queried
	leafNsIsDirty bool

	// Custom aliases, if specified
	_aliases map[string]any

	// Indicates whether this is a new object, or one loaded from the database. Used by Save to know whether to Insert or Update.
	_restored bool

	_originalPK string
}

// IDs used to access the RootN object fields by name using the Get function.
// doc: type=RootN
const (
	RootNIDField    = `id`
	RootNNameField  = `name`
	RootNLeafNField = `leafNs`
)

const RootNIDMaxLength = 32    // The number of runes the column can hold
const RootNNameMaxLength = 100 // The number of runes the column can hold

// Initialize or re-initialize a RootN database object to default values.
// The primary key will get a temporary unique value which will be replaced when the object is saved.
func (o *rootNBase) Initialize() {
	o.id = db.TemporaryPrimaryKey()
	o.idIsLoaded = true
	o.idIsDirty = false

	o.name = ""
	o.nameIsLoaded = false
	o.nameIsDirty = false

	// Reverse reference objects.

	o.leafNs.Clear()
	o.leafNsIsDirty = false

	o._aliases = nil
	o._restored = false
}

// Copy copies most fields to a new RootN object.
// Forward reference ids will be copied, but reverse and many-many references will not.
// Attached objects will not be included in the copy.
// Automatically generated fields will not be included in the copy.
// The primary key field will not be copied, since it is normally auto-generated.
// Call Save() on the new object to save it into the database.
// Copy might panic if any fields in the database were set to a size larger than the
// maximum size through a process that accessed the database outside of the ORM.
func (o *rootNBase) Copy() (newObject *RootN) {
	newObject = NewRootN()
	if o.idIsLoaded {
		newObject.SetID(o.id)
	}
	if o.nameIsLoaded {
		newObject.SetName(o.name)
	}
	return
}

// OriginalPrimaryKey returns the value of the primary key that was originally loaded into the object when it was
// read from the database.
func (o *rootNBase) OriginalPrimaryKey() string {
	return o._originalPK
}

// PrimaryKey returns the value of the primary key of the record.
func (o *rootNBase) PrimaryKey() string {
	if o._restored && !o.idIsLoaded {
		panic("ID was not selected in the last query and has not been set, and so PrimaryKey is not valid")
	}
	return o.id
}

// SetPrimaryKey sets the value of the primary key in the object, to be saved later in the database using the Save() function.
// Normally you will not need to call this function, since the primary key value is automatically generated by the
// database driver. Exceptions might include importing data to a new database, or correcting primary key conflicts when
// merging data.
// You cannot change a primary key for a record that has been written to the database. While SQL databases will
// allow it, NoSql databases will not. Save a copy and delete this one instead.
func (o *rootNBase) SetPrimaryKey(v string) {
	if o._restored {
		panic("error: Do not change a primary key for a record that has been saved. Instead, save a copy and delete the original.")
	}
	if utf8.RuneCountInString(v) > RootNIDMaxLength {
		panic("attempted to set RootN.ID to a value larger than its maximum length in runes")
	}
	o.idIsLoaded = true
	o.idIsDirty = true
	o.id = v
}

// ID returns the value of ID.
func (o *rootNBase) ID() string {
	return o.PrimaryKey()
}

// IDIsLoaded returns true if the value was loaded from the database or has been set.
func (o *rootNBase) IDIsLoaded() bool {
	return o.idIsLoaded
}

// SetID sets the value of ID in the object, to be saved later in the database using the Save() function.
// Normally you will not need to call this function, since the ID value is automatically generated by the
// database driver. Exceptions might include importing data to a new database, or correcting primary key conflicts when
// merging data.
// You cannot change a primary key for a record that has been written to the database. While SQL databases will
// allow it, NoSql databases will not. Save a copy and delete this one instead.
func (o *rootNBase) SetID(v string) {
	o.SetPrimaryKey(v)
}

// Name returns the value of Name.
func (o *rootNBase) Name() string {
	if o._restored && !o.nameIsLoaded {
		panic("Name was not selected in the last query and has not been set, and so is not valid")
	}
	return o.name
}

// NameIsLoaded returns true if the value was loaded from the database or has been set.
func (o *rootNBase) NameIsLoaded() bool {
	return o.nameIsLoaded
}

// SetName sets the value of Name in the object, to be saved later in the database using the Save() function.
func (o *rootNBase) SetName(v string) {
	if utf8.RuneCountInString(v) > RootNNameMaxLength {
		panic("attempted to set RootN.Name to a value larger than its maximum length in runes")
	}
	if o._restored &&
		o.nameIsLoaded && // if it was not selected, then make sure it gets set, since our end comparison won't be valid
		o.name == v {
		// no change
		return
	}

	o.nameIsLoaded = true
	o.name = v
	o.nameIsDirty = true
}

// GetAlias returns the value for the Alias node aliasKey that was returned in the most
// recent query.
func (o *rootNBase) GetAlias(aliasKey string) query.AliasValue {
	if a, ok := o._aliases[aliasKey]; ok {
		return query.NewAliasValue(a)
	} else {
		panic("Alias " + aliasKey + " not found.")
	}
}

// IsNew returns true if the object will create a new record when saved.
func (o *rootNBase) IsNew() bool {
	return !o._restored
}

// LeafN returns a single LeafN object by primary key, if one was loaded.
// Otherwise, it will return nil. It will not return LeafN objects that are not saved.
func (o *rootNBase) LeafN(pk string) *LeafN {
	v := o.leafNs.Get(pk)
	return v
}

// LeafNs returns a slice of LeafN objects if loaded.
func (o *rootNBase) LeafNs() []*LeafN {
	return o.leafNs.Values()
}

// LoadLeafNs loads a new slice of LeafN objects and returns it.
func (o *rootNBase) LoadLeafNs(ctx context.Context) ([]*LeafN, error) {
	if o.IsNew() {
		return nil, nil
	}
	for obj := range o.leafNs.ValuesIter() {
		if obj.IsDirty() {
			panic("You cannot load over items that have changed but have not been saved.")
		}
	}

	objs, err := LoadLeafNsByRootNID(ctx, o.PrimaryKey())
	if err != nil {
		return nil, err
	}
	o.leafNs.Clear()

	for _, obj := range objs {
		pk := obj.ID()
		o.leafNs.Set(pk, obj)
	}

	if o.leafNs.Len() == 0 {
		return nil, nil
	}
	return o.leafNs.Values(), nil
}

// CountLeafNs does a database query and returns the number of LeafN
// objects currently in the database that have a RootNID value that equals this objects primary key.
func (o *rootNBase) CountLeafNs(ctx context.Context) (int, error) {
	return CountLeafNsByRootNID(ctx, o.PrimaryKey())
}

// SetLeafNs associates the objects in objs with this RootN by setting
// their RootNID values to this object's primary key.
// WARNING! If it has LeafNs already associated with it that will not be associated after a save,
// Save will panic. Be sure to delete those LeafNs or otherwise fix those pointers before calling save.
func (o *rootNBase) SetLeafNs(objs ...*LeafN) {
	for obj := range o.leafNs.ValuesIter() {
		if obj.IsDirty() {
			panic("You cannot overwrite items that have changed but have not been saved.")
		}
	}

	o.leafNs.Clear()
	for _, obj := range objs {
		pk := obj.ID()
		o.leafNs.Set(pk, obj)
	}
	o.leafNsIsDirty = true
}

// LoadRootN returns a RootN from the database.
// selectNodes lets you provide nodes for selecting specific fields or additional fields from related tables.
// See [RootNsBuilder.Select] for more info.
func LoadRootN(ctx context.Context, pk string, selectNodes ...query.Node) (*RootN, error) {
	return queryRootNs(ctx).
		Where(op.Equal(node.RootN().ID(), pk.id)).
		Select(selectNodes...).
		Get()
}

// HasRootN returns true if a RootN with the given primary key exists in the database.
// doc: type=RootN
func HasRootN(ctx context.Context, pk string) (bool, error) {
	v, err := queryRootNs(ctx).
		Where(op.Equal(node.RootN().ID(), pk.id)).
		Count()
	return v > 0, err
}

// The RootNBuilder uses a builder pattern to create a query on the database.
// Create a RootNBuilder by calling QueryRootNs, which will select all
// the RootN object in the database. Then filter and arrange those objects
// by calling Where, Select, etc.
// End a query by calling either Load, LoadI, LoadCursor, Get, or Count.
// A RootNBuilder stores the context it will use to perform the query, and thus is
// meant to be a short-lived object. You should not save it for later use.
type RootNBuilder struct {
	builder *query.Builder
	ctx     context.Context
}

func newRootNBuilder(ctx context.Context) *RootNBuilder {
	b := RootNBuilder{
		builder: query.NewBuilder(node.RootN()),
		ctx:     ctx,
	}
	return &b
}

// Load terminates the query builder, performs the query, and returns a slice of RootN objects.
// If there are any errors, nil is returned and the specific error is stored in the context.
// If no results come back from the query, it will return a non-nil empty slice.
func (b *RootNBuilder) Load() (rootNs []*RootN, err error) {
	b.builder.Command = query.BuilderCommandLoad
	database := db.GetDatabase("goradd_unit")
	var results any

	ctx := b.ctx
	results, err = database.BuilderQuery(ctx, b.builder)
	if results == nil || err != nil {
		return
	}
	for _, item := range results.([]map[string]any) {
		o := new(RootN)
		o.unpack(item, o)
		rootNs = append(rootNs, o)
	}
	return
}

// LoadI terminates the query builder, performs the query, and returns a slice of interfaces.
// This can then satisfy a variety of interfaces that load arrays of objects, including KeyLabeler.
// If there are any errors, nil is returned and the specific error is stored in the context.
// If no results come back from the query, it will return a non-nil empty slice.
func (b *RootNBuilder) LoadI() (rootNs []query.OrmObj, err error) {
	b.builder.Command = query.BuilderCommandLoad
	database := db.GetDatabase("goradd_unit")
	var results any

	ctx := b.ctx
	results, err = database.BuilderQuery(ctx, b.builder)
	if results == nil || err != nil {
		return
	}
	for _, item := range results.([]map[string]any) {
		o := new(RootN)
		o.unpack(item, o)
		rootNs = append(rootNs, o)
	}
	return
}

// LoadCursor terminates the query builder, performs the query, and returns a cursor to the query.
//
// A query cursor is useful for dealing with large amounts of query results. However, there are some
// limitations to its use. When working with SQL databases, you cannot use a cursor while querying
// many-to-many or reverse relationships that will create an array of values.
//
// Call Next() on the returned cursor object to step through the results. Make sure you call Close
// on the cursor object when you are done. You should use
//
//	defer cursor.Close()
//
// to make sure the cursor gets closed.
func (b *RootNBuilder) LoadCursor() (rootNsCursor, error) {
	b.builder.Command = query.BuilderCommandLoadCursor
	database := db.GetDatabase("goradd_unit")
	result, err := database.BuilderQuery(b.ctx, b.builder)
	var cursor query.CursorI
	if result != nil {
		cursor = result.(query.CursorI)
	}
	return rootNsCursor{cursor}, err
}

type rootNsCursor struct {
	query.CursorI
}

// Next returns the current RootN object and moves the cursor to the next one.
//
// If there are no more records, it returns nil.
func (c rootNsCursor) Next() (*RootN, error) {
	if c.CursorI == nil {
		return nil, nil
	}

	row, err := c.CursorI.Next()
	if row == nil || err != nil {
		return nil, err
	}
	o := new(RootN)
	o.unpack(row, o)
	return o, nil
}

// Get is a convenience method to return only the first item found in a query.
// The entire query is performed, so you should generally use this only if you know
// you are selecting on one or very few items.
// If an error occurs, or no results are found, a nil is returned.
func (b *RootNBuilder) Get() (*RootN, error) {
	results, err := b.Load()
	if err != nil || len(results) == 0 {
		return nil, err
	}
	return results[0], nil
}

// Where adds a condition to filter what gets selected.
// Calling Where multiple times will AND the conditions together.
func (b *RootNBuilder) Where(c query.Node) *RootNBuilder {
	b.builder.Where(c)
	return b
}

// OrderBy specifies how the resulting data should be sorted.
// By default, the given nodes are sorted in ascending order.
// Add Descending() to the node to specify that it should be sorted in descending order.
func (b *RootNBuilder) OrderBy(nodes ...query.Sorter) *RootNBuilder {
	b.builder.OrderBy(nodes...)
	return b
}

// Limit will return a subset of the data, limited to the offset and number of rows specified.
// For large data sets and specific types of queries, this can be slow, because it will perform
// the entire query before computing the limit.
// You cannot limit a query that has embedded arrays.
func (b *RootNBuilder) Limit(maxRowCount int, offset int) *RootNBuilder {
	b.builder.Limit(maxRowCount, offset)
	return b
}

// Select specifies what specific columns will be loaded with data.
// By default, all the columns of the root_n table will be queried and loaded.
// If nodes contains columns from the root_n table, that will limit the columns queried and loaded to only those columns.
// If related tables are specified, then all the columns from those tables are queried, selected and joined to the result.
// If columns in related tables are specified, then only those columns will be queried and loaded.
// Depending on the query, additional columns may automatically be added to the query. In particular, primary key columns
// will be added in most situations. The exception to this would be in distinct queries, group by queries, or subqueries.
func (b *RootNBuilder) Select(nodes ...query.Node) *RootNBuilder {
	b.builder.Select(nodes...)
	return b
}

// Calculation adds operation as an aliased value onto base.
// After the query, you can read the data by passing alias to GetAlias on the returned object.
func (b *RootNBuilder) Calculation(base query.TableNodeI, alias string, operation query.OperationNodeI) *RootNBuilder {
	b.builder.Calculation(base, alias, operation)
	return b
}

// Distinct removes duplicates from the results of the query.
// Adding a Select() is usually required.
func (b *RootNBuilder) Distinct() *RootNBuilder {
	b.builder.Distinct()
	return b
}

// GroupBy controls how results are grouped when using aggregate functions with Calculation.
func (b *RootNBuilder) GroupBy(nodes ...query.Node) *RootNBuilder {
	b.builder.GroupBy(nodes...)
	return b
}

// Having does additional filtering on the results of the query after the query is performed.
func (b *RootNBuilder) Having(node query.Node) *RootNBuilder {
	b.builder.Having(node)
	return b
}

// Count terminates a query and returns just the number of items in the result.
// If you have Select or Calculation columns in the query, it will count NULL results as well.
// To not count NULL values, use Where in the builder with a NotNull operation.
// To count distinct combinations of items, call Distinct() on the builder.
func (b *RootNBuilder) Count() (int, error) {
	b.builder.Command = query.BuilderCommandCount
	database := db.GetDatabase("goradd_unit")

	ctx := b.ctx
	results, err := database.BuilderQuery(ctx, b.builder)
	if results == nil || err != nil {
		return 0, err
	}
	return results.(int), nil
}

// CountRootNs returns the total number of items in the root_n table.
func CountRootNs(ctx context.Context) (int, error) {
	return QueryRootNs(ctx).Count()
}

// unpack recursively transforms data coming from the database into ORM objects.
func (o *rootNBase) unpack(m map[string]interface{}, objThis *RootN) {

	if v, ok := m["id"]; ok && v != nil {
		if o.id, ok = v.(string); ok {
			o.idIsLoaded = true
			o.idIsDirty = false
			o._originalPK = o.id
		} else {
			panic("Wrong type found for id.")
		}
	} else {
		o.idIsLoaded = false
		o.id = ""
		o.idIsDirty = false
	}

	if v, ok := m["name"]; ok && v != nil {
		if o.name, ok = v.(string); ok {
			o.nameIsLoaded = true
			o.nameIsDirty = false
		} else {
			panic("Wrong type found for name.")
		}
	} else {
		o.nameIsLoaded = false
		o.name = ""
		o.nameIsDirty = false
	}

	// Reverse references

	if v, ok := m["LeafN"]; ok {
		switch v2 := v.(type) {
		case []map[string]any: // array expansion
			o.leafNs.Clear()
			o.leafNsIsDirty = false
			for _, v3 := range v2 {
				obj := new(LeafN)
				obj.unpack(v3, obj)
				o.leafNs.Set(obj.PrimaryKey(), obj)
			}
		default:
			panic("Wrong type found for leafNs object.")
		}
	} else {
		o.leafNs.Clear()
		o.leafNsIsDirty = false
	}

	if v, ok := m["aliases_"]; ok {
		o._aliases = v.(map[string]any)
	}

	o._restored = true

}

// save will update or insert the object, depending on the state of the object.
func (o *rootNBase) save(ctx context.Context) error {
	if o._restored {
		return o.update(ctx)
	} else {
		return o.insert(ctx)
	}
}

// update will update the values in the database, saving any changed values.
// If the table has auto-generated values, those will be updated automatically.
func (o *rootNBase) update(ctx context.Context) error {
	if !o._restored {
		panic("cannot update a record that was not originally read from the database.")
	}
	if !o.IsDirty() {
		return nil // nothing to save
	}

	var modifiedFields map[string]interface{}

	d := Database()
	err := db.WithTransaction(ctx, d, func(ctx context.Context) error {

		modifiedFields = getRootNUpdateFields(o)
		if len(modifiedFields) != 0 {
			var err2 error

			_, err2 = d.Update(ctx, "root_n", "id", o._originalPK, modifiedFields, "", 0)
			if err2 != nil {
				return err2
			}
		}

		if o.leafNsIsDirty {
			// relation connection changed

			// Since the other side of the relationship cannot be null, there cannot be objects that will be detached.
			if oldObjs, err := QueryLeafNs(ctx).
				Where(op.Equal(node.LeafN().RootNID(), o.ID())).
				Select(node.LeafN().RootNID()).
				Load(); err != nil {
				return err
			} else {
				for _, obj := range oldObjs {
					if !o.leafNs.Has(obj.PrimaryKey()) {
						err = obj.Delete(ctx) // old object is not in group of new objects, so delete it since it has a non-null reference to o.
						if err != nil {
							return err
						}
					}
				}
				keys := o.leafNs.Keys() // Make a copy of the keys, since we will change the slicemap while iterating
				for i, k := range keys {
					obj := o.leafNs.Get(k)
					if obj == nil {
						// object was deleted during save?
						continue
					}
					obj.SetRootNID(o.PrimaryKey())
					obj.rootNIDIsDirty = true // force a change in case data is stale
					if err = obj.Save(ctx); err != nil {
						return err
					}
					if obj.PrimaryKey() != k {
						// update slice map key without changing order
						o.leafNs.Delete(k)
						o.leafNs.SetAt(i, obj.PrimaryKey(), obj)
					}
				}
			}

		} else {

			// save related objects in case internal values changed
			for obj := range o.leafNs.ValuesIter() {
				if err := obj.Save(ctx); err != nil {
					return err
				}
			}
		}

		return nil
	}) // transaction
	if err != nil {
		return err
	}

	o.resetDirtyStatus()
	if len(modifiedFields) != 0 {
		broadcast.Update(ctx, "goradd_unit", "root_n", o._originalPK, anyutil.SortedKeys(modifiedFields)...)
	}

	return nil
}

// insert will insert the object into the database. Related items will be saved.
func (o *rootNBase) insert(ctx context.Context) (err error) {
	var insertFields map[string]interface{}
	d := Database()
	err = db.WithTransaction(ctx, d, func(context.Context) error {
		if !o.nameIsLoaded {
			panic("a value for Name is required, and there is no default value. Call SetName() before inserting the record.")
		}
		insertFields = getRootNInsertFields(o)
		var newPK string
		newPK, err = d.Insert(ctx, "root_n", "id", insertFields)
		if err != nil {
			return err
		}
		o.id = newPK
		o._originalPK = newPK
		o.idIsLoaded = true

		if o.leafNs.Len() > 0 {
			keys := o.leafNs.Keys()
			for i, k := range keys {
				obj := o.leafNs.Get(k)
				obj.SetRootNID(newPK)
				if err = obj.Save(ctx); err != nil {
					return err
				}
				if obj.PrimaryKey() != k {
					o.leafNs.Delete(k)
					o.leafNs.SetAt(i, obj.PrimaryKey(), obj)
				}
			}
		}

		return nil

	}) // transaction

	if err != nil {
		return
	}

	o.resetDirtyStatus()
	o._restored = true
	broadcast.Insert(ctx, "goradd_unit", "root_n", o.PrimaryKey())
	return
}

// getUpdateFields returns the database columns that will be sent to the update process.
// This will include timestamp fields only if some other column has changed.
func (o *rootNBase) getUpdateFields() (fields map[string]interface{}) {
	fields = map[string]interface{}{}
	if o.idIsDirty {
		fields["id"] = o.id
	}
	if o.nameIsDirty {
		fields["name"] = o.name
	}
	return
}

// getInsertFields returns the fields that will be specified in an insert operation.
// Optional fields that have not been set and have no default will be returned as nil.
// NoSql databases should interpret this as no value. Sql databases should interpret this as
// explicitly setting a NULL value, which would override any database specific default value.
// Auto-generated fields will be returned with their generated values, except AutoPK fields, which are generated by the
// database driver and updated after the insert.
func (o *rootNBase) getInsertFields() (fields map[string]interface{}) {
	fields = map[string]interface{}{}
	if o.idIsDirty {
		fields["id"] = o.id
	}

	fields["name"] = o.name
	return
}

// Delete deletes the record from the database.
//
// Associated LeafN will also be deleted since their RootN fields are not nullable.
func (o *rootNBase) Delete(ctx context.Context) (err error) {
	if o == nil {
		return // allow deleting of a nil object to be a noop
	}
	if !o._restored {
		panic("Cannot delete a record that has no primary key value.")
	}
	d := Database()
	err = db.WithTransaction(ctx, d, func(context.Context) error {

		{
			objs, err := QueryLeafNs(ctx).
				Where(op.Equal(node.LeafN().RootN(), o.id)).
				Load()
			if err != nil {
				return err
			}
			for _, obj := range objs {
				if err = obj.Delete(ctx); err != nil {
					return err
				}
			}
			o.leafNs.Clear()
		}

		return d.Delete(ctx, "root_n", "id", o.id, "", 0)
	})

	if err != nil {
		return err
	}
	broadcast.Delete(ctx, "goradd_unit", "root_n", fmt.Sprint(o.id))
	return
}

// deleteRootN deletes the RootN with primary key pk from the database
// and handles associated records.
func deleteRootN(ctx context.Context, pk string) error {
	d := db.GetDatabase("goradd_unit")
	err := db.WithTransaction(ctx, d, func(context.Context) error {
		if obj, err := LoadRootN(ctx,
			pk,
			node.RootN().ID(),
		); err != nil {
			return err
		} else if obj == nil {
			return db.NewRecordNotFoundError("root_n", pk)
		} else {
			if err := obj.Delete(ctx); err != nil {
				return err
			}
		}
		return nil
	})
	return err
}

// resetDirtyStatus resets the dirty status of every field in the object.
func (o *rootNBase) resetDirtyStatus() {
	o.idIsDirty = false
	o.nameIsDirty = false
	o.leafNsIsDirty = false

}

// IsDirty returns true if the object has been changed since it was read from the database or created.
func (o *rootNBase) IsDirty() (dirty bool) {
	dirty = o.idIsDirty ||
		o.nameIsDirty

	dirty = dirty ||
		o.leafNsIsDirty

	for obj := range o.leafNs.ValuesIter() {
		dirty = dirty || obj.IsDirty()
	}

	return
}

// Get returns the value of a field in the object based on the field's name.
// It will also get related objects if they are loaded.
// Invalid fields and objects are returned as nil.
// Get can be used to retrieve a value by using the Identifier of a node.
func (o *rootNBase) Get(key string) interface{} {
	switch key {
	case "id":
		if !o.idIsLoaded {
			return nil
		}
		return o.id
	case "name":
		if !o.nameIsLoaded {
			return nil
		}
		return o.name
	case "leafNs":
		return o.leafNs.Values()
	}
	return nil
}

// MarshalBinary serializes the object into a buffer that is deserializable using UnmarshalBinary.
// It should be used for transmitting database objects over the wire, or for temporary storage. It does not send
// a version number, so if the data format changes, its up to you to invalidate the old stored objects.
// The framework uses this to serialize the object when it is stored in a control.
func (o *rootNBase) MarshalBinary() ([]byte, error) {
	buf := new(bytes.Buffer)
	enc := gob.NewEncoder(buf)
	if err := o.encodeTo(enc); err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

func (o *rootNBase) encodeTo(enc db.Encoder) error {

	if err := enc.Encode(o.id); err != nil {
		return fmt.Errorf("error encoding RootN.id: %w", err)
	}
	if err := enc.Encode(o.idIsLoaded); err != nil {
		return fmt.Errorf("error encoding RootN.idIsLoaded: %w", err)
	}
	if err := enc.Encode(o.idIsDirty); err != nil {
		return fmt.Errorf("error encoding RootN.idIsDirty: %w", err)
	}

	if err := enc.Encode(o.name); err != nil {
		return fmt.Errorf("error encoding RootN.name: %w", err)
	}
	if err := enc.Encode(o.nameIsLoaded); err != nil {
		return fmt.Errorf("error encoding RootN.nameIsLoaded: %w", err)
	}
	if err := enc.Encode(o.nameIsDirty); err != nil {
		return fmt.Errorf("error encoding RootN.nameIsDirty: %w", err)
	}

	if err := enc.Encode(&o.leafNs); err != nil {
		return err
	}

	if err := enc.Encode(o.leafNsIsDirty); err != nil {
		return err
	}

	if o._aliases == nil {
		if err := enc.Encode(false); err != nil {
			return err
		}
	} else {
		if err := enc.Encode(true); err != nil {
			return err
		}
		if err := enc.Encode(o._aliases); err != nil {
			return fmt.Errorf("error encoding RootN._aliases: %w", err)
		}
	}

	if err := enc.Encode(o._restored); err != nil {
		return fmt.Errorf("error encoding RootN._restored: %w", err)
	}
	if err := enc.Encode(o._originalPK); err != nil {
		return fmt.Errorf("error encoding RootN._originalPK: %w", err)
	}
	return nil
}

// UnmarshalBinary converts a structure that was created with MarshalBinary into a RootN object.
func (o *rootNBase) UnmarshalBinary(data []byte) (err error) {
	buf := bytes.NewReader(data)
	dec := gob.NewDecoder(buf)
	return o.decodeFrom(dec)
}

func (o *rootNBase) decodeFrom(dec db.Decoder) (err error) {
	var isPtr bool

	_ = isPtr
	if err = dec.Decode(&o.id); err != nil {
		return fmt.Errorf("error decoding RootN.id: %w", err)
	}
	if err = dec.Decode(&o.idIsLoaded); err != nil {
		return fmt.Errorf("error decoding RootN.idIsLoaded: %w", err)
	}
	if err = dec.Decode(&o.idIsDirty); err != nil {
		return fmt.Errorf("error decoding RootN.idIsDirty: %w", err)
	}

	if err = dec.Decode(&o.name); err != nil {
		return fmt.Errorf("error decoding RootN.name: %w", err)
	}
	if err = dec.Decode(&o.nameIsLoaded); err != nil {
		return fmt.Errorf("error decoding RootN.nameIsLoaded: %w", err)
	}
	if err = dec.Decode(&o.nameIsDirty); err != nil {
		return fmt.Errorf("error decoding RootN.nameIsDirty: %w", err)
	}

	if err = dec.Decode(&o.leafNs); err != nil {
		return fmt.Errorf("error decoding RootN.leafNs: %w", err)
	}

	if err = dec.Decode(&o.leafNsIsDirty); err != nil {
		return fmt.Errorf("error decoding RootN.leafNsIsDirty: %w", err)
	}

	if err = dec.Decode(&isPtr); err != nil {
		return fmt.Errorf("error decoding RootN._aliases isPtr: %w", err)
	}
	if isPtr {
		if err = dec.Decode(&o._aliases); err != nil {
			return fmt.Errorf("error decoding RootN._aliases: %w", err)
		}
	}

	if err = dec.Decode(&o._restored); err != nil {
		return fmt.Errorf("error decoding RootN._restored: %w", err)
	}
	if err = dec.Decode(&o._originalPK); err != nil {
		return fmt.Errorf("error decoding RootN._originalPK: %w", err)
	}
	return
}

// MarshalJSON serializes the object into a JSON object.
// Only valid data will be serialized, meaning, you can control what gets serialized by using Select to
// select only the fields you want when you query for the object. Another way to control the output
// is to call MarshalStringMap, modify the map, then encode the map.
func (o *rootNBase) MarshalJSON() (data []byte, err error) {
	v := o.MarshalStringMap()
	return json.Marshal(v)
}

// MarshalStringMap serializes the object into a string map of interfaces.
// Only valid data will be serialized, meaning, you can control what gets serialized by using Select to
// select only the fields you want when you query for the object. The keys are the same as the json keys.
func (o *rootNBase) MarshalStringMap() map[string]interface{} {
	v := make(map[string]interface{})

	if o.idIsLoaded {
		v["id"] = o.id
	}

	if o.nameIsLoaded {
		v["name"] = o.name
	}

	if o.leafNs.Len() != 0 {
		var vals []map[string]interface{}
		for obj := range o.leafNs.ValuesIter() {
			vals = append(vals, obj.MarshalStringMap())
		}
		v["leafNs"] = vals
	}
	for _k, _v := range o._aliases {
		v[_k] = _v
	}
	return v
}

// UnmarshalJSON unmarshalls the given json data into the RootN. The RootN can be a
// newly created object, or one loaded from the database.
//
// After unmarshalling, the object is not  saved. You must call Save to insert it into the database
// or update it.
//
// Unmarshalling of sub-objects, as in objects linked via foreign keys, is not currently supported.
//
// The fields it expects are:
//
//	"id" - string
//	"name" - string
func (o *rootNBase) UnmarshalJSON(data []byte) (err error) {
	var v map[string]interface{}
	if len(data) == 0 {
		return
	}
	d := json.NewDecoder(bytes.NewReader(data))
	d.UseNumber() // use a number to avoid precision errors
	if err = d.Decode(&v); err != nil {
		return err
	}
	return o.UnmarshalStringMap(v)
}

// UnmarshalStringMap will load the values from the stringmap into the object.
//
// Override this in RootN to modify the json before sending it here.
func (o *rootNBase) UnmarshalStringMap(m map[string]interface{}) (err error) {
	for k, v := range m {
		switch k {

		case "id":
			{
				if v == nil {
					return fmt.Errorf("field %s cannot be null", k)
				}

				if s, ok := v.(string); !ok {
					return fmt.Errorf("json field %s must be a string", k)
				} else {
					o.SetID(s)
				}
			}
		case "name":
			{
				if v == nil {
					return fmt.Errorf("field %s cannot be null", k)
				}

				if s, ok := v.(string); !ok {
					return fmt.Errorf("json field %s must be a string", k)
				} else {
					o.SetName(s)
				}
			}
		case "leafNs":
			v2, ok := v.([]any)
			if !ok {
				return fmt.Errorf("json field %s must be an array of maps", k)
			}
			var s []*LeafN
			for _, i2 := range v2 {
				m2, ok := i2.(map[string]any)
				if !ok {
					return fmt.Errorf("json field %s must be an array of maps", k)
				}
				v3 := NewLeafN()
				err = v3.UnmarshalStringMap(m2)
				if err != nil {
					return
				}
				s = append(s, v3)
			}
			o.SetLeafNs(s...)

		}
	}
	return
}
