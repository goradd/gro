// Code generated by goradd-orm. DO NOT EDIT.

package goradd_unit

import (
	"bytes"
	"context"
	"encoding/gob"
	"encoding/json"
	"fmt"
	"unicode/utf8"

	"github.com/goradd/all"
	"github.com/goradd/maps"
	"github.com/goradd/orm/_test/gen/orm/goradd_unit/node"
	"github.com/goradd/orm/pkg/broadcast"
	"github.com/goradd/orm/pkg/db"
	"github.com/goradd/orm/pkg/op"
	"github.com/goradd/orm/pkg/query"
)

// ReverseBase is embedded in a Reverse object and provides the ORM access to the database.
// The member variables of the structure are private and should not normally be accessed by the Reverse embedder.
// Instead, use the accessor functions.
type reverseBase struct {
	id        string
	idIsValid bool
	idIsDirty bool

	name        string
	nameIsValid bool
	nameIsDirty bool

	// Reverse reference objects.

	revForwardCascades        maps.SliceMap[string, *ForwardCascade] // Objects in the order they were queried
	revForwardCascadesPks     []string                               // Primary keys to associate at Save time
	revForwardCascadesIsDirty bool

	revForwardCascadeUnique        *ForwardCascadeUnique
	revForwardCascadeUniqueIsDirty bool
	revForwardCascadeUniquePk      *string // Primary key to associate at Save time

	revForwardNulls        maps.SliceMap[string, *ForwardNull] // Objects in the order they were queried
	revForwardNullsPks     []string                            // Primary keys to associate at Save time
	revForwardNullsIsDirty bool

	revForwardNullUnique        *ForwardNullUnique
	revForwardNullUniqueIsDirty bool
	revForwardNullUniquePk      *string // Primary key to associate at Save time

	revForwardRestricts        maps.SliceMap[string, *ForwardRestrict] // Objects in the order they were queried
	revForwardRestrictsPks     []string                                // Primary keys to associate at Save time
	revForwardRestrictsIsDirty bool

	revForwardRestrictUnique        *ForwardRestrictUnique
	revForwardRestrictUniqueIsDirty bool
	revForwardRestrictUniquePk      *string // Primary key to associate at Save time

	// Custom aliases, if specified
	_aliases map[string]any

	// Indicates whether this is a new object, or one loaded from the database. Used by Save to know whether to Insert or Update.
	_restored bool

	_originalPK string
}

// IDs used to access the Reverse object fields by name using the Get function.
// doc: type=Reverse
const (
	Reverse_ID   = `ID`
	Reverse_Name = `Name`

	ReverseForwardCascades       = `ForwardCascades`
	ReverseForwardCascadeUnique  = `ForwardCascadeUnique`
	ReverseForwardNulls          = `ForwardNulls`
	ReverseForwardNullUnique     = `ForwardNullUnique`
	ReverseForwardRestricts      = `ForwardRestricts`
	ReverseForwardRestrictUnique = `ForwardRestrictUnique`
)

const ReverseNameMaxLength = 100 // The number of runes the column can hold

// Initialize or re-initialize a Reverse database object to default values.
// The primary key will get a temporary negative number which will be replaced when the object is saved.
// Multiple calls to Initialize are not guaranteed to create sequential values for the primary key.
func (o *reverseBase) Initialize() {

	newObjectPkCounter = newObjectPkCounter - 1
	o.id = fmt.Sprintf("%d", newObjectPkCounter)

	o.idIsValid = false
	o.idIsDirty = false

	o.name = ""

	o.nameIsValid = false
	o.nameIsDirty = false

	o._restored = false
}

// PrimaryKey returns the current value of the primary key field.
func (o *reverseBase) PrimaryKey() string {
	return o.id
}

// OriginalPrimaryKey returns the value of the primary key that was originally loaded into the object when it was
// read from the database.
func (o *reverseBase) OriginalPrimaryKey() string {
	return o._originalPK
}

// Copy copies all valid fields to a new Reverse object.
// Forward reference ids will be copied, but reverse and many-many references will not.
// Attached objects will not be included in the copy.
// Call Save() on the new object to save it into the database.
// Copy might panic if any fields in the database were set to a size larger than the
// maximum size through a process that accessed the database outside of the ORM.
func (o *reverseBase) Copy() (newObject *Reverse) {
	newObject = NewReverse()
	if o.nameIsValid {
		newObject.SetName(o.name)
	}
	return
}

// ID returns the loaded value of ID or
// the zero value if not loaded. Call IDIsValid() to determine
// if it is loaded.
func (o *reverseBase) ID() string {
	return fmt.Sprint(o.id)
}

// IDIsValid returns true if the value was loaded from the database or has been set.
func (o *reverseBase) IDIsValid() bool {
	return o._restored && o.idIsValid
}

// Name returns the loaded value of Name.
func (o *reverseBase) Name() string {
	if o._restored && !o.nameIsValid {
		panic("Name was not selected in the last query and has not been set, and so is not valid")
	}
	return o.name
}

// NameIsValid returns true if the value was loaded from the database or has been set.
func (o *reverseBase) NameIsValid() bool {
	return o.nameIsValid
}

// SetName sets the value of Name in the object, to be saved later using the Save() function.
func (o *reverseBase) SetName(name string) {
	o.nameIsValid = true
	if utf8.RuneCountInString(name) > ReverseNameMaxLength {
		panic("attempted to set Reverse.Name to a value larger than its maximum length in runes")
	}
	if o.name != name || !o._restored {
		o.name = name
		o.nameIsDirty = true
	}

}

// GetAlias returns the alias for the given key.
func (o *reverseBase) GetAlias(key string) query.AliasValue {
	if a, ok := o._aliases[key]; ok {
		return query.NewAliasValue(a)
	} else {
		panic("Alias " + key + " not found.")
	}
}

// IsNew returns true if the object will create a new record when saved.
func (o *reverseBase) IsNew() bool {
	return !o._restored
}

// ForwardCascade returns a single ForwardCascade object by primary key, if one was loaded.
// Otherwise, it will return nil. It will not return ForwardCascade objects that are not saved.
func (o *reverseBase) ForwardCascade(pk string) *ForwardCascade {
	v := o.revForwardCascades.Get(pk)
	return v
}

// ForwardCascades returns a slice of ForwardCascade objects if loaded.
func (o *reverseBase) ForwardCascades() []*ForwardCascade {
	return o.revForwardCascades.Values()
}

// LoadForwardCascades loads a new slice of ForwardCascade objects and returns it.
func (o *reverseBase) LoadForwardCascades(ctx context.Context, conditions ...interface{}) []*ForwardCascade {
	if o.IsNew() {
		return nil
	}
	for obj := range o.revForwardCascades.ValuesIter() {
		if obj.IsDirty() {
			panic("You cannot load over items that have changed but have not been saved.")
		}
	}

	qb := queryForwardCascades(ctx)
	var cond *query.OperationNode
	if o.revForwardCascadesPks != nil {
		cond = op.In(node.ForwardCascade().PrimaryKeyNode(), o.revForwardCascadesPks...)
	} else {
		cond = op.Equal(node.ForwardCascade().ReverseID(), o.PrimaryKey())
	}
	if conditions != nil {
		conditions = append(conditions, cond)
		cond = op.And(conditions...)
	}

	objs := qb.Where(cond).Load()
	o.revForwardCascades.Clear()

	for _, obj := range objs {
		pk := obj.ID()
		o.revForwardCascades.Set(pk, obj)
	}
	o.revForwardCascadesPks = nil

	if o.revForwardCascades.Len() == 0 {
		return nil
	}
	return o.revForwardCascades.Values()
}

// CountForwardCascades returns the number of ForwardCascade objects in the database connected to this object.
func (o *reverseBase) CountForwardCascades(ctx context.Context) int {
	return CountForwardCascadeByReverseID(ctx, o.PrimaryKey())
}

// SetForwardCascades associates the objects in objs with the Reverse.
// If it has items already associated with it that will not be associated after a save,
// the foreign keys for those items will be set to null.
// If you did not use a join to query the items in the first place, used a conditional join,
// or joined with an expansion, be particularly careful, since you may be changing items
// that are not currently attached to this Reverse.
func (o *reverseBase) SetForwardCascades(objs []*ForwardCascade) {
	for obj := range o.revForwardCascades.ValuesIter() {
		if obj.IsDirty() {
			panic("You cannot overwrite items that have changed but have not been saved.")
		}
	}

	o.revForwardCascades.Clear()
	for _, obj := range objs {
		pk := obj.ID()
		o.revForwardCascades.Set(pk, obj)
	}
	o.revForwardCascadesPks = nil
	o.revForwardCascadesIsDirty = true
}

// SetForwardCascadesByID associates this Reverse with the ForwardCascades that have primary keys in ids.
// The association is done through the ForwardCascade.ReverseID reverse relationship.
//
// The association is temporary until you call Save().
//
// If there are ForwardCascade objects currently associated with this Reverse that are not included
// in ids, those objects will have their ReverseID value set to null when Save is called.
// If you did not use a join to query the items in the first place, used a conditional join,
// or joined with an expansion, be particularly careful, since you may be inadvertently changing items
// that are not currently loaded in this Reverse object.
func (o *reverseBase) SetForwardCascadesByID(ids []string) {
	for obj := range o.revForwardCascades.ValuesIter() {
		if obj.IsDirty() {
			panic("You cannot overwrite items that have changed but have not been saved.")
		}
	}

	o.revForwardCascades.Clear()
	o.revForwardCascadesPks = ids
	o.revForwardCascadesIsDirty = true
}

// ForwardCascadeUnique returns the connected ForwardCascadeUnique object, if one was loaded.
// Otherwise, it will return nil.
func (o *reverseBase) ForwardCascadeUnique() *ForwardCascadeUnique {
	if o.revForwardCascadeUnique == nil {
		return nil
	}
	return o.revForwardCascadeUnique
}

// LoadForwardCascadeUnique returns the connected ForwardCascadeUnique object, if one was loaded.
// Otherwise, it will load a new one and return it.
func (o *reverseBase) LoadForwardCascadeUnique(ctx context.Context) *ForwardCascadeUnique {
	if o.revForwardCascadeUnique != nil && o.revForwardCascadeUnique.IsDirty() {
		panic("The ForwardCascadeUnique has changed. You must save it first before changing to a different one.")
	}
	if o.revForwardCascadeUnique == nil {
		var pk string
		if o.revForwardCascadeUniquePk != nil {
			pk = *o.revForwardCascadeUniquePk
		} else {
			pk = o.ID()
		}
		o.revForwardCascadeUnique = LoadForwardCascadeUniqueByReverseID(ctx, pk)
	}
	return o.revForwardCascadeUnique
}

// SetForwardCascadeUnique associates obj with this Reverse
// through the reverse relationship in ForwardCascadeUnique.ReverseID.
//
// The association is temporary until you call Save().
// Since this is a unique relationship, if a different ForwardCascadeUnique object is currently pointing to this Reverse,
// that ForwardCascadeUnique's ReverseID value will be set to null when Save is called.
// If you did not use a join to query the attached ForwardCascadeUnique in the first place, used a conditional join,
// or joined with an expansion, be particularly careful, since you may be inadvertently  changing an item
// that is not currently attached to this Reverse.
func (o *reverseBase) SetForwardCascadeUnique(obj *ForwardCascadeUnique) {
	if o.revForwardCascadeUnique != nil && o.revForwardCascadeUnique.IsDirty() {
		panic("The ForwardCascadeUnique has changed. You must save it first before changing to a different one.")
	}
	o.revForwardCascadeUnique = obj
	o.revForwardCascadeUniquePk = nil
	o.revForwardCascadeUniqueIsDirty = true
}

// SetForwardCascadeUniqueByID
// associates this Reverse with the ForwardCascadeUnique
// that has primary key ids.
//
// The association is temporary until you call Save().
// If a ForwardCascadeUnique is loaded, it will be unloaded.
//
// Since this is a unique relationship, if a different ForwardCascadeUnique object is currently pointing to this Reverse,
// that ForwardCascadeUnique's ReverseID value will be set to null when Save is called.
// If you did not use a join to query the attached ForwardCascadeUnique in the first place, used a conditional join,
// or joined with an expansion, be particularly careful, since you may be inadvertently  changing an item
// that is not currently loaded in this Reverse.
func (o *reverseBase) SetForwardCascadeUniqueByID(id string) {
	if o.revForwardCascadeUnique != nil && o.revForwardCascadeUnique.IsDirty() {
		panic("The ReverseID value has changed. You must save it first before changing to a different one.")
	}
	o.revForwardCascadeUnique = nil
	o.revForwardCascadeUniqueIsDirty = true
	o.revForwardCascadeUniquePk = &id
}

// ForwardNull returns a single ForwardNull object by primary key, if one was loaded.
// Otherwise, it will return nil. It will not return ForwardNull objects that are not saved.
func (o *reverseBase) ForwardNull(pk string) *ForwardNull {
	v := o.revForwardNulls.Get(pk)
	return v
}

// ForwardNulls returns a slice of ForwardNull objects if loaded.
func (o *reverseBase) ForwardNulls() []*ForwardNull {
	return o.revForwardNulls.Values()
}

// LoadForwardNulls loads a new slice of ForwardNull objects and returns it.
func (o *reverseBase) LoadForwardNulls(ctx context.Context, conditions ...interface{}) []*ForwardNull {
	if o.IsNew() {
		return nil
	}
	for obj := range o.revForwardNulls.ValuesIter() {
		if obj.IsDirty() {
			panic("You cannot load over items that have changed but have not been saved.")
		}
	}

	qb := queryForwardNulls(ctx)
	var cond *query.OperationNode
	if o.revForwardNullsPks != nil {
		cond = op.In(node.ForwardNull().PrimaryKeyNode(), o.revForwardNullsPks...)
	} else {
		cond = op.Equal(node.ForwardNull().ReverseID(), o.PrimaryKey())
	}
	if conditions != nil {
		conditions = append(conditions, cond)
		cond = op.And(conditions...)
	}

	objs := qb.Where(cond).Load()
	o.revForwardNulls.Clear()

	for _, obj := range objs {
		pk := obj.ID()
		o.revForwardNulls.Set(pk, obj)
	}
	o.revForwardNullsPks = nil

	if o.revForwardNulls.Len() == 0 {
		return nil
	}
	return o.revForwardNulls.Values()
}

// CountForwardNulls returns the number of ForwardNull objects in the database connected to this object.
func (o *reverseBase) CountForwardNulls(ctx context.Context) int {
	return CountForwardNullByReverseID(ctx, o.PrimaryKey())
}

// SetForwardNulls associates the objects in objs with the Reverse.
// If it has items already associated with it that will not be associated after a save,
// the foreign keys for those items will be set to null.
// If you did not use a join to query the items in the first place, used a conditional join,
// or joined with an expansion, be particularly careful, since you may be changing items
// that are not currently attached to this Reverse.
func (o *reverseBase) SetForwardNulls(objs []*ForwardNull) {
	for obj := range o.revForwardNulls.ValuesIter() {
		if obj.IsDirty() {
			panic("You cannot overwrite items that have changed but have not been saved.")
		}
	}

	o.revForwardNulls.Clear()
	for _, obj := range objs {
		pk := obj.ID()
		o.revForwardNulls.Set(pk, obj)
	}
	o.revForwardNullsPks = nil
	o.revForwardNullsIsDirty = true
}

// SetForwardNullsByID associates this Reverse with the ForwardNulls that have primary keys in ids.
// The association is done through the ForwardNull.ReverseID reverse relationship.
//
// The association is temporary until you call Save().
//
// If there are ForwardNull objects currently associated with this Reverse that are not included
// in ids, those objects will have their ReverseID value set to null when Save is called.
// If you did not use a join to query the items in the first place, used a conditional join,
// or joined with an expansion, be particularly careful, since you may be inadvertently changing items
// that are not currently loaded in this Reverse object.
func (o *reverseBase) SetForwardNullsByID(ids []string) {
	for obj := range o.revForwardNulls.ValuesIter() {
		if obj.IsDirty() {
			panic("You cannot overwrite items that have changed but have not been saved.")
		}
	}

	o.revForwardNulls.Clear()
	o.revForwardNullsPks = ids
	o.revForwardNullsIsDirty = true
}

// ForwardNullUnique returns the connected ForwardNullUnique object, if one was loaded.
// Otherwise, it will return nil.
func (o *reverseBase) ForwardNullUnique() *ForwardNullUnique {
	if o.revForwardNullUnique == nil {
		return nil
	}
	return o.revForwardNullUnique
}

// LoadForwardNullUnique returns the connected ForwardNullUnique object, if one was loaded.
// Otherwise, it will load a new one and return it.
func (o *reverseBase) LoadForwardNullUnique(ctx context.Context) *ForwardNullUnique {
	if o.revForwardNullUnique != nil && o.revForwardNullUnique.IsDirty() {
		panic("The ForwardNullUnique has changed. You must save it first before changing to a different one.")
	}
	if o.revForwardNullUnique == nil {
		var pk string
		if o.revForwardNullUniquePk != nil {
			pk = *o.revForwardNullUniquePk
		} else {
			pk = o.ID()
		}
		o.revForwardNullUnique = LoadForwardNullUniqueByReverseID(ctx, pk)
	}
	return o.revForwardNullUnique
}

// SetForwardNullUnique associates obj with this Reverse
// through the reverse relationship in ForwardNullUnique.ReverseID.
//
// The association is temporary until you call Save().
// Since this is a unique relationship, if a different ForwardNullUnique object is currently pointing to this Reverse,
// that ForwardNullUnique's ReverseID value will be set to null when Save is called.
// If you did not use a join to query the attached ForwardNullUnique in the first place, used a conditional join,
// or joined with an expansion, be particularly careful, since you may be inadvertently  changing an item
// that is not currently attached to this Reverse.
func (o *reverseBase) SetForwardNullUnique(obj *ForwardNullUnique) {
	if o.revForwardNullUnique != nil && o.revForwardNullUnique.IsDirty() {
		panic("The ForwardNullUnique has changed. You must save it first before changing to a different one.")
	}
	o.revForwardNullUnique = obj
	o.revForwardNullUniquePk = nil
	o.revForwardNullUniqueIsDirty = true
}

// SetForwardNullUniqueByID
// associates this Reverse with the ForwardNullUnique
// that has primary key ids.
//
// The association is temporary until you call Save().
// If a ForwardNullUnique is loaded, it will be unloaded.
//
// Since this is a unique relationship, if a different ForwardNullUnique object is currently pointing to this Reverse,
// that ForwardNullUnique's ReverseID value will be set to null when Save is called.
// If you did not use a join to query the attached ForwardNullUnique in the first place, used a conditional join,
// or joined with an expansion, be particularly careful, since you may be inadvertently  changing an item
// that is not currently loaded in this Reverse.
func (o *reverseBase) SetForwardNullUniqueByID(id string) {
	if o.revForwardNullUnique != nil && o.revForwardNullUnique.IsDirty() {
		panic("The ReverseID value has changed. You must save it first before changing to a different one.")
	}
	o.revForwardNullUnique = nil
	o.revForwardNullUniqueIsDirty = true
	o.revForwardNullUniquePk = &id
}

// ForwardRestrict returns a single ForwardRestrict object by primary key, if one was loaded.
// Otherwise, it will return nil. It will not return ForwardRestrict objects that are not saved.
func (o *reverseBase) ForwardRestrict(pk string) *ForwardRestrict {
	v := o.revForwardRestricts.Get(pk)
	return v
}

// ForwardRestricts returns a slice of ForwardRestrict objects if loaded.
func (o *reverseBase) ForwardRestricts() []*ForwardRestrict {
	return o.revForwardRestricts.Values()
}

// LoadForwardRestricts loads a new slice of ForwardRestrict objects and returns it.
func (o *reverseBase) LoadForwardRestricts(ctx context.Context, conditions ...interface{}) []*ForwardRestrict {
	if o.IsNew() {
		return nil
	}
	for obj := range o.revForwardRestricts.ValuesIter() {
		if obj.IsDirty() {
			panic("You cannot load over items that have changed but have not been saved.")
		}
	}

	qb := queryForwardRestricts(ctx)
	var cond *query.OperationNode
	if o.revForwardRestrictsPks != nil {
		cond = op.In(node.ForwardRestrict().PrimaryKeyNode(), o.revForwardRestrictsPks...)
	} else {
		cond = op.Equal(node.ForwardRestrict().ReverseID(), o.PrimaryKey())
	}
	if conditions != nil {
		conditions = append(conditions, cond)
		cond = op.And(conditions...)
	}

	objs := qb.Where(cond).Load()
	o.revForwardRestricts.Clear()

	for _, obj := range objs {
		pk := obj.ID()
		o.revForwardRestricts.Set(pk, obj)
	}
	o.revForwardRestrictsPks = nil

	if o.revForwardRestricts.Len() == 0 {
		return nil
	}
	return o.revForwardRestricts.Values()
}

// CountForwardRestricts returns the number of ForwardRestrict objects in the database connected to this object.
func (o *reverseBase) CountForwardRestricts(ctx context.Context) int {
	return CountForwardRestrictByReverseID(ctx, o.PrimaryKey())
}

// SetForwardRestricts associates the objects in objs with the Reverse.
// WARNING! If it has items already associated with it that will not be associated after a save,
// Save will panic. Be sure to delete those items or otherwise fix those pointers before calling save.
func (o *reverseBase) SetForwardRestricts(objs []*ForwardRestrict) {
	for obj := range o.revForwardRestricts.ValuesIter() {
		if obj.IsDirty() {
			panic("You cannot overwrite items that have changed but have not been saved.")
		}
	}

	o.revForwardRestricts.Clear()
	for _, obj := range objs {
		pk := obj.ID()
		o.revForwardRestricts.Set(pk, obj)
	}
	o.revForwardRestrictsPks = nil
	o.revForwardRestrictsIsDirty = true
}

// SetForwardRestrictsByID associates this Reverse with the ForwardRestricts that have primary keys in ids.
// The association is done through the ForwardRestrict.ReverseID reverse relationship.
//
// The association is temporary until you call Save().
//
// WARNING! If it has items already associated with it that will not be associated after a save,
// Save will panic. You should delete those items first.
func (o *reverseBase) SetForwardRestrictsByID(ids []string) {
	for obj := range o.revForwardRestricts.ValuesIter() {
		if obj.IsDirty() {
			panic("You cannot overwrite items that have changed but have not been saved.")
		}
	}

	o.revForwardRestricts.Clear()
	o.revForwardRestrictsPks = ids
	o.revForwardRestrictsIsDirty = true
}

// ForwardRestrictUnique returns the connected ForwardRestrictUnique object, if one was loaded.
// Otherwise, it will return nil.
func (o *reverseBase) ForwardRestrictUnique() *ForwardRestrictUnique {
	if o.revForwardRestrictUnique == nil {
		return nil
	}
	return o.revForwardRestrictUnique
}

// LoadForwardRestrictUnique returns the connected ForwardRestrictUnique object, if one was loaded.
// Otherwise, it will load a new one and return it.
func (o *reverseBase) LoadForwardRestrictUnique(ctx context.Context) *ForwardRestrictUnique {
	if o.revForwardRestrictUnique != nil && o.revForwardRestrictUnique.IsDirty() {
		panic("The ForwardRestrictUnique has changed. You must save it first before changing to a different one.")
	}
	if o.revForwardRestrictUnique == nil {
		var pk string
		if o.revForwardRestrictUniquePk != nil {
			pk = *o.revForwardRestrictUniquePk
		} else {
			pk = o.ID()
		}
		o.revForwardRestrictUnique = LoadForwardRestrictUniqueByReverseID(ctx, pk)
	}
	return o.revForwardRestrictUnique
}

// SetForwardRestrictUnique associates obj with this Reverse
// through the reverse relationship in ForwardRestrictUnique.ReverseID.
//
// The association is temporary until you call Save().
// Since this is a unique relationship, if a different ForwardRestrictUnique object is currently pointing to this Reverse,
// that ForwardRestrictUnique's ReverseID value will be set to null when Save is called.
// If you did not use a join to query the attached ForwardRestrictUnique in the first place, used a conditional join,
// or joined with an expansion, be particularly careful, since you may be inadvertently  changing an item
// that is not currently attached to this Reverse.
func (o *reverseBase) SetForwardRestrictUnique(obj *ForwardRestrictUnique) {
	if o.revForwardRestrictUnique != nil && o.revForwardRestrictUnique.IsDirty() {
		panic("The ForwardRestrictUnique has changed. You must save it first before changing to a different one.")
	}
	o.revForwardRestrictUnique = obj
	o.revForwardRestrictUniquePk = nil
	o.revForwardRestrictUniqueIsDirty = true
}

// SetForwardRestrictUniqueByID
// associates this Reverse with the ForwardRestrictUnique
// that has primary key ids.
//
// The association is temporary until you call Save().
// If a ForwardRestrictUnique is loaded, it will be unloaded.
//
// Since this is a unique relationship, if a different ForwardRestrictUnique object is currently pointing to this Reverse,
// that ForwardRestrictUnique's ReverseID value will be set to null when Save is called.
// If you did not use a join to query the attached ForwardRestrictUnique in the first place, used a conditional join,
// or joined with an expansion, be particularly careful, since you may be inadvertently  changing an item
// that is not currently loaded in this Reverse.
func (o *reverseBase) SetForwardRestrictUniqueByID(id string) {
	if o.revForwardRestrictUnique != nil && o.revForwardRestrictUnique.IsDirty() {
		panic("The ReverseID value has changed. You must save it first before changing to a different one.")
	}
	o.revForwardRestrictUnique = nil
	o.revForwardRestrictUniqueIsDirty = true
	o.revForwardRestrictUniquePk = &id
}

// LoadReverse returns a Reverse from the database.
// joinOrSelectNodes lets you provide nodes for joining to other tables or selecting specific fields.
// Table nodes will be considered Join nodes, and column nodes will be Select nodes.
// See [ReverseBuilder.Join] and [ReversesBuilder.Select] for more info.
func LoadReverse(ctx context.Context, id string, joinOrSelectNodes ...query.Node) *Reverse {
	return queryReverses(ctx).
		Where(op.Equal(node.Reverse().ID(), id)).
		joinOrSelect(joinOrSelectNodes...).
		Get()
}

// HasReverse returns true if a Reverse with the given primaryKey exists in the database.
// doc: type=Reverse
func HasReverse(ctx context.Context, id string) bool {
	return queryReverses(ctx).
		Where(op.Equal(node.Reverse().ID(), id)).
		Count(false) == 1
}

// The ReverseBuilder uses the query.BuilderI interface to build a query.
// All query operations go through this query builder.
// End a query by calling either Load, LoadCursor, Get, Count, or Delete
type ReverseBuilder interface {
	// Join adds node n to the node tree so that its fields will appear in the query.
	// Optionally add conditions to filter what gets included. Multiple conditions are anded.
	Join(n query.Node, conditions ...query.Node) ReverseBuilder

	// Where adds a condition to filter what gets selected.
	// Calling Where multiple times will AND the conditions together.
	Where(c query.Node) ReverseBuilder

	// OrderBy specifies how the resulting data should be sorted.
	// By default, the given nodes are sorted in ascending order.
	// Add Descending() to the node to specify that it should be sorted in descending order.
	OrderBy(nodes ...query.Sorter) ReverseBuilder

	// Limit will return a subset of the data, limited to the offset and number of rows specified.
	// For large data sets and specific types of queries, this can be slow, because it will perform
	// the entire query before computing the limit.
	// You cannot limit a query that has embedded arrays.
	Limit(maxRowCount int, offset int) ReverseBuilder

	// Select optimizes the query to only return the specified fields.
	// Once you put a Select in your query, you must specify all the fields that you will eventually read out.
	// Some fields, like primary keys, are always selected.
	// If you are using a GroupBy, most database drivers will only allow selecting on fields in the GroupBy, and
	// doing otherwise will result in an error.
	Select(nodes ...query.Node) ReverseBuilder

	// Calculation adds a calculation node with an aliased name.
	// After the query, you can read the data using GetAlias() on a returned object.
	Calculation(name string, n query.Aliaser) ReverseBuilder

	// Distinct removes duplicates from the results of the query.
	// Adding a Select() is usually required.
	Distinct() ReverseBuilder

	// GroupBy controls how results are grouped when using aggregate functions with Calculation.
	GroupBy(nodes ...query.Node) ReverseBuilder

	// Having does additional filtering on the results of the query after the query is performed.
	Having(node query.Node) ReverseBuilder

	// Load terminates the query builder, performs the query, and returns a slice of Reverse objects.
	// If there are any errors, nil is returned and the specific error is stored in the context.
	// If no results come back from the query, it will return a non-nil empty slice.
	Load() []*Reverse
	// Load terminates the query builder, performs the query, and returns a slice of interfaces.
	// This can then satisfy a general interface that loads arrays of objects.
	// If there are any errors, nil is returned and the specific error is stored in the context.
	// If no results come back from the query, it will return a non-nil empty slice.
	LoadI() []any

	// LoadCursor terminates the query builder, performs the query, and returns a cursor to the query.
	//
	// A query cursor is useful for dealing with large amounts of query results. However, there are some
	// limitations to its use. When working with SQL databases, you cannot use a cursor while querying
	// many-to-many or reverse relationships that will create an array of values.
	//
	// Call Next() on the returned cursor object to step through the results. Make sure you call Close
	// on the cursor object when you are done. You should use
	//   defer cursor.Close()
	// to make sure the cursor gets closed.
	LoadCursor() reversesCursor

	// Get is a convenience method to return only the first item found in a query.
	// The entire query is performed, so you should generally use this only if you know
	// you are selecting on one or very few items.
	//
	// If an error occurs, or no results are found, a nil is returned.
	// In the case of an error, the error is returned in the context.
	Get() *Reverse

	// Count terminates a query and returns just the number of items selected.
	// distinct wll count the number of distinct items, ignoring duplicates.
	// nodes will select individual fields, and should be accompanied by a GroupBy.
	Count(distinct bool, nodes ...query.Node) int

	// Delete uses the query builder to delete a group of records that match the criteria
	Delete()

	// Subquery terminates the query builder and tags it as a subquery within a larger query.
	// You MUST include what you are selecting by adding Calculation or Select functions on the subquery builder.
	// Generally you would use this as a node to a Calculation function on the surrounding query builder.
	Subquery() *query.SubqueryNode

	joinOrSelect(nodes ...query.Node) ReverseBuilder
}

type reverseQueryBuilder struct {
	builder *query.Builder
}

func newReverseBuilder(ctx context.Context) ReverseBuilder {
	b := reverseQueryBuilder{
		builder: query.NewBuilder(ctx),
	}
	return b.Join(node.Reverse()) // seed builder with the top table
}

// Load terminates the query builder, performs the query, and returns a slice of Reverse objects.
// If there are any errors, nil is returned and the specific error is stored in the context.
// If no results come back from the query, it will return a non-nil empty slice.
func (b *reverseQueryBuilder) Load() (reverses []*Reverse) {
	b.builder.Command = query.BuilderCommandLoad
	database := db.GetDatabase("goradd_unit")
	results := database.BuilderQuery(b.builder.Ctx, b.builder)
	if results == nil {
		return
	}
	for _, item := range results.([]map[string]any) {
		o := new(Reverse)
		o.load(item, o, nil, "")
		reverses = append(reverses, o)
	}
	return
}

// Load terminates the query builder, performs the query, and returns a slice of interfaces.
// This can then satisfy a general interface that loads arrays of objects.
// If there are any errors, nil is returned and the specific error is stored in the context.
// If no results come back from the query, it will return a non-nil empty slice.
func (b *reverseQueryBuilder) LoadI() (reverses []any) {
	b.builder.Command = query.BuilderCommandLoad
	database := db.GetDatabase("goradd_unit")
	results := database.BuilderQuery(b.builder.Ctx, b.builder)
	if results == nil {
		return
	}
	for _, item := range results.([]map[string]any) {
		o := new(Reverse)
		o.load(item, o, nil, "")
		reverses = append(reverses, o)
	}
	return
}

// LoadCursor terminates the query builder, performs the query, and returns a cursor to the query.
//
// A query cursor is useful for dealing with large amounts of query results. However, there are some
// limitations to its use. When working with SQL databases, you cannot use a cursor while querying
// many-to-many or reverse relationships that will create an array of values.
//
// Call Next() on the returned cursor object to step through the results. Make sure you call Close
// on the cursor object when you are done. You should use
//
//	defer cursor.Close()
//
// to make sure the cursor gets closed.
func (b *reverseQueryBuilder) LoadCursor() reversesCursor {
	b.builder.Command = query.BuilderCommandLoadCursor
	database := db.GetDatabase("goradd_unit")
	result := database.BuilderQuery(b.builder.Ctx, b.builder)
	if result == nil {
		return reversesCursor{}
	}
	cursor := result.(query.CursorI)

	return reversesCursor{cursor}
}

type reversesCursor struct {
	query.CursorI
}

// Next returns the current Reverse object and moves the cursor to the next one.
//
// If there are no more records, it returns nil.
func (c reversesCursor) Next() *Reverse {
	if c.CursorI == nil {
		return nil
	}

	row := c.CursorI.Next()
	if row == nil {
		return nil
	}
	o := new(Reverse)
	o.load(row, o, nil, "")
	return o
}

// Get is a convenience method to return only the first item found in a query.
// The entire query is performed, so you should generally use this only if you know
// you are selecting on one or very few items.
//
// If an error occurs, or no results are found, a nil is returned.
// In the case of an error, the error is returned in the context.
func (b *reverseQueryBuilder) Get() *Reverse {
	results := b.Load()
	if results != nil && len(results) > 0 {
		obj := results[0]
		return obj
	} else {
		return nil
	}
}

// Join adds node n to the node tree so that its fields will appear in the query.
// Optionally add conditions to filter what gets included. Multiple conditions are anded.
func (b *reverseQueryBuilder) Join(n query.Node, conditions ...query.Node) ReverseBuilder {
	if query.RootNode(n).TableName_() != "reverse" {
		panic("you can only join a node that is rooted at node.Reverse()")
	}

	var condition query.Node
	if len(conditions) > 1 {
		condition = op.And(conditions)
	} else if len(conditions) == 1 {
		condition = conditions[0]
	}
	b.builder.Join(n, condition)
	return b
}

// Where adds a condition to filter what gets selected.
// Calling Where multiple times will AND the conditions together.
func (b *reverseQueryBuilder) Where(c query.Node) ReverseBuilder {
	b.builder.Where(c)
	return b
}

// OrderBy specifies how the resulting data should be sorted.
// By default, the given nodes are sorted in ascending order.
// Add Descending() to the node to specify that it should be sorted in descending order.
func (b *reverseQueryBuilder) OrderBy(nodes ...query.Sorter) ReverseBuilder {
	b.builder.OrderBy(nodes...)
	return b
}

// Limit will return a subset of the data, limited to the offset and number of rows specified.
// For large data sets and specific types of queries, this can be slow, because it will perform
// the entire query before computing the limit.
// You cannot limit a query that has embedded arrays.
func (b *reverseQueryBuilder) Limit(maxRowCount int, offset int) ReverseBuilder {
	b.builder.Limit(maxRowCount, offset)
	return b
}

// Select optimizes the query to only return the specified fields.
// Once you put a Select in your query, you must specify all the fields that you will eventually read out.
func (b *reverseQueryBuilder) Select(nodes ...query.Node) ReverseBuilder {
	b.builder.Select(nodes...)
	return b
}

// Calculation adds a calculation node with an aliased name.
// After the query, you can read the data using GetAlias() on a returned object.
func (b *reverseQueryBuilder) Calculation(name string, n query.Aliaser) ReverseBuilder {
	b.builder.Calculation(name, n)
	return b
}

// Distinct removes duplicates from the results of the query.
// Adding a Select() is usually required.
func (b *reverseQueryBuilder) Distinct() ReverseBuilder {
	b.builder.Distinct()
	return b
}

// GroupBy controls how results are grouped when using aggregate functions with Calculation.
func (b *reverseQueryBuilder) GroupBy(nodes ...query.Node) ReverseBuilder {
	b.builder.GroupBy(nodes...)
	return b
}

// Having does additional filtering on the results of the query after the query is performed.
func (b *reverseQueryBuilder) Having(node query.Node) ReverseBuilder {
	b.builder.Having(node)
	return b
}

// Count terminates a query and returns just the number of items selected.
// distinct wll count the number of distinct items, ignoring duplicates.
// nodes will select individual fields, and should be accompanied by a GroupBy.
func (b *reverseQueryBuilder) Count(distinct bool, nodes ...query.Node) int {
	b.builder.Command = query.BuilderCommandCount
	if distinct {
		b.builder.Distinct()
	}
	database := db.GetDatabase("goradd_unit")
	results := database.BuilderQuery(b.builder.Ctx, b.builder)
	if results == nil {
		return 0
	}
	return results.(int)
}

// Delete uses the query builder to delete a group of records that match the criteria
func (b *reverseQueryBuilder) Delete() {
	b.builder.Command = query.BuilderCommandDelete
	database := db.GetDatabase("goradd_unit")
	database.BuilderQuery(b.builder.Ctx, b.builder)
	broadcast.BulkChange(b.builder.Context(), "goradd_unit", "reverse")
}

// Subquery terminates the query builder and tags it as a subquery within a larger query.
// You MUST include what you are selecting by adding Calculation or Select functions on the subquery builder.
// Generally you would use this as a node to a Calculation function on the surrounding query builder.
func (b *reverseQueryBuilder) Subquery() *query.SubqueryNode {
	return b.builder.Subquery()
}

// joinOrSelect is a private helper function for the Load* functions
func (b *reverseQueryBuilder) joinOrSelect(nodes ...query.Node) ReverseBuilder {
	for _, n := range nodes {
		switch n.(type) {
		case query.TableNodeI:
			b.builder.Join(n, nil)
		case *query.ColumnNode:
			b.Select(n)
		}
	}
	return b
}

// CountReverseByID queries the database and returns the number of Reverse objects that
// have id.
// doc: type=Reverse
func CountReverseByID(ctx context.Context, id string) int {
	return int(queryReverses(ctx).Where(op.Equal(node.Reverse().ID(), id)).Count(false))
}

// CountReverseByName queries the database and returns the number of Reverse objects that
// have name.
// doc: type=Reverse
func CountReverseByName(ctx context.Context, name string) int {
	return int(queryReverses(ctx).Where(op.Equal(node.Reverse().Name(), name)).Count(false))
}

// load is the private loader that transforms data coming from the database into a tree structure reflecting the relationships
// between the object chain requested by the user in the query.
// Care must be taken in the query, as Select clauses might not be honored if the child object has fields selected which the parent object does not have.
func (o *reverseBase) load(m map[string]interface{}, objThis *Reverse, objParent interface{}, parentKey string) {

	if v, ok := m["id"]; ok && v != nil {
		if o.id, ok = v.(string); ok {
			o.idIsValid = true
			o.idIsDirty = false

			o._originalPK = o.id

		} else {
			panic("Wrong type found for id.")
		}
	} else {
		o.idIsValid = false
		o.id = ""
	}

	if v, ok := m["name"]; ok && v != nil {
		if o.name, ok = v.(string); ok {
			o.nameIsValid = true
			o.nameIsDirty = false

		} else {
			panic("Wrong type found for name.")
		}
	} else {
		o.nameIsValid = false
		o.name = ""
	}

	// Reverse references

	if v, ok := m["ForwardCascades"]; ok {
		switch v2 := v.(type) {
		case []db.ValueMap: // array expansion
			o.revForwardCascades.Clear()
			o.revForwardCascadesIsDirty = false
			for _, v3 := range v2 {
				obj := new(ForwardCascade)
				obj.load(v3, obj, objThis, "Reverse")
				o.revForwardCascades.Set(obj.PrimaryKey(), obj)
			}
		case db.ValueMap: // single expansion
			obj := new(ForwardCascade)
			obj.load(v2, obj, objThis, "Reverse")
			o.revForwardCascades.Clear()
			o.revForwardCascades.Set(obj.PrimaryKey(), obj)
			o.revForwardCascadesIsDirty = false
		default:
			panic("Wrong type found for revForwardCascades object.")
		}
	} else {
		o.revForwardCascades.Clear()
		o.revForwardCascadesIsDirty = false
	}

	if v, ok := m["ForwardCascadeUnique"]; ok {
		if v2, ok2 := v.(db.ValueMap); ok2 {
			o.revForwardCascadeUnique = new(ForwardCascadeUnique)
			o.revForwardCascadeUnique.load(v2, o.revForwardCascadeUnique, objThis, "Reverse")
			o.revForwardCascadeUniqueIsDirty = false
		} else {
			panic("Wrong type found for reverseID object.")
		}
	} else {
		o.revForwardCascadeUnique = nil
		o.revForwardCascadeUniqueIsDirty = false
	}

	if v, ok := m["ForwardNulls"]; ok {
		switch v2 := v.(type) {
		case []db.ValueMap: // array expansion
			o.revForwardNulls.Clear()
			o.revForwardNullsIsDirty = false
			for _, v3 := range v2 {
				obj := new(ForwardNull)
				obj.load(v3, obj, objThis, "Reverse")
				o.revForwardNulls.Set(obj.PrimaryKey(), obj)
			}
		case db.ValueMap: // single expansion
			obj := new(ForwardNull)
			obj.load(v2, obj, objThis, "Reverse")
			o.revForwardNulls.Clear()
			o.revForwardNulls.Set(obj.PrimaryKey(), obj)
			o.revForwardNullsIsDirty = false
		default:
			panic("Wrong type found for revForwardNulls object.")
		}
	} else {
		o.revForwardNulls.Clear()
		o.revForwardNullsIsDirty = false
	}

	if v, ok := m["ForwardNullUnique"]; ok {
		if v2, ok2 := v.(db.ValueMap); ok2 {
			o.revForwardNullUnique = new(ForwardNullUnique)
			o.revForwardNullUnique.load(v2, o.revForwardNullUnique, objThis, "Reverse")
			o.revForwardNullUniqueIsDirty = false
		} else {
			panic("Wrong type found for reverseID object.")
		}
	} else {
		o.revForwardNullUnique = nil
		o.revForwardNullUniqueIsDirty = false
	}

	if v, ok := m["ForwardRestricts"]; ok {
		switch v2 := v.(type) {
		case []db.ValueMap: // array expansion
			o.revForwardRestricts.Clear()
			o.revForwardRestrictsIsDirty = false
			for _, v3 := range v2 {
				obj := new(ForwardRestrict)
				obj.load(v3, obj, objThis, "Reverse")
				o.revForwardRestricts.Set(obj.PrimaryKey(), obj)
			}
		case db.ValueMap: // single expansion
			obj := new(ForwardRestrict)
			obj.load(v2, obj, objThis, "Reverse")
			o.revForwardRestricts.Clear()
			o.revForwardRestricts.Set(obj.PrimaryKey(), obj)
			o.revForwardRestrictsIsDirty = false
		default:
			panic("Wrong type found for revForwardRestricts object.")
		}
	} else {
		o.revForwardRestricts.Clear()
		o.revForwardRestrictsIsDirty = false
	}

	if v, ok := m["ForwardRestrictUnique"]; ok {
		if v2, ok2 := v.(db.ValueMap); ok2 {
			o.revForwardRestrictUnique = new(ForwardRestrictUnique)
			o.revForwardRestrictUnique.load(v2, o.revForwardRestrictUnique, objThis, "Reverse")
			o.revForwardRestrictUniqueIsDirty = false
		} else {
			panic("Wrong type found for reverseID object.")
		}
	} else {
		o.revForwardRestrictUnique = nil
		o.revForwardRestrictUniqueIsDirty = false
	}

	if v, ok := m["aliases_"]; ok {
		o._aliases = map[string]interface{}(v.(db.ValueMap))
	}

	o._restored = true

}

// Save will update or insert the object, depending on the state of the object.
// If it has any auto-generated ids, those will be updated.
func (o *reverseBase) Save(ctx context.Context) {
	if o._restored {
		o.update(ctx)
	} else {
		o.insert(ctx)
	}
}

// update will update the values in the database, saving any changed values.
func (o *reverseBase) update(ctx context.Context) {
	if !o._restored {
		panic("cannot update a record that was not originally read from the database.")
	}

	var modifiedFields map[string]interface{}
	d := Database()
	db.ExecuteTransaction(ctx, d, func() {

		// TODO: Perform all reads and consistency checks before saves

		// Save all modified fields to the database
		modifiedFields = o.getModifiedFields()
		if len(modifiedFields) != 0 {
			d.Update(ctx, "reverse", modifiedFields, map[string]any{"id": o._originalPK})
		}

		if o.revForwardCascadesIsDirty {
			// relation connection changed

			if o.revForwardCascadesPks != nil {
				// Get objects we are going to associate if not already loaded
				objs := QueryForwardCascades(ctx).
					Where(op.In(node.ForwardCascade().PrimaryKeyNode(), o.revForwardCascadesPks...)).
					Select(node.ForwardCascade().ReverseID()).
					Load()
				_ = objs
				// TODO: save new group of objects
			}
			objs := QueryForwardCascades(ctx).
				Where(op.Equal(node.ForwardCascade().ReverseID(), o.PrimaryKey())).
				Select(node.ForwardCascade().ReverseID()).
				Load()

			for _, obj := range objs {
				if !o.revForwardCascades.Has(obj.PrimaryKey()) {
					// The old object is not in the group of new objects
					obj.SetReverseID(nil)
					obj.Save(ctx)
				}
			}
			for obj := range o.revForwardCascades.ValuesIter() {
				obj.reverseIDIsDirty = true // force a change in case data is stale
				obj.SetReverseID(o.PrimaryKey())
				obj.Save(ctx)
			}

		} else {

			// save related objects
			for obj := range o.revForwardCascades.ValuesIter() {
				obj.Save(ctx)
			}

		}
		if o.revForwardCascadeUniqueIsDirty {
			// relation connection changed

			obj := QueryForwardCascadeUniques(ctx).
				Where(op.Equal(node.ForwardCascadeUnique().ReverseID(), o.PrimaryKey())).
				Get()
			if obj != nil && obj.PrimaryKey() != o.revForwardCascadeUnique.PrimaryKey() {
				obj.SetReverseID(nil)
				obj.Save(ctx)
			}
			if o.revForwardCascadeUniquePk != nil {
				if o.revForwardCascadeUnique != nil && o.revForwardCascadeUnique.IsDirty() {
					// Save detached record
					o.revForwardCascadeUnique.Save(ctx)
				}
				o.revForwardCascadeUnique = LoadForwardCascadeUnique(ctx, *o.revForwardCascadeUniquePk, node.ForwardCascadeUnique().PrimaryKeyNode())
			}
			o.revForwardCascadeUnique.reverseIDIsDirty = true // force a change in case data is stale
			o.revForwardCascadeUnique.SetReverseID(o.PrimaryKey())
			o.revForwardCascadeUnique.Save(ctx)

		} else {

			// save related object
			if o.revForwardCascadeUnique != nil {
				o.revForwardCascadeUnique.Save(ctx)
			}

		}
		if o.revForwardNullsIsDirty {
			// relation connection changed

			if o.revForwardNullsPks != nil {
				// Get objects we are going to associate if not already loaded
				objs := QueryForwardNulls(ctx).
					Where(op.In(node.ForwardNull().PrimaryKeyNode(), o.revForwardNullsPks...)).
					Select(node.ForwardNull().ReverseID()).
					Load()
				_ = objs
				// TODO: save new group of objects
			}
			objs := QueryForwardNulls(ctx).
				Where(op.Equal(node.ForwardNull().ReverseID(), o.PrimaryKey())).
				Select(node.ForwardNull().ReverseID()).
				Load()

			for _, obj := range objs {
				if !o.revForwardNulls.Has(obj.PrimaryKey()) {
					// The old object is not in the group of new objects
					obj.SetReverseID(nil)
					obj.Save(ctx)
				}
			}
			for obj := range o.revForwardNulls.ValuesIter() {
				obj.reverseIDIsDirty = true // force a change in case data is stale
				obj.SetReverseID(o.PrimaryKey())
				obj.Save(ctx)
			}

		} else {

			// save related objects
			for obj := range o.revForwardNulls.ValuesIter() {
				obj.Save(ctx)
			}

		}
		if o.revForwardNullUniqueIsDirty {
			// relation connection changed

			obj := QueryForwardNullUniques(ctx).
				Where(op.Equal(node.ForwardNullUnique().ReverseID(), o.PrimaryKey())).
				Get()
			if obj != nil && obj.PrimaryKey() != o.revForwardNullUnique.PrimaryKey() {
				obj.SetReverseID(nil)
				obj.Save(ctx)
			}
			if o.revForwardNullUniquePk != nil {
				if o.revForwardNullUnique != nil && o.revForwardNullUnique.IsDirty() {
					// Save detached record
					o.revForwardNullUnique.Save(ctx)
				}
				o.revForwardNullUnique = LoadForwardNullUnique(ctx, *o.revForwardNullUniquePk, node.ForwardNullUnique().PrimaryKeyNode())
			}
			o.revForwardNullUnique.reverseIDIsDirty = true // force a change in case data is stale
			o.revForwardNullUnique.SetReverseID(o.PrimaryKey())
			o.revForwardNullUnique.Save(ctx)

		} else {

			// save related object
			if o.revForwardNullUnique != nil {
				o.revForwardNullUnique.Save(ctx)
			}

		}
		if o.revForwardRestrictsIsDirty {
			// relation connection changed

			// Since the other side of the relationship cannot be null, there cannot be objects that will be detached
			// TODO: Make this check earlier to lock the rows being changed

			objs := QueryForwardRestricts(ctx).
				Where(op.Equal(node.ForwardRestrict().ReverseID(), o.PrimaryKey())).
				Select(node.ForwardRestrict().ReverseID()).
				Load()
			for _, obj := range objs {
				if !o.revForwardRestricts.Has(obj.PrimaryKey()) {
					// The old object is not in the group of new objects
					panic("cannot remove a non-null reference. ")
				}
			}

			for obj := range o.revForwardRestricts.ValuesIter() {
				obj.reverseIDIsDirty = true // force a change in case data is stale
				obj.SetReverseID(o.PrimaryKey())
				obj.Save(ctx)
			}

		} else {

			// save related objects
			for obj := range o.revForwardRestricts.ValuesIter() {
				obj.Save(ctx)
			}

		}
		if o.revForwardRestrictUniqueIsDirty {
			// relation connection changed

			obj := QueryForwardRestrictUniques(ctx).
				Where(op.Equal(node.ForwardRestrictUnique().ReverseID(), o.PrimaryKey())).
				Get()
			if obj != nil && obj.PrimaryKey() != o.revForwardRestrictUnique.PrimaryKey() {
				obj.SetReverseID(nil)
				obj.Save(ctx)
			}
			if o.revForwardRestrictUniquePk != nil {
				if o.revForwardRestrictUnique != nil && o.revForwardRestrictUnique.IsDirty() {
					// Save detached record
					o.revForwardRestrictUnique.Save(ctx)
				}
				o.revForwardRestrictUnique = LoadForwardRestrictUnique(ctx, *o.revForwardRestrictUniquePk, node.ForwardRestrictUnique().PrimaryKeyNode())
			}
			o.revForwardRestrictUnique.reverseIDIsDirty = true // force a change in case data is stale
			o.revForwardRestrictUnique.SetReverseID(o.PrimaryKey())
			o.revForwardRestrictUnique.Save(ctx)

		} else {

			// save related object
			if o.revForwardRestrictUnique != nil {
				o.revForwardRestrictUnique.Save(ctx)
			}

		}

	}) // transaction

	o.resetDirtyStatus()
	if len(modifiedFields) != 0 {
		broadcast.Update(ctx, "goradd_unit", "reverse", o._originalPK, all.SortedKeys(modifiedFields)...)
	}
}

// insert will insert the object into the database. Related items will be saved.
func (o *reverseBase) insert(ctx context.Context) {
	d := Database()
	db.ExecuteTransaction(ctx, d, func() {

		if !o.nameIsValid {
			panic("a value for Name is required, and there is no default value. Call SetName() before inserting the record.")
		}

		m := o.getValidFields()

		id := d.Insert(ctx, "reverse", m)
		o.id = id
		o._originalPK = id

		o.revForwardCascades.Clear()
		for _, obj := range o.revForwardCascades.All() {
			obj.SetReverseID(id)
			obj.Save(ctx)
			o.revForwardCascades.Set(obj.PrimaryKey(), obj)
		}

		if o.revForwardCascadeUnique != nil {
			o.revForwardCascadeUnique.SetReverseID(id)
			o.revForwardCascadeUnique.Save(ctx)
		}

		o.revForwardNulls.Clear()
		for _, obj := range o.revForwardNulls.All() {
			obj.SetReverseID(id)
			obj.Save(ctx)
			o.revForwardNulls.Set(obj.PrimaryKey(), obj)
		}

		if o.revForwardNullUnique != nil {
			o.revForwardNullUnique.SetReverseID(id)
			o.revForwardNullUnique.Save(ctx)
		}

		o.revForwardRestricts.Clear()
		for _, obj := range o.revForwardRestricts.All() {
			obj.SetReverseID(id)
			obj.Save(ctx)
			o.revForwardRestricts.Set(obj.PrimaryKey(), obj)
		}

		if o.revForwardRestrictUnique != nil {
			o.revForwardRestrictUnique.SetReverseID(id)
			o.revForwardRestrictUnique.Save(ctx)
		}

	}) // transaction

	o.resetDirtyStatus()
	o._restored = true
	broadcast.Insert(ctx, "goradd_unit", "reverse", o.PrimaryKey())
}

// getModifiedFields returns the database columns that have been modified. This
// will determine which specific fields are sent to the database to be changed.
func (o *reverseBase) getModifiedFields() (fields map[string]interface{}) {
	fields = map[string]interface{}{}
	if o.idIsDirty {
		fields["id"] = o.id
	}
	if o.nameIsDirty {
		fields["name"] = o.name
	}
	return
}

// getValidFields returns the fields that have valid data in them in a form ready to send to the database.
func (o *reverseBase) getValidFields() (fields map[string]interface{}) {
	fields = map[string]interface{}{}

	if o.nameIsValid {

		fields["name"] = o.name

	}
	return
}

// Delete deletes the record from the database.
func (o *reverseBase) Delete(ctx context.Context) {
	if !o._restored {
		panic("Cannot delete a record that has no primary key value.")
	}
	d := Database()
	db.ExecuteTransaction(ctx, d, func() {

		{
			objs := QueryForwardCascades(ctx).
				Where(op.Equal(node.ForwardCascade().ReverseID(), o.id)).
				Select(node.ForwardCascade().ReverseID()).
				Load()
			for _, obj := range objs {
				obj.SetReverseID(nil)
				obj.Save(ctx)
			}
			o.revForwardCascades.Clear()
		}

		{
			// Set the related objects pointer to us to NULL in the database
			obj := QueryForwardCascadeUniques(ctx).
				Where(op.Equal(node.ForwardCascadeUnique().ReverseID(), o.id)).
				Select(node.ForwardCascadeUnique().ReverseID()).
				Get()
			if obj != nil {
				obj.SetReverseID(nil)
				obj.Save(ctx)
			}
			// Set this object's pointer to the reverse object to nil to mark that we broke the link
			o.revForwardCascadeUnique = nil
		}

		{
			objs := QueryForwardNulls(ctx).
				Where(op.Equal(node.ForwardNull().ReverseID(), o.id)).
				Select(node.ForwardNull().ReverseID()).
				Load()
			for _, obj := range objs {
				obj.SetReverseID(nil)
				obj.Save(ctx)
			}
			o.revForwardNulls.Clear()
		}

		{
			// Set the related objects pointer to us to NULL in the database
			obj := QueryForwardNullUniques(ctx).
				Where(op.Equal(node.ForwardNullUnique().ReverseID(), o.id)).
				Select(node.ForwardNullUnique().ReverseID()).
				Get()
			if obj != nil {
				obj.SetReverseID(nil)
				obj.Save(ctx)
			}
			// Set this object's pointer to the reverse object to nil to mark that we broke the link
			o.revForwardNullUnique = nil
		}

		{
			objs := QueryForwardRestricts(ctx).
				Where(op.Equal(node.ForwardRestrict().ReverseID(), o.id)).
				Load()
			for _, obj := range objs {
				obj.Delete(ctx)
			}
			o.revForwardRestricts.Clear()
		}

		{
			// Set the related objects pointer to us to NULL in the database
			obj := QueryForwardRestrictUniques(ctx).
				Where(op.Equal(node.ForwardRestrictUnique().ReverseID(), o.id)).
				Select(node.ForwardRestrictUnique().ReverseID()).
				Get()
			if obj != nil {
				obj.SetReverseID(nil)
				obj.Save(ctx)
			}
			// Set this object's pointer to the reverse object to nil to mark that we broke the link
			o.revForwardRestrictUnique = nil
		}

		d.Delete(ctx, "reverse", map[string]any{"ID": o.id})
	})
	broadcast.Delete(ctx, "goradd_unit", "reverse", fmt.Sprint(o.id))
}

// deleteReverse deletes the associated record from the database.
func deleteReverse(ctx context.Context, pk string) {
	if obj := LoadReverse(ctx, pk, node.Reverse().PrimaryKeyNode()); obj != nil {
		obj.Delete(ctx)
	}
}

// resetDirtyStatus resets the dirty status of every field in the object.
func (o *reverseBase) resetDirtyStatus() {
	o.idIsDirty = false
	o.nameIsDirty = false
	o.revForwardCascadesIsDirty = false
	o.revForwardCascadeUniqueIsDirty = false
	o.revForwardNullsIsDirty = false
	o.revForwardNullUniqueIsDirty = false
	o.revForwardRestrictsIsDirty = false
	o.revForwardRestrictUniqueIsDirty = false

}

// IsDirty returns true if the object has been changed since it was read from the database.
func (o *reverseBase) IsDirty() (dirty bool) {
	dirty = o.idIsDirty ||
		o.nameIsDirty

	dirty = dirty ||
		o.revForwardCascadesIsDirty ||
		o.revForwardCascadeUniqueIsDirty ||
		o.revForwardNullsIsDirty ||
		o.revForwardNullUniqueIsDirty ||
		o.revForwardRestrictsIsDirty ||
		o.revForwardRestrictUniqueIsDirty

	for obj := range o.revForwardCascades.ValuesIter() {
		dirty = dirty || obj.IsDirty()
	}
	dirty = dirty || (o.revForwardCascadeUnique != nil && o.revForwardCascadeUnique.IsDirty())
	for obj := range o.revForwardNulls.ValuesIter() {
		dirty = dirty || obj.IsDirty()
	}
	dirty = dirty || (o.revForwardNullUnique != nil && o.revForwardNullUnique.IsDirty())
	for obj := range o.revForwardRestricts.ValuesIter() {
		dirty = dirty || obj.IsDirty()
	}
	dirty = dirty || (o.revForwardRestrictUnique != nil && o.revForwardRestrictUnique.IsDirty())

	return
}

// Get returns the value of a field in the object based on the field's name.
// It will also get related objects if they are loaded.
// Invalid fields and objects are returned as nil
func (o *reverseBase) Get(key string) interface{} {

	switch key {

	case "ID":
		if !o.idIsValid {
			return nil
		}
		return o.id

	case "Name":
		if !o.nameIsValid {
			return nil
		}
		return o.name

	case "ForwardCascades":
		return o.revForwardCascades.Values()
	case "ForwardCascadeUnique":
		return o.revForwardCascadeUnique
	case "ForwardNulls":
		return o.revForwardNulls.Values()
	case "ForwardNullUnique":
		return o.revForwardNullUnique
	case "ForwardRestricts":
		return o.revForwardRestricts.Values()
	case "ForwardRestrictUnique":
		return o.revForwardRestrictUnique

	}
	return nil
}

// MarshalBinary serializes the object into a buffer that is deserializable using UnmarshalBinary.
// It should be used for transmitting database objects over the wire, or for temporary storage. It does not send
// a version number, so if the data format changes, its up to you to invalidate the old stored objects.
// The framework uses this to serialize the object when it is stored in a control.
func (o *reverseBase) MarshalBinary() ([]byte, error) {
	buf := new(bytes.Buffer)
	encoder := gob.NewEncoder(buf)

	if err := encoder.Encode(o.id); err != nil {
		return nil, fmt.Errorf("error encoding Reverse.id: %w", err)
	}
	if err := encoder.Encode(o.idIsValid); err != nil {
		return nil, fmt.Errorf("error encoding Reverse.idIsValid: %w", err)
	}
	if err := encoder.Encode(o.idIsDirty); err != nil {
		return nil, fmt.Errorf("error encoding Reverse.idIsDirty: %w", err)
	}

	if err := encoder.Encode(o.name); err != nil {
		return nil, fmt.Errorf("error encoding Reverse.name: %w", err)
	}
	if err := encoder.Encode(o.nameIsValid); err != nil {
		return nil, fmt.Errorf("error encoding Reverse.nameIsValid: %w", err)
	}
	if err := encoder.Encode(o.nameIsDirty); err != nil {
		return nil, fmt.Errorf("error encoding Reverse.nameIsDirty: %w", err)
	}

	if err := encoder.Encode(&o.revForwardCascades); err != nil {
		return nil, err
	}
	if err := encoder.Encode(len(o.revForwardCascadesPks) != 0); err != nil {
		return nil, err
	}
	if len(o.revForwardCascadesPks) != 0 {
		if err := encoder.Encode(o.revForwardCascadesPks); err != nil {
			return nil, err
		}
	}

	if err := encoder.Encode(o.revForwardCascadesIsDirty); err != nil {
		return nil, err
	}

	if o.revForwardCascadeUnique == nil {
		if err := encoder.Encode(false); err != nil {
			return nil, err
		}
	} else {
		if err := encoder.Encode(true); err != nil {
			return nil, err
		}
		if err := encoder.Encode(o.revForwardCascadeUnique); err != nil {
			return nil, fmt.Errorf("error encoding Reverse.revForwardCascadeUnique: %w", err)
		}
	}

	if o.revForwardCascadeUniquePk == nil {
		if err := encoder.Encode(false); err != nil {
			return nil, err
		}
	} else {
		if err := encoder.Encode(true); err != nil {
			return nil, err
		}
		if err := encoder.Encode(*o.revForwardCascadeUniquePk); err != nil {
			return nil, fmt.Errorf("error encoding Reverse.revForwardCascadeUniquePk: %w", err)
		}
	}

	if err := encoder.Encode(o.revForwardCascadeUniqueIsDirty); err != nil {
		return nil, fmt.Errorf("error encoding Reverse.revForwardCascadeUniqueIsDirty: %w", err)
	}
	if err := encoder.Encode(&o.revForwardNulls); err != nil {
		return nil, err
	}
	if err := encoder.Encode(len(o.revForwardNullsPks) != 0); err != nil {
		return nil, err
	}
	if len(o.revForwardNullsPks) != 0 {
		if err := encoder.Encode(o.revForwardNullsPks); err != nil {
			return nil, err
		}
	}

	if err := encoder.Encode(o.revForwardNullsIsDirty); err != nil {
		return nil, err
	}

	if o.revForwardNullUnique == nil {
		if err := encoder.Encode(false); err != nil {
			return nil, err
		}
	} else {
		if err := encoder.Encode(true); err != nil {
			return nil, err
		}
		if err := encoder.Encode(o.revForwardNullUnique); err != nil {
			return nil, fmt.Errorf("error encoding Reverse.revForwardNullUnique: %w", err)
		}
	}

	if o.revForwardNullUniquePk == nil {
		if err := encoder.Encode(false); err != nil {
			return nil, err
		}
	} else {
		if err := encoder.Encode(true); err != nil {
			return nil, err
		}
		if err := encoder.Encode(*o.revForwardNullUniquePk); err != nil {
			return nil, fmt.Errorf("error encoding Reverse.revForwardNullUniquePk: %w", err)
		}
	}

	if err := encoder.Encode(o.revForwardNullUniqueIsDirty); err != nil {
		return nil, fmt.Errorf("error encoding Reverse.revForwardNullUniqueIsDirty: %w", err)
	}
	if err := encoder.Encode(&o.revForwardRestricts); err != nil {
		return nil, err
	}
	if err := encoder.Encode(len(o.revForwardRestrictsPks) != 0); err != nil {
		return nil, err
	}
	if len(o.revForwardRestrictsPks) != 0 {
		if err := encoder.Encode(o.revForwardRestrictsPks); err != nil {
			return nil, err
		}
	}

	if err := encoder.Encode(o.revForwardRestrictsIsDirty); err != nil {
		return nil, err
	}

	if o.revForwardRestrictUnique == nil {
		if err := encoder.Encode(false); err != nil {
			return nil, err
		}
	} else {
		if err := encoder.Encode(true); err != nil {
			return nil, err
		}
		if err := encoder.Encode(o.revForwardRestrictUnique); err != nil {
			return nil, fmt.Errorf("error encoding Reverse.revForwardRestrictUnique: %w", err)
		}
	}

	if o.revForwardRestrictUniquePk == nil {
		if err := encoder.Encode(false); err != nil {
			return nil, err
		}
	} else {
		if err := encoder.Encode(true); err != nil {
			return nil, err
		}
		if err := encoder.Encode(*o.revForwardRestrictUniquePk); err != nil {
			return nil, fmt.Errorf("error encoding Reverse.revForwardRestrictUniquePk: %w", err)
		}
	}

	if err := encoder.Encode(o.revForwardRestrictUniqueIsDirty); err != nil {
		return nil, fmt.Errorf("error encoding Reverse.revForwardRestrictUniqueIsDirty: %w", err)
	}

	if o._aliases == nil {
		if err := encoder.Encode(false); err != nil {
			return nil, err
		}
	} else {
		if err := encoder.Encode(true); err != nil {
			return nil, err
		}
		if err := encoder.Encode(o._aliases); err != nil {
			return nil, fmt.Errorf("error encoding Reverse._aliases: %w", err)
		}
	}

	if err := encoder.Encode(o._restored); err != nil {
		return nil, fmt.Errorf("error encoding Reverse._restored: %w", err)
	}
	if err := encoder.Encode(o._originalPK); err != nil {
		return nil, fmt.Errorf("error encoding Reverse._originalPK: %w", err)
	}

	return buf.Bytes(), nil

	return buf.Bytes(), nil
}

// UnmarshalBinary converts a structure that was created with MarshalBinary into a Reverse object.
func (o *reverseBase) UnmarshalBinary(data []byte) (err error) {

	buf := bytes.NewBuffer(data)
	dec := gob.NewDecoder(buf)
	var isPtr bool

	_ = isPtr
	if err = dec.Decode(&o.id); err != nil {
		return fmt.Errorf("error decoding Reverse.id: %w", err)
	}
	if err = dec.Decode(&o.idIsValid); err != nil {
		return fmt.Errorf("error decoding Reverse.idIsValid: %w", err)
	}
	if err = dec.Decode(&o.idIsDirty); err != nil {
		return fmt.Errorf("error decoding Reverse.idIsDirty: %w", err)
	}

	if err = dec.Decode(&o.name); err != nil {
		return fmt.Errorf("error decoding Reverse.name: %w", err)
	}
	if err = dec.Decode(&o.nameIsValid); err != nil {
		return fmt.Errorf("error decoding Reverse.nameIsValid: %w", err)
	}
	if err = dec.Decode(&o.nameIsDirty); err != nil {
		return fmt.Errorf("error decoding Reverse.nameIsDirty: %w", err)
	}

	if err = dec.Decode(&o.revForwardCascades); err != nil {
		return fmt.Errorf("error decoding Reverse.revForwardCascades: %w", err)
	}

	if err = dec.Decode(&isPtr); err != nil {
		return fmt.Errorf("error decoding Reverse.revForwardCascadesPks isPtr: %w", err)
	}
	if isPtr {
		if err = dec.Decode(&o.revForwardCascadesPks); err != nil {
			return fmt.Errorf("error decoding Reverse.revForwardCascadesPks: %w", err)
		}
	}

	if err = dec.Decode(&o.revForwardCascadesIsDirty); err != nil {
		return fmt.Errorf("error decoding Reverse.revForwardCascadesIsDirty: %w", err)
	}

	if err = dec.Decode(&isPtr); err != nil {
		return fmt.Errorf("error decoding Reverse.revForwardCascadeUnique isPtr: %w", err)
	}
	if isPtr {
		if err = dec.Decode(&o.revForwardCascadeUnique); err != nil {
			return fmt.Errorf("error decoding Reverse.revForwardCascadeUnique: %w", err)
		}
	}

	if err = dec.Decode(&isPtr); err != nil {
		return fmt.Errorf("error decoding Reverse.revForwardCascadeUniquePk isPtr: %w", err)
	}
	if isPtr {
		if err = dec.Decode(&o.revForwardCascadeUniquePk); err != nil {
			return fmt.Errorf("error decoding Reverse.revForwardCascadeUniquePk: %w", err)
		}
	}

	if err = dec.Decode(&o.revForwardCascadeUniqueIsDirty); err != nil {
		return fmt.Errorf("error decoding Reverse.revForwardCascadeUniqueIsDirty: %w", err)
	}
	if err = dec.Decode(&o.revForwardNulls); err != nil {
		return fmt.Errorf("error decoding Reverse.revForwardNulls: %w", err)
	}

	if err = dec.Decode(&isPtr); err != nil {
		return fmt.Errorf("error decoding Reverse.revForwardNullsPks isPtr: %w", err)
	}
	if isPtr {
		if err = dec.Decode(&o.revForwardNullsPks); err != nil {
			return fmt.Errorf("error decoding Reverse.revForwardNullsPks: %w", err)
		}
	}

	if err = dec.Decode(&o.revForwardNullsIsDirty); err != nil {
		return fmt.Errorf("error decoding Reverse.revForwardNullsIsDirty: %w", err)
	}

	if err = dec.Decode(&isPtr); err != nil {
		return fmt.Errorf("error decoding Reverse.revForwardNullUnique isPtr: %w", err)
	}
	if isPtr {
		if err = dec.Decode(&o.revForwardNullUnique); err != nil {
			return fmt.Errorf("error decoding Reverse.revForwardNullUnique: %w", err)
		}
	}

	if err = dec.Decode(&isPtr); err != nil {
		return fmt.Errorf("error decoding Reverse.revForwardNullUniquePk isPtr: %w", err)
	}
	if isPtr {
		if err = dec.Decode(&o.revForwardNullUniquePk); err != nil {
			return fmt.Errorf("error decoding Reverse.revForwardNullUniquePk: %w", err)
		}
	}

	if err = dec.Decode(&o.revForwardNullUniqueIsDirty); err != nil {
		return fmt.Errorf("error decoding Reverse.revForwardNullUniqueIsDirty: %w", err)
	}
	if err = dec.Decode(&o.revForwardRestricts); err != nil {
		return fmt.Errorf("error decoding Reverse.revForwardRestricts: %w", err)
	}

	if err = dec.Decode(&isPtr); err != nil {
		return fmt.Errorf("error decoding Reverse.revForwardRestrictsPks isPtr: %w", err)
	}
	if isPtr {
		if err = dec.Decode(&o.revForwardRestrictsPks); err != nil {
			return fmt.Errorf("error decoding Reverse.revForwardRestrictsPks: %w", err)
		}
	}

	if err = dec.Decode(&o.revForwardRestrictsIsDirty); err != nil {
		return fmt.Errorf("error decoding Reverse.revForwardRestrictsIsDirty: %w", err)
	}

	if err = dec.Decode(&isPtr); err != nil {
		return fmt.Errorf("error decoding Reverse.revForwardRestrictUnique isPtr: %w", err)
	}
	if isPtr {
		if err = dec.Decode(&o.revForwardRestrictUnique); err != nil {
			return fmt.Errorf("error decoding Reverse.revForwardRestrictUnique: %w", err)
		}
	}

	if err = dec.Decode(&isPtr); err != nil {
		return fmt.Errorf("error decoding Reverse.revForwardRestrictUniquePk isPtr: %w", err)
	}
	if isPtr {
		if err = dec.Decode(&o.revForwardRestrictUniquePk); err != nil {
			return fmt.Errorf("error decoding Reverse.revForwardRestrictUniquePk: %w", err)
		}
	}

	if err = dec.Decode(&o.revForwardRestrictUniqueIsDirty); err != nil {
		return fmt.Errorf("error decoding Reverse.revForwardRestrictUniqueIsDirty: %w", err)
	}
	return
}

// MarshalJSON serializes the object into a JSON object.
// Only valid data will be serialized, meaning, you can control what gets serialized by using Select to
// select only the fields you want when you query for the object. Another way to control the output
// is to call MarshalStringMap, modify the map, then encode the map.
func (o *reverseBase) MarshalJSON() (data []byte, err error) {
	v := o.MarshalStringMap()
	return json.Marshal(v)
}

// MarshalStringMap serializes the object into a string map of interfaces.
// Only valid data will be serialized, meaning, you can control what gets serialized by using Select to
// select only the fields you want when you query for the object. The keys are the same as the json keys.
func (o *reverseBase) MarshalStringMap() map[string]interface{} {
	v := make(map[string]interface{})

	if o.idIsValid {
		v["id"] = o.id
	}

	if o.nameIsValid {
		v["name"] = o.name
	}

	if o.revForwardCascades.Len() != 0 {
		var vals []map[string]interface{}
		for obj := range o.revForwardCascades.ValuesIter() {
			vals = append(vals, obj.MarshalStringMap())
		}
		v["forwardCascades"] = vals
	}
	if obj := o.revForwardCascadeUnique; obj != nil {
		v["forwardCascadeUnique"] = obj.MarshalStringMap()
	}
	if o.revForwardNulls.Len() != 0 {
		var vals []map[string]interface{}
		for obj := range o.revForwardNulls.ValuesIter() {
			vals = append(vals, obj.MarshalStringMap())
		}
		v["forwardNulls"] = vals
	}
	if obj := o.revForwardNullUnique; obj != nil {
		v["forwardNullUnique"] = obj.MarshalStringMap()
	}
	if o.revForwardRestricts.Len() != 0 {
		var vals []map[string]interface{}
		for obj := range o.revForwardRestricts.ValuesIter() {
			vals = append(vals, obj.MarshalStringMap())
		}
		v["forwardRestricts"] = vals
	}
	if obj := o.revForwardRestrictUnique; obj != nil {
		v["forwardRestrictUnique"] = obj.MarshalStringMap()
	}
	for _k, _v := range o._aliases {
		v[_k] = _v
	}
	return v
}

// UnmarshalJSON unmarshalls the given json data into the Reverse. The Reverse can be a
// newly created object, or one loaded from the database.
//
// After unmarshalling, the object is not  saved. You must call Save to insert it into the database
// or update it.
//
// Unmarshalling of sub-objects, as in objects linked via foreign keys, is not currently supported.
//
// The fields it expects are:
//
//	"id" - string
//	"name" - string
func (o *reverseBase) UnmarshalJSON(data []byte) (err error) {
	var v map[string]interface{}
	if err = json.Unmarshal(data, &v); err != nil {
		return err
	}
	return o.UnmarshalStringMap(v)
}

// UnmarshalStringMap will load the values from the stringmap into the object.
//
// Override this in Reverse to modify the json before sending it here.
func (o *reverseBase) UnmarshalStringMap(m map[string]interface{}) (err error) {
	for k, v := range m {
		switch k {

		case "name":
			{
				if v == nil {
					return fmt.Errorf("json field %s cannot be null", k)
				}

				if s, ok := v.(string); !ok {
					return fmt.Errorf("json field %s must be a string", k)
				} else {
					o.SetName(s)
				}
			}

		}
	}
	return
}
