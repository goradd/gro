// Code generated by goradd-orm. DO NOT EDIT.

package goradd_unit

import (
	"testing"

	strings2 "github.com/goradd/strings"
	"github.com/stretchr/testify/assert"
)

func TestUnsupportedType_SetTypeSet(t *testing.T) {
	obj := NewUnsupportedType()

	typeSet := strings2.RandomString(strings2.AlphaAll, 5)
	obj.SetTypeSet(typeSet)
	assert.Equal(t, typeSet, obj.TypeSet())

	obj.SetTypeSet("")
	assert.Equal(t, "", obj.TypeSet(), "set empty")

}
func TestUnsupportedType_SetTypeEnum(t *testing.T) {
	obj := NewUnsupportedType()

	typeEnum := strings2.RandomString(strings2.AlphaAll, 1)
	obj.SetTypeEnum(typeEnum)
	assert.Equal(t, typeEnum, obj.TypeEnum())

	obj.SetTypeEnum("")
	assert.Equal(t, "", obj.TypeEnum(), "set empty")

}
func TestUnsupportedType_SetTypeDecimal(t *testing.T) {
	obj := NewUnsupportedType()

	typeDecimal := strings2.RandomString(strings2.AlphaAll, 10)
	obj.SetTypeDecimal(typeDecimal)
	assert.Equal(t, typeDecimal, obj.TypeDecimal())

	obj.SetTypeDecimal("")
	assert.Equal(t, "", obj.TypeDecimal(), "set empty")

}
func TestUnsupportedType_SetTypeGeo(t *testing.T) {
	obj := NewUnsupportedType()

	typeGeo := []byte(strings2.RandomString(strings2.AlphaAll, 10))
	obj.SetTypeGeo(typeGeo)
	assert.Equal(t, typeGeo, obj.TypeGeo())

	obj.SetTypeGeo(nil)
	assert.Equal(t, []byte{}, obj.TypeGeo(), "set nil")

	obj.SetTypeGeo([]byte{})
	assert.Equal(t, []byte{}, obj.TypeGeo(), "set empty")
}

func TestUnsupportedType_SetTypeTinyBlob(t *testing.T) {
	obj := NewUnsupportedType()

	typeTinyBlob := []byte(strings2.RandomString(strings2.AlphaAll, 10))
	obj.SetTypeTinyBlob(typeTinyBlob)
	assert.Equal(t, typeTinyBlob, obj.TypeTinyBlob())

	obj.SetTypeTinyBlob(nil)
	assert.Equal(t, []byte{}, obj.TypeTinyBlob(), "set nil")

	obj.SetTypeTinyBlob([]byte{})
	assert.Equal(t, []byte{}, obj.TypeTinyBlob(), "set empty")
}

func TestUnsupportedType_SetTypeMediumBlob(t *testing.T) {
	obj := NewUnsupportedType()

	typeMediumBlob := []byte(strings2.RandomString(strings2.AlphaAll, 10))
	obj.SetTypeMediumBlob(typeMediumBlob)
	assert.Equal(t, typeMediumBlob, obj.TypeMediumBlob())

	obj.SetTypeMediumBlob(nil)
	assert.Equal(t, []byte{}, obj.TypeMediumBlob(), "set nil")

	obj.SetTypeMediumBlob([]byte{})
	assert.Equal(t, []byte{}, obj.TypeMediumBlob(), "set empty")
}

func TestUnsupportedType_SetTypeVarbinary(t *testing.T) {
	obj := NewUnsupportedType()

	typeVarbinary := []byte(strings2.RandomString(strings2.AlphaAll, 10))
	obj.SetTypeVarbinary(typeVarbinary)
	assert.Equal(t, typeVarbinary, obj.TypeVarbinary())

	obj.SetTypeVarbinary(nil)
	assert.Equal(t, []byte{}, obj.TypeVarbinary(), "set nil")

	obj.SetTypeVarbinary([]byte{})
	assert.Equal(t, []byte{}, obj.TypeVarbinary(), "set empty")
}

func TestUnsupportedType_SetTypeLongtext(t *testing.T) {
	obj := NewUnsupportedType()

	typeLongtext := strings2.RandomString(strings2.AlphaAll, 10)
	obj.SetTypeLongtext(typeLongtext)
	assert.Equal(t, typeLongtext, obj.TypeLongtext())

	obj.SetTypeLongtext("")
	assert.Equal(t, "", obj.TypeLongtext(), "set empty")

}
func TestUnsupportedType_SetTypeBinary(t *testing.T) {
	obj := NewUnsupportedType()

	typeBinary := []byte(strings2.RandomString(strings2.AlphaAll, 10))
	obj.SetTypeBinary(typeBinary)
	assert.Equal(t, typeBinary, obj.TypeBinary())

	obj.SetTypeBinary(nil)
	assert.Equal(t, []byte{}, obj.TypeBinary(), "set nil")

	obj.SetTypeBinary([]byte{})
	assert.Equal(t, []byte{}, obj.TypeBinary(), "set empty")
}

func TestUnsupportedType_SetTypePolygon(t *testing.T) {
	obj := NewUnsupportedType()

	typePolygon := []byte(strings2.RandomString(strings2.AlphaAll, 10))
	obj.SetTypePolygon(typePolygon)
	assert.Equal(t, typePolygon, obj.TypePolygon())

	obj.SetTypePolygon(nil)
	assert.Equal(t, []byte{}, obj.TypePolygon(), "set nil")

	obj.SetTypePolygon([]byte{})
	assert.Equal(t, []byte{}, obj.TypePolygon(), "set empty")
}

func TestUnsupportedType_SetTypeMultfk1(t *testing.T) {
	obj := NewUnsupportedType()

	typeMultfk1 := strings2.RandomString(strings2.AlphaAll, 10)
	obj.SetTypeMultfk1(typeMultfk1)
	assert.Equal(t, typeMultfk1, obj.TypeMultfk1())

	obj.SetTypeMultfk1("")
	assert.Equal(t, "", obj.TypeMultfk1(), "set empty")

}
func TestUnsupportedType_SetTypeMultifk2(t *testing.T) {
	obj := NewUnsupportedType()

	typeMultifk2 := strings2.RandomString(strings2.AlphaAll, 10)
	obj.SetTypeMultifk2(typeMultifk2)
	assert.Equal(t, typeMultifk2, obj.TypeMultifk2())

	obj.SetTypeMultifk2("")
	assert.Equal(t, "", obj.TypeMultifk2(), "set empty")

}
