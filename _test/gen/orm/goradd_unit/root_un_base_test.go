// Code generated by goradd-orm. DO NOT EDIT.

package goradd_unit

import (
	"bytes"
	"context"
	"encoding/gob"
	"encoding/json"
	"strconv"
	"testing"

	"github.com/goradd/orm/_test/gen/orm/goradd_unit/node"
	"github.com/goradd/orm/pkg/db"
	"github.com/goradd/orm/pkg/op"
	"github.com/goradd/orm/pkg/test"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

// createMinimalSampleRootUn creates an unsaved minimal version of a RootUn object
// for testing.
func createMinimalSampleRootUn() *RootUn {
	obj := NewRootUn()
	updateMinimalSampleRootUn(obj)

	return obj
}

// updateMinimalSampleRootUn sets the values of a minimal sample to new, random values.
func updateMinimalSampleRootUn(obj *RootUn) {

	obj.SetName(test.RandomValue[string](100))

}

// createMaximalSampleRootUn creates an unsaved version of a RootUn object
// for testing that includes references to minimal objects.
func createMaximalSampleRootUn(ctx context.Context) *RootUn {
	obj := NewRootUn()
	updateMaximalSampleRootUn(ctx, obj)
	return obj
}

// updateMaximalSampleRootUn sets all the maximal sample values to new values.
// This will set new values for references, so save the old values and delete them.
func updateMaximalSampleRootUn(ctx context.Context, obj *RootUn) {
	updateMinimalSampleRootUn(obj)

	{
		obj2, _ := obj.LoadLeafUn(ctx)
		// only update if not already set, since it can't be changed once set unless the reverse object is deleted first.
		if obj2 == nil {
			obj.SetLeafUn(createMinimalSampleLeafUn())
		}
	}
}

// deleteSampleRootUn deletes an object created and saved by one of the sample creator functions.
func deleteSampleRootUn(ctx context.Context, obj *RootUn) {
	if obj == nil {
		return
	}

	deleteSampleLeafUn(ctx, obj.LeafUn())

	_ = obj.Delete(ctx)

}

// assertEqualFieldsRootUn compares two objects and asserts that the basic fields are equal.
func assertEqualFieldsRootUn(t *testing.T, obj1, obj2 *RootUn) {
	if obj1.IDIsLoaded() && obj2.IDIsLoaded() { // only check loaded values
		assert.EqualValues(t, obj1.ID(), obj2.ID())
	}
	if obj1.NameIsLoaded() && obj2.NameIsLoaded() { // only check loaded values
		assert.EqualValues(t, obj1.Name(), obj2.Name())
	}

}

func TestRootUn_SetID(t *testing.T) {

	obj := NewRootUn()

	assert.True(t, obj.IsNew())
	val := test.RandomNumberString()
	obj.SetID(val)
	assert.Equal(t, val, obj.ID())

	// test default
	obj.SetID("")
	assert.EqualValues(t, "", obj.ID(), "set default")

	// test panic on setting value larger than maximum size allowed
	val = test.RandomValue[string](33)
	assert.Panics(t, func() {
		obj.SetID(val)
	})
}
func TestRootUn_SetName(t *testing.T) {

	obj := NewRootUn()

	assert.True(t, obj.IsNew())
	val := test.RandomValue[string](100)
	obj.SetName(val)
	assert.Equal(t, val, obj.Name())

	// test default
	obj.SetName("")
	assert.EqualValues(t, "", obj.Name(), "set default")

	// test panic on setting value larger than maximum size allowed
	val = test.RandomValue[string](101)
	assert.Panics(t, func() {
		obj.SetName(val)
	})
}

func TestRootUn_Copy(t *testing.T) {
	obj := createMinimalSampleRootUn()

	obj2 := obj.Copy()

	assert.Equal(t, obj.Name(), obj2.Name())

}

func TestRootUn_BasicInsert(t *testing.T) {
	obj := createMinimalSampleRootUn()
	ctx := db.NewContext(nil)
	assert.NoError(t, obj.Save(ctx))
	defer deleteSampleRootUn(ctx, obj)

	// Test retrieval
	obj2, err := LoadRootUn(ctx, obj.PrimaryKey())
	require.NotNil(t, obj2)
	assert.NoError(t, err)

	assert.Equal(t, obj2.PrimaryKey(), obj2.OriginalPrimaryKey())

	assert.True(t, obj2.IDIsLoaded())
	assert.Panics(t, func() {
		obj2.SetID(obj2.ID())
	})

	assert.True(t, obj2.NameIsLoaded())
	// test that setting it to the same value will not change the dirty bit
	assert.False(t, obj2.nameIsDirty)
	obj2.SetName(obj2.Name())
	assert.False(t, obj2.nameIsDirty)

}

func TestRootUn_InsertPanics(t *testing.T) {
	obj := createMinimalSampleRootUn()
	_ = obj
	ctx := db.NewContext(nil)
	_ = ctx

	obj.nameIsLoaded = false
	assert.Panics(t, func() { obj.Save(ctx) })
	obj.nameIsLoaded = true

}

func TestRootUn_BasicUpdate(t *testing.T) {
	obj := createMinimalSampleRootUn()
	ctx := db.NewContext(nil)
	assert.NoError(t, obj.Save(ctx))
	defer deleteSampleRootUn(ctx, obj)
	updateMinimalSampleRootUn(obj)
	assert.NoError(t, obj.Save(ctx))
	obj2, err := LoadRootUn(ctx, obj.PrimaryKey())
	assert.NoError(t, err)

	assert.Equal(t, obj2.ID(), obj.ID(), "ID did not update")
	assert.Equal(t, obj2.Name(), obj.Name(), "Name did not update")
}

func TestRootUn_ReferenceLoad(t *testing.T) {
	ctx := db.NewContext(nil)
	obj := createMaximalSampleRootUn(ctx)
	assert.NoError(t, obj.Save(ctx))
	defer deleteSampleRootUn(ctx, obj)

	// Test that referenced objects were saved and assigned ids

	// Test lazy loading
	obj2, err := LoadRootUn(ctx, obj.PrimaryKey())
	assert.NoError(t, err)
	objPkOnly, err2 := LoadRootUn(ctx, obj.PrimaryKey(), node.RootUn().PrimaryKey())
	assert.NoError(t, err2)
	_ = obj2 // avoid error if there are no references
	_ = objPkOnly

	assert.Nil(t, obj2.LeafUn(), "LeafUn is not loaded initially")
	v_LeafUn, _ := obj2.LoadLeafUn(ctx)
	assert.NotNil(t, v_LeafUn)
	assert.Equal(t, v_LeafUn.PrimaryKey(), obj2.LeafUn().PrimaryKey())
	assert.Equal(t, obj.LeafUn().PrimaryKey(), obj2.LeafUn().PrimaryKey())

	// test eager loading
	obj3, _ := LoadRootUn(ctx, obj.PrimaryKey(), node.RootUn().LeafUn())
	_ = obj3 // avoid error if there are no references

	assert.Equal(t, obj2.LeafUn().PrimaryKey(), obj3.LeafUn().PrimaryKey())

}

func TestRootUn_ReferenceUpdateNewObjects(t *testing.T) {
	ctx := db.NewContext(nil)
	obj := createMaximalSampleRootUn(ctx)
	assert.NoError(t, obj.Save(ctx))
	defer deleteSampleRootUn(ctx, obj)

	obj2, _ := LoadRootUn(ctx, obj.PrimaryKey())
	updateMaximalSampleRootUn(ctx, obj2)
	assert.NoError(t, obj2.Save(ctx))
	defer deleteSampleRootUn(ctx, obj2)

	obj3, _ := LoadRootUn(ctx, obj2.PrimaryKey(), node.RootUn().LeafUn())
	_ = obj3 // avoid error if there are no references

	assert.Equal(t, obj2.LeafUn().PrimaryKey(), obj3.LeafUn().PrimaryKey())

}

func TestRootUn_ReferenceUpdateOldObjects(t *testing.T) {
	ctx := db.NewContext(nil)
	obj := createMaximalSampleRootUn(ctx)
	assert.NoError(t, obj.Save(ctx))
	defer deleteSampleRootUn(ctx, obj)

	updateMinimalSampleLeafUn(obj.LeafUn())

	assert.NoError(t, obj.Save(ctx))

	obj2, _ := LoadRootUn(ctx, obj.PrimaryKey(),

		node.RootUn().LeafUn(),
	)
	_ = obj2 // avoid error if there are no references

	assertEqualFieldsLeafUn(t, obj2.LeafUn(), obj.LeafUn())

}
func TestRootUn_EmptyPrimaryKeyGetter(t *testing.T) {
	obj := NewRootUn()

	i, err := strconv.Atoi(obj.ID())
	assert.NoError(t, err)
	assert.True(t, i < 0)
}

func TestRootUn_Getters(t *testing.T) {
	obj := createMinimalSampleRootUn()

	i, err := strconv.Atoi(obj.ID())
	assert.NoError(t, err)
	assert.True(t, i < 0)

	ctx := db.NewContext(nil)
	require.NoError(t, obj.Save(ctx))
	defer deleteSampleRootUn(ctx, obj)

	has, _ := HasRootUn(ctx, obj.PrimaryKey())
	assert.True(t, has)

	obj2, _ := LoadRootUn(ctx, obj.PrimaryKey(), node.RootUn().PrimaryKey())

	assert.Equal(t, obj.ID(), obj.Get(node.RootUn().ID().Identifier))
	assert.Equal(t, obj.Name(), obj.Get(node.RootUn().Name().Identifier))
	assert.Panics(t, func() { obj2.Name() })
	assert.Nil(t, obj2.Get(node.RootUn().Name().Identifier))
}

func TestRootUn_QueryLoad(t *testing.T) {
	obj := createMinimalSampleRootUn()
	ctx := db.NewContext(nil)
	err := obj.Save(ctx)
	assert.NoError(t, err)
	defer deleteSampleRootUn(ctx, obj)

	objs, _ := QueryRootUns(ctx).
		Where(op.Equal(node.RootUn().PrimaryKey(), obj.PrimaryKey())).
		OrderBy(node.RootUn().PrimaryKey()). // exercise order by
		Limit(1, 0).                         // exercise limit
		Calculation(node.RootUn(), "IsTrue", op.Equal(1, 1)).
		Load()

	assert.Equal(t, obj.PrimaryKey(), objs[0].PrimaryKey())
	assert.True(t, objs[0].GetAlias("IsTrue").Bool())
}
func TestRootUn_QueryLoadI(t *testing.T) {
	obj := createMinimalSampleRootUn()
	ctx := db.NewContext(nil)
	err := obj.Save(ctx)
	assert.NoError(t, err)
	defer deleteSampleRootUn(ctx, obj)

	objs, _ := QueryRootUns(ctx).
		Where(op.Equal(node.RootUn().PrimaryKey(), obj.PrimaryKey())).
		LoadI()

	assert.Equal(t, obj.PrimaryKey(), objs[0].Get("ID"))
}
func TestRootUn_QueryCursor(t *testing.T) {
	obj := createMinimalSampleRootUn()
	ctx := db.NewContext(nil)
	err := obj.Save(ctx)
	assert.NoError(t, err)
	defer deleteSampleRootUn(ctx, obj)

	cursor, _ := QueryRootUns(ctx).
		Where(op.Equal(node.RootUn().PrimaryKey(), obj.PrimaryKey())).
		LoadCursor()

	obj2, err2 := cursor.Next()
	assert.Equal(t, obj.PrimaryKey(), obj2.PrimaryKey())
	assert.NoError(t, err2)
	obj2, err2 = cursor.Next()
	assert.Nil(t, obj2)
	assert.NoError(t, err2)
	assert.NoError(t, cursor.Close())

	// test empty cursor result
	cursor, err = QueryRootUns(ctx).
		Where(op.Equal(1, 0)).
		LoadCursor()
	obj2, err = cursor.Next()
	assert.Nil(t, obj2)
	assert.NoError(t, err)
	assert.NoError(t, cursor.Close())
}
func TestRootUn_Count(t *testing.T) {
	ctx := db.NewContext(nil)
	obj := createMaximalSampleRootUn(ctx)
	err := obj.Save(ctx)
	assert.NoError(t, err)
	defer deleteSampleRootUn(ctx, obj)
	// reread in case there are data limitations imposed by the database
	obj2, _ := LoadRootUn(ctx, obj.PrimaryKey())

	assert.Positive(t, func() int { i, _ := CountRootUns(ctx); return i }())
	assert.Positive(t, func() int { i, _ := CountRootUnsByID(ctx, obj2.ID()); return i }())
	assert.Positive(t, func() int { i, _ := CountRootUnsByName(ctx, obj2.Name()); return i }())

}

func TestRootUn_MarshalJSON(t *testing.T) {
	obj := createMinimalSampleRootUn()

	b, err := json.Marshal(obj)
	assert.NoError(t, err)

	obj2 := NewRootUn()
	err = json.Unmarshal(b, &obj2)
	assert.NoError(t, err)

	assertEqualFieldsRootUn(t, obj, obj2)
}

func TestRootUn_MarshalBinary(t *testing.T) {
	obj := createMinimalSampleRootUn()

	b, err := obj.MarshalBinary()
	assert.NoError(t, err)

	obj2 := NewRootUn()
	err = obj2.UnmarshalBinary(b)
	assert.NoError(t, err)

	assertEqualFieldsRootUn(t, obj, obj2)
}

func TestRootUn_FailingMarshalBinary(t *testing.T) {
	obj := createMinimalSampleRootUn()
	var err error

	for i := 0; i < 11; i++ {
		enc := &test.GobEncoder{Count: i}
		err = obj.encodeTo(enc)
		assert.Error(t, err)
	}
	// do it again with aliases
	obj._aliases = make(map[string]any)
	for i := 0; i < 12; i++ {
		enc := &test.GobEncoder{Count: i}
		err = obj.encodeTo(enc)
		assert.Error(t, err)
	}
}

func TestRootUn_FailingUnmarshalBinary(t *testing.T) {
	obj := createMinimalSampleRootUn()
	b, err := obj.MarshalBinary()
	assert.NoError(t, err)
	obj2 := NewRootUn()
	for i := 0; i < 11; i++ {
		buf := bytes.NewReader(b)
		dec := &test.GobDecoder{Decoder: gob.NewDecoder(buf), Count: i}
		err = obj2.decodeFrom(dec)
		assert.Error(t, err)
	}

	// do it again with aliases
	obj = createMinimalSampleRootUn()
	obj._aliases = map[string]any{"a": 1}
	b, err = obj.MarshalBinary()
	assert.NoError(t, err)

	obj2 = NewRootUn()
	for i := 0; i < 12; i++ {
		buf := bytes.NewReader(b)
		dec := &test.GobDecoder{Decoder: gob.NewDecoder(buf), Count: i}
		err = obj2.decodeFrom(dec)
		assert.Error(t, err)
	}
}
