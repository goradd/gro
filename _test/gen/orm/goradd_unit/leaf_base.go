// Code generated by goradd-orm. DO NOT EDIT.

package goradd_unit

import (
	"bytes"
	"context"
	"encoding/gob"
	"encoding/json"
	"fmt"
	"unicode/utf8"

	"github.com/goradd/all"
	"github.com/goradd/maps"
	"github.com/goradd/orm/_test/gen/orm/goradd_unit/node"
	"github.com/goradd/orm/pkg/broadcast"
	"github.com/goradd/orm/pkg/db"
	"github.com/goradd/orm/pkg/op"
	"github.com/goradd/orm/pkg/query"
)

// LeafBase is embedded in a Leaf object and provides the ORM access to the database.
// The member variables of the structure are private and should not normally be accessed by the Leaf embedder.
// Instead, use the accessor functions.
type leafBase struct {
	id        string
	idIsValid bool

	name        string
	nameIsValid bool
	nameIsDirty bool

	// Reverse reference objects.

	revOptionalLeafRoots        maps.SliceMap[string, *Root] // Objects in the order they were queried
	revOptionalLeafRootsIsDirty bool

	revRequiredLeafRoots        maps.SliceMap[string, *Root] // Objects in the order they were queried
	revRequiredLeafRootsIsDirty bool

	revOptionalLeafUniqueRoot        *Root
	revOptionalLeafUniqueRootIsDirty bool // is a new one being associated

	revRequiredLeafUniqueRoot        *Root
	revRequiredLeafUniqueRootIsDirty bool // is a new one being associated

	// Custom aliases, if specified
	_aliases map[string]any

	// Indicates whether this is a new object, or one loaded from the database. Used by Save to know whether to Insert or Update.
	_restored bool

	_originalPK string
}

// IDs used to access the Leaf object fields by name using the Get function.
// doc: type=Leaf
const (
	Leaf_ID   = `ID`
	Leaf_Name = `Name`

	LeafOptionalLeafRoots      = `OptionalLeafRoots`
	LeafRequiredLeafRoots      = `RequiredLeafRoots`
	LeafOptionalLeafUniqueRoot = `OptionalLeafUniqueRoot`
	LeafRequiredLeafUniqueRoot = `RequiredLeafUniqueRoot`
)

const LeafNameMaxLength = 100 // The number of runes the column can hold

// Initialize or re-initialize a Leaf database object to default values.
// The primary key will get a temporary negative number which will be replaced when the object is saved.
// Multiple calls to Initialize are not guaranteed to create sequential values for the primary key.
func (o *leafBase) Initialize() {

	o.id = db.TemporaryPrimaryKey()

	o.idIsValid = false

	o.name = ""

	o.nameIsValid = false
	o.nameIsDirty = false

	// Reverse reference objects.

	o.revOptionalLeafRoots.Clear()
	o.revOptionalLeafRootsIsDirty = false

	o.revRequiredLeafRoots.Clear()
	o.revRequiredLeafRootsIsDirty = false

	o.revOptionalLeafUniqueRoot = nil
	o.revOptionalLeafUniqueRootIsDirty = false

	o.revRequiredLeafUniqueRoot = nil
	o.revRequiredLeafUniqueRootIsDirty = false

	o._aliases = nil

	o._restored = false
}

// PrimaryKey returns the current value of the primary key field.
func (o *leafBase) PrimaryKey() string {
	return o.id
}

// OriginalPrimaryKey returns the value of the primary key that was originally loaded into the object when it was
// read from the database.
func (o *leafBase) OriginalPrimaryKey() string {
	return o._originalPK
}

// Copy copies all valid fields to a new Leaf object.
// Forward reference ids will be copied, but reverse and many-many references will not.
// Attached objects will not be included in the copy.
// Call Save() on the new object to save it into the database.
// Copy might panic if any fields in the database were set to a size larger than the
// maximum size through a process that accessed the database outside of the ORM.
func (o *leafBase) Copy() (newObject *Leaf) {
	newObject = NewLeaf()
	if o.nameIsValid {
		newObject.SetName(o.name)
	}
	return
}

// ID returns the loaded value of ID or
// the zero value if not loaded. Call IDIsValid() to determine
// if it is loaded.
func (o *leafBase) ID() string {
	return fmt.Sprint(o.id)
}

// IDIsValid returns true if the value was loaded from the database or has been set.
func (o *leafBase) IDIsValid() bool {
	return o._restored && o.idIsValid
}

// Name returns the loaded value of Name.
func (o *leafBase) Name() string {
	if o._restored && !o.nameIsValid {
		panic("Name was not selected in the last query and has not been set, and so is not valid")
	}
	return o.name
}

// NameIsValid returns true if the value was loaded from the database or has been set.
func (o *leafBase) NameIsValid() bool {
	return o.nameIsValid
}

// SetName sets the value of Name in the object, to be saved later in the database using the Save() function.
func (o *leafBase) SetName(v string) {
	if utf8.RuneCountInString(v) > LeafNameMaxLength {
		panic("attempted to set Leaf.Name to a value larger than its maximum length in runes")
	}
	if o._restored &&
		o.nameIsValid && // if it was not selected, then make sure it gets set, since our end comparison won't be valid
		o.name == v {
		// no change
		return
	}

	o.nameIsValid = true
	o.name = v
	o.nameIsDirty = true
}

// GetAlias returns the value for the Alias node aliasKey that was returned in the most
// recent query.
func (o *leafBase) GetAlias(aliasKey string) query.AliasValue {
	if a, ok := o._aliases[aliasKey]; ok {
		return query.NewAliasValue(a)
	} else {
		panic("Alias " + aliasKey + " not found.")
	}
}

// IsNew returns true if the object will create a new record when saved.
func (o *leafBase) IsNew() bool {
	return !o._restored
}

// OptionalLeafRoot returns a single Root object by primary key, if one was loaded.
// Otherwise, it will return nil. It will not return Root objects that are not saved.
func (o *leafBase) OptionalLeafRoot(pk string) *Root {
	v := o.revOptionalLeafRoots.Get(pk)
	return v
}

// OptionalLeafRoots returns a slice of Root objects if loaded.
func (o *leafBase) OptionalLeafRoots() []*Root {
	return o.revOptionalLeafRoots.Values()
}

// LoadOptionalLeafRoots loads a new slice of Root objects and returns it.
func (o *leafBase) LoadOptionalLeafRoots(ctx context.Context, conditions ...interface{}) []*Root {
	if o.IsNew() {
		return nil
	}
	for obj := range o.revOptionalLeafRoots.ValuesIter() {
		if obj.IsDirty() {
			panic("You cannot load over items that have changed but have not been saved.")
		}
	}

	qb := queryRoots(ctx)
	cond := op.Equal(node.Root().OptionalLeafID(), o.PrimaryKey())
	if conditions != nil {
		conditions = append(conditions, cond)
		cond = op.And(conditions...)
	}

	objs := qb.Where(cond).Load()
	o.revOptionalLeafRoots.Clear()

	for _, obj := range objs {
		pk := obj.ID()
		o.revOptionalLeafRoots.Set(pk, obj)
	}

	if o.revOptionalLeafRoots.Len() == 0 {
		return nil
	}
	return o.revOptionalLeafRoots.Values()
}

// CountOptionalLeafRoots does a database query and returns the number of Root
// objects currently in the database connected to this object.
func (o *leafBase) CountOptionalLeafRoots(ctx context.Context) int {
	return CountRootsByOptionalLeafID(ctx, o.PrimaryKey())
}

// SetOptionalLeafRoots associates the objects in objs with the Leaf.
// If it has items already associated with it that will not be associated after a save,
// the foreign keys for those items will be set to null.
// If you did not use a join to query the items in the first place, used a conditional join,
// or joined with an expansion, be particularly careful, since you may be changing items
// that are not currently attached to this Leaf.
func (o *leafBase) SetOptionalLeafRoots(objs ...*Root) {
	for obj := range o.revOptionalLeafRoots.ValuesIter() {
		if obj.IsDirty() {
			panic("You cannot overwrite items that have changed but have not been saved.")
		}
	}

	o.revOptionalLeafRoots.Clear()
	for _, obj := range objs {
		pk := obj.ID()
		o.revOptionalLeafRoots.Set(pk, obj)
	}
	o.revOptionalLeafRootsIsDirty = true
}

// RequiredLeafRoot returns a single Root object by primary key, if one was loaded.
// Otherwise, it will return nil. It will not return Root objects that are not saved.
func (o *leafBase) RequiredLeafRoot(pk string) *Root {
	v := o.revRequiredLeafRoots.Get(pk)
	return v
}

// RequiredLeafRoots returns a slice of Root objects if loaded.
func (o *leafBase) RequiredLeafRoots() []*Root {
	return o.revRequiredLeafRoots.Values()
}

// LoadRequiredLeafRoots loads a new slice of Root objects and returns it.
func (o *leafBase) LoadRequiredLeafRoots(ctx context.Context, conditions ...interface{}) []*Root {
	if o.IsNew() {
		return nil
	}
	for obj := range o.revRequiredLeafRoots.ValuesIter() {
		if obj.IsDirty() {
			panic("You cannot load over items that have changed but have not been saved.")
		}
	}

	qb := queryRoots(ctx)
	cond := op.Equal(node.Root().RequiredLeafID(), o.PrimaryKey())
	if conditions != nil {
		conditions = append(conditions, cond)
		cond = op.And(conditions...)
	}

	objs := qb.Where(cond).Load()
	o.revRequiredLeafRoots.Clear()

	for _, obj := range objs {
		pk := obj.ID()
		o.revRequiredLeafRoots.Set(pk, obj)
	}

	if o.revRequiredLeafRoots.Len() == 0 {
		return nil
	}
	return o.revRequiredLeafRoots.Values()
}

// CountRequiredLeafRoots does a database query and returns the number of Root
// objects currently in the database connected to this object.
func (o *leafBase) CountRequiredLeafRoots(ctx context.Context) int {
	return CountRootsByRequiredLeafID(ctx, o.PrimaryKey())
}

// SetRequiredLeafRoots associates the objects in objs with the Leaf.
// WARNING! If it has items already associated with it that will not be associated after a save,
// Save will panic. Be sure to delete those items or otherwise fix those pointers before calling save.
func (o *leafBase) SetRequiredLeafRoots(objs ...*Root) {
	for obj := range o.revRequiredLeafRoots.ValuesIter() {
		if obj.IsDirty() {
			panic("You cannot overwrite items that have changed but have not been saved.")
		}
	}

	o.revRequiredLeafRoots.Clear()
	for _, obj := range objs {
		pk := obj.ID()
		o.revRequiredLeafRoots.Set(pk, obj)
	}
	o.revRequiredLeafRootsIsDirty = true
}

// OptionalLeafUniqueRoot returns the connected Root object, if one was loaded.
// Otherwise, it will return nil.
func (o *leafBase) OptionalLeafUniqueRoot() *Root {
	if o.revOptionalLeafUniqueRoot == nil {
		return nil
	}
	return o.revOptionalLeafUniqueRoot
}

// LoadOptionalLeafUniqueRoot returns the connected Root object, if one was loaded.
// Otherwise, it will load a new one and return it.
func (o *leafBase) LoadOptionalLeafUniqueRoot(ctx context.Context) *Root {
	if o.revOptionalLeafUniqueRoot != nil && o.revOptionalLeafUniqueRoot.IsDirty() {
		panic("The OptionalLeafUniqueRoot has changed. You must save it first before changing to a different one.")
	}
	if o.revOptionalLeafUniqueRoot == nil {
		pk := o.ID()
		o.revOptionalLeafUniqueRoot = LoadRootByOptionalLeafUniqueID(ctx, pk)
	}
	return o.revOptionalLeafUniqueRoot
}

// SetOptionalLeafUniqueRoot associates obj with this Leaf
// through the reverse relationship in Root.OptionalLeafUniqueID.
//
// The association is temporary until you call Save().
// WARNING! Since this is a non-nullable unique relationship,
// if a different Root object is currently pointing to this Leaf,
// Save() will panic. You should delete that object first.
func (o *leafBase) SetOptionalLeafUniqueRoot(obj *Root) {
	if o.revOptionalLeafUniqueRoot != nil && o.revOptionalLeafUniqueRoot.IsDirty() {
		panic("The OptionalLeafUniqueRoot has changed. You must save it first before changing to a different one.")
	}
	o.revOptionalLeafUniqueRoot = obj
	o.revOptionalLeafUniqueRootIsDirty = true
}

// RequiredLeafUniqueRoot returns the connected Root object, if one was loaded.
// Otherwise, it will return nil.
func (o *leafBase) RequiredLeafUniqueRoot() *Root {
	if o.revRequiredLeafUniqueRoot == nil {
		return nil
	}
	return o.revRequiredLeafUniqueRoot
}

// LoadRequiredLeafUniqueRoot returns the connected Root object, if one was loaded.
// Otherwise, it will load a new one and return it.
func (o *leafBase) LoadRequiredLeafUniqueRoot(ctx context.Context) *Root {
	if o.revRequiredLeafUniqueRoot != nil && o.revRequiredLeafUniqueRoot.IsDirty() {
		panic("The RequiredLeafUniqueRoot has changed. You must save it first before changing to a different one.")
	}
	if o.revRequiredLeafUniqueRoot == nil {
		pk := o.ID()
		o.revRequiredLeafUniqueRoot = LoadRootByRequiredLeafUniqueID(ctx, pk)
	}
	return o.revRequiredLeafUniqueRoot
}

// SetRequiredLeafUniqueRoot associates obj with this Leaf
// through the reverse relationship in Root.RequiredLeafUniqueID.
//
// The association is temporary until you call Save().
// WARNING! Since this is a non-nullable unique relationship,
// if a different Root object is currently pointing to this Leaf,
// Save() will panic. You should delete that object first.
func (o *leafBase) SetRequiredLeafUniqueRoot(obj *Root) {
	if o.revRequiredLeafUniqueRoot != nil && o.revRequiredLeafUniqueRoot.IsDirty() {
		panic("The RequiredLeafUniqueRoot has changed. You must save it first before changing to a different one.")
	}
	o.revRequiredLeafUniqueRoot = obj
	o.revRequiredLeafUniqueRootIsDirty = true
}

// LoadLeaf returns a Leaf from the database.
// selectNodes lets you provide nodes for selecting specific fields or additional fields from related tables.
// See [LeafsBuilder.Select] for more info.
func LoadLeaf(ctx context.Context, id string, selectNodes ...query.Node) *Leaf {
	return queryLeafs(ctx).
		Where(op.Equal(node.Leaf().ID(), id)).
		Select(selectNodes...).
		Get()
}

// HasLeaf returns true if a Leaf with the given primaryKey exists in the database.
// doc: type=Leaf
func HasLeaf(ctx context.Context, id string) bool {
	return queryLeafs(ctx).
		Where(op.Equal(node.Leaf().ID(), id)).
		Count() == 1
}

// The LeafBuilder uses the query.BuilderI interface to build a query.
// All query operations go through this query builder.
// End a query by calling either Load, LoadCursor, Get, Count, or Delete
type LeafBuilder interface {
	// Join(alias string, joinedTable query.Node, condition query.Node) LeafBuilder

	// Where adds a condition to filter what gets selected.
	// Calling Where multiple times will AND the conditions together.
	Where(c query.Node) LeafBuilder

	// OrderBy specifies how the resulting data should be sorted.
	// By default, the given nodes are sorted in ascending order.
	// Add Descending() to the node to specify that it should be sorted in descending order.
	OrderBy(nodes ...query.Sorter) LeafBuilder

	// Limit will return a subset of the data, limited to the offset and number of rows specified.
	// For large data sets and specific types of queries, this can be slow, because it will perform
	// the entire query before computing the limit.
	// You cannot limit a query that has selected a "many" relationship".
	Limit(maxRowCount int, offset int) LeafBuilder

	// Select performs two functions:
	//  - Passing a table type node will join the object or objects from that table to this object.
	//  - Passing a column node will optimize the query to only return the specified fields.
	// Once you select at least one column, you must select all the columns that you want in the result.
	// Some fields, like primary keys, are always selected.
	// If you are using a GroupBy, you must select the fields in the GroupBy.
	Select(nodes ...query.Node) LeafBuilder

	// Calculation adds a calculation described by operation with the name alias.
	// After the query, you can read the data using GetAlias() on the object identified by base.
	Calculation(base query.TableNodeI, alias string, operation query.OperationNodeI) LeafBuilder

	// Distinct removes duplicates from the results of the query.
	// Adding a Select() is required.
	Distinct() LeafBuilder

	// GroupBy controls how results are grouped when using aggregate functions with Calculation.
	GroupBy(nodes ...query.Node) LeafBuilder

	// Having does additional filtering on the results of the query after the query is performed.
	Having(node query.Node) LeafBuilder

	// Load terminates the query builder, performs the query, and returns a slice of Leaf objects.
	// If there are any errors, nil is returned and the specific error is stored in the context.
	// If no results come back from the query, it will return a non-nil empty slice.
	Load() []*Leaf
	// Load terminates the query builder, performs the query, and returns a slice of interfaces.
	// This can then satisfy a general interface that loads arrays of objects.
	// If there are any errors, nil is returned and the specific error is stored in the context.
	// If no results come back from the query, it will return a non-nil empty slice.
	LoadI() []query.OrmObj

	// LoadCursor terminates the query builder, performs the query, and returns a cursor to the query.
	//
	// A query cursor is useful for dealing with large amounts of query results. However, there are some
	// limitations to its use. When working with SQL databases, you cannot use a cursor while querying
	// many-to-many or reverse relationships that will create an array of values.
	//
	// Call Next() on the returned cursor object to step through the results. Make sure you call Close
	// on the cursor object when you are done. You should use
	//   defer cursor.Close()
	// to make sure the cursor gets closed.
	LoadCursor() leafsCursor

	// Get is a convenience method to return only the first item found in a query.
	// The entire query is performed, so you should generally use this only if you know
	// you are selecting on one or very few items.
	//
	// If an error occurs, or no results are found, a nil is returned.
	// In the case of an error, the error is returned in the context.
	Get() *Leaf

	// Count terminates a query and returns just the number of items in the result.
	// If you have Select or Calculation columns in the query, it will count NULL results as well.
	// To not count NULL values, use Where in the builder with a NotNull operation.
	// To count distinct combinations of items, call Distinct() on the builder.
	Count() int

	// Subquery terminates the query builder and tags it as a subquery within a larger query.
	// You MUST include what you are selecting by adding Calculation or Select functions on the subquery builder.
	// Generally you would use this as a node to a Calculation function on the surrounding query builder.
	// Subquery() *query.SubqueryNode

}

type leafQueryBuilder struct {
	builder *query.Builder
}

func newLeafBuilder(ctx context.Context) LeafBuilder {
	b := leafQueryBuilder{
		builder: query.NewBuilder(ctx, node.Leaf()),
	}
	return &b
}

// Load terminates the query builder, performs the query, and returns a slice of Leaf objects.
// If there are any errors, nil is returned and the specific error is stored in the context.
// If no results come back from the query, it will return a non-nil empty slice.
func (b *leafQueryBuilder) Load() (leafs []*Leaf) {
	b.builder.Command = query.BuilderCommandLoad
	database := db.GetDatabase("goradd_unit")
	results := database.BuilderQuery(b.builder)
	if results == nil {
		return
	}
	for _, item := range results.([]map[string]any) {
		o := new(Leaf)
		o.load(item, o)
		leafs = append(leafs, o)
	}
	return
}

// Load terminates the query builder, performs the query, and returns a slice of interfaces.
// This can then satisfy a variety of interfaces that load arrays of objects, including KeyLabeler.
// If there are any errors, nil is returned and the specific error is stored in the context.
// If no results come back from the query, it will return a non-nil empty slice.
func (b *leafQueryBuilder) LoadI() (leafs []query.OrmObj) {
	b.builder.Command = query.BuilderCommandLoad
	database := db.GetDatabase("goradd_unit")
	results := database.BuilderQuery(b.builder)
	if results == nil {
		return
	}
	for _, item := range results.([]map[string]any) {
		o := new(Leaf)
		o.load(item, o)
		leafs = append(leafs, o)
	}
	return
}

// LoadCursor terminates the query builder, performs the query, and returns a cursor to the query.
//
// A query cursor is useful for dealing with large amounts of query results. However, there are some
// limitations to its use. When working with SQL databases, you cannot use a cursor while querying
// many-to-many or reverse relationships that will create an array of values.
//
// Call Next() on the returned cursor object to step through the results. Make sure you call Close
// on the cursor object when you are done. You should use
//
//	defer cursor.Close()
//
// to make sure the cursor gets closed.
func (b *leafQueryBuilder) LoadCursor() leafsCursor {
	b.builder.Command = query.BuilderCommandLoadCursor
	database := db.GetDatabase("goradd_unit")
	result := database.BuilderQuery(b.builder)
	cursor := result.(query.CursorI)

	return leafsCursor{cursor}
}

type leafsCursor struct {
	query.CursorI
}

// Next returns the current Leaf object and moves the cursor to the next one.
//
// If there are no more records, it returns nil.
func (c leafsCursor) Next() *Leaf {
	if c.CursorI == nil {
		return nil
	}

	row := c.CursorI.Next()
	if row == nil {
		return nil
	}
	o := new(Leaf)
	o.load(row, o)
	return o
}

// Get is a convenience method to return only the first item found in a query.
// The entire query is performed, so you should generally use this only if you know
// you are selecting on one or very few items.
//
// If an error occurs, or no results are found, a nil is returned.
// In the case of an error, the error is returned in the context.
func (b *leafQueryBuilder) Get() *Leaf {
	results := b.Load()
	if results != nil && len(results) > 0 {
		obj := results[0]
		return obj
	} else {
		return nil
	}
}

/*
// Join attaches the table referred to by joinedTable, filtering the join process using the operation node specified
// by condition.
// The joinedTable node will be modified by this process so that you can use it in subsequent builder operations.
// Call GetAlias to return the resulting object from the query result.
func (b *leafQueryBuilder) Join(alias string, joinedTable query.Node, condition query.Node) LeafBuilder {
    if query.RootNode(n).TableName_() != "leaf" {
        panic("you can only join a node that is rooted at node.Leaf()")
    }
    // TODO: make sure joinedTable is a table node
	b.builder.Join(alias, joinedTable, condition)
	return b
}
*/

// Where adds a condition to filter what gets selected.
// Calling Where multiple times will AND the conditions together.
func (b *leafQueryBuilder) Where(c query.Node) LeafBuilder {
	b.builder.Where(c)
	return b
}

// OrderBy specifies how the resulting data should be sorted.
// By default, the given nodes are sorted in ascending order.
// Add Descending() to the node to specify that it should be sorted in descending order.
func (b *leafQueryBuilder) OrderBy(nodes ...query.Sorter) LeafBuilder {
	b.builder.OrderBy(nodes...)
	return b
}

// Limit will return a subset of the data, limited to the offset and number of rows specified.
// For large data sets and specific types of queries, this can be slow, because it will perform
// the entire query before computing the limit.
// You cannot limit a query that has embedded arrays.
func (b *leafQueryBuilder) Limit(maxRowCount int, offset int) LeafBuilder {
	b.builder.Limit(maxRowCount, offset)
	return b
}

// Select specifies what specific columns will be loaded with data.
// By default, all the columns of the leaf table will be queried and loaded.
// If nodes contains columns from the leaf table, that will limit the columns queried and loaded to only those columns.
// If related tables are specified, then all the columns from those tables are queried, selected and joined to the result.
// If columns in related tables are specified, then only those columns will be queried and loaded.
// Depending on the query, additional columns may automatically be added to the query. In particular, primary key columns
// will be added in most situations. The exception to this would be in distinct queries, group by queries, or subqueries.
func (b *leafQueryBuilder) Select(nodes ...query.Node) LeafBuilder {
	b.builder.Select(nodes...)
	return b
}

// Calculation adds operation as an aliased value onto base.
// After the query, you can read the data by passing alias to GetAlias on the returned object.
func (b *leafQueryBuilder) Calculation(base query.TableNodeI, alias string, operation query.OperationNodeI) LeafBuilder {
	b.builder.Calculation(base, alias, operation)
	return b
}

// Distinct removes duplicates from the results of the query.
// Adding a Select() is usually required.
func (b *leafQueryBuilder) Distinct() LeafBuilder {
	b.builder.Distinct()
	return b
}

// GroupBy controls how results are grouped when using aggregate functions with Calculation.
func (b *leafQueryBuilder) GroupBy(nodes ...query.Node) LeafBuilder {
	b.builder.GroupBy(nodes...)
	return b
}

// Having does additional filtering on the results of the query after the query is performed.
func (b *leafQueryBuilder) Having(node query.Node) LeafBuilder {
	b.builder.Having(node)
	return b
}

// Count terminates a query and returns just the number of items in the result.
// If you have Select or Calculation columns in the query, it will count NULL results as well.
// To not count NULL values, use Where in the builder with a NotNull operation.
// To count distinct combinations of items, call Distinct() on the builder.
func (b *leafQueryBuilder) Count() int {
	b.builder.Command = query.BuilderCommandCount
	database := db.GetDatabase("goradd_unit")
	results := database.BuilderQuery(b.builder)
	if results == nil {
		return 0
	}
	return results.(int)
}

/*
// Subquery terminates the query builder and tags it as a subquery within a larger query.
// You MUST include what you are selecting by adding Calculation or Select functions on the subquery builder.
// Generally you would use this as a node to a Calculation function on the surrounding query builder.
func (b *leafQueryBuilder)  Subquery() *query.SubqueryNode {
	 return b.builder.Subquery()
}
*/

// CountLeafsByID queries the database and returns the number of Leaf objects that
// have id.
// doc: type=Leaf
func CountLeafsByID(ctx context.Context, id string) int {
	return queryLeafs(ctx).Where(op.Equal(node.Leaf().ID(), id)).Count()
}

// CountLeafsByName queries the database and returns the number of Leaf objects that
// have name.
// doc: type=Leaf
func CountLeafsByName(ctx context.Context, name string) int {
	return queryLeafs(ctx).Where(op.Equal(node.Leaf().Name(), name)).Count()
}

// load is the private loader that transforms data coming from the database into a tree structure reflecting the relationships
// between the object chain requested by the user in the query.
func (o *leafBase) load(m map[string]interface{}, objThis *Leaf) {

	if v, ok := m["id"]; ok && v != nil {
		if o.id, ok = v.(string); ok {
			o.idIsValid = true

			o._originalPK = o.id

		} else {
			panic("Wrong type found for id.")
		}
	} else {
		o.idIsValid = false
		o.id = ""
	}

	if v, ok := m["name"]; ok && v != nil {
		if o.name, ok = v.(string); ok {
			o.nameIsValid = true
			o.nameIsDirty = false

		} else {
			panic("Wrong type found for name.")
		}
	} else {
		o.nameIsValid = false
		o.name = ""
		o.nameIsDirty = false
	}

	// Reverse references

	if v, ok := m["OptionalLeafRoots"]; ok {
		switch v2 := v.(type) {
		case []map[string]any: // array expansion
			o.revOptionalLeafRoots.Clear()
			o.revOptionalLeafRootsIsDirty = false
			for _, v3 := range v2 {
				obj := new(Root)
				obj.load(v3, obj)
				o.revOptionalLeafRoots.Set(obj.PrimaryKey(), obj)
			}
		case map[string]any: // single expansion
			obj := new(Root)
			obj.load(v2, obj)
			o.revOptionalLeafRoots.Clear()
			o.revOptionalLeafRoots.Set(obj.PrimaryKey(), obj)
			o.revOptionalLeafRootsIsDirty = false
		default:
			panic("Wrong type found for revOptionalLeafRoots object.")
		}
	} else {
		o.revOptionalLeafRoots.Clear()
		o.revOptionalLeafRootsIsDirty = false
	}

	if v, ok := m["RequiredLeafRoots"]; ok {
		switch v2 := v.(type) {
		case []map[string]any: // array expansion
			o.revRequiredLeafRoots.Clear()
			o.revRequiredLeafRootsIsDirty = false
			for _, v3 := range v2 {
				obj := new(Root)
				obj.load(v3, obj)
				o.revRequiredLeafRoots.Set(obj.PrimaryKey(), obj)
			}
		case map[string]any: // single expansion
			obj := new(Root)
			obj.load(v2, obj)
			o.revRequiredLeafRoots.Clear()
			o.revRequiredLeafRoots.Set(obj.PrimaryKey(), obj)
			o.revRequiredLeafRootsIsDirty = false
		default:
			panic("Wrong type found for revRequiredLeafRoots object.")
		}
	} else {
		o.revRequiredLeafRoots.Clear()
		o.revRequiredLeafRootsIsDirty = false
	}

	if v, ok := m["OptionalLeafUniqueRoot"]; ok {
		if v2, ok2 := v.(map[string]any); ok2 {
			o.revOptionalLeafUniqueRoot = new(Root)
			o.revOptionalLeafUniqueRoot.load(v2, o.revOptionalLeafUniqueRoot)
			o.revOptionalLeafUniqueRootIsDirty = false
		} else {
			panic("Wrong type found for optionalLeafUniqueID object.")
		}
	} else {
		o.revOptionalLeafUniqueRoot = nil
		o.revOptionalLeafUniqueRootIsDirty = false
	}

	if v, ok := m["RequiredLeafUniqueRoot"]; ok {
		if v2, ok2 := v.(map[string]any); ok2 {
			o.revRequiredLeafUniqueRoot = new(Root)
			o.revRequiredLeafUniqueRoot.load(v2, o.revRequiredLeafUniqueRoot)
			o.revRequiredLeafUniqueRootIsDirty = false
		} else {
			panic("Wrong type found for requiredLeafUniqueID object.")
		}
	} else {
		o.revRequiredLeafUniqueRoot = nil
		o.revRequiredLeafUniqueRootIsDirty = false
	}

	if v, ok := m["aliases_"]; ok {
		o._aliases = v.(map[string]any)
	}

	o._restored = true

}

// Save will update or insert the object, depending on the state of the object.
// If it has any auto-generated ids, those will be updated.
// Database errors generally will be handled by the logger and not returned here,
// since those indicate a problem with database driver or configuration.
// Save will return a db.OptimisticLockError if it detects a collision when two users
// are attempting to change the same database record.
func (o *leafBase) Save(ctx context.Context) error {
	if o._restored {
		return o.update(ctx)
	} else {
		return o.insert(ctx)
	}
}

// update will update the values in the database, saving any changed values.
func (o *leafBase) update(ctx context.Context) error {
	if !o._restored {
		panic("cannot update a record that was not originally read from the database.")
	}
	if !o.IsDirty() {
		return nil // nothing to save
	}

	var modifiedFields map[string]interface{}

	d := Database()
	err := db.ExecuteTransaction(ctx, d, func() error {

		modifiedFields = o.getModifiedFields()
		if len(modifiedFields) != 0 {
			var err2 error

			_, err2 = d.Update(ctx, "leaf", "id", o._originalPK, modifiedFields, "", 0)
			if err2 != nil {
				return err2
			}
		}

		if o.revOptionalLeafRootsIsDirty {
			// relation connection changed

			currentObjs := QueryRoots(ctx).
				Where(op.Equal(node.Root().OptionalLeafID(), o.PrimaryKey())).
				Select(node.Root().OptionalLeafID()).
				Load()

			for _, obj := range currentObjs {
				if !o.revOptionalLeafRoots.Has(obj.PrimaryKey()) {
					// The old object is not in the group of new objects
					obj.SetOptionalLeafIDToNull()
					if err := obj.Save(ctx); err != nil {
						return err
					}
				}
			}
			for obj := range o.revOptionalLeafRoots.ValuesIter() {
				obj.optionalLeafIDIsDirty = true // force a change in case data is stale
				obj.SetOptionalLeafID(o.PrimaryKey())
				if err := obj.Save(ctx); err != nil {
					return err
				}
			}

		} else {

			// save related objects
			for obj := range o.revOptionalLeafRoots.ValuesIter() {
				if err := obj.Save(ctx); err != nil {
					return err
				}
			}
		}
		if o.revRequiredLeafRootsIsDirty {
			// relation connection changed

			// Since the other side of the relationship cannot be null, there cannot be objects that will be detached.
			oldObjs := QueryRoots(ctx).
				Where(op.Equal(node.Root().RequiredLeafID(), o.PrimaryKey())).
				Select(node.Root().RequiredLeafID()).
				Load()
			for _, obj := range oldObjs {
				if !o.revRequiredLeafRoots.Has(obj.PrimaryKey()) {
					// The old object is not in the group of new objects
					panic(fmt.Sprintf("cannot remove a non-null reference. Point the reference new a new record first. Primary Key: %v", obj.PrimaryKey()))
				}
			}

			for obj := range o.revRequiredLeafRoots.ValuesIter() {
				obj.SetRequiredLeafID(o.PrimaryKey())
				obj.requiredLeafIDIsDirty = true // force a change in case data is stale
				if err := obj.Save(ctx); err != nil {
					return err
				}
			}

		} else {

			// save related objects
			for obj := range o.revRequiredLeafRoots.ValuesIter() {
				if err := obj.Save(ctx); err != nil {
					return err
				}
			}
		}
		if o.revOptionalLeafUniqueRootIsDirty {
			// relation connection changed

			// Since the other side of the relationship cannot be null, if there is an object already attached,
			// that is different than the one we are trying to attach, we panic.
			oldObj := QueryRoots(ctx).
				Where(op.Equal(node.Root().OptionalLeafUniqueID(), o.PrimaryKey())).
				Select(node.Root().OptionalLeafUniqueID()).
				Get()

			if oldObj != nil {
				if o.revOptionalLeafUniqueRoot != nil && oldObj.PrimaryKey() != o.revOptionalLeafUniqueRoot.PrimaryKey() {
					panic("cannot set a unique non-null reference when another object is already set to it. " + o.revOptionalLeafUniqueRoot.PrimaryKey() + " is not " + oldObj.PrimaryKey())
				}
			}
			// we are moving the attachment from one place, to our object, or attaching an object that is already attached.
			if o.revOptionalLeafUniqueRoot != nil {
				o.revOptionalLeafUniqueRoot.SetOptionalLeafUniqueID(o.PrimaryKey())
				if err := o.revOptionalLeafUniqueRoot.Save(ctx); err != nil {
					return err
				}
			}

		} else {

			// save related object
			if o.revOptionalLeafUniqueRoot != nil {
				if err := o.revOptionalLeafUniqueRoot.Save(ctx); err != nil {
					return err
				}
			}
		}
		if o.revRequiredLeafUniqueRootIsDirty {
			// relation connection changed

			// Since the other side of the relationship cannot be null, if there is an object already attached,
			// that is different than the one we are trying to attach, we panic.
			oldObj := QueryRoots(ctx).
				Where(op.Equal(node.Root().RequiredLeafUniqueID(), o.PrimaryKey())).
				Select(node.Root().RequiredLeafUniqueID()).
				Get()

			if oldObj != nil {
				if o.revRequiredLeafUniqueRoot != nil && oldObj.PrimaryKey() != o.revRequiredLeafUniqueRoot.PrimaryKey() {
					panic("cannot set a unique non-null reference when another object is already set to it. " + o.revRequiredLeafUniqueRoot.PrimaryKey() + " is not " + oldObj.PrimaryKey())
				}
			}
			// we are moving the attachment from one place, to our object, or attaching an object that is already attached.
			if o.revRequiredLeafUniqueRoot != nil {
				o.revRequiredLeafUniqueRoot.SetRequiredLeafUniqueID(o.PrimaryKey())
				if err := o.revRequiredLeafUniqueRoot.Save(ctx); err != nil {
					return err
				}
			}

		} else {

			// save related object
			if o.revRequiredLeafUniqueRoot != nil {
				if err := o.revRequiredLeafUniqueRoot.Save(ctx); err != nil {
					return err
				}
			}
		}

		return nil
	}) // transaction
	if err != nil {
		return err
	}

	o.resetDirtyStatus()
	if len(modifiedFields) != 0 {
		broadcast.Update(ctx, "goradd_unit", "leaf", o._originalPK, all.SortedKeys(modifiedFields)...)
	}

	return nil
}

// insert will insert the object into the database. Related items will be saved.
func (o *leafBase) insert(ctx context.Context) (err error) {
	d := Database()
	err = db.ExecuteTransaction(ctx, d, func() error {

		if !o.nameIsValid {
			panic("a value for Name is required, and there is no default value. Call SetName() before inserting the record.")
		}

		m := o.getValidFields()

		id := d.Insert(ctx, "leaf", m)
		o.id = id
		o._originalPK = id

		if o.revOptionalLeafRoots.Len() > 0 {
			for _, obj := range o.revOptionalLeafRoots.All() {
				obj.SetOptionalLeafID(id)
				if err = obj.Save(ctx); err != nil {
					return err
				}
				o.revOptionalLeafRoots.Set(obj.PrimaryKey(), obj)
			}
		}

		if o.revRequiredLeafRoots.Len() > 0 {
			for _, obj := range o.revRequiredLeafRoots.All() {
				obj.SetRequiredLeafID(id)
				if err = obj.Save(ctx); err != nil {
					return err
				}
				o.revRequiredLeafRoots.Set(obj.PrimaryKey(), obj)
			}
		}

		if o.revOptionalLeafUniqueRoot != nil {
			o.revOptionalLeafUniqueRoot.SetOptionalLeafUniqueID(id)
			if err = o.revOptionalLeafUniqueRoot.Save(ctx); err != nil {
				return err
			}
		}

		if o.revRequiredLeafUniqueRoot != nil {
			o.revRequiredLeafUniqueRoot.SetRequiredLeafUniqueID(id)
			if err = o.revRequiredLeafUniqueRoot.Save(ctx); err != nil {
				return err
			}
		}

		return nil

	}) // transaction

	if err != nil {
		return
	}

	o.resetDirtyStatus()
	o._restored = true
	broadcast.Insert(ctx, "goradd_unit", "leaf", o.PrimaryKey())
	return
}

// getModifiedFields returns the database columns that have been modified. This
// will determine which specific fields are sent to the database to be changed.
func (o *leafBase) getModifiedFields() (fields map[string]interface{}) {
	fields = map[string]interface{}{}
	if o.nameIsDirty {
		fields["name"] = o.name
	}
	return
}

// getValidFields returns the fields that have valid data in them in a form ready to send to the database.
func (o *leafBase) getValidFields() (fields map[string]interface{}) {
	fields = map[string]interface{}{}
	if o.nameIsValid {
		fields["name"] = o.name
	}
	return
}

// Delete deletes the record from the database.
//
// Associated OptionalLeafRoots will have their OptionalLeafID field set to NULL.
// Associated RequiredLeafRoots will also be deleted since their RequiredLeafID fields are not nullable.
// An associated {= rev.ReverseIdentifier()  will also be deleted since its OptionalLeafUniqueID field is not nullable.
// An associated {= rev.ReverseIdentifier()  will also be deleted since its RequiredLeafUniqueID field is not nullable.
func (o *leafBase) Delete(ctx context.Context) (err error) {
	if o == nil {
		return // allow deleting of a nil object to be a noop
	}
	if !o._restored {
		panic("Cannot delete a record that has no primary key value.")
	}
	d := Database()
	err = db.ExecuteTransaction(ctx, d, func() error {

		{
			objs := QueryRoots(ctx).
				Where(op.Equal(node.Root().OptionalLeafID(), o.id)).
				Select(node.Root().OptionalLeafID()).
				Load()
			for _, obj := range objs {
				obj.SetOptionalLeafIDToNull()
				if err = obj.Save(ctx); err != nil {
					return err
				}
			}
			o.revOptionalLeafRoots.Clear()
		}

		{
			objs := QueryRoots(ctx).
				Where(op.Equal(node.Root().RequiredLeafID(), o.id)).
				Load()
			for _, obj := range objs {
				if err = obj.Delete(ctx); err != nil {
					return err
				}
			}
			o.revRequiredLeafRoots.Clear()
		}

		{
			obj := QueryRoots(ctx).
				Where(op.Equal(node.Root().OptionalLeafUniqueID(), o.id)).
				Get()
			if obj != nil {
				if err = obj.Delete(ctx); err != nil {
					return err
				}
			}
			// Set this object's pointer to the reverse object to nil to mark that we broke the link
			o.revOptionalLeafUniqueRoot = nil
		}

		{
			obj := QueryRoots(ctx).
				Where(op.Equal(node.Root().RequiredLeafUniqueID(), o.id)).
				Get()
			if obj != nil {
				if err = obj.Delete(ctx); err != nil {
					return err
				}
			}
			// Set this object's pointer to the reverse object to nil to mark that we broke the link
			o.revRequiredLeafUniqueRoot = nil
		}

		d.Delete(ctx, "leaf", map[string]any{"ID": o.id})
		return nil
	})

	if err != nil {
		return err
	}
	broadcast.Delete(ctx, "goradd_unit", "leaf", fmt.Sprint(o.id))
	return
}

// deleteLeaf deletes the Leaf with primary key pk from the database
// and handles associated records.
func deleteLeaf(ctx context.Context, pk string) error {
	if obj := LoadLeaf(ctx, pk, node.Leaf().PrimaryKey()); obj != nil {
		if err := obj.Delete(ctx); err != nil {
			return err
		}
	}
	return nil
}

// resetDirtyStatus resets the dirty status of every field in the object.
func (o *leafBase) resetDirtyStatus() {
	o.nameIsDirty = false
	o.revOptionalLeafRootsIsDirty = false
	o.revRequiredLeafRootsIsDirty = false
	o.revOptionalLeafUniqueRootIsDirty = false
	o.revRequiredLeafUniqueRootIsDirty = false

}

// IsDirty returns true if the object has been changed since it was read from the database or created.
// However, a new object that has a column with a default value will be automatically marked as dirty upon creation.
func (o *leafBase) IsDirty() (dirty bool) {
	dirty = o.nameIsDirty

	dirty = dirty ||
		o.revOptionalLeafRootsIsDirty ||
		o.revRequiredLeafRootsIsDirty ||
		o.revOptionalLeafUniqueRootIsDirty ||
		o.revRequiredLeafUniqueRootIsDirty

	for obj := range o.revOptionalLeafRoots.ValuesIter() {
		dirty = dirty || obj.IsDirty()
	}
	for obj := range o.revRequiredLeafRoots.ValuesIter() {
		dirty = dirty || obj.IsDirty()
	}
	dirty = dirty || (o.revOptionalLeafUniqueRoot != nil && o.revOptionalLeafUniqueRoot.IsDirty())
	dirty = dirty || (o.revRequiredLeafUniqueRoot != nil && o.revRequiredLeafUniqueRoot.IsDirty())

	return
}

// Get returns the value of a field in the object based on the field's name.
// It will also get related objects if they are loaded.
// Invalid fields and objects are returned as nil.
// Get can be used to retrieve a value by using the Identifier of a node.
func (o *leafBase) Get(key string) interface{} {

	switch key {

	case "ID":
		if !o.idIsValid {
			return nil
		}
		return o.id

	case "Name":
		if !o.nameIsValid {
			return nil
		}
		return o.name

	case "OptionalLeafRoots":
		return o.revOptionalLeafRoots.Values()
	case "RequiredLeafRoots":
		return o.revRequiredLeafRoots.Values()
	case "OptionalLeafUniqueRoot":
		return o.revOptionalLeafUniqueRoot
	case "RequiredLeafUniqueRoot":
		return o.revRequiredLeafUniqueRoot

	}
	return nil
}

// MarshalBinary serializes the object into a buffer that is deserializable using UnmarshalBinary.
// It should be used for transmitting database objects over the wire, or for temporary storage. It does not send
// a version number, so if the data format changes, its up to you to invalidate the old stored objects.
// The framework uses this to serialize the object when it is stored in a control.
func (o *leafBase) MarshalBinary() ([]byte, error) {
	buf := new(bytes.Buffer)
	encoder := gob.NewEncoder(buf)

	if err := encoder.Encode(o.id); err != nil {
		return nil, fmt.Errorf("error encoding Leaf.id: %w", err)
	}
	if err := encoder.Encode(o.idIsValid); err != nil {
		return nil, fmt.Errorf("error encoding Leaf.idIsValid: %w", err)
	}

	if err := encoder.Encode(o.name); err != nil {
		return nil, fmt.Errorf("error encoding Leaf.name: %w", err)
	}
	if err := encoder.Encode(o.nameIsValid); err != nil {
		return nil, fmt.Errorf("error encoding Leaf.nameIsValid: %w", err)
	}
	if err := encoder.Encode(o.nameIsDirty); err != nil {
		return nil, fmt.Errorf("error encoding Leaf.nameIsDirty: %w", err)
	}

	if err := encoder.Encode(&o.revOptionalLeafRoots); err != nil {
		return nil, err
	}

	if err := encoder.Encode(o.revOptionalLeafRootsIsDirty); err != nil {
		return nil, err
	}

	if err := encoder.Encode(&o.revRequiredLeafRoots); err != nil {
		return nil, err
	}

	if err := encoder.Encode(o.revRequiredLeafRootsIsDirty); err != nil {
		return nil, err
	}

	if o.revOptionalLeafUniqueRoot == nil {
		if err := encoder.Encode(false); err != nil {
			return nil, err
		}
	} else {
		if err := encoder.Encode(true); err != nil {
			return nil, err
		}
		if err := encoder.Encode(o.revOptionalLeafUniqueRoot); err != nil {
			return nil, fmt.Errorf("error encoding Leaf.revOptionalLeafUniqueRoot: %w", err)
		}
	}

	if err := encoder.Encode(o.revOptionalLeafUniqueRootIsDirty); err != nil {
		return nil, fmt.Errorf("error encoding Leaf.revOptionalLeafUniqueRootIsDirty: %w", err)
	}
	if o.revRequiredLeafUniqueRoot == nil {
		if err := encoder.Encode(false); err != nil {
			return nil, err
		}
	} else {
		if err := encoder.Encode(true); err != nil {
			return nil, err
		}
		if err := encoder.Encode(o.revRequiredLeafUniqueRoot); err != nil {
			return nil, fmt.Errorf("error encoding Leaf.revRequiredLeafUniqueRoot: %w", err)
		}
	}

	if err := encoder.Encode(o.revRequiredLeafUniqueRootIsDirty); err != nil {
		return nil, fmt.Errorf("error encoding Leaf.revRequiredLeafUniqueRootIsDirty: %w", err)
	}

	if o._aliases == nil {
		if err := encoder.Encode(false); err != nil {
			return nil, err
		}
	} else {
		if err := encoder.Encode(true); err != nil {
			return nil, err
		}
		if err := encoder.Encode(o._aliases); err != nil {
			return nil, fmt.Errorf("error encoding Leaf._aliases: %w", err)
		}
	}

	if err := encoder.Encode(o._restored); err != nil {
		return nil, fmt.Errorf("error encoding Leaf._restored: %w", err)
	}
	if err := encoder.Encode(o._originalPK); err != nil {
		return nil, fmt.Errorf("error encoding Leaf._originalPK: %w", err)
	}

	return buf.Bytes(), nil

	return buf.Bytes(), nil
}

// UnmarshalBinary converts a structure that was created with MarshalBinary into a Leaf object.
func (o *leafBase) UnmarshalBinary(data []byte) (err error) {

	buf := bytes.NewBuffer(data)
	dec := gob.NewDecoder(buf)
	var isPtr bool

	_ = isPtr
	if err = dec.Decode(&o.id); err != nil {
		return fmt.Errorf("error decoding Leaf.id: %w", err)
	}
	if err = dec.Decode(&o.idIsValid); err != nil {
		return fmt.Errorf("error decoding Leaf.idIsValid: %w", err)
	}

	if err = dec.Decode(&o.name); err != nil {
		return fmt.Errorf("error decoding Leaf.name: %w", err)
	}
	if err = dec.Decode(&o.nameIsValid); err != nil {
		return fmt.Errorf("error decoding Leaf.nameIsValid: %w", err)
	}
	if err = dec.Decode(&o.nameIsDirty); err != nil {
		return fmt.Errorf("error decoding Leaf.nameIsDirty: %w", err)
	}

	if err = dec.Decode(&o.revOptionalLeafRoots); err != nil {
		return fmt.Errorf("error decoding Leaf.revOptionalLeafRoots: %w", err)
	}

	if err = dec.Decode(&o.revOptionalLeafRootsIsDirty); err != nil {
		return fmt.Errorf("error decoding Leaf.revOptionalLeafRootsIsDirty: %w", err)
	}

	if err = dec.Decode(&o.revRequiredLeafRoots); err != nil {
		return fmt.Errorf("error decoding Leaf.revRequiredLeafRoots: %w", err)
	}

	if err = dec.Decode(&o.revRequiredLeafRootsIsDirty); err != nil {
		return fmt.Errorf("error decoding Leaf.revRequiredLeafRootsIsDirty: %w", err)
	}

	if err = dec.Decode(&isPtr); err != nil {
		return fmt.Errorf("error decoding Leaf.revOptionalLeafUniqueRoot isPtr: %w", err)
	}
	if isPtr {
		if err = dec.Decode(&o.revOptionalLeafUniqueRoot); err != nil {
			return fmt.Errorf("error decoding Leaf.revOptionalLeafUniqueRoot: %w", err)
		}
	}

	if err = dec.Decode(&o.revOptionalLeafUniqueRootIsDirty); err != nil {
		return fmt.Errorf("error decoding Leaf.revOptionalLeafUniqueRootIsDirty: %w", err)
	}
	if err = dec.Decode(&isPtr); err != nil {
		return fmt.Errorf("error decoding Leaf.revRequiredLeafUniqueRoot isPtr: %w", err)
	}
	if isPtr {
		if err = dec.Decode(&o.revRequiredLeafUniqueRoot); err != nil {
			return fmt.Errorf("error decoding Leaf.revRequiredLeafUniqueRoot: %w", err)
		}
	}

	if err = dec.Decode(&o.revRequiredLeafUniqueRootIsDirty); err != nil {
		return fmt.Errorf("error decoding Leaf.revRequiredLeafUniqueRootIsDirty: %w", err)
	}
	return
}

// MarshalJSON serializes the object into a JSON object.
// Only valid data will be serialized, meaning, you can control what gets serialized by using Select to
// select only the fields you want when you query for the object. Another way to control the output
// is to call MarshalStringMap, modify the map, then encode the map.
func (o *leafBase) MarshalJSON() (data []byte, err error) {
	v := o.MarshalStringMap()
	return json.Marshal(v)
}

// MarshalStringMap serializes the object into a string map of interfaces.
// Only valid data will be serialized, meaning, you can control what gets serialized by using Select to
// select only the fields you want when you query for the object. The keys are the same as the json keys.
func (o *leafBase) MarshalStringMap() map[string]interface{} {
	v := make(map[string]interface{})

	if o.idIsValid {
		v["id"] = o.id
	}

	if o.nameIsValid {
		v["name"] = o.name
	}

	if o.revOptionalLeafRoots.Len() != 0 {
		var vals []map[string]interface{}
		for obj := range o.revOptionalLeafRoots.ValuesIter() {
			vals = append(vals, obj.MarshalStringMap())
		}
		v["optionalLeafRoots"] = vals
	}
	if o.revRequiredLeafRoots.Len() != 0 {
		var vals []map[string]interface{}
		for obj := range o.revRequiredLeafRoots.ValuesIter() {
			vals = append(vals, obj.MarshalStringMap())
		}
		v["requiredLeafRoots"] = vals
	}
	if obj := o.revOptionalLeafUniqueRoot; obj != nil {
		v["optionalLeafUniqueRoot"] = obj.MarshalStringMap()
	}
	if obj := o.revRequiredLeafUniqueRoot; obj != nil {
		v["requiredLeafUniqueRoot"] = obj.MarshalStringMap()
	}
	for _k, _v := range o._aliases {
		v[_k] = _v
	}
	return v
}

// UnmarshalJSON unmarshalls the given json data into the Leaf. The Leaf can be a
// newly created object, or one loaded from the database.
//
// After unmarshalling, the object is not  saved. You must call Save to insert it into the database
// or update it.
//
// Unmarshalling of sub-objects, as in objects linked via foreign keys, is not currently supported.
//
// The fields it expects are:
//
//	"id" - string
//	"name" - string
func (o *leafBase) UnmarshalJSON(data []byte) (err error) {
	var v map[string]interface{}
	if len(data) == 0 {
		return
	}
	d := json.NewDecoder(bytes.NewReader(data))
	d.UseNumber() // use a number to avoid precision errors
	if err = d.Decode(&v); err != nil {
		return err
	}
	return o.UnmarshalStringMap(v)
}

// UnmarshalStringMap will load the values from the stringmap into the object.
//
// Override this in Leaf to modify the json before sending it here.
func (o *leafBase) UnmarshalStringMap(m map[string]interface{}) (err error) {
	for k, v := range m {
		switch k {

		case "name":
			{
				if v == nil {
					return fmt.Errorf("field %s cannot be null", k)
				}

				if s, ok := v.(string); !ok {
					return fmt.Errorf("json field %s must be a string", k)
				} else {
					o.SetName(s)
				}
			}

		}
	}
	return
}
