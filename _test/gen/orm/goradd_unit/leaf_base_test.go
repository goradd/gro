// Code generated by goradd-orm. DO NOT EDIT.

package goradd_unit

import (
	"context"
	"strconv"
	"testing"

	"github.com/goradd/orm/_test/gen/orm/goradd_unit/node"
	"github.com/goradd/orm/pkg/db"
	"github.com/goradd/orm/pkg/test"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

// createMinimalSampleLeaf creates an unsaved minimal version of a Leaf object
// for testing.
func createMinimalSampleLeaf() *Leaf {
	obj := NewLeaf()
	updateMinimalSampleLeaf(obj)
	return obj
}

// updateMinimalSampleLeaf sets the values of a minimal sample to new, random values.
func updateMinimalSampleLeaf(obj *Leaf) {

	obj.SetName(test.RandomValue[string](100))

}

// createMaximalSampleLeaf creates an unsaved version of a Leaf object
// for testing that includes references to minimal objects.
func createMaximalSampleLeaf() *Leaf {
	obj := NewLeaf()
	updateMaximalSampleLeaf(obj)
	return obj
}

// updateMaximalSampleLeaf sets all the maximal sample values to new values.
func updateMaximalSampleLeaf(obj *Leaf) {
	updateMinimalSampleLeaf(obj)

	obj.SetOptionalLeafRoots(createMinimalSampleRoot())
	obj.SetRequiredLeafRoots(createMinimalSampleRoot())
	obj.SetOptionalLeafUniqueRoot(createMinimalSampleRoot())
	obj.SetRequiredLeafUniqueRoot(createMinimalSampleRoot())
}

// deleteSampleLeaf deletes an object created and saved by one of the sample creator functions.
func deleteSampleLeaf(ctx context.Context, obj *Leaf) {
	if obj == nil {
		return
	}

	for _, item := range obj.OptionalLeafRoots() {
		deleteSampleRoot(ctx, item)
	}
	for _, item := range obj.RequiredLeafRoots() {
		deleteSampleRoot(ctx, item)
	}
	deleteSampleRoot(ctx, obj.OptionalLeafUniqueRoot())
	deleteSampleRoot(ctx, obj.RequiredLeafUniqueRoot())

	obj.Delete(ctx)

}

func TestLeaf_SetName(t *testing.T) {

	obj := NewLeaf()
	val := test.RandomValue[string](100)
	obj.SetName(val)
	assert.Equal(t, val, obj.Name())

	// test default
	obj.SetName("")
	assert.EqualValues(t, "", obj.Name(), "set default")

	// test panic on setting value larger than maximum size allowed
	val = test.RandomValue[string](101)
	assert.Panics(t, func() {
		obj.SetName(val)
	})
}

func TestLeaf_Copy(t *testing.T) {
	obj := createMinimalSampleLeaf()

	obj2 := obj.Copy()

	assert.Equal(t, obj.Name(), obj2.Name())

}

func TestLeaf_BasicInsert(t *testing.T) {
	obj := createMinimalSampleLeaf()
	ctx := db.NewContext(nil)
	err := obj.Save(ctx)
	assert.NoError(t, err)
	defer deleteSampleLeaf(ctx, obj)

	// Test retrieval
	obj2 := LoadLeaf(ctx, obj.PrimaryKey())
	require.NotNil(t, obj2)

	assert.Equal(t, obj2.PrimaryKey(), obj2.OriginalPrimaryKey())

	assert.True(t, obj2.IDIsValid())

	assert.True(t, obj2.NameIsValid())

	assert.EqualValues(t, obj.Name(), obj2.Name())

	// test that setting it to the same value will not change the dirty bit
	assert.False(t, obj2.nameIsDirty)
	obj2.SetName(obj2.Name())
	assert.False(t, obj2.nameIsDirty)

}

func TestLeaf_InsertPanics(t *testing.T) {
	obj := createMinimalSampleLeaf()
	ctx := db.NewContext(nil)

	obj.nameIsValid = false
	assert.Panics(t, func() { obj.Save(ctx) })
	obj.nameIsValid = true

}

func TestLeaf_BasicUpdate(t *testing.T) {
	obj := createMinimalSampleLeaf()
	ctx := db.NewContext(nil)
	assert.NoError(t, obj.Save(ctx))
	defer deleteSampleLeaf(ctx, obj)
	updateMinimalSampleLeaf(obj)
	assert.NoError(t, obj.Save(ctx))
	obj2 := LoadLeaf(ctx, obj.PrimaryKey())

	assert.Equal(t, obj2.ID(), obj.ID(), "ID did not update")
	assert.Equal(t, obj2.Name(), obj.Name(), "Name did not update")
}

func TestLeaf_References(t *testing.T) {
	obj := createMaximalSampleLeaf()
	ctx := db.NewContext(nil)
	obj.Save(ctx)
	defer deleteSampleLeaf(ctx, obj)

	// Test that referenced objects were saved and assigned ids

}
func TestLeaf_EmptyPrimaryKeyGetter(t *testing.T) {
	obj := NewLeaf()

	i, err := strconv.Atoi(obj.ID())
	assert.NoError(t, err)
	assert.True(t, i < 0)
}

func TestLeaf_Getters(t *testing.T) {
	obj := createMinimalSampleLeaf()

	i, err := strconv.Atoi(obj.ID())
	assert.NoError(t, err)
	assert.True(t, i < 0)

	ctx := db.NewContext(nil)
	require.NoError(t, obj.Save(ctx))
	defer deleteSampleLeaf(ctx, obj)

	obj2 := LoadLeaf(ctx, obj.PrimaryKey(), node.Leaf().PrimaryKey())

	assert.Panics(t, func() { obj2.Name() })
}
