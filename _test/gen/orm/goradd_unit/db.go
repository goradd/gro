// Code generated by goradd-orm. DO NOT EDIT.

// Package goradd_unit contains the object relational model for the goradd_unit database.
//
// Queries use a builder pattern, started with a Query* function. Add functions to the builder to further constrain the query,
// using nodes from the [node] package to refer to tables and columns in the database. End the query with either a Load call to get a
// list of items, a Get call to get one item, or a Count call to count the number of items in the query.
//
// Some Examples
//
//	projects := model.QueryProjects().Load()
//
// Returns all the projects in the database.
//
//	projects := model.QueryProjects().
//	    Join(node.Project().Manager()).
//	    Where(op.GreaterOrEqual(node.Project().StartDate(), time.NewDate(2006, 1, 1)).
//	    OrderBy(node.Project().Num()).
//	    Load()
//
// Returns the projects that started in 2006 or later, with the manager objects attached, and ordered by project number.
// To get the manager of the first project returned, you can do this:
//
//	firstManager := projects[0].Manager()
//
// See the goradd-orm documentation for more information.
package goradd_unit

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/goradd/orm/pkg/db"
)

// Database returns the database object corresponding to "goradd_unit" in the global database cluster.
// Use this to call directly into the database through the DatabaseI interface, or if you want to call functions
// specific to the database, cast the interface to the driver.
func Database() db.DatabaseI {
	return db.GetDatabase("goradd_unit")
}

// ClearAll deletes all the data in the database, except for data in Enum tables.
func ClearAll(ctx context.Context) {
	db := Database()

	_ = db.Delete(ctx, "unsupported_type", nil)
	_ = db.Delete(ctx, "type_test", nil)
	_ = db.Delete(ctx, "root", nil)
	_ = db.Delete(ctx, "multi_parent", nil)
	_ = db.Delete(ctx, "leaf_lock", nil)
	_ = db.Delete(ctx, "leaf", nil)
	_ = db.Delete(ctx, "double_index", nil)

}

// JsonEncodeAll sends the entire database to writer as JSON.
func JsonEncodeAll(ctx context.Context, writer io.Writer) error {
	encoder := json.NewEncoder(writer)
	encoder.SetIndent("", "  ")

	if _, err := io.WriteString(writer, "[\n"); err != nil {
		return fmt.Errorf("writer error: %w", err)
	}

	{ // Write DoubleIndices
		if _, err := io.WriteString(writer, "["); err != nil {
			return fmt.Errorf("writer error: %w", err)
		}

		if _, err := io.WriteString(writer, `"double_index"`); err != nil {
			return fmt.Errorf("writer error: %w", err)
		}
		if _, err := io.WriteString(writer, ",\n["); err != nil {
			return fmt.Errorf("writer error: %w", err)
		}

		cursor, err := QueryDoubleIndices(ctx).LoadCursor()
		if err != nil {
			return fmt.Errorf("query error: %w", err)
		}
		defer cursor.Close()
		obj, err2 := cursor.Next()
		if err2 != nil {
			return fmt.Errorf("database cursor error: %w", err)
		}
		if obj != nil {
			if err := encoder.Encode(obj); err != nil {
				return fmt.Errorf("encoding error: %w", err)
			}
		}

		for obj, err = cursor.Next(); obj != nil && err == nil; obj, err = cursor.Next() {
			if _, err := io.WriteString(writer, ",\n"); err != nil {
				return fmt.Errorf("writer error: %w", err)
			}
			if err := encoder.Encode(obj); err != nil {
				return fmt.Errorf("encoding error: %w", err)
			}
		}
		if err != nil {
			return fmt.Errorf("database cursor error: %w", err)
		}

		if _, err := io.WriteString(writer, "]\n]"); err != nil {
			return fmt.Errorf("writer error: %w", err)
		}

		if _, err := io.WriteString(writer, ","); err != nil {
			return fmt.Errorf("writer error: %w", err)
		}
		if _, err := io.WriteString(writer, "\n"); err != nil {
			return fmt.Errorf("writer error: %w", err)
		}
	}
	{ // Write Leafs
		if _, err := io.WriteString(writer, "["); err != nil {
			return fmt.Errorf("writer error: %w", err)
		}

		if _, err := io.WriteString(writer, `"leaf"`); err != nil {
			return fmt.Errorf("writer error: %w", err)
		}
		if _, err := io.WriteString(writer, ",\n["); err != nil {
			return fmt.Errorf("writer error: %w", err)
		}

		cursor, err := QueryLeafs(ctx).LoadCursor()
		if err != nil {
			return fmt.Errorf("query error: %w", err)
		}
		defer cursor.Close()
		obj, err2 := cursor.Next()
		if err2 != nil {
			return fmt.Errorf("database cursor error: %w", err)
		}
		if obj != nil {
			if err := encoder.Encode(obj); err != nil {
				return fmt.Errorf("encoding error: %w", err)
			}
		}

		for obj, err = cursor.Next(); obj != nil && err == nil; obj, err = cursor.Next() {
			if _, err := io.WriteString(writer, ",\n"); err != nil {
				return fmt.Errorf("writer error: %w", err)
			}
			if err := encoder.Encode(obj); err != nil {
				return fmt.Errorf("encoding error: %w", err)
			}
		}
		if err != nil {
			return fmt.Errorf("database cursor error: %w", err)
		}

		if _, err := io.WriteString(writer, "]\n]"); err != nil {
			return fmt.Errorf("writer error: %w", err)
		}

		if _, err := io.WriteString(writer, ","); err != nil {
			return fmt.Errorf("writer error: %w", err)
		}
		if _, err := io.WriteString(writer, "\n"); err != nil {
			return fmt.Errorf("writer error: %w", err)
		}
	}
	{ // Write LeafLocks
		if _, err := io.WriteString(writer, "["); err != nil {
			return fmt.Errorf("writer error: %w", err)
		}

		if _, err := io.WriteString(writer, `"leaf_lock"`); err != nil {
			return fmt.Errorf("writer error: %w", err)
		}
		if _, err := io.WriteString(writer, ",\n["); err != nil {
			return fmt.Errorf("writer error: %w", err)
		}

		cursor, err := QueryLeafLocks(ctx).LoadCursor()
		if err != nil {
			return fmt.Errorf("query error: %w", err)
		}
		defer cursor.Close()
		obj, err2 := cursor.Next()
		if err2 != nil {
			return fmt.Errorf("database cursor error: %w", err)
		}
		if obj != nil {
			if err := encoder.Encode(obj); err != nil {
				return fmt.Errorf("encoding error: %w", err)
			}
		}

		for obj, err = cursor.Next(); obj != nil && err == nil; obj, err = cursor.Next() {
			if _, err := io.WriteString(writer, ",\n"); err != nil {
				return fmt.Errorf("writer error: %w", err)
			}
			if err := encoder.Encode(obj); err != nil {
				return fmt.Errorf("encoding error: %w", err)
			}
		}
		if err != nil {
			return fmt.Errorf("database cursor error: %w", err)
		}

		if _, err := io.WriteString(writer, "]\n]"); err != nil {
			return fmt.Errorf("writer error: %w", err)
		}

		if _, err := io.WriteString(writer, ","); err != nil {
			return fmt.Errorf("writer error: %w", err)
		}
		if _, err := io.WriteString(writer, "\n"); err != nil {
			return fmt.Errorf("writer error: %w", err)
		}
	}
	{ // Write MultiParents
		if _, err := io.WriteString(writer, "["); err != nil {
			return fmt.Errorf("writer error: %w", err)
		}

		if _, err := io.WriteString(writer, `"multi_parent"`); err != nil {
			return fmt.Errorf("writer error: %w", err)
		}
		if _, err := io.WriteString(writer, ",\n["); err != nil {
			return fmt.Errorf("writer error: %w", err)
		}

		cursor, err := QueryMultiParents(ctx).LoadCursor()
		if err != nil {
			return fmt.Errorf("query error: %w", err)
		}
		defer cursor.Close()
		obj, err2 := cursor.Next()
		if err2 != nil {
			return fmt.Errorf("database cursor error: %w", err)
		}
		if obj != nil {
			if err := encoder.Encode(obj); err != nil {
				return fmt.Errorf("encoding error: %w", err)
			}
		}

		for obj, err = cursor.Next(); obj != nil && err == nil; obj, err = cursor.Next() {
			if _, err := io.WriteString(writer, ",\n"); err != nil {
				return fmt.Errorf("writer error: %w", err)
			}
			if err := encoder.Encode(obj); err != nil {
				return fmt.Errorf("encoding error: %w", err)
			}
		}
		if err != nil {
			return fmt.Errorf("database cursor error: %w", err)
		}

		if _, err := io.WriteString(writer, "]\n]"); err != nil {
			return fmt.Errorf("writer error: %w", err)
		}

		if _, err := io.WriteString(writer, ","); err != nil {
			return fmt.Errorf("writer error: %w", err)
		}
		if _, err := io.WriteString(writer, "\n"); err != nil {
			return fmt.Errorf("writer error: %w", err)
		}
	}
	{ // Write Roots
		if _, err := io.WriteString(writer, "["); err != nil {
			return fmt.Errorf("writer error: %w", err)
		}

		if _, err := io.WriteString(writer, `"root"`); err != nil {
			return fmt.Errorf("writer error: %w", err)
		}
		if _, err := io.WriteString(writer, ",\n["); err != nil {
			return fmt.Errorf("writer error: %w", err)
		}

		cursor, err := QueryRoots(ctx).LoadCursor()
		if err != nil {
			return fmt.Errorf("query error: %w", err)
		}
		defer cursor.Close()
		obj, err2 := cursor.Next()
		if err2 != nil {
			return fmt.Errorf("database cursor error: %w", err)
		}
		if obj != nil {
			if err := encoder.Encode(obj); err != nil {
				return fmt.Errorf("encoding error: %w", err)
			}
		}

		for obj, err = cursor.Next(); obj != nil && err == nil; obj, err = cursor.Next() {
			if _, err := io.WriteString(writer, ",\n"); err != nil {
				return fmt.Errorf("writer error: %w", err)
			}
			if err := encoder.Encode(obj); err != nil {
				return fmt.Errorf("encoding error: %w", err)
			}
		}
		if err != nil {
			return fmt.Errorf("database cursor error: %w", err)
		}

		if _, err := io.WriteString(writer, "]\n]"); err != nil {
			return fmt.Errorf("writer error: %w", err)
		}

		if _, err := io.WriteString(writer, ","); err != nil {
			return fmt.Errorf("writer error: %w", err)
		}
		if _, err := io.WriteString(writer, "\n"); err != nil {
			return fmt.Errorf("writer error: %w", err)
		}
	}
	{ // Write TypeTests
		if _, err := io.WriteString(writer, "["); err != nil {
			return fmt.Errorf("writer error: %w", err)
		}

		if _, err := io.WriteString(writer, `"type_test"`); err != nil {
			return fmt.Errorf("writer error: %w", err)
		}
		if _, err := io.WriteString(writer, ",\n["); err != nil {
			return fmt.Errorf("writer error: %w", err)
		}

		cursor, err := QueryTypeTests(ctx).LoadCursor()
		if err != nil {
			return fmt.Errorf("query error: %w", err)
		}
		defer cursor.Close()
		obj, err2 := cursor.Next()
		if err2 != nil {
			return fmt.Errorf("database cursor error: %w", err)
		}
		if obj != nil {
			if err := encoder.Encode(obj); err != nil {
				return fmt.Errorf("encoding error: %w", err)
			}
		}

		for obj, err = cursor.Next(); obj != nil && err == nil; obj, err = cursor.Next() {
			if _, err := io.WriteString(writer, ",\n"); err != nil {
				return fmt.Errorf("writer error: %w", err)
			}
			if err := encoder.Encode(obj); err != nil {
				return fmt.Errorf("encoding error: %w", err)
			}
		}
		if err != nil {
			return fmt.Errorf("database cursor error: %w", err)
		}

		if _, err := io.WriteString(writer, "]\n]"); err != nil {
			return fmt.Errorf("writer error: %w", err)
		}

		if _, err := io.WriteString(writer, ","); err != nil {
			return fmt.Errorf("writer error: %w", err)
		}
		if _, err := io.WriteString(writer, "\n"); err != nil {
			return fmt.Errorf("writer error: %w", err)
		}
	}
	{ // Write UnsupportedTypes
		if _, err := io.WriteString(writer, "["); err != nil {
			return fmt.Errorf("writer error: %w", err)
		}

		if _, err := io.WriteString(writer, `"unsupported_type"`); err != nil {
			return fmt.Errorf("writer error: %w", err)
		}
		if _, err := io.WriteString(writer, ",\n["); err != nil {
			return fmt.Errorf("writer error: %w", err)
		}

		cursor, err := QueryUnsupportedTypes(ctx).LoadCursor()
		if err != nil {
			return fmt.Errorf("query error: %w", err)
		}
		defer cursor.Close()
		obj, err2 := cursor.Next()
		if err2 != nil {
			return fmt.Errorf("database cursor error: %w", err)
		}
		if obj != nil {
			if err := encoder.Encode(obj); err != nil {
				return fmt.Errorf("encoding error: %w", err)
			}
		}

		for obj, err = cursor.Next(); obj != nil && err == nil; obj, err = cursor.Next() {
			if _, err := io.WriteString(writer, ",\n"); err != nil {
				return fmt.Errorf("writer error: %w", err)
			}
			if err := encoder.Encode(obj); err != nil {
				return fmt.Errorf("encoding error: %w", err)
			}
		}
		if err != nil {
			return fmt.Errorf("database cursor error: %w", err)
		}

		if _, err := io.WriteString(writer, "]\n]"); err != nil {
			return fmt.Errorf("writer error: %w", err)
		}

		if _, err := io.WriteString(writer, "\n"); err != nil {
			return fmt.Errorf("writer error: %w", err)
		}
	}

	if _, err := io.WriteString(writer, "]"); err != nil {
		return fmt.Errorf("writer error: %w", err)
	}
	return nil
}

// JsonDecodeAll imports the entire database from JSON that was created using JsonEncodeAll.
func JsonDecodeAll(ctx context.Context, reader io.Reader) error {
	decoder := json.NewDecoder(reader)

	token, err := decoder.Token()
	if err != nil {
		fmt.Println("Error reading opening token:", err)
		return err
	}
	// Ensure the first token is a start of an array
	if delim, ok := token.(json.Delim); !ok || delim != '[' {
		fmt.Println("Error: Expected the JSON to start with an array")
		return err
	}

	for decoder.More() {
		if err := jsonDecodeTable(ctx, decoder); err != nil {
			return err
		}
	}

	// Check if the last token is the end of the array
	token, err = decoder.Token()
	if err != nil {
		fmt.Println("Error reading the last token:", err)
		return err
	}

	if delim, ok := token.(json.Delim); !ok || delim != ']' {
		fmt.Println("Error: Expected the JSON to end with a closing array token")
		return err
	}

	return nil
}

func jsonDecodeTable(ctx context.Context, decoder *json.Decoder) error {
	token, err := decoder.Token()
	if err != nil {
		fmt.Println("Error reading opening token:", err)
		return err
	}
	// Ensure the first token is a start of an array
	if delim, ok := token.(json.Delim); !ok || delim != '[' {
		fmt.Println("Error: Expected the duple to start with an array")
		return err
	}

	token, err = decoder.Token()
	if err != nil {
		fmt.Println("Error reading name of table:", err)
		return err
	}

	if tableName, ok := token.(string); !ok {
		fmt.Println("Error: Expected a name of a table.")
		return err
	} else {
		switch tableName {
		case "double_index":
			err = jsonDecodeDoubleIndices(ctx, decoder)
		case "leaf":
			err = jsonDecodeLeafs(ctx, decoder)
		case "leaf_lock":
			err = jsonDecodeLeafLocks(ctx, decoder)
		case "multi_parent":
			err = jsonDecodeMultiParents(ctx, decoder)
		case "root":
			err = jsonDecodeRoots(ctx, decoder)
		case "type_test":
			err = jsonDecodeTypeTests(ctx, decoder)
		case "unsupported_type":
			err = jsonDecodeUnsupportedTypes(ctx, decoder)

		}
		if err != nil {
			return err
		}
	}

	// Check if the last token is the end of the array
	token, err = decoder.Token()
	if err != nil {
		fmt.Println("Error reading the last token:", err)
		return err
	}

	if delim, ok := token.(json.Delim); !ok || delim != ']' {
		fmt.Println("Error: Expected the JSON to end with a closing array token")
		return err
	}

	return nil
}

func jsonDecodeDoubleIndices(ctx context.Context, decoder *json.Decoder) error {
	token, err := decoder.Token()
	if err != nil {
		fmt.Println("Error reading opening token:", err)
		return err
	}
	// Ensure the first token is a start of an array
	if delim, ok := token.(json.Delim); !ok || delim != '[' {
		fmt.Println("Error: Expected the DoubleIndex list to start with an array")
		return err
	}

	for decoder.More() {
		obj := NewDoubleIndex()
		if err = decoder.Decode(&obj); err != nil {
			return err
		}
		if err = obj.Save(ctx); err != nil {
			return err
		}
	}

	// Check if the last token is the end of the array
	token, err = decoder.Token()
	if err != nil {
		fmt.Println("Error reading the last token:", err)
		return err
	}

	if delim, ok := token.(json.Delim); !ok || delim != ']' {
		fmt.Println("Error: Expected the JSON to end with a closing array token")
		return err
	}

	return nil
}
func jsonDecodeLeafs(ctx context.Context, decoder *json.Decoder) error {
	token, err := decoder.Token()
	if err != nil {
		fmt.Println("Error reading opening token:", err)
		return err
	}
	// Ensure the first token is a start of an array
	if delim, ok := token.(json.Delim); !ok || delim != '[' {
		fmt.Println("Error: Expected the Leaf list to start with an array")
		return err
	}

	for decoder.More() {
		obj := NewLeaf()
		if err = decoder.Decode(&obj); err != nil {
			return err
		}
		if err = obj.Save(ctx); err != nil {
			return err
		}
	}

	// Check if the last token is the end of the array
	token, err = decoder.Token()
	if err != nil {
		fmt.Println("Error reading the last token:", err)
		return err
	}

	if delim, ok := token.(json.Delim); !ok || delim != ']' {
		fmt.Println("Error: Expected the JSON to end with a closing array token")
		return err
	}

	return nil
}
func jsonDecodeLeafLocks(ctx context.Context, decoder *json.Decoder) error {
	token, err := decoder.Token()
	if err != nil {
		fmt.Println("Error reading opening token:", err)
		return err
	}
	// Ensure the first token is a start of an array
	if delim, ok := token.(json.Delim); !ok || delim != '[' {
		fmt.Println("Error: Expected the LeafLock list to start with an array")
		return err
	}

	for decoder.More() {
		obj := NewLeafLock()
		if err = decoder.Decode(&obj); err != nil {
			return err
		}
		if err = obj.Save(ctx); err != nil {
			return err
		}
	}

	// Check if the last token is the end of the array
	token, err = decoder.Token()
	if err != nil {
		fmt.Println("Error reading the last token:", err)
		return err
	}

	if delim, ok := token.(json.Delim); !ok || delim != ']' {
		fmt.Println("Error: Expected the JSON to end with a closing array token")
		return err
	}

	return nil
}
func jsonDecodeMultiParents(ctx context.Context, decoder *json.Decoder) error {
	token, err := decoder.Token()
	if err != nil {
		fmt.Println("Error reading opening token:", err)
		return err
	}
	// Ensure the first token is a start of an array
	if delim, ok := token.(json.Delim); !ok || delim != '[' {
		fmt.Println("Error: Expected the MultiParent list to start with an array")
		return err
	}

	for decoder.More() {
		obj := NewMultiParent()
		if err = decoder.Decode(&obj); err != nil {
			return err
		}
		if err = obj.Save(ctx); err != nil {
			return err
		}
	}

	// Check if the last token is the end of the array
	token, err = decoder.Token()
	if err != nil {
		fmt.Println("Error reading the last token:", err)
		return err
	}

	if delim, ok := token.(json.Delim); !ok || delim != ']' {
		fmt.Println("Error: Expected the JSON to end with a closing array token")
		return err
	}

	return nil
}
func jsonDecodeRoots(ctx context.Context, decoder *json.Decoder) error {
	token, err := decoder.Token()
	if err != nil {
		fmt.Println("Error reading opening token:", err)
		return err
	}
	// Ensure the first token is a start of an array
	if delim, ok := token.(json.Delim); !ok || delim != '[' {
		fmt.Println("Error: Expected the Root list to start with an array")
		return err
	}

	for decoder.More() {
		obj := NewRoot()
		if err = decoder.Decode(&obj); err != nil {
			return err
		}
		if err = obj.Save(ctx); err != nil {
			return err
		}
	}

	// Check if the last token is the end of the array
	token, err = decoder.Token()
	if err != nil {
		fmt.Println("Error reading the last token:", err)
		return err
	}

	if delim, ok := token.(json.Delim); !ok || delim != ']' {
		fmt.Println("Error: Expected the JSON to end with a closing array token")
		return err
	}

	return nil
}
func jsonDecodeTypeTests(ctx context.Context, decoder *json.Decoder) error {
	token, err := decoder.Token()
	if err != nil {
		fmt.Println("Error reading opening token:", err)
		return err
	}
	// Ensure the first token is a start of an array
	if delim, ok := token.(json.Delim); !ok || delim != '[' {
		fmt.Println("Error: Expected the TypeTest list to start with an array")
		return err
	}

	for decoder.More() {
		obj := NewTypeTest()
		if err = decoder.Decode(&obj); err != nil {
			return err
		}
		if err = obj.Save(ctx); err != nil {
			return err
		}
	}

	// Check if the last token is the end of the array
	token, err = decoder.Token()
	if err != nil {
		fmt.Println("Error reading the last token:", err)
		return err
	}

	if delim, ok := token.(json.Delim); !ok || delim != ']' {
		fmt.Println("Error: Expected the JSON to end with a closing array token")
		return err
	}

	return nil
}
func jsonDecodeUnsupportedTypes(ctx context.Context, decoder *json.Decoder) error {
	token, err := decoder.Token()
	if err != nil {
		fmt.Println("Error reading opening token:", err)
		return err
	}
	// Ensure the first token is a start of an array
	if delim, ok := token.(json.Delim); !ok || delim != '[' {
		fmt.Println("Error: Expected the UnsupportedType list to start with an array")
		return err
	}

	for decoder.More() {
		obj := NewUnsupportedType()
		if err = decoder.Decode(&obj); err != nil {
			return err
		}
		if err = obj.Save(ctx); err != nil {
			return err
		}
	}

	// Check if the last token is the end of the array
	token, err = decoder.Token()
	if err != nil {
		fmt.Println("Error reading the last token:", err)
		return err
	}

	if delim, ok := token.(json.Delim); !ok || delim != ']' {
		fmt.Println("Error: Expected the JSON to end with a closing array token")
		return err
	}

	return nil
}
