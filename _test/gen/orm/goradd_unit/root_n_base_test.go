// Code generated by goradd-orm. DO NOT EDIT.

package goradd_unit

import (
	"bytes"
	"context"
	"encoding/gob"
	"encoding/json"
	"strconv"
	"testing"

	"github.com/goradd/orm/_test/gen/orm/goradd_unit/node"
	"github.com/goradd/orm/pkg/op"
	"github.com/goradd/orm/pkg/test"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

// createMinimalSampleRootN creates an unsaved minimal version of a RootN object
// for testing.
func createMinimalSampleRootN() *RootN {
	obj := NewRootN()
	updateMinimalSampleRootN(obj)

	return obj
}

// updateMinimalSampleRootN sets the values of a minimal sample to new, random values.
func updateMinimalSampleRootN(obj *RootN) {

	obj.SetName(test.RandomValue[string](100))

}

// createMaximalSampleRootN creates an unsaved version of a RootN object
// for testing that includes references to minimal objects.
func createMaximalSampleRootN(ctx context.Context) *RootN {
	obj := NewRootN()
	updateMaximalSampleRootN(ctx, obj)
	return obj
}

// updateMaximalSampleRootN sets all the maximal sample values to new values.
// This will set new values for references, so save the old values and delete them.
func updateMaximalSampleRootN(ctx context.Context, obj *RootN) {
	updateMinimalSampleRootN(obj)

	obj.SetRootNLeafNs(createMinimalSampleLeafN())
}

// deleteSampleRootN deletes an object created and saved by one of the sample creator functions.
func deleteSampleRootN(ctx context.Context, obj *RootN) {
	if obj == nil {
		return
	}

	for _, item := range obj.RootNLeafNs() {
		deleteSampleLeafN(ctx, item)
	}

	_ = obj.Delete(ctx)
}

// assertEqualFieldsRootN compares two objects and asserts that the basic fields are equal.
func assertEqualFieldsRootN(t *testing.T, obj1, obj2 *RootN) {
	if obj1.IDIsLoaded() && obj2.IDIsLoaded() { // only check loaded values
		assert.EqualValues(t, obj1.ID(), obj2.ID())
	}
	if obj1.NameIsLoaded() && obj2.NameIsLoaded() { // only check loaded values
		assert.EqualValues(t, obj1.Name(), obj2.Name())
	}

}

func TestRootN_SetID(t *testing.T) {

	obj := NewRootN()

	assert.True(t, obj.IsNew())
	val := test.RandomNumberString()
	obj.SetID(val)
	assert.Equal(t, val, obj.ID())

	// test default
	obj.SetID("")
	assert.EqualValues(t, "", obj.ID(), "set default")

	// test panic on setting value larger than maximum size allowed
	val = test.RandomValue[string](33)
	assert.Panics(t, func() {
		obj.SetID(val)
	})
}
func TestRootN_SetName(t *testing.T) {

	obj := NewRootN()

	assert.True(t, obj.IsNew())
	val := test.RandomValue[string](100)
	obj.SetName(val)
	assert.Equal(t, val, obj.Name())

	// test default
	obj.SetName("")
	assert.EqualValues(t, "", obj.Name(), "set default")

	// test panic on setting value larger than maximum size allowed
	val = test.RandomValue[string](101)
	assert.Panics(t, func() {
		obj.SetName(val)
	})
}

func TestRootN_Copy(t *testing.T) {
	obj := createMinimalSampleRootN()

	obj2 := obj.Copy()

	assert.Equal(t, obj.Name(), obj2.Name())

}

func TestRootN_BasicInsert(t *testing.T) {
	obj := createMinimalSampleRootN()
	ctx := context.Background()
	assert.NoError(t, obj.Save(ctx))
	defer deleteSampleRootN(ctx, obj)

	// Test retrieval
	obj2, err := LoadRootN(ctx, obj.PrimaryKey())
	require.NotNil(t, obj2)
	assert.NoError(t, err)

	assert.Equal(t, obj2.PrimaryKey(), obj2.OriginalPrimaryKey())

	assert.True(t, obj2.IDIsLoaded())
	assert.Panics(t, func() {
		obj2.SetID(obj2.ID())
	})

	assert.True(t, obj2.NameIsLoaded())
	// test that setting it to the same value will not change the dirty bit
	assert.False(t, obj2.nameIsDirty)
	obj2.SetName(obj2.Name())
	assert.False(t, obj2.nameIsDirty)

}

func TestRootN_InsertPanics(t *testing.T) {
	obj := createMinimalSampleRootN()
	_ = obj
	ctx := context.Background()
	_ = ctx

	obj.nameIsLoaded = false
	assert.Panics(t, func() { obj.Save(ctx) })
	obj.nameIsLoaded = true

}

func TestRootN_BasicUpdate(t *testing.T) {
	obj := createMinimalSampleRootN()
	ctx := context.Background()
	assert.NoError(t, obj.Save(ctx))
	defer deleteSampleRootN(ctx, obj)
	updateMinimalSampleRootN(obj)
	assert.NoError(t, obj.Save(ctx))
	obj2, err := LoadRootN(ctx, obj.PrimaryKey())
	assert.NoError(t, err)

	assert.Equal(t, obj2.ID(), obj.ID(), "ID did not update")
	assert.Equal(t, obj2.Name(), obj.Name(), "Name did not update")
}

func TestRootN_ReferenceLoad(t *testing.T) {
	ctx := context.Background()
	obj := createMaximalSampleRootN(ctx)
	assert.NoError(t, obj.Save(ctx))
	defer deleteSampleRootN(ctx, obj)

	// Test that referenced objects were saved and assigned ids

	// Test lazy loading
	obj2, err := LoadRootN(ctx, obj.PrimaryKey())
	assert.NoError(t, err)
	objPkOnly, err2 := LoadRootN(ctx, obj.PrimaryKey(),
		node.RootN().ID())
	assert.NoError(t, err2)
	_ = obj2 // avoid error if there are no references
	_ = objPkOnly

	assert.Nil(t, obj2.RootNLeafNs(), "RootNLeafN is not loaded initially")
	v_RootNLeafNs, _ := obj2.LoadRootNLeafNs(ctx)
	assert.NotNil(t, v_RootNLeafNs)
	assert.Len(t, v_RootNLeafNs, 1)

	// test eager loading
	obj3, _ := LoadRootN(ctx, obj.PrimaryKey(), node.RootN().ID(),
		node.RootN().Name(),
		node.RootN().RootNLeafNs(),
	)
	_ = obj3 // avoid error if there are no references

	assert.Equal(t, len(obj2.RootNLeafNs()), len(obj3.RootNLeafNs()))

}

func TestRootN_ReferenceUpdateNewObjects(t *testing.T) {
	ctx := context.Background()
	obj := createMaximalSampleRootN(ctx)
	assert.NoError(t, obj.Save(ctx))
	defer deleteSampleRootN(ctx, obj)

	obj2, _ := LoadRootN(ctx, obj.PrimaryKey())
	updateMaximalSampleRootN(ctx, obj2)
	assert.NoError(t, obj2.Save(ctx))
	defer deleteSampleRootN(ctx, obj2)

	obj3, _ := LoadRootN(ctx, obj2.PrimaryKey(), node.RootN().RootNLeafNs())
	_ = obj3 // avoid error if there are no references

	assert.Equal(t, len(obj2.RootNLeafNs()), len(obj3.RootNLeafNs()))

}

func TestRootN_ReferenceUpdateOldObjects(t *testing.T) {
	ctx := context.Background()
	obj := createMaximalSampleRootN(ctx)
	assert.NoError(t, obj.Save(ctx))
	defer deleteSampleRootN(ctx, obj)

	updateMinimalSampleLeafN(obj.RootNLeafNs()[0])

	assert.NoError(t, obj.Save(ctx))

	obj2, _ := LoadRootN(ctx, obj.PrimaryKey(), node.RootN().ID(),
		node.RootN().Name(),
		node.RootN().RootNLeafNs(),
	)
	_ = obj2 // avoid error if there are no references

	assertEqualFieldsLeafN(t, obj2.RootNLeafNs()[0], obj.RootNLeafNs()[0])

}
func TestRootN_EmptyPrimaryKeyGetter(t *testing.T) {
	obj := NewRootN()

	i, err := strconv.Atoi(obj.ID())
	assert.NoError(t, err)
	assert.True(t, i < 0)
}

func TestRootN_Getters(t *testing.T) {
	obj := createMinimalSampleRootN()

	i, err := strconv.Atoi(obj.ID())
	assert.NoError(t, err)
	assert.True(t, i < 0)

	ctx := context.Background()
	require.NoError(t, obj.Save(ctx))
	defer deleteSampleRootN(ctx, obj)

	has, _ := HasRootN(ctx, obj.PrimaryKey())
	assert.True(t, has)

	obj2, _ := LoadRootN(ctx, obj.PrimaryKey(),
		node.RootN().ID())

	assert.Equal(t, obj.ID(), obj.Get(node.RootN().ID().Identifier))
	assert.Equal(t, obj.Name(), obj.Get(node.RootN().Name().Identifier))
	assert.Panics(t, func() { obj2.Name() })
	assert.Nil(t, obj2.Get(node.RootN().Name().Identifier))
}

func TestRootN_QueryLoad(t *testing.T) {
	obj := createMinimalSampleRootN()
	ctx := context.Background()
	assert.NoError(t, obj.Save(ctx))
	defer deleteSampleRootN(ctx, obj)

	objs, err := QueryRootNs(ctx).
		Where(op.Equal(node.RootN().ID(), obj.ID())).
		OrderBy(node.RootN().ID()). // exercise order by
		Limit(1, 0).                // exercise limit
		Calculation(node.RootN(), "IsTrue", op.Equal("A", "A")).
		Load()
	assert.NoError(t, err)
	assert.Equal(t, obj.PrimaryKey(), objs[0].PrimaryKey())
	assert.True(t, objs[0].GetAlias("IsTrue").Bool())
}
func TestRootN_QueryLoadI(t *testing.T) {
	obj := createMinimalSampleRootN()
	ctx := context.Background()
	err := obj.Save(ctx)
	assert.NoError(t, err)
	defer deleteSampleRootN(ctx, obj)

	objs, _ := QueryRootNs(ctx).
		Where(op.Equal(node.RootN().ID(), obj.ID())).
		LoadI()

	assert.Equal(t, obj.PrimaryKey(), objs[0].Get("ID"))
}
func TestRootN_QueryCursor(t *testing.T) {
	obj := createMinimalSampleRootN()
	ctx := context.Background()
	assert.NoError(t, obj.Save(ctx))
	defer deleteSampleRootN(ctx, obj)

	cursor, err := QueryRootNs(ctx).
		Where(op.Equal(node.RootN().ID(), obj.ID())).
		LoadCursor()
	require.NoError(t, err)
	obj2, err2 := cursor.Next()
	assert.Equal(t, obj.PrimaryKey(), obj2.PrimaryKey())
	require.NoError(t, err2)
	obj2, err2 = cursor.Next()
	assert.Nil(t, obj2)
	require.NoError(t, err2)
	assert.NoError(t, cursor.Close())

	// test empty cursor result
	cursor, err = QueryRootNs(ctx).
		Where(op.Equal("B", "A")).
		LoadCursor()
	require.NoError(t, err)

	obj2, err = cursor.Next()
	assert.Nil(t, obj2)
	require.NoError(t, err)
	assert.NoError(t, cursor.Close())
}
func TestRootN_Count(t *testing.T) {
	ctx := context.Background()
	obj := createMaximalSampleRootN(ctx)
	err := obj.Save(ctx)
	assert.NoError(t, err)
	defer deleteSampleRootN(ctx, obj)
	assert.Positive(t, func() int { i, _ := CountRootNs(ctx); return i }())

}

func TestRootN_MarshalJSON(t *testing.T) {
	obj := createMinimalSampleRootN()

	b, err := json.Marshal(obj)
	assert.NoError(t, err)

	obj2 := NewRootN()
	err = json.Unmarshal(b, &obj2)
	assert.NoError(t, err)

	assertEqualFieldsRootN(t, obj, obj2)
}

func TestRootN_MarshalBinary(t *testing.T) {
	obj := createMinimalSampleRootN()

	b, err := obj.MarshalBinary()
	assert.NoError(t, err)

	obj2 := NewRootN()
	err = obj2.UnmarshalBinary(b)
	assert.NoError(t, err)

	assertEqualFieldsRootN(t, obj, obj2)
}

func TestRootN_FailingMarshalBinary(t *testing.T) {
	obj := createMinimalSampleRootN()
	var err error

	for i := 0; i < 11; i++ {
		enc := &test.GobEncoder{Count: i}
		err = obj.encodeTo(enc)
		assert.Error(t, err)
	}
	// do it again with aliases
	obj._aliases = make(map[string]any)
	for i := 0; i < 12; i++ {
		enc := &test.GobEncoder{Count: i}
		err = obj.encodeTo(enc)
		assert.Error(t, err)
	}
}

func TestRootN_FailingUnmarshalBinary(t *testing.T) {
	obj := createMinimalSampleRootN()
	b, err := obj.MarshalBinary()
	assert.NoError(t, err)
	obj2 := NewRootN()
	for i := 0; i < 11; i++ {
		buf := bytes.NewReader(b)
		dec := &test.GobDecoder{Decoder: gob.NewDecoder(buf), Count: i}
		err = obj2.decodeFrom(dec)
		assert.Error(t, err)
	}

	// do it again with aliases
	obj = createMinimalSampleRootN()
	obj._aliases = map[string]any{"a": 1}
	b, err = obj.MarshalBinary()
	assert.NoError(t, err)

	obj2 = NewRootN()
	for i := 0; i < 12; i++ {
		buf := bytes.NewReader(b)
		dec := &test.GobDecoder{Decoder: gob.NewDecoder(buf), Count: i}
		err = obj2.decodeFrom(dec)
		assert.Error(t, err)
	}
}
