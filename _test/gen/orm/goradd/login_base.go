// Code generated by goradd-orm. DO NOT EDIT.

package goradd

import (
	"bytes"
	"context"
	"encoding/gob"
	"encoding/json"
	"fmt"
	"unicode/utf8"

	"github.com/goradd/all"
	"github.com/goradd/orm/_test/gen/orm/goradd/node"
	"github.com/goradd/orm/pkg/broadcast"
	"github.com/goradd/orm/pkg/db"
	"github.com/goradd/orm/pkg/op"
	"github.com/goradd/orm/pkg/query"
)

// LoginBase is embedded in a Login object and provides the ORM access to the database.
// The member variables of the structure are private and should not normally be accessed by the Login embedder.
// Instead, use the accessor functions.
type loginBase struct {
	id        string
	idIsValid bool

	personID        string
	personIDIsNull  bool
	personIDIsValid bool
	personIDIsDirty bool
	objPerson       *Person

	username        string
	usernameIsValid bool
	usernameIsDirty bool

	password        string
	passwordIsNull  bool
	passwordIsValid bool
	passwordIsDirty bool

	isEnabled        bool
	isEnabledIsValid bool
	isEnabledIsDirty bool

	// Custom aliases, if specified
	_aliases map[string]any

	// Indicates whether this is a new object, or one loaded from the database. Used by Save to know whether to Insert or Update.
	_restored bool

	_originalPK string
}

// IDs used to access the Login object fields by name using the Get function.
// doc: type=Login
const (
	Login_ID        = `ID`
	Login_PersonID  = `PersonID`
	Login_Person    = `Person`
	Login_Username  = `Username`
	Login_Password  = `Password`
	Login_IsEnabled = `IsEnabled`
)

const LoginUsernameMaxLength = 20 // The number of runes the column can hold
const LoginPasswordMaxLength = 20 // The number of runes the column can hold

// Initialize or re-initialize a Login database object to default values.
// The primary key will get a temporary negative number which will be replaced when the object is saved.
// Multiple calls to Initialize are not guaranteed to create sequential values for the primary key.
func (o *loginBase) Initialize() {

	o.id = db.TemporaryPrimaryKey()

	o.idIsValid = false

	o.personID = ""

	o.personIDIsNull = true
	o.personIDIsValid = true
	o.personIDIsDirty = true

	o.username = ""

	o.usernameIsValid = false
	o.usernameIsDirty = false

	o.password = ""

	o.passwordIsNull = true
	o.passwordIsValid = true
	o.passwordIsDirty = true

	o.isEnabled = true

	o.isEnabledIsValid = true
	o.isEnabledIsDirty = true

	o._restored = false
}

// PrimaryKey returns the current value of the primary key field.
func (o *loginBase) PrimaryKey() string {
	return o.id
}

// OriginalPrimaryKey returns the value of the primary key that was originally loaded into the object when it was
// read from the database.
func (o *loginBase) OriginalPrimaryKey() string {
	return o._originalPK
}

// Copy copies all valid fields to a new Login object.
// Forward reference ids will be copied, but reverse and many-many references will not.
// Attached objects will not be included in the copy.
// Call Save() on the new object to save it into the database.
// Copy might panic if any fields in the database were set to a size larger than the
// maximum size through a process that accessed the database outside of the ORM.
func (o *loginBase) Copy() (newObject *Login) {
	newObject = NewLogin()
	if o.personIDIsValid {
		newObject.SetPersonID(o.personID)
	}
	if o.usernameIsValid {
		newObject.SetUsername(o.username)
	}
	if o.passwordIsValid {
		newObject.SetPassword(o.password)
	}
	if o.isEnabledIsValid {
		newObject.SetIsEnabled(o.isEnabled)
	}
	return
}

// ID returns the loaded value of ID or
// the zero value if not loaded. Call IDIsValid() to determine
// if it is loaded.
func (o *loginBase) ID() string {
	return fmt.Sprint(o.id)
}

// IDIsValid returns true if the value was loaded from the database or has been set.
func (o *loginBase) IDIsValid() bool {
	return o._restored && o.idIsValid
}

// PersonID returns the loaded value of PersonID.
func (o *loginBase) PersonID() string {
	if o._restored && !o.personIDIsValid {
		panic("PersonID was not selected in the last query and has not been set, and so is not valid")
	}
	return o.personID
}

// PersonIDIsValid returns true if the value was loaded from the database or has been set.
func (o *loginBase) PersonIDIsValid() bool {
	return o.personIDIsValid
}

// PersonIDIsNull returns true if the related database value is null.
func (o *loginBase) PersonIDIsNull() bool {
	return o.personIDIsNull
}

// PersonID_I returns the loaded value of PersonID as an interface.
// If the value in the database is NULL, a nil interface is returned.
func (o *loginBase) PersonID_I() interface{} {
	if o._restored && !o.personIDIsValid {
		panic("personID was not selected in the last query and has not been set, and so is not valid")
	} else if o.personIDIsNull {
		return nil
	}
	return o.personID
}

// SetPersonID sets the value of PersonID in the object, to be saved later in the database using the Save() function.
func (o *loginBase) SetPersonID(v string) {
	if o._restored &&
		o.personIDIsValid && // if it was not selected, then make sure it gets set, since our end comparison won't be valid
		!o.personIDIsNull && // if the db value is null, force a set of value
		o.personID == v {
		// no change
		return
	}

	o.personIDIsValid = true
	o.personID = v
	o.personIDIsDirty = true
	o.personIDIsNull = false
	o.objPerson = nil
}

// SetPersonIDToNull() will set the person_id value in the database to NULL.
// PersonID() will return the column's default value after this.
func (o *loginBase) SetPersonIDToNull() {
	if !o.personIDIsValid || !o.personIDIsNull {
		// If we know it is null in the database, don't save it
		o.personIDIsDirty = true
	}
	o.personIDIsValid = true
	o.personIDIsNull = true
	o.personID = ""
	o.objPerson = nil
}

// Person returns the current value of the loaded Person, and nil if its not loaded.
func (o *loginBase) Person() *Person {
	return o.objPerson
}

// LoadPerson returns the related Person. If it is not already loaded,
// it will attempt to load it, provided the PersonID column has been loaded first.
func (o *loginBase) LoadPerson(ctx context.Context) *Person {
	if !o.personIDIsValid {
		return nil
	}

	if o.objPerson == nil {
		// Load and cache
		o.objPerson = LoadPerson(ctx, o.personID)
	}
	return o.objPerson
}

// SetPerson will set the reference to person. The referenced object
// will be saved when Login is saved. Pass nil to break the connection.
func (o *loginBase) SetPerson(objPerson *Person) {
	o.personIDIsValid = true
	if objPerson == nil {
		if !o.personIDIsNull || !o._restored {
			o.personIDIsNull = true
			o.personIDIsDirty = true
			o.personID = ""
			o.objPerson = nil
		}
	} else {
		o.objPerson = objPerson
		if o.personIDIsNull || !o._restored || o.personID != objPerson.PrimaryKey() {
			o.personIDIsNull = false
			o.personID = objPerson.PrimaryKey()
			o.personIDIsDirty = true
		}
	}
}

// Username returns the loaded value of Username.
func (o *loginBase) Username() string {
	if o._restored && !o.usernameIsValid {
		panic("Username was not selected in the last query and has not been set, and so is not valid")
	}
	return o.username
}

// UsernameIsValid returns true if the value was loaded from the database or has been set.
func (o *loginBase) UsernameIsValid() bool {
	return o.usernameIsValid
}

// SetUsername sets the value of Username in the object, to be saved later in the database using the Save() function.
func (o *loginBase) SetUsername(v string) {
	if utf8.RuneCountInString(v) > LoginUsernameMaxLength {
		panic("attempted to set Login.Username to a value larger than its maximum length in runes")
	}
	if o._restored &&
		o.usernameIsValid && // if it was not selected, then make sure it gets set, since our end comparison won't be valid
		o.username == v {
		// no change
		return
	}

	o.usernameIsValid = true
	o.username = v
	o.usernameIsDirty = true
}

// Password returns the loaded value of Password.
func (o *loginBase) Password() string {
	if o._restored && !o.passwordIsValid {
		panic("Password was not selected in the last query and has not been set, and so is not valid")
	}
	return o.password
}

// PasswordIsValid returns true if the value was loaded from the database or has been set.
func (o *loginBase) PasswordIsValid() bool {
	return o.passwordIsValid
}

// PasswordIsNull returns true if the related database value is null.
func (o *loginBase) PasswordIsNull() bool {
	return o.passwordIsNull
}

// Password_I returns the loaded value of Password as an interface.
// If the value in the database is NULL, a nil interface is returned.
func (o *loginBase) Password_I() interface{} {
	if o._restored && !o.passwordIsValid {
		panic("password was not selected in the last query and has not been set, and so is not valid")
	} else if o.passwordIsNull {
		return nil
	}
	return o.password
}

// SetPassword sets the value of Password in the object, to be saved later in the database using the Save() function.
func (o *loginBase) SetPassword(v string) {
	if utf8.RuneCountInString(v) > LoginPasswordMaxLength {
		panic("attempted to set Login.Password to a value larger than its maximum length in runes")
	}
	if o._restored &&
		o.passwordIsValid && // if it was not selected, then make sure it gets set, since our end comparison won't be valid
		!o.passwordIsNull && // if the db value is null, force a set of value
		o.password == v {
		// no change
		return
	}

	o.passwordIsValid = true
	o.password = v
	o.passwordIsDirty = true
	o.passwordIsNull = false
}

// SetPasswordToNull() will set the password value in the database to NULL.
// Password() will return the column's default value after this.
func (o *loginBase) SetPasswordToNull() {
	if !o.passwordIsValid || !o.passwordIsNull {
		// If we know it is null in the database, don't save it
		o.passwordIsDirty = true
	}
	o.passwordIsValid = true
	o.passwordIsNull = true
	o.password = ""
}

// IsEnabled returns the loaded value of IsEnabled.
func (o *loginBase) IsEnabled() bool {
	if o._restored && !o.isEnabledIsValid {
		panic("IsEnabled was not selected in the last query and has not been set, and so is not valid")
	}
	return o.isEnabled
}

// IsEnabledIsValid returns true if the value was loaded from the database or has been set.
func (o *loginBase) IsEnabledIsValid() bool {
	return o.isEnabledIsValid
}

// SetIsEnabled sets the value of IsEnabled in the object, to be saved later in the database using the Save() function.
func (o *loginBase) SetIsEnabled(v bool) {
	if o._restored &&
		o.isEnabledIsValid && // if it was not selected, then make sure it gets set, since our end comparison won't be valid
		o.isEnabled == v {
		// no change
		return
	}

	o.isEnabledIsValid = true
	o.isEnabled = v
	o.isEnabledIsDirty = true
}

// GetAlias returns the alias for the given key.
func (o *loginBase) GetAlias(key string) query.AliasValue {
	if a, ok := o._aliases[key]; ok {
		return query.NewAliasValue(a)
	} else {
		panic("Alias " + key + " not found.")
	}
}

// IsNew returns true if the object will create a new record when saved.
func (o *loginBase) IsNew() bool {
	return !o._restored
}

// LoadLogin returns a Login from the database.
// selectNodes lets you provide nodes for selecting specific fields or additional fields from related tables.
// See [LoginsBuilder.Select] for more info.
func LoadLogin(ctx context.Context, id string, selectNodes ...query.Node) *Login {
	return queryLogins(ctx).
		Where(op.Equal(node.Login().ID(), id)).
		Select(selectNodes...).
		Get()
}

// HasLogin returns true if a Login with the given primaryKey exists in the database.
// doc: type=Login
func HasLogin(ctx context.Context, id string) bool {
	return queryLogins(ctx).
		Where(op.Equal(node.Login().ID(), id)).
		Count() == 1
}

// LoadLoginByPersonID queries for a single Login object by the given unique index values.
// selectNodes optionally let you provide nodes for joining to other tables or selecting specific fields.
// See [LoginsBuilder.Select].
// If you need a more elaborate query, use QueryLogins() to start a query builder.
func LoadLoginByPersonID(ctx context.Context, personID interface{}, selectNodes ...query.Node) *Login {
	q := queryLogins(ctx)
	if personID == nil {
		q = q.Where(op.IsNull(node.Login().PersonID()))
	} else {
		q = q.Where(op.Equal(node.Login().PersonID(), personID))
	}
	return q.Select(selectNodes...).Get()
}

// HasLoginByPersonID returns true if the
// given unique index values exist in the database.
// doc: type=Login
func HasLoginByPersonID(ctx context.Context, personID interface{}) bool {
	q := queryLogins(ctx)
	if personID == nil {
		q = q.Where(op.IsNull(node.Login().PersonID()))
	} else {
		q = q.Where(op.Equal(node.Login().PersonID(), personID))
	}
	return q.Count() == 1
}

// LoadLoginByUsername queries for a single Login object by the given unique index values.
// selectNodes optionally let you provide nodes for joining to other tables or selecting specific fields.
// See [LoginsBuilder.Select].
// If you need a more elaborate query, use QueryLogins() to start a query builder.
func LoadLoginByUsername(ctx context.Context, username string, selectNodes ...query.Node) *Login {
	q := queryLogins(ctx)
	q = q.Where(op.Equal(node.Login().Username(), username))
	return q.Select(selectNodes...).Get()
}

// HasLoginByUsername returns true if the
// given unique index values exist in the database.
// doc: type=Login
func HasLoginByUsername(ctx context.Context, username string) bool {
	q := queryLogins(ctx)
	q = q.Where(op.Equal(node.Login().Username(), username))
	return q.Count() == 1
}

// The LoginBuilder uses the query.BuilderI interface to build a query.
// All query operations go through this query builder.
// End a query by calling either Load, LoadCursor, Get, Count, or Delete
type LoginBuilder interface {
	// Join(alias string, joinedTable query.Node, condition query.Node) LoginBuilder

	// Where adds a condition to filter what gets selected.
	// Calling Where multiple times will AND the conditions together.
	Where(c query.Node) LoginBuilder

	// OrderBy specifies how the resulting data should be sorted.
	// By default, the given nodes are sorted in ascending order.
	// Add Descending() to the node to specify that it should be sorted in descending order.
	OrderBy(nodes ...query.Sorter) LoginBuilder

	// Limit will return a subset of the data, limited to the offset and number of rows specified.
	// For large data sets and specific types of queries, this can be slow, because it will perform
	// the entire query before computing the limit.
	// You cannot limit a query that has embedded arrays.
	Limit(maxRowCount int, offset int) LoginBuilder

	// Select optimizes the query to only return the specified fields.
	// Once you put a Select in your query, you must specify all the fields that you will eventually read out.
	// Some fields, like primary keys, are always selected.
	// If you are using a GroupBy, most database drivers will only allow selecting on fields in the GroupBy, and
	// doing otherwise will result in an error.
	Select(nodes ...query.Node) LoginBuilder

	// Calculation adds a calculation described by operation with the name alias.
	// After the query, you can read the data using GetAlias() on the object identified by base.
	Calculation(base query.TableNodeI, alias string, operation query.OperationNodeI) LoginBuilder

	// Distinct removes duplicates from the results of the query.
	// Adding a Select() is required.
	Distinct() LoginBuilder

	// GroupBy controls how results are grouped when using aggregate functions with Calculation.
	GroupBy(nodes ...query.Node) LoginBuilder

	// Having does additional filtering on the results of the query after the query is performed.
	Having(node query.Node) LoginBuilder

	// Load terminates the query builder, performs the query, and returns a slice of Login objects.
	// If there are any errors, nil is returned and the specific error is stored in the context.
	// If no results come back from the query, it will return a non-nil empty slice.
	Load() []*Login
	// Load terminates the query builder, performs the query, and returns a slice of interfaces.
	// This can then satisfy a general interface that loads arrays of objects.
	// If there are any errors, nil is returned and the specific error is stored in the context.
	// If no results come back from the query, it will return a non-nil empty slice.
	LoadI() []any

	// LoadCursor terminates the query builder, performs the query, and returns a cursor to the query.
	//
	// A query cursor is useful for dealing with large amounts of query results. However, there are some
	// limitations to its use. When working with SQL databases, you cannot use a cursor while querying
	// many-to-many or reverse relationships that will create an array of values.
	//
	// Call Next() on the returned cursor object to step through the results. Make sure you call Close
	// on the cursor object when you are done. You should use
	//   defer cursor.Close()
	// to make sure the cursor gets closed.
	LoadCursor() loginsCursor

	// Get is a convenience method to return only the first item found in a query.
	// The entire query is performed, so you should generally use this only if you know
	// you are selecting on one or very few items.
	//
	// If an error occurs, or no results are found, a nil is returned.
	// In the case of an error, the error is returned in the context.
	Get() *Login

	// Count terminates a query and returns just the number of items in the result.
	// If you have Select or Calculation columns in the query, it will count NULL results as well.
	// To not count NULL values, use Where in the builder with a NotNull operation.
	// To count distinct combinations of items, call Distinct() on the builder.
	Count() int

	// Subquery terminates the query builder and tags it as a subquery within a larger query.
	// You MUST include what you are selecting by adding Calculation or Select functions on the subquery builder.
	// Generally you would use this as a node to a Calculation function on the surrounding query builder.
	// Subquery() *query.SubqueryNode

}

type loginQueryBuilder struct {
	builder *query.Builder
}

func newLoginBuilder(ctx context.Context) LoginBuilder {
	b := loginQueryBuilder{
		builder: query.NewBuilder(ctx, node.Login()),
	}
	return &b
}

// Load terminates the query builder, performs the query, and returns a slice of Login objects.
// If there are any errors, nil is returned and the specific error is stored in the context.
// If no results come back from the query, it will return a non-nil empty slice.
func (b *loginQueryBuilder) Load() (logins []*Login) {
	b.builder.Command = query.BuilderCommandLoad
	database := db.GetDatabase("goradd")
	results := database.BuilderQuery(b.builder)
	if results == nil {
		return
	}
	for _, item := range results.([]map[string]any) {
		o := new(Login)
		o.load(item, o)
		logins = append(logins, o)
	}
	return
}

// Load terminates the query builder, performs the query, and returns a slice of interfaces.
// This can then satisfy a general interface that loads arrays of objects.
// If there are any errors, nil is returned and the specific error is stored in the context.
// If no results come back from the query, it will return a non-nil empty slice.
func (b *loginQueryBuilder) LoadI() (logins []any) {
	b.builder.Command = query.BuilderCommandLoad
	database := db.GetDatabase("goradd")
	results := database.BuilderQuery(b.builder)
	if results == nil {
		return
	}
	for _, item := range results.([]map[string]any) {
		o := new(Login)
		o.load(item, o)
		logins = append(logins, o)
	}
	return
}

// LoadCursor terminates the query builder, performs the query, and returns a cursor to the query.
//
// A query cursor is useful for dealing with large amounts of query results. However, there are some
// limitations to its use. When working with SQL databases, you cannot use a cursor while querying
// many-to-many or reverse relationships that will create an array of values.
//
// Call Next() on the returned cursor object to step through the results. Make sure you call Close
// on the cursor object when you are done. You should use
//
//	defer cursor.Close()
//
// to make sure the cursor gets closed.
func (b *loginQueryBuilder) LoadCursor() loginsCursor {
	b.builder.Command = query.BuilderCommandLoadCursor
	database := db.GetDatabase("goradd")
	result := database.BuilderQuery(b.builder)
	if result == nil {
		return loginsCursor{}
	}
	cursor := result.(query.CursorI)

	return loginsCursor{cursor}
}

type loginsCursor struct {
	query.CursorI
}

// Next returns the current Login object and moves the cursor to the next one.
//
// If there are no more records, it returns nil.
func (c loginsCursor) Next() *Login {
	if c.CursorI == nil {
		return nil
	}

	row := c.CursorI.Next()
	if row == nil {
		return nil
	}
	o := new(Login)
	o.load(row, o)
	return o
}

// Get is a convenience method to return only the first item found in a query.
// The entire query is performed, so you should generally use this only if you know
// you are selecting on one or very few items.
//
// If an error occurs, or no results are found, a nil is returned.
// In the case of an error, the error is returned in the context.
func (b *loginQueryBuilder) Get() *Login {
	results := b.Load()
	if results != nil && len(results) > 0 {
		obj := results[0]
		return obj
	} else {
		return nil
	}
}

/*
// Join attaches the table referred to by joinedTable, filtering the join process using the operation node specified
// by condition.
// The joinedTable node will be modified by this process so that you can use it in subsequent builder operations.
// Call GetAlias to return the resulting object from the query result.
func (b *loginQueryBuilder) Join(alias string, joinedTable query.Node, condition query.Node) LoginBuilder {
    if query.RootNode(n).TableName_() != "login" {
        panic("you can only join a node that is rooted at node.Login()")
    }
    // TODO: make sure joinedTable is a table node
	b.builder.Join(alias, joinedTable, condition)
	return b
}
*/

// Where adds a condition to filter what gets selected.
// Calling Where multiple times will AND the conditions together.
func (b *loginQueryBuilder) Where(c query.Node) LoginBuilder {
	b.builder.Where(c)
	return b
}

// OrderBy specifies how the resulting data should be sorted.
// By default, the given nodes are sorted in ascending order.
// Add Descending() to the node to specify that it should be sorted in descending order.
func (b *loginQueryBuilder) OrderBy(nodes ...query.Sorter) LoginBuilder {
	b.builder.OrderBy(nodes...)
	return b
}

// Limit will return a subset of the data, limited to the offset and number of rows specified.
// For large data sets and specific types of queries, this can be slow, because it will perform
// the entire query before computing the limit.
// You cannot limit a query that has embedded arrays.
func (b *loginQueryBuilder) Limit(maxRowCount int, offset int) LoginBuilder {
	b.builder.Limit(maxRowCount, offset)
	return b
}

// Select specifies what specific columns will be loaded with data.
// By default, all the columns of the login table will be queried and loaded.
// If nodes contains columns from the login table, that will limit the columns queried and loaded to only those columns.
// If related tables are specified, then all the columns from those tables are queried, selected and joined to the result.
// If columns in related tables are specified, then only those columns will be queried and loaded.
// Depending on the query, additional columns may automatically be added to the query. In particular, primary key columns
// will be added in most situations. The exception to this would be in distinct queries, group by queries, or subqueries.
func (b *loginQueryBuilder) Select(nodes ...query.Node) LoginBuilder {
	b.builder.Select(nodes...)
	return b
}

// Calculation adds operation as an aliased value onto base.
// After the query, you can read the data by passing alias to GetAlias on the returned object.
func (b *loginQueryBuilder) Calculation(base query.TableNodeI, alias string, operation query.OperationNodeI) LoginBuilder {
	b.builder.Calculation(base, alias, operation)
	return b
}

// Distinct removes duplicates from the results of the query.
// Adding a Select() is usually required.
func (b *loginQueryBuilder) Distinct() LoginBuilder {
	b.builder.Distinct()
	return b
}

// GroupBy controls how results are grouped when using aggregate functions with Calculation.
func (b *loginQueryBuilder) GroupBy(nodes ...query.Node) LoginBuilder {
	b.builder.GroupBy(nodes...)
	return b
}

// Having does additional filtering on the results of the query after the query is performed.
func (b *loginQueryBuilder) Having(node query.Node) LoginBuilder {
	b.builder.Having(node)
	return b
}

// Count terminates a query and returns just the number of items in the result.
// If you have Select or Calculation columns in the query, it will count NULL results as well.
// To not count NULL values, use Where in the builder with a NotNull operation.
// To count distinct combinations of items, call Distinct() on the builder.
func (b *loginQueryBuilder) Count() int {
	b.builder.Command = query.BuilderCommandCount
	database := db.GetDatabase("goradd")
	results := database.BuilderQuery(b.builder)
	if results == nil {
		return 0
	}
	return results.(int)
}

/*
// Subquery terminates the query builder and tags it as a subquery within a larger query.
// You MUST include what you are selecting by adding Calculation or Select functions on the subquery builder.
// Generally you would use this as a node to a Calculation function on the surrounding query builder.
func (b *loginQueryBuilder)  Subquery() *query.SubqueryNode {
	 return b.builder.Subquery()
}
*/

// CountLoginByID queries the database and returns the number of Login objects that
// have id.
// doc: type=Login
func CountLoginByID(ctx context.Context, id string) int {
	return queryLogins(ctx).Where(op.Equal(node.Login().ID(), id)).Count()
}

// CountLoginByPersonID queries the database and returns the number of Login objects that
// have personID.
// doc: type=Login
func CountLoginByPersonID(ctx context.Context, personID string) int {
	if personID == "" {
		return 0
	}
	return queryLogins(ctx).Where(op.Equal(node.Login().PersonID(), personID)).Count()
}

// CountLoginByUsername queries the database and returns the number of Login objects that
// have username.
// doc: type=Login
func CountLoginByUsername(ctx context.Context, username string) int {
	return queryLogins(ctx).Where(op.Equal(node.Login().Username(), username)).Count()
}

// CountLoginByPassword queries the database and returns the number of Login objects that
// have password.
// doc: type=Login
func CountLoginByPassword(ctx context.Context, password string) int {
	return queryLogins(ctx).Where(op.Equal(node.Login().Password(), password)).Count()
}

// CountLoginByIsEnabled queries the database and returns the number of Login objects that
// have isEnabled.
// doc: type=Login
func CountLoginByIsEnabled(ctx context.Context, isEnabled bool) int {
	return queryLogins(ctx).Where(op.Equal(node.Login().IsEnabled(), isEnabled)).Count()
}

// load is the private loader that transforms data coming from the database into a tree structure reflecting the relationships
// between the object chain requested by the user in the query.
func (o *loginBase) load(m map[string]interface{}, objThis *Login) {

	if v, ok := m["id"]; ok && v != nil {
		if o.id, ok = v.(string); ok {
			o.idIsValid = true

			o._originalPK = o.id

		} else {
			panic("Wrong type found for id.")
		}
	} else {
		o.idIsValid = false
		o.id = ""
	}

	if v, ok := m["person_id"]; ok {
		if v == nil {
			o.personID = ""
			o.personIDIsNull = true
			o.personIDIsValid = true
			o.personIDIsDirty = false
		} else if o.personID, ok = v.(string); ok {
			o.personIDIsNull = false
			o.personIDIsValid = true
			o.personIDIsDirty = false
		} else {
			panic("Wrong type found for person_id.")
		}
	} else {
		o.personIDIsValid = false
		o.personIDIsNull = true
		o.personID = ""
		o.personIDIsDirty = false
	}

	if v, ok := m["Person"]; ok {
		if objPerson, ok2 := v.(map[string]any); ok2 {
			o.objPerson = new(Person)
			o.objPerson.load(objPerson, o.objPerson)
			o.personIDIsValid = true
			o.personIDIsDirty = false
		} else {
			panic("Wrong type found for Person object.")
		}
	} else {
		o.objPerson = nil
	}

	if v, ok := m["username"]; ok && v != nil {
		if o.username, ok = v.(string); ok {
			o.usernameIsValid = true
			o.usernameIsDirty = false

		} else {
			panic("Wrong type found for username.")
		}
	} else {
		o.usernameIsValid = false
		o.username = ""
		o.usernameIsDirty = false
	}

	if v, ok := m["password"]; ok {
		if v == nil {
			o.password = ""
			o.passwordIsNull = true
			o.passwordIsValid = true
			o.passwordIsDirty = false
		} else if o.password, ok = v.(string); ok {
			o.passwordIsNull = false
			o.passwordIsValid = true
			o.passwordIsDirty = false
		} else {
			panic("Wrong type found for password.")
		}
	} else {
		o.passwordIsValid = false
		o.passwordIsNull = true
		o.password = ""
		o.passwordIsDirty = false
	}

	if v, ok := m["is_enabled"]; ok && v != nil {
		if o.isEnabled, ok = v.(bool); ok {
			o.isEnabledIsValid = true
			o.isEnabledIsDirty = false

		} else {
			panic("Wrong type found for is_enabled.")
		}
	} else {
		o.isEnabledIsValid = false
		o.isEnabled = true
		o.isEnabledIsDirty = false
	}

	if v, ok := m["aliases_"]; ok {
		o._aliases = v.(map[string]any)
	}

	o._restored = true

}

// Save will update or insert the object, depending on the state of the object.
// If it has any auto-generated ids, those will be updated.
// Database errors generally will be handled by the logger and not returned here,
// since those indicate a problem with database driver or configuration.
// Save will return a db.OptimisticLockError if it detects a collision when two users
// are attempting to change the same database record.
func (o *loginBase) Save(ctx context.Context) error {
	if o._restored {
		return o.update(ctx)
	} else {
		return o.insert(ctx)
	}
}

// update will update the values in the database, saving any changed values.
func (o *loginBase) update(ctx context.Context) (err error) {
	if !o._restored {
		panic("cannot update a record that was not originally read from the database.")
	}

	var modifiedFields map[string]interface{}
	d := Database()
	err = db.ExecuteTransaction(ctx, d, func() error {

		// TODO: Perform all reads and consistency checks before saves

		// Save loaded Person object to get its new pk and update it here.
		if o.objPerson != nil {
			o.objPerson.Save(ctx)
			id := o.objPerson.PrimaryKey()
			o.SetPersonID(id)
		}

		// Save all modified fields to the database
		modifiedFields = o.getModifiedFields()
		if len(modifiedFields) != 0 {
			d.Update(ctx, "login", modifiedFields, map[string]any{"id": o._originalPK})
		}

		return nil
	}) // transaction

	if err != nil {
		return
	}

	o.resetDirtyStatus()
	if len(modifiedFields) != 0 {
		broadcast.Update(ctx, "goradd", "login", o._originalPK, all.SortedKeys(modifiedFields)...)
	}

	return
}

// insert will insert the object into the database. Related items will be saved.
func (o *loginBase) insert(ctx context.Context) (err error) {
	d := Database()
	err = db.ExecuteTransaction(ctx, d, func() error {

		if o.objPerson != nil {
			if err = o.objPerson.Save(ctx); err != nil {
				return err
			}
			id := o.objPerson.PrimaryKey()
			o.SetPersonID(id)
		}

		if !o.usernameIsValid {
			panic("a value for Username is required, and there is no default value. Call SetUsername() before inserting the record.")
		}

		m := o.getValidFields()

		id := d.Insert(ctx, "login", m)
		o.id = id
		o._originalPK = id

		return nil

	}) // transaction

	if err != nil {
		return
	}

	o.resetDirtyStatus()
	o._restored = true
	broadcast.Insert(ctx, "goradd", "login", o.PrimaryKey())
	return
}

// getModifiedFields returns the database columns that have been modified. This
// will determine which specific fields are sent to the database to be changed.
func (o *loginBase) getModifiedFields() (fields map[string]interface{}) {
	fields = map[string]interface{}{}
	if o.personIDIsDirty {
		if o.personIDIsNull {
			fields["person_id"] = nil
		} else {
			fields["person_id"] = o.personID
		}
	}
	if o.usernameIsDirty {
		fields["username"] = o.username
	}
	if o.passwordIsDirty {
		if o.passwordIsNull {
			fields["password"] = nil
		} else {
			fields["password"] = o.password
		}
	}
	if o.isEnabledIsDirty {
		fields["is_enabled"] = o.isEnabled
	}
	return
}

// getValidFields returns the fields that have valid data in them in a form ready to send to the database.
func (o *loginBase) getValidFields() (fields map[string]interface{}) {
	fields = map[string]interface{}{}
	if o.personIDIsValid {
		if o.personIDIsNull {
			fields["person_id"] = nil
		} else {
			fields["person_id"] = o.personID
		}
	}
	if o.usernameIsValid {
		fields["username"] = o.username
	}
	if o.passwordIsValid {
		if o.passwordIsNull {
			fields["password"] = nil
		} else {
			fields["password"] = o.password
		}
	}
	if o.isEnabledIsValid {
		fields["is_enabled"] = o.isEnabled
	}
	return
}

// Delete deletes the record from the database.
func (o *loginBase) Delete(ctx context.Context) (err error) {
	if !o._restored {
		panic("Cannot delete a record that has no primary key value.")
	}
	d := Database()
	d.Delete(ctx, "login", map[string]any{"ID": o.id})
	return nil
	broadcast.Delete(ctx, "goradd", "login", fmt.Sprint(o.id))
	return
}

// deleteLogin deletes the Login with primary key pk from the database
// and handles associated records.
func deleteLogin(ctx context.Context, pk string) error {
	d := db.GetDatabase("goradd")
	d.Delete(ctx, "login", map[string]any{"ID": pk})
	broadcast.Delete(ctx, "goradd", "login", fmt.Sprint(pk))
	return nil
}

// resetDirtyStatus resets the dirty status of every field in the object.
func (o *loginBase) resetDirtyStatus() {
	o.personIDIsDirty = false
	o.usernameIsDirty = false
	o.passwordIsDirty = false
	o.isEnabledIsDirty = false

}

// IsDirty returns true if the object has been changed since it was read from the database.
func (o *loginBase) IsDirty() (dirty bool) {
	dirty = o.personIDIsDirty ||
		(o.objPerson != nil && o.objPerson.IsDirty()) ||
		o.usernameIsDirty ||
		o.passwordIsDirty ||
		o.isEnabledIsDirty

	return
}

// Get returns the value of a field in the object based on the field's name.
// It will also get related objects if they are loaded.
// Invalid fields and objects are returned as nil
func (o *loginBase) Get(key string) interface{} {

	switch key {

	case "ID":
		if !o.idIsValid {
			return nil
		}
		return o.id

	case "PersonID":
		if !o.personIDIsValid {
			return nil
		}
		return o.personID

	case "Person":
		return o.Person()

	case "Username":
		if !o.usernameIsValid {
			return nil
		}
		return o.username

	case "Password":
		if !o.passwordIsValid {
			return nil
		}
		return o.password

	case "IsEnabled":
		if !o.isEnabledIsValid {
			return nil
		}
		return o.isEnabled

	}
	return nil
}

// MarshalBinary serializes the object into a buffer that is deserializable using UnmarshalBinary.
// It should be used for transmitting database objects over the wire, or for temporary storage. It does not send
// a version number, so if the data format changes, its up to you to invalidate the old stored objects.
// The framework uses this to serialize the object when it is stored in a control.
func (o *loginBase) MarshalBinary() ([]byte, error) {
	buf := new(bytes.Buffer)
	encoder := gob.NewEncoder(buf)

	if err := encoder.Encode(o.id); err != nil {
		return nil, fmt.Errorf("error encoding Login.id: %w", err)
	}
	if err := encoder.Encode(o.idIsValid); err != nil {
		return nil, fmt.Errorf("error encoding Login.idIsValid: %w", err)
	}

	if err := encoder.Encode(o.personID); err != nil {
		return nil, fmt.Errorf("error encoding Login.personID: %w", err)
	}
	if err := encoder.Encode(o.personIDIsNull); err != nil {
		return nil, fmt.Errorf("error encoding Login.personIDIsNull: %w", err)
	}
	if err := encoder.Encode(o.personIDIsValid); err != nil {
		return nil, fmt.Errorf("error encoding Login.personIDIsValid: %w", err)
	}
	if err := encoder.Encode(o.personIDIsDirty); err != nil {
		return nil, fmt.Errorf("error encoding Login.personIDIsDirty: %w", err)
	}

	if o.objPerson == nil {
		if err := encoder.Encode(false); err != nil {
			return nil, err
		}
	} else {
		if err := encoder.Encode(true); err != nil {
			return nil, err
		}
		if err := encoder.Encode(o.objPerson); err != nil {
			return nil, fmt.Errorf("error encoding Login.objPerson: %w", err)
		}
	}

	if err := encoder.Encode(o.username); err != nil {
		return nil, fmt.Errorf("error encoding Login.username: %w", err)
	}
	if err := encoder.Encode(o.usernameIsValid); err != nil {
		return nil, fmt.Errorf("error encoding Login.usernameIsValid: %w", err)
	}
	if err := encoder.Encode(o.usernameIsDirty); err != nil {
		return nil, fmt.Errorf("error encoding Login.usernameIsDirty: %w", err)
	}

	if err := encoder.Encode(o.password); err != nil {
		return nil, fmt.Errorf("error encoding Login.password: %w", err)
	}
	if err := encoder.Encode(o.passwordIsNull); err != nil {
		return nil, fmt.Errorf("error encoding Login.passwordIsNull: %w", err)
	}
	if err := encoder.Encode(o.passwordIsValid); err != nil {
		return nil, fmt.Errorf("error encoding Login.passwordIsValid: %w", err)
	}
	if err := encoder.Encode(o.passwordIsDirty); err != nil {
		return nil, fmt.Errorf("error encoding Login.passwordIsDirty: %w", err)
	}

	if err := encoder.Encode(o.isEnabled); err != nil {
		return nil, fmt.Errorf("error encoding Login.isEnabled: %w", err)
	}
	if err := encoder.Encode(o.isEnabledIsValid); err != nil {
		return nil, fmt.Errorf("error encoding Login.isEnabledIsValid: %w", err)
	}
	if err := encoder.Encode(o.isEnabledIsDirty); err != nil {
		return nil, fmt.Errorf("error encoding Login.isEnabledIsDirty: %w", err)
	}

	if o._aliases == nil {
		if err := encoder.Encode(false); err != nil {
			return nil, err
		}
	} else {
		if err := encoder.Encode(true); err != nil {
			return nil, err
		}
		if err := encoder.Encode(o._aliases); err != nil {
			return nil, fmt.Errorf("error encoding Login._aliases: %w", err)
		}
	}

	if err := encoder.Encode(o._restored); err != nil {
		return nil, fmt.Errorf("error encoding Login._restored: %w", err)
	}
	if err := encoder.Encode(o._originalPK); err != nil {
		return nil, fmt.Errorf("error encoding Login._originalPK: %w", err)
	}

	return buf.Bytes(), nil

	return buf.Bytes(), nil
}

// UnmarshalBinary converts a structure that was created with MarshalBinary into a Login object.
func (o *loginBase) UnmarshalBinary(data []byte) (err error) {

	buf := bytes.NewBuffer(data)
	dec := gob.NewDecoder(buf)
	var isPtr bool

	_ = isPtr
	if err = dec.Decode(&o.id); err != nil {
		return fmt.Errorf("error decoding Login.id: %w", err)
	}
	if err = dec.Decode(&o.idIsValid); err != nil {
		return fmt.Errorf("error decoding Login.idIsValid: %w", err)
	}

	if err = dec.Decode(&o.personID); err != nil {
		return fmt.Errorf("error decoding Login.personID: %w", err)
	}
	if err = dec.Decode(&o.personIDIsNull); err != nil {
		return fmt.Errorf("error decoding Login.personIDIsNull: %w", err)
	}
	if err = dec.Decode(&o.personIDIsValid); err != nil {
		return fmt.Errorf("error decoding Login.personIDIsValid: %w", err)
	}
	if err = dec.Decode(&o.personIDIsDirty); err != nil {
		return fmt.Errorf("error decoding Login.personIDIsDirty: %w", err)
	}

	if err = dec.Decode(&isPtr); err != nil {
		return fmt.Errorf("error decoding Login.objPerson isPtr: %w", err)
	}
	if isPtr {
		if err = dec.Decode(&o.objPerson); err != nil {
			return fmt.Errorf("error decoding Login.objPerson: %w", err)
		}
	}
	if err = dec.Decode(&o.username); err != nil {
		return fmt.Errorf("error decoding Login.username: %w", err)
	}
	if err = dec.Decode(&o.usernameIsValid); err != nil {
		return fmt.Errorf("error decoding Login.usernameIsValid: %w", err)
	}
	if err = dec.Decode(&o.usernameIsDirty); err != nil {
		return fmt.Errorf("error decoding Login.usernameIsDirty: %w", err)
	}

	if err = dec.Decode(&o.password); err != nil {
		return fmt.Errorf("error decoding Login.password: %w", err)
	}
	if err = dec.Decode(&o.passwordIsNull); err != nil {
		return fmt.Errorf("error decoding Login.passwordIsNull: %w", err)
	}
	if err = dec.Decode(&o.passwordIsValid); err != nil {
		return fmt.Errorf("error decoding Login.passwordIsValid: %w", err)
	}
	if err = dec.Decode(&o.passwordIsDirty); err != nil {
		return fmt.Errorf("error decoding Login.passwordIsDirty: %w", err)
	}

	if err = dec.Decode(&o.isEnabled); err != nil {
		return fmt.Errorf("error decoding Login.isEnabled: %w", err)
	}
	if err = dec.Decode(&o.isEnabledIsValid); err != nil {
		return fmt.Errorf("error decoding Login.isEnabledIsValid: %w", err)
	}
	if err = dec.Decode(&o.isEnabledIsDirty); err != nil {
		return fmt.Errorf("error decoding Login.isEnabledIsDirty: %w", err)
	}

	return
}

// MarshalJSON serializes the object into a JSON object.
// Only valid data will be serialized, meaning, you can control what gets serialized by using Select to
// select only the fields you want when you query for the object. Another way to control the output
// is to call MarshalStringMap, modify the map, then encode the map.
func (o *loginBase) MarshalJSON() (data []byte, err error) {
	v := o.MarshalStringMap()
	return json.Marshal(v)
}

// MarshalStringMap serializes the object into a string map of interfaces.
// Only valid data will be serialized, meaning, you can control what gets serialized by using Select to
// select only the fields you want when you query for the object. The keys are the same as the json keys.
func (o *loginBase) MarshalStringMap() map[string]interface{} {
	v := make(map[string]interface{})

	if o.idIsValid {
		v["id"] = o.id
	}

	if o.personIDIsValid {
		if o.personIDIsNull {
			v["personID"] = nil
		} else {
			v["personID"] = o.personID
		}
	}

	if val := o.Person(); val != nil {
		v["person"] = val.MarshalStringMap()
	}

	if o.usernameIsValid {
		v["username"] = o.username
	}

	if o.passwordIsValid {
		if o.passwordIsNull {
			v["password"] = nil
		} else {
			v["password"] = o.password
		}
	}

	if o.isEnabledIsValid {
		v["isEnabled"] = o.isEnabled
	}

	for _k, _v := range o._aliases {
		v[_k] = _v
	}
	return v
}

// UnmarshalJSON unmarshalls the given json data into the Login. The Login can be a
// newly created object, or one loaded from the database.
//
// After unmarshalling, the object is not  saved. You must call Save to insert it into the database
// or update it.
//
// Unmarshalling of sub-objects, as in objects linked via foreign keys, is not currently supported.
//
// The fields it expects are:
//
//	"id" - string
//	"personID" - string, nullable
//	"username" - string
//	"password" - string, nullable
//	"isEnabled" - bool
func (o *loginBase) UnmarshalJSON(data []byte) (err error) {
	var v map[string]interface{}
	if len(data) == 0 {
		return
	}
	d := json.NewDecoder(bytes.NewReader(data))
	d.UseNumber() // use a number to avoid precision errors
	if err = d.Decode(&v); err != nil {
		return err
	}
	return o.UnmarshalStringMap(v)
}

// UnmarshalStringMap will load the values from the stringmap into the object.
//
// Override this in Login to modify the json before sending it here.
func (o *loginBase) UnmarshalStringMap(m map[string]interface{}) (err error) {
	for k, v := range m {
		switch k {

		case "personID":
			{
				if v == nil {
					o.SetPersonIDToNull()
					continue
				}

				if s, ok := v.(string); !ok {
					return fmt.Errorf("field %s must be a string", k)
				} else {
					o.SetPersonID(s)
				}

			}

		case "username":
			{
				if v == nil {
					return fmt.Errorf("field %s cannot be null", k)
				}

				if s, ok := v.(string); !ok {
					return fmt.Errorf("json field %s must be a string", k)
				} else {
					o.SetUsername(s)
				}
			}

		case "password":
			{
				if v == nil {
					o.SetPasswordToNull()
					continue
				}

				if s, ok := v.(string); !ok {
					return fmt.Errorf("json field %s must be a string", k)
				} else {
					o.SetPassword(s)
				}
			}

		case "isEnabled":
			{
				if v == nil {
					return fmt.Errorf("field %s cannot be null", k)
				}

				if b, ok := v.(bool); !ok {
					return fmt.Errorf("json field %s must be a boolean", k)
				} else {
					o.SetIsEnabled(b)
				}
			}

		}
	}
	return
}
