// Code generated by goradd-orm. DO NOT EDIT.

package goradd

import (
	"context"
	"strconv"
	"testing"

	"github.com/goradd/orm/_test/gen/orm/goradd/node"
	"github.com/goradd/orm/pkg/db"
	"github.com/goradd/orm/pkg/op"
	"github.com/goradd/orm/pkg/test"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

// createMinimalSampleEmployeeInfo creates an unsaved minimal version of a EmployeeInfo object
// for testing.
func createMinimalSampleEmployeeInfo() *EmployeeInfo {
	obj := NewEmployeeInfo()
	updateMinimalSampleEmployeeInfo(obj)
	return obj
}

// updateMinimalSampleEmployeeInfo sets the values of a minimal sample to new, random values.
func updateMinimalSampleEmployeeInfo(obj *EmployeeInfo) {

	// A required forward reference will need to be fulfilled just to save the minimal version of this object
	// If the database is configured so that the referenced object points back here, either directly or through multiple
	// forward references, it possible this could create an endless loop. Such a structure could not be saved anyways.
	if obj.Person() == nil { // only update if not already set, so that delete will remove it later
		obj.SetPerson(createMinimalSamplePerson())
	}

	obj.SetEmployeeNumber(test.RandomValue[int](32))

}

// createMaximalSampleEmployeeInfo creates an unsaved version of a EmployeeInfo object
// for testing that includes references to minimal objects.
func createMaximalSampleEmployeeInfo() *EmployeeInfo {
	obj := NewEmployeeInfo()
	updateMaximalSampleEmployeeInfo(obj)
	return obj
}

// updateMaximalSampleEmployeeInfo sets all the maximal sample values to new values.
// This will set new values for references, so save the old values and delete them.
func updateMaximalSampleEmployeeInfo(obj *EmployeeInfo) {
	updateMinimalSampleEmployeeInfo(obj)

}

// deleteSampleEmployeeInfo deletes an object created and saved by one of the sample creator functions.
func deleteSampleEmployeeInfo(ctx context.Context, obj *EmployeeInfo) {
	if obj == nil {
		return
	}

	obj.Delete(ctx)

	deleteSamplePerson(ctx, obj.Person())

}

func TestEmployeeInfo_SetPersonID(t *testing.T) {

	obj := NewEmployeeInfo()

	assert.True(t, obj.IsNew())
	val := test.RandomValue[string](0)
	obj.SetPersonID(val)
	assert.Equal(t, val, obj.PersonID())

	// test default
	obj.SetPersonID("")
	assert.EqualValues(t, "", obj.PersonID(), "set default")

}
func TestEmployeeInfo_SetEmployeeNumber(t *testing.T) {

	obj := NewEmployeeInfo()

	assert.True(t, obj.IsNew())
	val := test.RandomValue[int](32)
	obj.SetEmployeeNumber(val)
	assert.Equal(t, val, obj.EmployeeNumber())

	// test default
	obj.SetEmployeeNumber(0)
	assert.EqualValues(t, 0, obj.EmployeeNumber(), "set default")

}

func TestEmployeeInfo_Copy(t *testing.T) {
	obj := createMinimalSampleEmployeeInfo()

	obj2 := obj.Copy()

	assert.Equal(t, obj.PersonID(), obj2.PersonID())
	assert.Equal(t, obj.EmployeeNumber(), obj2.EmployeeNumber())

}

func TestEmployeeInfo_BasicInsert(t *testing.T) {
	obj := createMinimalSampleEmployeeInfo()
	ctx := db.NewContext(nil)
	err := obj.Save(ctx)
	assert.NoError(t, err)
	defer deleteSampleEmployeeInfo(ctx, obj)

	// Test retrieval
	obj2 := LoadEmployeeInfo(ctx, obj.PrimaryKey())
	require.NotNil(t, obj2)

	assert.Equal(t, obj2.PrimaryKey(), obj2.OriginalPrimaryKey())

	assert.True(t, obj2.IDIsValid())

	assert.True(t, obj2.EmployeeNumberIsValid())

	assert.EqualValues(t, obj.EmployeeNumber(), obj2.EmployeeNumber())

	// test that setting it to the same value will not change the dirty bit
	assert.False(t, obj2.employeeNumberIsDirty)
	obj2.SetEmployeeNumber(obj2.EmployeeNumber())
	assert.False(t, obj2.employeeNumberIsDirty)

}

func TestEmployeeInfo_InsertPanics(t *testing.T) {
	obj := createMinimalSampleEmployeeInfo()
	ctx := db.NewContext(nil)

	obj.personIDIsValid = false
	assert.Panics(t, func() { obj.Save(ctx) })
	obj.personIDIsValid = true

	obj.employeeNumberIsValid = false
	assert.Panics(t, func() { obj.Save(ctx) })
	obj.employeeNumberIsValid = true

}

func TestEmployeeInfo_BasicUpdate(t *testing.T) {
	obj := createMinimalSampleEmployeeInfo()
	ctx := db.NewContext(nil)
	assert.NoError(t, obj.Save(ctx))
	defer deleteSampleEmployeeInfo(ctx, obj)
	updateMinimalSampleEmployeeInfo(obj)
	assert.NoError(t, obj.Save(ctx))
	obj2 := LoadEmployeeInfo(ctx, obj.PrimaryKey())

	assert.Equal(t, obj2.ID(), obj.ID(), "ID did not update")
	assert.Equal(t, obj2.PersonID(), obj.PersonID(), "PersonID did not update")
	assert.Equal(t, obj2.EmployeeNumber(), obj.EmployeeNumber(), "EmployeeNumber did not update")
}

func TestEmployeeInfo_References(t *testing.T) {
	obj := createMaximalSampleEmployeeInfo()
	ctx := db.NewContext(nil)
	obj.Save(ctx)
	defer deleteSampleEmployeeInfo(ctx, obj)

	// Test that referenced objects were saved and assigned ids
	assert.NotNil(t, obj.Person())
	assert.NotEqual(t, '-', obj.Person().PrimaryKey()[0])

	// Test lazy loading
	obj2 := LoadEmployeeInfo(ctx, obj.PrimaryKey())
	objPkOnly := LoadEmployeeInfo(ctx, obj.PrimaryKey(), node.EmployeeInfo().PrimaryKey())
	_ = obj2 // avoid error if there are no references
	_ = objPkOnly

	assert.Nil(t, obj2.Person(), "Person is not loaded initially")
	v_Person := obj2.LoadPerson(ctx)
	assert.NotNil(t, v_Person)
	assert.Equal(t, v_Person.PrimaryKey(), obj2.Person().PrimaryKey())
	assert.Equal(t, obj.Person().PrimaryKey(), obj2.Person().PrimaryKey())
	assert.True(t, obj2.PersonIDIsValid())

	assert.False(t, objPkOnly.PersonIDIsValid())
	assert.Nil(t, objPkOnly.LoadPerson(ctx))

	assert.Panics(t, func() {
		objPkOnly.SetPerson(nil)
	})

	// test eager loading
	obj3 := LoadEmployeeInfo(ctx, obj.PrimaryKey(), node.EmployeeInfo().Person())
	_ = obj3 // avoid error if there are no references

	assert.Equal(t, obj2.Person().PrimaryKey(), obj3.Person().PrimaryKey())

}
func TestEmployeeInfo_EmptyPrimaryKeyGetter(t *testing.T) {
	obj := NewEmployeeInfo()

	i, err := strconv.Atoi(obj.ID())
	assert.NoError(t, err)
	assert.True(t, i < 0)
}

func TestEmployeeInfo_Getters(t *testing.T) {
	obj := createMinimalSampleEmployeeInfo()

	i, err := strconv.Atoi(obj.ID())
	assert.NoError(t, err)
	assert.True(t, i < 0)

	ctx := db.NewContext(nil)
	require.NoError(t, obj.Save(ctx))
	defer deleteSampleEmployeeInfo(ctx, obj)

	assert.True(t, HasEmployeeInfo(ctx, obj.PrimaryKey()))

	obj2 := LoadEmployeeInfo(ctx, obj.PrimaryKey(), node.EmployeeInfo().PrimaryKey())

	assert.Panics(t, func() { obj2.PersonID() })
	assert.Panics(t, func() { obj2.EmployeeNumber() })
}

func TestEmployeeInfo_QueryLoad(t *testing.T) {
	obj := createMinimalSampleEmployeeInfo()
	ctx := db.NewContext(nil)
	err := obj.Save(ctx)
	assert.NoError(t, err)
	defer deleteSampleEmployeeInfo(ctx, obj)

	objs := QueryEmployeeInfos(ctx).
		Where(op.Equal(node.EmployeeInfo().PrimaryKey(), obj.PrimaryKey())).
		OrderBy(node.EmployeeInfo().PrimaryKey()). // exercise order by
		Limit(1, 0).                               // exercise limit
		Load()

	assert.Equal(t, obj.PrimaryKey(), objs[0].PrimaryKey())
}
func TestEmployeeInfo_QueryLoadI(t *testing.T) {
	obj := createMinimalSampleEmployeeInfo()
	ctx := db.NewContext(nil)
	err := obj.Save(ctx)
	assert.NoError(t, err)
	defer deleteSampleEmployeeInfo(ctx, obj)

	objs := QueryEmployeeInfos(ctx).
		Where(op.Equal(node.EmployeeInfo().PrimaryKey(), obj.PrimaryKey())).
		LoadI()

	assert.Equal(t, obj.PrimaryKey(), objs[0].Get("ID"))
}
func TestEmployeeInfo_QueryCursor(t *testing.T) {
	obj := createMinimalSampleEmployeeInfo()
	ctx := db.NewContext(nil)
	err := obj.Save(ctx)
	assert.NoError(t, err)
	defer deleteSampleEmployeeInfo(ctx, obj)

	cursor := QueryEmployeeInfos(ctx).
		Where(op.Equal(node.EmployeeInfo().PrimaryKey(), obj.PrimaryKey())).
		LoadCursor()

	obj2 := cursor.Next()
	assert.Equal(t, obj.PrimaryKey(), obj2.PrimaryKey())
	assert.Nil(t, cursor.Next())

	// test empty cursor result
	cursor = QueryEmployeeInfos(ctx).
		Where(op.Equal(1, 0)).
		LoadCursor()
	assert.Nil(t, cursor.Next())

}
func TestEmployeeInfo_Count(t *testing.T) {
	obj := createMaximalSampleEmployeeInfo()
	ctx := db.NewContext(nil)
	err := obj.Save(ctx)
	assert.NoError(t, err)
	defer deleteSampleEmployeeInfo(ctx, obj)

	assert.Less(t, 0, CountEmployeeInfosByID(ctx, obj.ID()))
	assert.Less(t, 0, CountEmployeeInfosByPersonID(ctx, obj.PersonID()))
	assert.Less(t, 0, CountEmployeeInfosByEmployeeNumber(ctx, obj.EmployeeNumber()))
}
