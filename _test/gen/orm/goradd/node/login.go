// Code generated by goradd-orm. DO NOT EDIT.

package node

import (
	"encoding/gob"

	"github.com/goradd/orm/pkg/query"
	"github.com/goradd/orm/pkg/schema"
)

// LoginNode is the builder interface to the Login nodes.
type LoginNode interface {
	query.TableNodeI
	PrimaryKey() *query.ColumnNode
	// Id represents the id column in the database.
	Id() *query.ColumnNode
	// PersonId represents the person_id column in the database.
	PersonId() *query.ColumnNode
	// Username represents the username column in the database.
	Username() *query.ColumnNode
	// Password represents the password column in the database.
	Password() *query.ColumnNode
	// IsEnabled represents the is_enabled column in the database.
	IsEnabled() *query.ColumnNode
}

// loginTable represents the login table in a query. It uses a builder pattern to chain
// together other tables and columns to form a node chain in a query.
//
// To use the loginTable, call [Login()] to start a reference chain when querying the login table.
type loginTable struct {
}

// Login returns a table node that starts a node chain that begins with the login table.
func Login() LoginNode {
	return loginTable{}
}

// TableName_ returns the query name of the table the node is associated with.
func (n loginTable) TableName_() string {
	return "login"
}

// NodeType_ returns the query.NodeType of the node.
func (n loginTable) NodeType_() query.NodeType {
	return query.TableNodeType
}

// DatabaseKey_ returns the database key of the database the node is associated with.
func (n loginTable) DatabaseKey_() string {
	return "goradd"
}

// ColumnNodes_ returns a list of all the column nodes in this node.
func (n loginTable) ColumnNodes_() (nodes []query.Node) {
	nodes = append(nodes, n.Id())
	nodes = append(nodes, n.PersonId())
	nodes = append(nodes, n.Username())
	nodes = append(nodes, n.Password())
	nodes = append(nodes, n.IsEnabled())
	return nodes
}

// PrimaryKey returns a node that points to the primary key column.
func (n loginTable) PrimaryKey() *query.ColumnNode {
	return n.Id()
}

func (n loginTable) Id() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:     "id",
		Identifier:    "Id",
		ReceiverType:  query.ColTypeString,
		SchemaType:    schema.ColTypeAutoPrimaryKey,
		SchemaSubType: schema.ColSubTypeNone,
		IsPrimaryKey:  true,
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n loginTable) PersonId() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:     "person_id",
		Identifier:    "PersonId",
		ReceiverType:  query.ColTypeUnknown,
		SchemaType:    schema.ColTypeUnknown,
		SchemaSubType: schema.ColSubTypeNone,
		IsPrimaryKey:  false,
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n loginTable) Username() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:     "username",
		Identifier:    "Username",
		ReceiverType:  query.ColTypeString,
		SchemaType:    schema.ColTypeString,
		SchemaSubType: schema.ColSubTypeNone,
		IsPrimaryKey:  false,
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n loginTable) Password() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:     "password",
		Identifier:    "Password",
		ReceiverType:  query.ColTypeString,
		SchemaType:    schema.ColTypeString,
		SchemaSubType: schema.ColSubTypeNone,
		IsPrimaryKey:  false,
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n loginTable) IsEnabled() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:     "is_enabled",
		Identifier:    "IsEnabled",
		ReceiverType:  query.ColTypeBool,
		SchemaType:    schema.ColTypeBool,
		SchemaSubType: schema.ColSubTypeNone,
		IsPrimaryKey:  false,
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n loginTable) GobEncode() (data []byte, err error) {
	return
}

func (n *loginTable) GobDecode(data []byte) (err error) {
	return
}

func init() {
	gob.Register(new(loginTable))
}
