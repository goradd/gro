// Code generated by goradd-orm. DO NOT EDIT.

package node

import (
	"encoding/gob"

	"github.com/goradd/orm/pkg/query"
)

// LoginNodeI is the builder interface to the Login nodes.
type LoginNodeI interface {
	query.NodeI
	PrimaryKeyNode() *query.ColumnNode
	// ID represents the id column in the database.
	ID() *query.ColumnNode
	// PersonID represents the person_id column in the database.
	PersonID() *query.ColumnNode
	// Person represents the Person reference to a Person object.
	Person() PersonNodeI
	// Username represents the username column in the database.
	Username() *query.ColumnNode
	// Password represents the password column in the database.
	Password() *query.ColumnNode
	// IsEnabled represents the is_enabled column in the database.
	IsEnabled() *query.ColumnNode
}

// LoginExpander is the builder interface for Logins that are expandable.
type LoginExpander interface {
	LoginNodeI
	// Expand causes the node to produce separate rows with individual items, rather than a single row with an array of items.
	Expand() LoginNodeI
}

// loginTable represents the login table in a query. It uses a builder pattern to chain
// together other tables and columns to form a node chain in a query.
//
// To use the loginTable, call [Login()] to start a reference chain when querying the login table.
type loginTable struct {
}

type loginReverse struct {
	loginTable
	reverseColumn *query.ColumnNode
}

// Login returns a table node that starts a node chain that begins with the login table.
func Login() LoginNodeI {
	// Table nodes are empty structs, and do not have pointer receivers,
	var n loginTable
	return n
}

// SelectNodes_ is used internally by the framework to return the list of all the column nodes.
func (n loginTable) SelectNodes_() (nodes []*query.ColumnNode) {
	nodes = append(nodes, n.ID())
	nodes = append(nodes, n.PersonID())
	nodes = append(nodes, n.Username())
	nodes = append(nodes, n.Password())
	nodes = append(nodes, n.IsEnabled())
	return nodes
}

// Copy_ is used internally by the framework to deep copy the node.
func (n loginTable) Copy_() query.NodeI {
	// Table nodes are empty so just offer a copy
	var t loginTable
	return t
}

// PrimaryKeyNode returns a node that points to the primary key column, if
// a single primary key exists in the table.
func (n loginTable) PrimaryKeyNode() *query.ColumnNode {
	return n.ID()
}

// ID represents the id column in the database.
func (n loginTable) ID() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd",
		"login",
		"id",
		"ID",
		query.ColTypeString,
		true,
	)
	query.SetParentNode(cn, n)
	return cn
}

// PersonID represents the person_id column in the database.
func (n loginTable) PersonID() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd",
		"login",
		"person_id",
		"PersonID",
		query.ColTypeString,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

// Person represents the link to a Person object.
func (n loginTable) Person() PersonNodeI {
	cn := &PersonNode{
		query.NewReferenceNode(
			"goradd",
			"login",
			"person_id",
			"PersonID",
			"Person",
			"person",
			"id",
			false,
			query.ColTypeString,
		),
	}
	query.SetParentNode(cn, n)
	return cn
}

// Username represents the username column in the database.
func (n loginTable) Username() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd",
		"login",
		"username",
		"Username",
		query.ColTypeString,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

// Password represents the password column in the database.
func (n loginTable) Password() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd",
		"login",
		"password",
		"Password",
		query.ColTypeString,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

// IsEnabled represents the is_enabled column in the database.
func (n loginTable) IsEnabled() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd",
		"login",
		"is_enabled",
		"IsEnabled",
		query.ColTypeBool,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

func init() {
	gob.Register(new(loginTable))
	gob.Register(new(loginReverse))
}
