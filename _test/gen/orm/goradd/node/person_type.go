// Code generated by goradd-orm. DO NOT EDIT.

package node

import (
	"encoding/gob"

	"github.com/goradd/orm/pkg/query"
)

// PersonTypeI is the builder interface to the PersonType nodes.
type PersonTypeNodeI interface {
	query.NodeI
	PrimaryKeyNode() *query.ColumnNode
	ID() *query.ColumnNode
	Name() *query.ColumnNode
}

type PersonTypeNode struct {
	query.ReferenceNodeI
}

// PrimaryKeyNode returns a node representing the primary key column.
func (n *PersonTypeNode) PrimaryKeyNode() *query.ColumnNode {
	return n.ID()
}

func init() {
	gob.Register(new(PersonTypeNode))
}

// SelectNodes_ is used internally by the framework to return the list of column nodes.
// doc: hide
func (n *PersonTypeNode) SelectNodes_() []*query.ColumnNode {
	return []*query.ColumnNode{
		n.ID(),
		n.Name(),
	}
}

// EmbeddedNode_ is used internally by the framework to return the embedded ReferenceNodeI.
// doc: hide
func (n *PersonTypeNode) EmbeddedNode_() query.NodeI {
	return n.ReferenceNodeI
}

// Copy_ is used internally by the framework to deep copy the node.
// doc: hide
func (n *PersonTypeNode) Copy_() query.NodeI {
	return &PersonTypeNode{query.CopyNode(n.ReferenceNodeI)}
}

func (n *PersonTypeNode) ID() *query.ColumnNode {

	cn := query.NewColumnNode(
		"goradd",
		"person_type_enum",
		"id",
		"ID",
		query.ColTypeInteger,
		true,
	)
	query.SetParentNode(cn, n)
	return cn
}

func (n *PersonTypeNode) Name() *query.ColumnNode {

	cn := query.NewColumnNode(
		"goradd",
		"person_type_enum",
		"name",
		"Name",
		query.ColTypeString,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}
