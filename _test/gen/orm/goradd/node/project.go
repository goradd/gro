// Code generated by goradd-orm. DO NOT EDIT.

package node

import (
	"bytes"
	"encoding/gob"

	"github.com/goradd/orm/pkg/query"
	"github.com/goradd/orm/pkg/schema"
)

// ProjectNode is the builder interface to the Project nodes.
type ProjectNode interface {
	query.TableNodeI
	PrimaryKey() *query.ColumnNode
	// Id represents the id column in the database.
	Id() *query.ColumnNode
	// Num represents the num column in the database.
	Num() *query.ColumnNode
	// StatusEnum represents the status_enum column in the database.
	StatusEnum() *query.ColumnNode
	// ManagerId represents the manager_id column in the database.
	ManagerId() *query.ColumnNode
	// Name represents the name column in the database.
	Name() *query.ColumnNode
	// Description represents the description column in the database.
	Description() *query.ColumnNode
	// StartDate represents the start_date column in the database.
	StartDate() *query.ColumnNode
	// EndDate represents the end_date column in the database.
	EndDate() *query.ColumnNode
	// Budget represents the budget column in the database.
	Budget() *query.ColumnNode
	// Spent represents the spent column in the database.
	Spent() *query.ColumnNode
	// ParentProjectId represents the parent_project_id column in the database.
	ParentProjectId() *query.ColumnNode
	// Children represents a reference to Project objects.
	Children() ProjectNode
	// Parents represents a reference to Project objects.
	Parents() ProjectNode
	// TeamMembers represents a reference to Person objects.
	TeamMembers() PersonNode
}

// projectTable represents the project table in a query. It uses a builder pattern to chain
// together other tables and columns to form a node chain in a query.
//
// To use the projectTable, call [Project()] to start a reference chain when querying the project table.
type projectTable struct {
}

type projectAssociation struct {
	projectTable
	query.ManyManyNode
}

// Project returns a table node that starts a node chain that begins with the project table.
func Project() ProjectNode {
	return projectTable{}
}

// TableName_ returns the query name of the table the node is associated with.
func (n projectTable) TableName_() string {
	return "project"
}

// NodeType_ returns the query.NodeType of the node.
func (n projectTable) NodeType_() query.NodeType {
	return query.TableNodeType
}

// DatabaseKey_ returns the database key of the database the node is associated with.
func (n projectTable) DatabaseKey_() string {
	return "goradd"
}

// ColumnNodes_ returns a list of all the column nodes in this node.
func (n projectTable) ColumnNodes_() (nodes []query.Node) {
	nodes = append(nodes, n.Id())
	nodes = append(nodes, n.Num())
	nodes = append(nodes, n.StatusEnum())
	nodes = append(nodes, n.ManagerId())
	nodes = append(nodes, n.Name())
	nodes = append(nodes, n.Description())
	nodes = append(nodes, n.StartDate())
	nodes = append(nodes, n.EndDate())
	nodes = append(nodes, n.Budget())
	nodes = append(nodes, n.Spent())
	nodes = append(nodes, n.ParentProjectId())
	return nodes
}

func (n *projectAssociation) ColumnNodes_() (nodes []query.Node) {
	nodes = n.projectTable.ColumnNodes_()
	for _, cn := range nodes {
		query.NodeSetParent(cn, n)
	}
	return
}

func (n *projectAssociation) NodeType_() query.NodeType {
	return query.ManyManyNodeType
}

// PrimaryKey returns a node that points to the primary key column.
func (n projectTable) PrimaryKey() *query.ColumnNode {
	return n.Id()
}

// PrimaryKey returns a node that points to the primary key column.
func (n *projectAssociation) PrimaryKey() *query.ColumnNode {
	return n.Id()
}

func (n projectTable) Id() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:     "id",
		Identifier:    "Id",
		ReceiverType:  query.ColTypeString,
		SchemaType:    schema.ColTypeAutoPrimaryKey,
		SchemaSubType: schema.ColSubTypeNone,
		IsPrimaryKey:  true,
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n *projectAssociation) Id() *query.ColumnNode {
	cn := n.projectTable.Id()
	query.NodeSetParent(cn, n)
	return cn
}

func (n projectTable) Num() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:     "num",
		Identifier:    "Num",
		ReceiverType:  query.ColTypeInteger,
		SchemaType:    schema.ColTypeInt,
		SchemaSubType: schema.ColSubTypeNone,
		IsPrimaryKey:  false,
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n *projectAssociation) Num() *query.ColumnNode {
	cn := n.projectTable.Num()
	query.NodeSetParent(cn, n)
	return cn
}

func (n projectTable) StatusEnum() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:     "status_enum",
		Identifier:    "StatusEnum",
		ReceiverType:  query.ColTypeInteger,
		SchemaType:    schema.ColTypeEnum,
		SchemaSubType: schema.ColSubTypeNone,
		IsPrimaryKey:  false,
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n *projectAssociation) StatusEnum() *query.ColumnNode {
	cn := n.projectTable.StatusEnum()
	query.NodeSetParent(cn, n)
	return cn
}

func (n projectTable) ManagerId() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:     "manager_id",
		Identifier:    "ManagerId",
		ReceiverType:  query.ColTypeUnknown,
		SchemaType:    schema.ColTypeUnknown,
		SchemaSubType: schema.ColSubTypeNone,
		IsPrimaryKey:  false,
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n *projectAssociation) ManagerId() *query.ColumnNode {
	cn := n.projectTable.ManagerId()
	query.NodeSetParent(cn, n)
	return cn
}

func (n projectTable) Name() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:     "name",
		Identifier:    "Name",
		ReceiverType:  query.ColTypeString,
		SchemaType:    schema.ColTypeString,
		SchemaSubType: schema.ColSubTypeNone,
		IsPrimaryKey:  false,
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n *projectAssociation) Name() *query.ColumnNode {
	cn := n.projectTable.Name()
	query.NodeSetParent(cn, n)
	return cn
}

func (n projectTable) Description() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:     "description",
		Identifier:    "Description",
		ReceiverType:  query.ColTypeString,
		SchemaType:    schema.ColTypeString,
		SchemaSubType: schema.ColSubTypeNone,
		IsPrimaryKey:  false,
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n *projectAssociation) Description() *query.ColumnNode {
	cn := n.projectTable.Description()
	query.NodeSetParent(cn, n)
	return cn
}

func (n projectTable) StartDate() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:     "start_date",
		Identifier:    "StartDate",
		ReceiverType:  query.ColTypeTime,
		SchemaType:    schema.ColTypeTime,
		SchemaSubType: schema.ColSubTypeDateOnly,
		IsPrimaryKey:  false,
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n *projectAssociation) StartDate() *query.ColumnNode {
	cn := n.projectTable.StartDate()
	query.NodeSetParent(cn, n)
	return cn
}

func (n projectTable) EndDate() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:     "end_date",
		Identifier:    "EndDate",
		ReceiverType:  query.ColTypeTime,
		SchemaType:    schema.ColTypeTime,
		SchemaSubType: schema.ColSubTypeDateOnly,
		IsPrimaryKey:  false,
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n *projectAssociation) EndDate() *query.ColumnNode {
	cn := n.projectTable.EndDate()
	query.NodeSetParent(cn, n)
	return cn
}

func (n projectTable) Budget() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:     "budget",
		Identifier:    "Budget",
		ReceiverType:  query.ColTypeString,
		SchemaType:    schema.ColTypeString,
		SchemaSubType: schema.ColSubTypeNumeric,
		IsPrimaryKey:  false,
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n *projectAssociation) Budget() *query.ColumnNode {
	cn := n.projectTable.Budget()
	query.NodeSetParent(cn, n)
	return cn
}

func (n projectTable) Spent() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:     "spent",
		Identifier:    "Spent",
		ReceiverType:  query.ColTypeString,
		SchemaType:    schema.ColTypeString,
		SchemaSubType: schema.ColSubTypeNumeric,
		IsPrimaryKey:  false,
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n *projectAssociation) Spent() *query.ColumnNode {
	cn := n.projectTable.Spent()
	query.NodeSetParent(cn, n)
	return cn
}

func (n projectTable) ParentProjectId() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:     "parent_project_id",
		Identifier:    "ParentProjectId",
		ReceiverType:  query.ColTypeUnknown,
		SchemaType:    schema.ColTypeUnknown,
		SchemaSubType: schema.ColSubTypeNone,
		IsPrimaryKey:  false,
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n *projectAssociation) ParentProjectId() *query.ColumnNode {
	cn := n.projectTable.ParentProjectId()
	query.NodeSetParent(cn, n)
	return cn
}

// Children represents the many-to-many relationship formed by the related_project_assn table.
func (n projectTable) Children() ProjectNode {
	cn := &projectAssociation{
		ManyManyNode: query.ManyManyNode{
			AssnTableQueryName:       "related_project_assn",
			ParentColumnQueryName:    "project_id",
			ParentColumnReceiverType: query.ColTypeString,
			Identifier:               "Children",
			RefColumnQueryName:       "project_id",
			RefColumnReceiverType:    query.ColTypeString,
		},
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n *projectAssociation) Children() ProjectNode {
	cn := n.projectTable.Children().(*projectAssociation)
	query.NodeSetParent(cn, n)
	return cn
}

// Parents represents the many-to-many relationship formed by the related_project_assn table.
func (n projectTable) Parents() ProjectNode {
	cn := &projectAssociation{
		ManyManyNode: query.ManyManyNode{
			AssnTableQueryName:       "related_project_assn",
			ParentColumnQueryName:    "project_id",
			ParentColumnReceiverType: query.ColTypeString,
			Identifier:               "Parents",
			RefColumnQueryName:       "project_id",
			RefColumnReceiverType:    query.ColTypeString,
		},
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n *projectAssociation) Parents() ProjectNode {
	cn := n.projectTable.Parents().(*projectAssociation)
	query.NodeSetParent(cn, n)
	return cn
}

// TeamMembers represents the many-to-many relationship formed by the team_member_project_assn table.
func (n projectTable) TeamMembers() PersonNode {
	cn := &personAssociation{
		ManyManyNode: query.ManyManyNode{
			AssnTableQueryName:       "team_member_project_assn",
			ParentColumnQueryName:    "project_id",
			ParentColumnReceiverType: query.ColTypeString,
			Identifier:               "TeamMembers",
			RefColumnQueryName:       "person_id",
			RefColumnReceiverType:    query.ColTypeString,
		},
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n *projectAssociation) TeamMembers() PersonNode {
	cn := n.projectTable.TeamMembers().(*personAssociation)
	query.NodeSetParent(cn, n)
	return cn
}

func (n projectTable) GobEncode() (data []byte, err error) {
	return
}

func (n *projectTable) GobDecode(data []byte) (err error) {
	return
}

func (n *projectAssociation) GobEncode() (data []byte, err error) {
	var buf bytes.Buffer
	e := gob.NewEncoder(&buf)

	if err = e.Encode(&n.ManyManyNode); err != nil {
		panic(err)
	}
	data = buf.Bytes()
	return
}

func (n *projectAssociation) GobDecode(data []byte) (err error) {
	buf := bytes.NewBuffer(data)
	dec := gob.NewDecoder(buf)

	if err = dec.Decode(&n.ManyManyNode); err != nil {
		panic(err)
	}
	return
}

func init() {
	gob.Register(new(projectTable))
	gob.Register(new(projectAssociation))
}
