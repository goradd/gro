// Code generated by goradd-orm. DO NOT EDIT.

package node

import (
	"encoding/gob"

	"github.com/goradd/orm/pkg/query"
)

// ProjectNodeI is the builder interface to the Project nodes.
type ProjectNodeI interface {
	query.NodeI
	PrimaryKeyNode() *query.ColumnNode
	// ID represents the id column in the database.
	ID() *query.ColumnNode
	// Num represents the num column in the database.
	Num() *query.ColumnNode
	// Status represents the status_id column in the database.
	Status() *query.ColumnNode
	// ManagerID represents the manager_id column in the database.
	ManagerID() *query.ColumnNode
	// Manager represents the Manager reference to a Person object.
	Manager() PersonNodeI
	// Name represents the name column in the database.
	Name() *query.ColumnNode
	// Description represents the description column in the database.
	Description() *query.ColumnNode
	// StartDate represents the start_date column in the database.
	StartDate() *query.ColumnNode
	// EndDate represents the end_date column in the database.
	EndDate() *query.ColumnNode
	// Budget represents the budget column in the database.
	Budget() *query.ColumnNode
	// Spent represents the spent column in the database.
	Spent() *query.ColumnNode
	// Children represents the Children reference to Project objects.
	Children() ProjectExpander
	// Parents represents the Parents reference to Project objects.
	Parents() ProjectExpander
	// TeamMembers represents the TeamMembers reference to Person objects.
	TeamMembers() PersonExpander
	// Milestones represents the Milestone reference to Milestone objects.
	Milestones() MilestoneExpander
}

// ProjectExpander is the builder interface for Projects that are expandable.
type ProjectExpander interface {
	ProjectNodeI
	// Expand causes the node to produce separate rows with individual items, rather than a single row with an array of items.
	Expand() ProjectNodeI
}

// projectTable represents the project table in a query. It uses a builder pattern to chain
// together other tables and columns to form a node chain in a query.
//
// To use the projectTable, call [Project()] to start a reference chain when querying the project table.
type projectTable struct {
}

type projectReference struct {
	projectTable
	referenceColumn *query.ColumnNode
}

type projectReverse struct {
	projectTable
	reverseColumn *query.ColumnNode
}

type projectAssociation struct {
	projectTable
	query.ManyManyNode
}

// Project returns a table node that starts a node chain that begins with the project table.
func Project() ProjectNodeI {
	// Table nodes are empty structs, and do not have pointer receivers,
	var n projectTable
	return n
}

// SelectNodes_ is used internally by the framework to return the list of all the column nodes.
func (n projectTable) SelectNodes_() (nodes []*query.ColumnNode) {
	nodes = append(nodes, n.ID())
	nodes = append(nodes, n.Num())
	nodes = append(nodes, n.Status())
	nodes = append(nodes, n.ManagerID())
	nodes = append(nodes, n.Name())
	nodes = append(nodes, n.Description())
	nodes = append(nodes, n.StartDate())
	nodes = append(nodes, n.EndDate())
	nodes = append(nodes, n.Budget())
	nodes = append(nodes, n.Spent())
	return nodes
}

// Copy_ is used internally by the framework to deep copy the node.
func (n projectTable) Copy_() query.NodeI {
	// Table nodes are empty so just offer a copy
	var t projectTable
	return t
}

// PrimaryKeyNode returns a node that points to the primary key column, if
// a single primary key exists in the table.
func (n projectTable) PrimaryKeyNode() *query.ColumnNode {
	return n.ID()
}

// ID represents the id column in the database.
func (n projectTable) ID() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd",
		"project",
		"id",
		"ID",
		query.ColTypeString,
		true,
	)
	query.SetParentNode(cn, n)
	return cn
}

// Num represents the num column in the database.
func (n projectTable) Num() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd",
		"project",
		"num",
		"Num",
		query.ColTypeInteger,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

// Status represents the status_id column in the database.
func (n projectTable) Status() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd",
		"project",
		"status_id",
		"Status",
		query.ColTypeInteger,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

// ManagerID represents the manager_id column in the database.
func (n projectTable) ManagerID() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd",
		"project",
		"manager_id",
		"ManagerID",
		query.ColTypeString,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

// Manager represents the link to a Person object.
func (n projectTable) Manager() PersonNodeI {
	cn := &PersonNode{
		query.NewReferenceNode(
			"goradd",
			"project",
			"manager_id",
			"ManagerID",
			"Manager",
			"person",
			"id",
			false,
			query.ColTypeString,
		),
	}
	query.SetParentNode(cn, n)
	return cn
}

// Name represents the name column in the database.
func (n projectTable) Name() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd",
		"project",
		"name",
		"Name",
		query.ColTypeString,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

// Description represents the description column in the database.
func (n projectTable) Description() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd",
		"project",
		"description",
		"Description",
		query.ColTypeString,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

// StartDate represents the start_date column in the database.
func (n projectTable) StartDate() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd",
		"project",
		"start_date",
		"StartDate",
		query.ColTypeTime,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

// EndDate represents the end_date column in the database.
func (n projectTable) EndDate() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd",
		"project",
		"end_date",
		"EndDate",
		query.ColTypeTime,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

// Budget represents the budget column in the database.
func (n projectTable) Budget() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd",
		"project",
		"budget",
		"Budget",
		query.ColTypeString,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

// Spent represents the spent column in the database.
func (n projectTable) Spent() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd",
		"project",
		"spent",
		"Spent",
		query.ColTypeString,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

// Children represents the many-to-many relationship formed by the related_project_assn table.
func (n projectTable) Children() ProjectNodeI {
	cn := &ProjectNode{
		query.NewManyManyNode(
			"goradd",
			"related_project_assn",
			"parent_id",
			"Children",
			"project",
			"child_id",
			"id",
			false,
		),
	}
	query.SetParentNode(cn, n)
	return cn
}

// Parents represents the many-to-many relationship formed by the related_project_assn table.
func (n projectTable) Parents() ProjectNodeI {
	cn := &ProjectNode{
		query.NewManyManyNode(
			"goradd",
			"related_project_assn",
			"child_id",
			"Parents",
			"project",
			"parent_id",
			"id",
			false,
		),
	}
	query.SetParentNode(cn, n)
	return cn
}

// TeamMembers represents the many-to-many relationship formed by the team_member_project_assn table.
func (n projectTable) TeamMembers() PersonNodeI {
	cn := &PersonNode{
		query.NewManyManyNode(
			"goradd",
			"team_member_project_assn",
			"project_id",
			"TeamMembers",
			"person",
			"team_member_id",
			"id",
			false,
		),
	}
	query.SetParentNode(cn, n)
	return cn
}

// Milestones represents the many-to-one relationship formed by the reverse reference from the
// project_id column in the milestone table.
func (n projectTable) Milestones() MilestoneNodeI {
	cn := &MilestoneNode{
		query.NewReverseReferenceNode(
			"goradd",
			"project",
			"id",
			"Milestones",
			"milestone",
			"project_id",
			true,
		),
	}
	query.SetParentNode(cn, n)
	return cn
}

func init() {
	gob.Register(new(projectTable))
	gob.Register(new(projectReference))
	gob.Register(new(projectReverse))
	gob.Register(new(projectAssociation))
}
