// Code generated by goradd-orm. DO NOT EDIT.

package node

import (
	"encoding/gob"

	"github.com/goradd/orm/pkg/query"
)

// AddressNodeI is the builder interface to the Address nodes.
type AddressNodeI interface {
	query.NodeI
	PrimaryKeyNode() *query.ColumnNode
	// ID represents the id column in the database.
	ID() *query.ColumnNode
	// PersonID represents the person_id column in the database.
	PersonID() *query.ColumnNode
	// Person represents the Person reference to a Person object.
	Person() PersonNodeI
	// Street represents the street column in the database.
	Street() *query.ColumnNode
	// City represents the city column in the database.
	City() *query.ColumnNode
}

// AddressExpander is the builder interface for Addresses that are expandable.
type AddressExpander interface {
	AddressNodeI
	// Expand causes the node to produce separate rows with individual items, rather than a single row with an array of items.
	Expand() AddressNodeI
}

// addressTable represents the address table in a query. It uses a builder pattern to chain
// together other tables and columns to form a node chain in a query.
//
// To use the addressTable, call [Address()] to start a reference chain when querying the address table.
type addressTable struct {
}

type addressReverse struct {
	addressTable
	reverseColumn *query.ColumnNode
}

// Address returns a table node that starts a node chain that begins with the address table.
func Address() AddressNodeI {
	// Table nodes are empty structs, and do not have pointer receivers,
	var n addressTable
	return n
}

// SelectNodes_ is used internally by the framework to return the list of all the column nodes.
func (n addressTable) SelectNodes_() (nodes []*query.ColumnNode) {
	nodes = append(nodes, n.ID())
	nodes = append(nodes, n.PersonID())
	nodes = append(nodes, n.Street())
	nodes = append(nodes, n.City())
	return nodes
}

// Copy_ is used internally by the framework to deep copy the node.
func (n addressTable) Copy_() query.NodeI {
	// Table nodes are empty so just offer a copy
	var t addressTable
	return t
}

// PrimaryKeyNode returns a node that points to the primary key column, if
// a single primary key exists in the table.
func (n addressTable) PrimaryKeyNode() *query.ColumnNode {
	return n.ID()
}

// ID represents the id column in the database.
func (n addressTable) ID() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd",
		"address",
		"id",
		"ID",
		query.ColTypeString,
		true,
	)
	query.SetParentNode(cn, n)
	return cn
}

// PersonID represents the person_id column in the database.
func (n addressTable) PersonID() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd",
		"address",
		"person_id",
		"PersonID",
		query.ColTypeString,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

// Person represents the link to a Person object.
func (n addressTable) Person() PersonNodeI {
	cn := &PersonNode{
		query.NewReferenceNode(
			"goradd",
			"address",
			"person_id",
			"PersonID",
			"Person",
			"person",
			"id",
			false,
			query.ColTypeString,
		),
	}
	query.SetParentNode(cn, n)
	return cn
}

// Street represents the street column in the database.
func (n addressTable) Street() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd",
		"address",
		"street",
		"Street",
		query.ColTypeString,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

// City represents the city column in the database.
func (n addressTable) City() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd",
		"address",
		"city",
		"City",
		query.ColTypeString,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

func init() {
	gob.Register(new(addressTable))
	gob.Register(new(addressReverse))
}
