// Code generated by goradd-orm. DO NOT EDIT.

package node

import (
	"bytes"
	"encoding/gob"

	"github.com/goradd/orm/pkg/query"
)

// AddressNodeI is the builder interface to the Address nodes.
type AddressNodeI interface {
	query.NodeI
	PrimaryKeyNode() *query.ColumnNode
	// ID represents the id column in the database.
	ID() *query.ColumnNode
	// PersonID represents the person_id column in the database.
	PersonID() *query.ColumnNode
	// Person represents the Person reference to a Person object.
	Person() PersonNodeI
	// Street represents the street column in the database.
	Street() *query.ColumnNode
	// City represents the city column in the database.
	City() *query.ColumnNode
}

// AddressExpander is the builder interface for Addresses that are expandable.
type AddressExpander interface {
	AddressNodeI
	// Expand causes the node to produce separate rows with individual items, rather than a single row with an array of items.
	Expand()
}

// addressTable represents the address table in a query. It uses a builder pattern to chain
// together other tables and columns to form a node chain in a query.
//
// To use the addressTable, call [Address()] to start a reference chain when querying the address table.
type addressTable struct {
	_self query.NodeI
}

type addressReverse struct {
	addressTable
	query.ReverseNode
}

// Address returns a table node that starts a node chain that begins with the address table.
func Address() AddressNodeI {
	var n addressTable
	n._self = n
	return n
}

// TableName_ returns the query name of the table the node is associated with.
func (n addressTable) TableName_() string {
	return "address"
}

// NodeType_ returns the query.NodeType of the node.
func (n addressTable) NodeType_() query.NodeType {
	return query.TableNodeType
}

// DatabaseKey_ returns the database key of the database the node is associated with.
func (n addressTable) DatabaseKey_() string {
	return "goradd"
}

// SelectNodes_ is used internally by the framework to return the list of all the column nodes.
func (n addressTable) SelectNodes_() (nodes []*query.ColumnNode) {
	nodes = append(nodes, n.ID())
	nodes = append(nodes, n.PersonID())
	nodes = append(nodes, n.Street())
	nodes = append(nodes, n.City())
	return nodes
}

// IsEnum_ is used internally by the framework to determine if the current table is an enumerated type.
func (n addressTable) IsEnum_() bool {
	return false
}

func (n *addressReverse) NodeType_() query.NodeType {
	return query.ReverseNodeType
}

// PrimaryKeyNode returns a node that points to the primary key column, if
// a single primary key exists in the table.
func (n addressTable) PrimaryKeyNode() *query.ColumnNode {
	return n.ID()
}

// ID represents the id column in the database.
func (n addressTable) ID() *query.ColumnNode {
	cn := query.ColumnNode{
		QueryName:    "id",
		Identifier:   "ID",
		ReceiverType: query.ColTypeString,
		IsPrimaryKey: true,
	}
	cn.SetParent(n._self)
	return &cn
}

// PersonID represents the person_id column in the database.
func (n addressTable) PersonID() *query.ColumnNode {
	cn := query.ColumnNode{
		QueryName:    "person_id",
		Identifier:   "PersonID",
		ReceiverType: query.ColTypeString,
		IsPrimaryKey: false,
	}
	cn.SetParent(n._self)
	return &cn
}

// Person represents the link to a Person object.
func (n addressTable) Person() PersonNodeI {
	cn := &personReference{
		ReferenceNode: query.ReferenceNode{
			ColumnQueryName: "person_id",
			Identifier:      "PersonID",
			ReceiverType:    query.ColTypeString,
		},
	}
	cn._self = cn
	cn.SetParent(n._self)
	return cn
}

// Street represents the street column in the database.
func (n addressTable) Street() *query.ColumnNode {
	cn := query.ColumnNode{
		QueryName:    "street",
		Identifier:   "Street",
		ReceiverType: query.ColTypeString,
		IsPrimaryKey: false,
	}
	cn.SetParent(n._self)
	return &cn
}

// City represents the city column in the database.
func (n addressTable) City() *query.ColumnNode {
	cn := query.ColumnNode{
		QueryName:    "city",
		Identifier:   "City",
		ReceiverType: query.ColTypeString,
		IsPrimaryKey: false,
	}
	cn.SetParent(n._self)
	return &cn
}

func (n *addressTable) GobEncode() (data []byte, err error) {
	return
}

func (n *addressTable) GobDecode(data []byte) (err error) {
	n._self = n
	return
}

func (n *addressReverse) GobEncode() (data []byte, err error) {
	var buf bytes.Buffer
	e := gob.NewEncoder(&buf)

	if err = e.Encode(n.ReverseNode); err != nil {
		panic(err)
	}
	data = buf.Bytes()
	return
}

func (n *addressReverse) GobDecode(data []byte) (err error) {
	buf := bytes.NewBuffer(data)
	dec := gob.NewDecoder(buf)

	if err = dec.Decode(&n.ReverseNode); err != nil {
		panic(err)
	}
	n._self = n
	return
}

func init() {
	gob.Register(new(addressTable))
	gob.Register(new(addressReverse))
}
