// Code generated by goradd-orm. DO NOT EDIT.

package node

import (
	"encoding/gob"

	"github.com/goradd/orm/pkg/query"
	"github.com/goradd/orm/pkg/schema"
)

// AddressNode is the builder interface to the Address nodes.
type AddressNode interface {
	query.TableNodeI
	PrimaryKey() *query.ColumnNode
	// Id represents the id column in the database.
	Id() *query.ColumnNode
	// PersonId represents the person_id column in the database.
	PersonId() *query.ColumnNode
	// Street represents the street column in the database.
	Street() *query.ColumnNode
	// City represents the city column in the database.
	City() *query.ColumnNode
}

// addressTable represents the address table in a query. It uses a builder pattern to chain
// together other tables and columns to form a node chain in a query.
//
// To use the addressTable, call [Address()] to start a reference chain when querying the address table.
type addressTable struct {
}

// Address returns a table node that starts a node chain that begins with the address table.
func Address() AddressNode {
	return addressTable{}
}

// TableName_ returns the query name of the table the node is associated with.
func (n addressTable) TableName_() string {
	return "address"
}

// NodeType_ returns the query.NodeType of the node.
func (n addressTable) NodeType_() query.NodeType {
	return query.TableNodeType
}

// DatabaseKey_ returns the database key of the database the node is associated with.
func (n addressTable) DatabaseKey_() string {
	return "goradd"
}

// ColumnNodes_ returns a list of all the column nodes in this node.
func (n addressTable) ColumnNodes_() (nodes []query.Node) {
	nodes = append(nodes, n.Id())
	nodes = append(nodes, n.PersonId())
	nodes = append(nodes, n.Street())
	nodes = append(nodes, n.City())
	return nodes
}

// PrimaryKey returns a node that points to the primary key column.
func (n addressTable) PrimaryKey() *query.ColumnNode {
	return n.Id()
}

func (n addressTable) Id() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:     "id",
		Identifier:    "Id",
		ReceiverType:  query.ColTypeString,
		SchemaType:    schema.ColTypeAutoPrimaryKey,
		SchemaSubType: schema.ColSubTypeNone,
		IsPrimaryKey:  true,
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n addressTable) PersonId() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:     "person_id",
		Identifier:    "PersonId",
		ReceiverType:  query.ColTypeUnknown,
		SchemaType:    schema.ColTypeUnknown,
		SchemaSubType: schema.ColSubTypeNone,
		IsPrimaryKey:  false,
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n addressTable) Street() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:     "street",
		Identifier:    "Street",
		ReceiverType:  query.ColTypeString,
		SchemaType:    schema.ColTypeString,
		SchemaSubType: schema.ColSubTypeNone,
		IsPrimaryKey:  false,
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n addressTable) City() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:     "city",
		Identifier:    "City",
		ReceiverType:  query.ColTypeString,
		SchemaType:    schema.ColTypeString,
		SchemaSubType: schema.ColSubTypeNone,
		IsPrimaryKey:  false,
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n addressTable) GobEncode() (data []byte, err error) {
	return
}

func (n *addressTable) GobDecode(data []byte) (err error) {
	return
}

func init() {
	gob.Register(new(addressTable))
}
