// Code generated by goradd-orm. DO NOT EDIT.

package node

import (
	"bytes"
	"encoding/gob"

	"github.com/goradd/orm/pkg/query"
)

// AddressNode is the builder interface to the Address nodes.
type AddressNode interface {
	query.TableNodeI
	PrimaryKey() *query.ColumnNode
	// ID represents the id column in the database.
	ID() *query.ColumnNode
	// PersonID represents the person_id column in the database.
	PersonID() *query.ColumnNode
	// Person represents the Person reference to a Person object.
	Person() PersonNode
	// Street represents the street column in the database.
	Street() *query.ColumnNode
	// City represents the city column in the database.
	City() *query.ColumnNode
}

// addressTable represents the address table in a query. It uses a builder pattern to chain
// together other tables and columns to form a node chain in a query.
//
// To use the addressTable, call [Address()] to start a reference chain when querying the address table.
type addressTable struct {
}

type addressReverse struct {
	addressTable
	query.ReverseNode
}

// Address returns a table node that starts a node chain that begins with the address table.
func Address() AddressNode {
	return addressTable{}
}

// TableName_ returns the query name of the table the node is associated with.
func (n addressTable) TableName_() string {
	return "address"
}

// NodeType_ returns the query.NodeType of the node.
func (n addressTable) NodeType_() query.NodeType {
	return query.TableNodeType
}

// DatabaseKey_ returns the database key of the database the node is associated with.
func (n addressTable) DatabaseKey_() string {
	return "goradd"
}

// ColumnNodes_ returns a list of all the column nodes in this node.
func (n addressTable) ColumnNodes_() (nodes []query.Node) {
	nodes = append(nodes, n.ID())
	nodes = append(nodes, n.PersonID())
	nodes = append(nodes, n.Street())
	nodes = append(nodes, n.City())
	return nodes
}

func (n *addressReverse) ColumnNodes_() (nodes []query.Node) {
	nodes = n.addressTable.ColumnNodes_()
	for _, cn := range nodes {
		query.NodeSetParent(cn, n)
	}
	return
}

// IsEnum_ is used internally by the framework to determine if the current table is an enumerated type.
func (n addressTable) IsEnum_() bool {
	return false
}

func (n *addressReverse) NodeType_() query.NodeType {
	return query.ReverseNodeType
}

// PrimaryKey returns a node that points to the primary key column.
func (n addressTable) PrimaryKey() *query.ColumnNode {
	return n.ID()
}

// PrimaryKey returns a node that points to the primary key column.
func (n *addressReverse) PrimaryKey() *query.ColumnNode {
	return n.ID()
}

func (n addressTable) ID() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:    "id",
		Identifier:   "ID",
		ReceiverType: query.ColTypeString,
		IsPrimaryKey: true,
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n *addressReverse) ID() *query.ColumnNode {
	cn := n.addressTable.ID()
	query.NodeSetParent(cn, n)
	return cn
}

func (n addressTable) PersonID() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:    "person_id",
		Identifier:   "PersonID",
		ReceiverType: query.ColTypeString,
		IsPrimaryKey: false,
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n *addressReverse) PersonID() *query.ColumnNode {
	cn := n.addressTable.PersonID()
	query.NodeSetParent(cn, n)
	return cn
}

// Person represents the link to a Person object.
func (n addressTable) Person() PersonNode {
	cn := &personReference{
		ReferenceNode: query.ReferenceNode{
			ColumnQueryName: "person_id",
			Identifier:      "Person",
			ReceiverType:    query.ColTypeString,
		},
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n *addressReverse) Person() PersonNode {
	cn := n.addressTable.Person().(*personReference)
	query.NodeSetParent(cn, n)
	return cn
}

func (n addressTable) Street() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:    "street",
		Identifier:   "Street",
		ReceiverType: query.ColTypeString,
		IsPrimaryKey: false,
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n *addressReverse) Street() *query.ColumnNode {
	cn := n.addressTable.Street()
	query.NodeSetParent(cn, n)
	return cn
}

func (n addressTable) City() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:    "city",
		Identifier:   "City",
		ReceiverType: query.ColTypeString,
		IsPrimaryKey: false,
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n *addressReverse) City() *query.ColumnNode {
	cn := n.addressTable.City()
	query.NodeSetParent(cn, n)
	return cn
}

func (n addressTable) GobEncode() (data []byte, err error) {
	return
}

func (n *addressTable) GobDecode(data []byte) (err error) {
	return
}

func (n *addressReverse) GobEncode() (data []byte, err error) {
	var buf bytes.Buffer
	e := gob.NewEncoder(&buf)

	if err = e.Encode(&n.ReverseNode); err != nil {
		panic(err)
	}
	data = buf.Bytes()
	return
}

func (n *addressReverse) GobDecode(data []byte) (err error) {
	buf := bytes.NewBuffer(data)
	dec := gob.NewDecoder(buf)

	if err = dec.Decode(&n.ReverseNode); err != nil {
		panic(err)
	}
	return
}

func init() {
	gob.Register(new(addressTable))
	gob.Register(new(addressReverse))
}
