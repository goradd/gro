// Code generated by goradd-orm. DO NOT EDIT.

package node

import (
	"bytes"
	"encoding/gob"

	"github.com/goradd/orm/pkg/query"
)

// EmployeeInfoNodeI is the builder interface to the EmployeeInfo nodes.
type EmployeeInfoNodeI interface {
	query.NodeI
	PrimaryKeyNode() *query.ColumnNode
	// ID represents the id column in the database.
	ID() *query.ColumnNode
	// PersonID represents the person_id column in the database.
	PersonID() *query.ColumnNode
	// Person represents the Person reference to a Person object.
	Person() PersonNodeI
	// EmployeeNumber represents the employee_number column in the database.
	EmployeeNumber() *query.ColumnNode
}

// EmployeeInfoExpander is the builder interface for EmployeeInfos that are expandable.
type EmployeeInfoExpander interface {
	EmployeeInfoNodeI
	// Expand causes the node to produce separate rows with individual items, rather than a single row with an array of items.
	Expand()
}

// employeeInfoTable represents the employee_info table in a query. It uses a builder pattern to chain
// together other tables and columns to form a node chain in a query.
//
// To use the employeeInfoTable, call [EmployeeInfo()] to start a reference chain when querying the employee_info table.
type employeeInfoTable struct {
}

type employeeInfoReverse struct {
	employeeInfoTable
	query.ReverseNode
}

// EmployeeInfo returns a table node that starts a node chain that begins with the employee_info table.
func EmployeeInfo() EmployeeInfoNodeI {
	return employeeInfoTable{}
}

// TableName_ returns the query name of the table the node is associated with.
func (n employeeInfoTable) TableName_() string {
	return "employee_info"
}

// NodeType_ returns the query.NodeType of the node.
func (n employeeInfoTable) NodeType_() query.NodeType {
	return query.TableNodeType
}

// DatabaseKey_ returns the database key of the database the node is associated with.
func (n employeeInfoTable) DatabaseKey_() string {
	return "goradd"
}

// ColumnNodes_ is used internally by the framework to return the list of all the column nodes.
// This may include reference nodes to enum types.
func (n employeeInfoTable) ColumnNodes_() (nodes []query.NodeI) {
	nodes = append(nodes, n.ID())
	nodes = append(nodes, n.PersonID())
	nodes = append(nodes, n.EmployeeNumber())
	return nodes
}

// Columns_ is used internally by the framework to return the list of all the columns in the table.
func (n employeeInfoTable) Columns_() []string {
	return []string{
		"id",
		"person_id",
		"employee_number",
	}
}

// IsEnum_ is used internally by the framework to determine if the current table is an enumerated type.
func (n employeeInfoTable) IsEnum_() bool {
	return false
}

func (n *employeeInfoReverse) NodeType_() query.NodeType {
	return query.ReverseNodeType
}

// PrimaryKeyNode returns a node that points to the primary key column.
func (n employeeInfoTable) PrimaryKeyNode() *query.ColumnNode {
	return n.ID()
}

func (n *employeeInfoReverse) PrimaryKeyNode() *query.ColumnNode {
	return n.ID()
}

func (n employeeInfoTable) ID() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:    "id",
		Identifier:   "ID",
		ReceiverType: query.ColTypeString,
		IsPrimaryKey: true,
	}
	cn.SetParent(n)
	return cn
}

func (n *employeeInfoReverse) ID() *query.ColumnNode {
	cn := n.employeeInfoTable.ID()
	cn.SetParent(n)
	return cn
}

func (n employeeInfoTable) PersonID() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:    "person_id",
		Identifier:   "PersonID",
		ReceiverType: query.ColTypeString,
		IsPrimaryKey: false,
	}
	cn.SetParent(n)
	return cn
}

func (n *employeeInfoReverse) PersonID() *query.ColumnNode {
	cn := n.employeeInfoTable.PersonID()
	cn.SetParent(n)
	return cn
}

// Person represents the link to a Person object.
func (n employeeInfoTable) Person() PersonNodeI {
	cn := &personReference{
		ReferenceNode: query.ReferenceNode{
			ColumnQueryName: "person_id",
			Identifier:      "PersonID",
			ReceiverType:    query.ColTypeString,
		},
	}
	cn.SetParent(n)
	return cn
}

func (n *employeeInfoReverse) Person() PersonNodeI {
	cn := n.employeeInfoTable.Person().(*personReference)
	cn.SetParent(n)
	return cn
}

func (n employeeInfoTable) EmployeeNumber() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:    "employee_number",
		Identifier:   "EmployeeNumber",
		ReceiverType: query.ColTypeInteger,
		IsPrimaryKey: false,
	}
	cn.SetParent(n)
	return cn
}

func (n *employeeInfoReverse) EmployeeNumber() *query.ColumnNode {
	cn := n.employeeInfoTable.EmployeeNumber()
	cn.SetParent(n)
	return cn
}

func (n employeeInfoTable) GobEncode() (data []byte, err error) {
	return
}

func (n *employeeInfoTable) GobDecode(data []byte) (err error) {
	return
}

func (n *employeeInfoReverse) GobEncode() (data []byte, err error) {
	var buf bytes.Buffer
	e := gob.NewEncoder(&buf)

	if err = e.Encode(n.ReverseNode); err != nil {
		panic(err)
	}
	data = buf.Bytes()
	return
}

func (n *employeeInfoReverse) GobDecode(data []byte) (err error) {
	buf := bytes.NewBuffer(data)
	dec := gob.NewDecoder(buf)

	if err = dec.Decode(&n.ReverseNode); err != nil {
		panic(err)
	}
	return
}

func init() {
	gob.Register(new(employeeInfoTable))
	gob.Register(new(employeeInfoReverse))
}
