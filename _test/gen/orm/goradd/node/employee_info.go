// Code generated by goradd-orm. DO NOT EDIT.

package node

import (
	"encoding/gob"

	"github.com/goradd/orm/pkg/query"
)

// EmployeeInfoNodeI is the builder interface to the EmployeeInfo nodes.
type EmployeeInfoNodeI interface {
	query.NodeI
	PrimaryKeyNode() *query.ColumnNode
	// ID represents the id column in the database.
	ID() *query.ColumnNode
	// PersonID represents the person_id column in the database.
	PersonID() *query.ColumnNode
	// Person represents the Person reference to a Person object.
	Person() PersonNodeI
	// EmployeeNumber represents the employee_number column in the database.
	EmployeeNumber() *query.ColumnNode
}

// EmployeeInfoExpander is the builder interface for EmployeeInfos that are expandable.
type EmployeeInfoExpander interface {
	EmployeeInfoNodeI
	// Expand causes the node to produce separate rows with individual items, rather than a single row with an array of items.
	Expand() EmployeeInfoNodeI
}

// employeeInfoTable represents the employee_info table in a query. It uses a builder pattern to chain
// together other tables and columns to form a node chain in a query.
//
// To use the employeeInfoTable, call [EmployeeInfo()] to start a reference chain when querying the employee_info table.
type employeeInfoTable struct {
}

type employeeInfoReverse struct {
	employeeInfoTable
	reverseColumn *query.ColumnNode
}

// EmployeeInfo returns a table node that starts a node chain that begins with the employee_info table.
func EmployeeInfo() EmployeeInfoNodeI {
	// Table nodes are empty structs, and do not have pointer receivers,
	var n employeeInfoTable
	return n
}

// SelectNodes_ is used internally by the framework to return the list of all the column nodes.
func (n employeeInfoTable) SelectNodes_() (nodes []*query.ColumnNode) {
	nodes = append(nodes, n.ID())
	nodes = append(nodes, n.PersonID())
	nodes = append(nodes, n.EmployeeNumber())
	return nodes
}

// Copy_ is used internally by the framework to deep copy the node.
func (n employeeInfoTable) Copy_() query.NodeI {
	// Table nodes are empty so just offer a copy
	var t employeeInfoTable
	return t
}

// PrimaryKeyNode returns a node that points to the primary key column, if
// a single primary key exists in the table.
func (n employeeInfoTable) PrimaryKeyNode() *query.ColumnNode {
	return n.ID()
}

// ID represents the id column in the database.
func (n employeeInfoTable) ID() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd",
		"employee_info",
		"id",
		"ID",
		query.ColTypeString,
		true,
	)
	query.SetParentNode(cn, n)
	return cn
}

// PersonID represents the person_id column in the database.
func (n employeeInfoTable) PersonID() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd",
		"employee_info",
		"person_id",
		"PersonID",
		query.ColTypeString,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

// Person represents the link to a Person object.
func (n employeeInfoTable) Person() PersonNodeI {
	cn := &PersonNode{
		query.NewReferenceNode(
			"goradd",
			"employee_info",
			"person_id",
			"PersonID",
			"Person",
			"person",
			"id",
			false,
			query.ColTypeString,
		),
	}
	query.SetParentNode(cn, n)
	return cn
}

// EmployeeNumber represents the employee_number column in the database.
func (n employeeInfoTable) EmployeeNumber() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd",
		"employee_info",
		"employee_number",
		"EmployeeNumber",
		query.ColTypeInteger,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

func init() {
	gob.Register(new(employeeInfoTable))
	gob.Register(new(employeeInfoReverse))
}
