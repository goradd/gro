// Code generated by GoRADD. DO NOT EDIT.

package node

import (
	"github.com/goradd/orm/pkg/query"
)

// GiftNode represents the gift table in a query. It uses a builder pattern to chain
// together other tables and columns to form a node in a query.
//
// To use the GiftNode, call [Gift] to start a reference chain when querying the gift table.
type GiftNode struct {
	// ReferenceNodeI is an internal object that represents the capabilities of the node. Since it is embedded, all
	// of its functions are exported and are callable along with the giftNode functions here.
	query.ReferenceNodeI
}

// Gift returns a table node that starts a node chain that begins with the gift table.
func Gift() *GiftNode {
	n := GiftNode{
		query.NewTableNode("goradd", "gift", "Gift"),
	}
	query.SetParentNode(&n, nil)
	return &n
}

// SelectNodes_ is used internally by the framework to return the list of all the column nodes.
// doc: hide
func (n *GiftNode) SelectNodes_() (nodes []*query.ColumnNode) {
	nodes = append(nodes, n.Number())
	nodes = append(nodes, n.Name())
	return nodes
}

// EmbeddedNode is used internally by the framework to return the embedded Reference node.
// doc: hide
func (n *GiftNode) EmbeddedNode_() query.NodeI {
	return n.ReferenceNodeI
}

// Copy_ is used internally by the framework to deep copy the node.
// doc: hide
func (n *GiftNode) Copy_() query.NodeI {
	return &GiftNode{query.CopyNode(n.ReferenceNodeI)}
}

// PrimaryKeyNode returns a node that points to the primary key column, if
// a single primary key exists in the table.
func (n *GiftNode) PrimaryKeyNode() *query.ColumnNode {
	return n.Number()
}

// Number represents the number column in the database.
func (n *GiftNode) Number() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd",
		"gift",
		"number",
		"Number",
		query.ColTypeInteger,
		true,
	)
	query.SetParentNode(cn, n)
	return cn
}

// Name represents the name column in the database.
func (n *GiftNode) Name() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd",
		"gift",
		"name",
		"Name",
		query.ColTypeString,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}
