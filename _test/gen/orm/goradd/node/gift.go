// Code generated by goradd-orm. DO NOT EDIT.

package node

import (
	"bytes"
	"encoding/gob"

	"github.com/goradd/orm/pkg/query"
)

// GiftNode is the builder interface to the Gift nodes.
type GiftNode interface {
	query.Node
	PrimaryKey() *query.ColumnNode
	// Number represents the number column in the database.
	Number() *query.ColumnNode
	// Name represents the name column in the database.
	Name() *query.ColumnNode
}

// giftTable represents the gift table in a query. It uses a builder pattern to chain
// together other tables and columns to form a node chain in a query.
//
// To use the giftTable, call [Gift()] to start a reference chain when querying the gift table.
type giftTable struct {
}

type giftReverse struct {
	giftTable
	query.ReverseNode
}

// Gift returns a table node that starts a node chain that begins with the gift table.
func Gift() GiftNode {
	return giftTable{}
}

// TableName_ returns the query name of the table the node is associated with.
func (n giftTable) TableName_() string {
	return "gift"
}

// NodeType_ returns the query.NodeType of the node.
func (n giftTable) NodeType_() query.NodeType {
	return query.TableNodeType
}

// DatabaseKey_ returns the database key of the database the node is associated with.
func (n giftTable) DatabaseKey_() string {
	return "goradd"
}

// ColumnNodes_ is used internally by the framework to return the list of all the column nodes.
func (n giftTable) ColumnNodes_() (nodes []query.Node) {
	nodes = append(nodes, n.Number())
	nodes = append(nodes, n.Name())
	return nodes
}

func (n *giftReverse) ColumnNodes_() (nodes []query.Node) {
	nodes = n.giftTable.ColumnNodes_()
	for _, cn := range nodes {
		query.NodeSetParent(cn, n)
	}
	return
}

// IsEnum_ is used internally by the framework to determine if the current table is an enumerated type.
func (n giftTable) IsEnum_() bool {
	return false
}

func (n *giftReverse) NodeType_() query.NodeType {
	return query.ReverseNodeType
}

// PrimaryKey returns a node that points to the primary key column.
func (n giftTable) PrimaryKey() *query.ColumnNode {
	return n.Number()
}

// PrimaryKey returns a node that points to the primary key column.
func (n *giftReverse) PrimaryKey() *query.ColumnNode {
	return n.Number()
}

func (n giftTable) Number() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:    "number",
		Identifier:   "Number",
		ReceiverType: query.ColTypeInteger,
		IsPrimaryKey: true,
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n *giftReverse) Number() *query.ColumnNode {
	cn := n.giftTable.Number()
	query.NodeSetParent(cn, n)
	return cn
}

func (n giftTable) Name() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:    "name",
		Identifier:   "Name",
		ReceiverType: query.ColTypeString,
		IsPrimaryKey: false,
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n *giftReverse) Name() *query.ColumnNode {
	cn := n.giftTable.Name()
	query.NodeSetParent(cn, n)
	return cn
}

func (n giftTable) GobEncode() (data []byte, err error) {
	return
}

func (n *giftTable) GobDecode(data []byte) (err error) {
	return
}

func (n *giftReverse) GobEncode() (data []byte, err error) {
	var buf bytes.Buffer
	e := gob.NewEncoder(&buf)

	if err = e.Encode(&n.ReverseNode); err != nil {
		panic(err)
	}
	data = buf.Bytes()
	return
}

func (n *giftReverse) GobDecode(data []byte) (err error) {
	buf := bytes.NewBuffer(data)
	dec := gob.NewDecoder(buf)

	if err = dec.Decode(&n.ReverseNode); err != nil {
		panic(err)
	}
	return
}

func init() {
	gob.Register(new(giftTable))
	gob.Register(new(giftReverse))
}
