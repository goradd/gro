// Code generated by goradd-orm. DO NOT EDIT.

package node

import (
	"encoding/gob"

	"github.com/goradd/orm/pkg/query"
)

// GiftNodeI is the builder interface to the Gift nodes.
type GiftNodeI interface {
	query.NodeI
	PrimaryKeyNode() *query.ColumnNode
	// Number represents the number column in the database.
	Number() *query.ColumnNode
	// Name represents the name column in the database.
	Name() *query.ColumnNode
}

// GiftExpander is the builder interface for Gifts that are expandable.
type GiftExpander interface {
	GiftNodeI
	// Expand causes the node to produce separate rows with individual items, rather than a single row with an array of items.
	Expand() GiftNodeI
}

// giftTable represents the gift table in a query. It uses a builder pattern to chain
// together other tables and columns to form a node chain in a query.
//
// To use the giftTable, call [Gift()] to start a reference chain when querying the gift table.
type giftTable struct {
}

type giftReverse struct {
	giftTable
	reverseColumn *query.ColumnNode
}

// Gift returns a table node that starts a node chain that begins with the gift table.
func Gift() GiftNodeI {
	// Table nodes are empty structs, and do not have pointer receivers,
	var n giftTable
	return n
}

// SelectNodes_ is used internally by the framework to return the list of all the column nodes.
func (n giftTable) SelectNodes_() (nodes []*query.ColumnNode) {
	nodes = append(nodes, n.Number())
	nodes = append(nodes, n.Name())
	return nodes
}

// Copy_ is used internally by the framework to deep copy the node.
func (n giftTable) Copy_() query.NodeI {
	// Table nodes are empty so just offer a copy
	var t giftTable
	return t
}

// PrimaryKeyNode returns a node that points to the primary key column, if
// a single primary key exists in the table.
func (n giftTable) PrimaryKeyNode() *query.ColumnNode {
	return n.Number()
}

// Number represents the number column in the database.
func (n giftTable) Number() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd",
		"gift",
		"number",
		"Number",
		query.ColTypeInteger,
		true,
	)
	query.SetParentNode(cn, n)
	return cn
}

// Name represents the name column in the database.
func (n giftTable) Name() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd",
		"gift",
		"name",
		"Name",
		query.ColTypeString,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

func init() {
	gob.Register(new(giftTable))
	gob.Register(new(giftReverse))
}
