// Code generated by goradd-orm. DO NOT EDIT.

package node

import (
	"bytes"
	"encoding/gob"

	"github.com/goradd/orm/pkg/query"
)

// GiftNodeI is the builder interface to the Gift nodes.
type GiftNodeI interface {
	query.NodeI
	PrimaryKeyNode() *query.ColumnNode
	// Number represents the number column in the database.
	Number() *query.ColumnNode
	// Name represents the name column in the database.
	Name() *query.ColumnNode
}

// GiftExpander is the builder interface for Gifts that are expandable.
type GiftExpander interface {
	GiftNodeI
	// Expand causes the node to produce separate rows with individual items, rather than a single row with an array of items.
	Expand()
}

// giftTable represents the gift table in a query. It uses a builder pattern to chain
// together other tables and columns to form a node chain in a query.
//
// To use the giftTable, call [Gift()] to start a reference chain when querying the gift table.
type giftTable struct {
}

type giftReverse struct {
	giftTable
	query.ReverseNode
}

// Gift returns a table node that starts a node chain that begins with the gift table.
func Gift() GiftNodeI {
	return giftTable{}
}

// TableName_ returns the query name of the table the node is associated with.
func (n giftTable) TableName_() string {
	return "gift"
}

// NodeType_ returns the query.NodeType of the node.
func (n giftTable) NodeType_() query.NodeType {
	return query.TableNodeType
}

// DatabaseKey_ returns the database key of the database the node is associated with.
func (n giftTable) DatabaseKey_() string {
	return "goradd"
}

// Columns_ is used internally by the framework to return the list of all the columns in the table.
func (n giftTable) Columns_() []string {
	return []string{
		"number",
		"name",
	}
}

// IsEnum_ is used internally by the framework to determine if the current table is an enumerated type.
func (n giftTable) IsEnum_() bool {
	return false
}

func (n *giftReverse) NodeType_() query.NodeType {
	return query.ReverseNodeType
}

// PrimaryKeyNode returns a node that points to the primary key column.
func (n giftTable) PrimaryKeyNode() *query.ColumnNode {
	return n.Number()
}

func (n *giftReverse) PrimaryKeyNode() *query.ColumnNode {
	return n.Number()
}

func (n giftTable) Number() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:    "number",
		Identifier:   "Number",
		ReceiverType: query.ColTypeInteger,
		IsPrimaryKey: true,
	}
	cn.SetParent(n)
	return cn
}

func (n *giftReverse) Number() *query.ColumnNode {
	cn := n.giftTable.Number()
	cn.SetParent(n)
	return cn
}

func (n giftTable) Name() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:    "name",
		Identifier:   "Name",
		ReceiverType: query.ColTypeString,
		IsPrimaryKey: false,
	}
	cn.SetParent(n)
	return cn
}

func (n *giftReverse) Name() *query.ColumnNode {
	cn := n.giftTable.Name()
	cn.SetParent(n)
	return cn
}

func (n giftTable) GobEncode() (data []byte, err error) {
	return
}

func (n *giftTable) GobDecode(data []byte) (err error) {
	return
}

func (n *giftReverse) GobEncode() (data []byte, err error) {
	var buf bytes.Buffer
	e := gob.NewEncoder(&buf)

	if err = e.Encode(n.ReverseNode); err != nil {
		panic(err)
	}
	data = buf.Bytes()
	return
}

func (n *giftReverse) GobDecode(data []byte) (err error) {
	buf := bytes.NewBuffer(data)
	dec := gob.NewDecoder(buf)

	if err = dec.Decode(&n.ReverseNode); err != nil {
		panic(err)
	}
	return
}

func init() {
	gob.Register(new(giftTable))
	gob.Register(new(giftReverse))
}
