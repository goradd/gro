// Code generated by goradd-orm. DO NOT EDIT.

package node

import (
	"encoding/gob"

	"github.com/goradd/orm/pkg/query"
)

// MilestoneNodeI is the builder interface to the Milestone nodes.
type MilestoneNodeI interface {
	query.NodeI
	PrimaryKeyNode() *query.ColumnNode
	// ID represents the id column in the database.
	ID() *query.ColumnNode
	// ProjectID represents the project_id column in the database.
	ProjectID() *query.ColumnNode
	// Project represents the Project reference to a Project object.
	Project() ProjectNodeI
	// Name represents the name column in the database.
	Name() *query.ColumnNode
}

// MilestoneExpander is the builder interface for Milestones that are expandable.
type MilestoneExpander interface {
	MilestoneNodeI
	// Expand causes the node to produce separate rows with individual items, rather than a single row with an array of items.
	Expand() MilestoneNodeI
}

// milestoneTable represents the milestone table in a query. It uses a builder pattern to chain
// together other tables and columns to form a node chain in a query.
//
// To use the milestoneTable, call [Milestone()] to start a reference chain when querying the milestone table.
type milestoneTable struct {
}

type milestoneReverse struct {
	milestoneTable
	reverseColumn *query.ColumnNode
}

// Milestone returns a table node that starts a node chain that begins with the milestone table.
func Milestone() MilestoneNodeI {
	// Table nodes are empty structs, and do not have pointer receivers,
	var n milestoneTable
	return n
}

// SelectNodes_ is used internally by the framework to return the list of all the column nodes.
func (n milestoneTable) SelectNodes_() (nodes []*query.ColumnNode) {
	nodes = append(nodes, n.ID())
	nodes = append(nodes, n.ProjectID())
	nodes = append(nodes, n.Name())
	return nodes
}

// Copy_ is used internally by the framework to deep copy the node.
func (n milestoneTable) Copy_() query.NodeI {
	// Table nodes are empty so just offer a copy
	var t milestoneTable
	return t
}

// PrimaryKeyNode returns a node that points to the primary key column, if
// a single primary key exists in the table.
func (n milestoneTable) PrimaryKeyNode() *query.ColumnNode {
	return n.ID()
}

// ID represents the id column in the database.
func (n milestoneTable) ID() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd",
		"milestone",
		"id",
		"ID",
		query.ColTypeString,
		true,
	)
	query.SetParentNode(cn, n)
	return cn
}

// ProjectID represents the project_id column in the database.
func (n milestoneTable) ProjectID() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd",
		"milestone",
		"project_id",
		"ProjectID",
		query.ColTypeString,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

// Project represents the link to a Project object.
func (n milestoneTable) Project() ProjectNodeI {
	cn := &ProjectNode{
		query.NewReferenceNode(
			"goradd",
			"milestone",
			"project_id",
			"ProjectID",
			"Project",
			"project",
			"id",
			false,
			query.ColTypeString,
		),
	}
	query.SetParentNode(cn, n)
	return cn
}

// Name represents the name column in the database.
func (n milestoneTable) Name() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd",
		"milestone",
		"name",
		"Name",
		query.ColTypeString,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

func init() {
	gob.Register(new(milestoneTable))
	gob.Register(new(milestoneReverse))
}
