// Code generated by goradd-orm. DO NOT EDIT.

package node

import (
	"encoding/gob"

	"github.com/goradd/orm/pkg/query"
	"github.com/goradd/orm/pkg/schema"
)

// MilestoneNode is the builder interface to the Milestone nodes.
type MilestoneNode interface {
	query.TableNodeI
	PrimaryKey() *query.ColumnNode
	// Id represents the id column in the database.
	Id() *query.ColumnNode
	// ProjectId represents the project_id column in the database.
	ProjectId() *query.ColumnNode
	// Name represents the name column in the database.
	Name() *query.ColumnNode
}

// milestoneTable represents the milestone table in a query. It uses a builder pattern to chain
// together other tables and columns to form a node chain in a query.
//
// To use the milestoneTable, call [Milestone()] to start a reference chain when querying the milestone table.
type milestoneTable struct {
}

// Milestone returns a table node that starts a node chain that begins with the milestone table.
func Milestone() MilestoneNode {
	return milestoneTable{}
}

// TableName_ returns the query name of the table the node is associated with.
func (n milestoneTable) TableName_() string {
	return "milestone"
}

// NodeType_ returns the query.NodeType of the node.
func (n milestoneTable) NodeType_() query.NodeType {
	return query.TableNodeType
}

// DatabaseKey_ returns the database key of the database the node is associated with.
func (n milestoneTable) DatabaseKey_() string {
	return "goradd"
}

// ColumnNodes_ returns a list of all the column nodes in this node.
func (n milestoneTable) ColumnNodes_() (nodes []query.Node) {
	nodes = append(nodes, n.Id())
	nodes = append(nodes, n.ProjectId())
	nodes = append(nodes, n.Name())
	return nodes
}

// PrimaryKey returns a node that points to the primary key column.
func (n milestoneTable) PrimaryKey() *query.ColumnNode {
	return n.Id()
}

func (n milestoneTable) Id() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:     "id",
		Identifier:    "Id",
		ReceiverType:  query.ColTypeString,
		SchemaType:    schema.ColTypeAutoPrimaryKey,
		SchemaSubType: schema.ColSubTypeNone,
		IsPrimaryKey:  true,
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n milestoneTable) ProjectId() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:     "project_id",
		Identifier:    "ProjectId",
		ReceiverType:  query.ColTypeUnknown,
		SchemaType:    schema.ColTypeUnknown,
		SchemaSubType: schema.ColSubTypeNone,
		IsPrimaryKey:  false,
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n milestoneTable) Name() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:     "name",
		Identifier:    "Name",
		ReceiverType:  query.ColTypeString,
		SchemaType:    schema.ColTypeString,
		SchemaSubType: schema.ColSubTypeNone,
		IsPrimaryKey:  false,
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n milestoneTable) GobEncode() (data []byte, err error) {
	return
}

func (n *milestoneTable) GobDecode(data []byte) (err error) {
	return
}

func init() {
	gob.Register(new(milestoneTable))
}
