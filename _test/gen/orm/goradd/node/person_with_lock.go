// Code generated by goradd-orm. DO NOT EDIT.

package node

import (
	"encoding/gob"

	"github.com/goradd/orm/pkg/query"
	"github.com/goradd/orm/pkg/schema"
)

// PersonWithLockNode is the builder interface to the PersonWithLock nodes.
type PersonWithLockNode interface {
	query.TableNodeI
	// PrimaryKey returns the column node representing the primary key of the table
	PrimaryKey() *query.ColumnNode
	// ID represents the id column in the database.
	ID() *query.ColumnNode
	// FirstName represents the first_name column in the database.
	FirstName() *query.ColumnNode
	// LastName represents the last_name column in the database.
	LastName() *query.ColumnNode
	// GroLock represents the gro_lock column in the database.
	GroLock() *query.ColumnNode
	// GroTimestamp represents the gro_timestamp column in the database.
	GroTimestamp() *query.ColumnNode
}

// personWithLockTable represents the person_with_lock table in a query. It uses a builder pattern to chain
// together other tables and columns to form a node chain in a query.
//
// To use the personWithLockTable, call [PersonWithLock()] to start a reference chain when querying the person_with_lock table.
type personWithLockTable struct {
}

// PersonWithLock returns a table node that starts a node chain that begins with the person_with_lock table.
func PersonWithLock() PersonWithLockNode {
	return personWithLockTable{}
}

// TableName_ returns the query name of the table the node is associated with.
func (n personWithLockTable) TableName_() string {
	return "person_with_lock"
}

// NodeType_ returns the query.NodeType of the node.
func (n personWithLockTable) NodeType_() query.NodeType {
	return query.TableNodeType
}

// DatabaseKey_ returns the database key of the database the node is associated with.
func (n personWithLockTable) DatabaseKey_() string {
	return "goradd"
}

// ColumnNodes_ returns a list of all the column nodes in this node.
func (n personWithLockTable) ColumnNodes_() (nodes []query.Node) {
	nodes = append(nodes, n.ID())
	nodes = append(nodes, n.FirstName())
	nodes = append(nodes, n.LastName())
	nodes = append(nodes, n.GroLock())
	nodes = append(nodes, n.GroTimestamp())
	return nodes
}

// PrimaryKeys returns the primary key column nodes to satisfy the PrimaryKeyer interface.
func (n personWithLockTable) PrimaryKeys() []*query.ColumnNode {
	return []*query.ColumnNode{
		n.ID(),
	}
}

// PrimaryKey returns the primary key column node.
func (n personWithLockTable) PrimaryKey() *query.ColumnNode {
	return n.ID()
}

func (n personWithLockTable) ID() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:     "id",
		Field:         "id",
		ReceiverType:  query.ColTypeString,
		SchemaType:    schema.ColTypeAutoPrimaryKey,
		SchemaSubType: schema.ColSubTypeNone,
		IsPrimaryKey:  true,
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n personWithLockTable) FirstName() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:     "first_name",
		Field:         "firstName",
		ReceiverType:  query.ColTypeString,
		SchemaType:    schema.ColTypeString,
		SchemaSubType: schema.ColSubTypeNone,
		IsPrimaryKey:  false,
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n personWithLockTable) LastName() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:     "last_name",
		Field:         "lastName",
		ReceiverType:  query.ColTypeString,
		SchemaType:    schema.ColTypeString,
		SchemaSubType: schema.ColSubTypeNone,
		IsPrimaryKey:  false,
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n personWithLockTable) GroLock() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:     "gro_lock",
		Field:         "groLock",
		ReceiverType:  query.ColTypeInteger64,
		SchemaType:    schema.ColTypeInt,
		SchemaSubType: schema.ColSubTypeLock,
		IsPrimaryKey:  false,
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n personWithLockTable) GroTimestamp() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:     "gro_timestamp",
		Field:         "groTimestamp",
		ReceiverType:  query.ColTypeInteger64,
		SchemaType:    schema.ColTypeInt,
		SchemaSubType: schema.ColSubTypeTimestamp,
		IsPrimaryKey:  false,
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n personWithLockTable) GobEncode() (data []byte, err error) {
	return
}

func (n *personWithLockTable) GobDecode(data []byte) (err error) {
	return
}

func init() {
	gob.Register(new(personWithLockTable))
}
