// Code generated by goradd-orm. DO NOT EDIT.

package node

import (
	"encoding/gob"

	"github.com/goradd/orm/pkg/query"
)

// PersonWithLockNodeI is the builder interface to the PersonWithLock nodes.
type PersonWithLockNodeI interface {
	query.NodeI
	PrimaryKeyNode() *query.ColumnNode
	// ID represents the id column in the database.
	ID() *query.ColumnNode
	// FirstName represents the first_name column in the database.
	FirstName() *query.ColumnNode
	// LastName represents the last_name column in the database.
	LastName() *query.ColumnNode
	// SysTimestamp represents the sys_timestamp column in the database.
	SysTimestamp() *query.ColumnNode
}

// personWithLockTable represents the person_with_lock table in a query. It uses a builder pattern to chain
// together other tables and columns to form a node chain in a query.
//
// To use the personWithLockTable, call [PersonWithLock()] to start a reference chain when querying the person_with_lock table.
type personWithLockTable struct {
}

// PersonWithLock returns a table node that starts a node chain that begins with the person_with_lock table.
func PersonWithLock() PersonWithLockNodeI {
	return personWithLockTable{}
}

// TableName_ returns the query name of the table the node is associated with.
func (n personWithLockTable) TableName_() string {
	return "person_with_lock"
}

// NodeType_ returns the query.NodeType of the node.
func (n personWithLockTable) NodeType_() query.NodeType {
	return query.TableNodeType
}

// DatabaseKey_ returns the database key of the database the node is associated with.
func (n personWithLockTable) DatabaseKey_() string {
	return "goradd"
}

// ColumnNodes_ is used internally by the framework to return the list of all the column nodes.
// This may include reference nodes to enum types.
func (n personWithLockTable) ColumnNodes_() (nodes []query.NodeI) {
	nodes = append(nodes, n.ID())
	nodes = append(nodes, n.FirstName())
	nodes = append(nodes, n.LastName())
	nodes = append(nodes, n.SysTimestamp())
	return nodes
}

// Columns_ is used internally by the framework to return the list of all the columns in the table.
func (n personWithLockTable) Columns_() []string {
	return []string{
		"id",
		"first_name",
		"last_name",
		"sys_timestamp",
	}
}

// IsEnum_ is used internally by the framework to determine if the current table is an enumerated type.
func (n personWithLockTable) IsEnum_() bool {
	return false
}

// PrimaryKeyNode returns a node that points to the primary key column.
func (n personWithLockTable) PrimaryKeyNode() *query.ColumnNode {
	return n.ID()
}

func (n personWithLockTable) ID() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:    "id",
		Identifier:   "ID",
		ReceiverType: query.ColTypeString,
		IsPrimaryKey: true,
	}
	cn.SetParent(n)
	return cn
}

func (n personWithLockTable) FirstName() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:    "first_name",
		Identifier:   "FirstName",
		ReceiverType: query.ColTypeString,
		IsPrimaryKey: false,
	}
	cn.SetParent(n)
	return cn
}

func (n personWithLockTable) LastName() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:    "last_name",
		Identifier:   "LastName",
		ReceiverType: query.ColTypeString,
		IsPrimaryKey: false,
	}
	cn.SetParent(n)
	return cn
}

func (n personWithLockTable) SysTimestamp() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:    "sys_timestamp",
		Identifier:   "SysTimestamp",
		ReceiverType: query.ColTypeTime,
		IsPrimaryKey: false,
	}
	cn.SetParent(n)
	return cn
}

func (n personWithLockTable) GobEncode() (data []byte, err error) {
	return
}

func (n *personWithLockTable) GobDecode(data []byte) (err error) {
	return
}

func init() {
	gob.Register(new(personWithLockTable))
}
