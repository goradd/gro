// Code generated by goradd-orm. DO NOT EDIT.

package node

import (
	"encoding/gob"

	"github.com/goradd/orm/pkg/query"
)

// PersonWithLockNodeI is the builder interface to the PersonWithLock nodes.
type PersonWithLockNodeI interface {
	query.NodeI
	PrimaryKeyNode() *query.ColumnNode
	// ID represents the id column in the database.
	ID() *query.ColumnNode
	// FirstName represents the first_name column in the database.
	FirstName() *query.ColumnNode
	// LastName represents the last_name column in the database.
	LastName() *query.ColumnNode
	// SysTimestamp represents the sys_timestamp column in the database.
	SysTimestamp() *query.ColumnNode
}

// PersonWithLockExpander is the builder interface for PersonWithLocks that are expandable.
type PersonWithLockExpander interface {
	PersonWithLockNodeI
	// Expand causes the node to produce separate rows with individual items, rather than a single row with an array of items.
	Expand() PersonWithLockNodeI
}

// personWithLockTable represents the person_with_lock table in a query. It uses a builder pattern to chain
// together other tables and columns to form a node chain in a query.
//
// To use the personWithLockTable, call [PersonWithLock()] to start a reference chain when querying the person_with_lock table.
type personWithLockTable struct {
}

type personWithLockReverse struct {
	personWithLockTable
	reverseColumn *query.ColumnNode
}

// PersonWithLock returns a table node that starts a node chain that begins with the person_with_lock table.
func PersonWithLock() PersonWithLockNodeI {
	// Table nodes are empty structs, and do not have pointer receivers,
	var n personWithLockTable
	return n
}

// SelectNodes_ is used internally by the framework to return the list of all the column nodes.
func (n personWithLockTable) SelectNodes_() (nodes []*query.ColumnNode) {
	nodes = append(nodes, n.ID())
	nodes = append(nodes, n.FirstName())
	nodes = append(nodes, n.LastName())
	nodes = append(nodes, n.SysTimestamp())
	return nodes
}

// Copy_ is used internally by the framework to deep copy the node.
func (n personWithLockTable) Copy_() query.NodeI {
	// Table nodes are empty so just offer a copy
	var t personWithLockTable
	return t
}

// PrimaryKeyNode returns a node that points to the primary key column, if
// a single primary key exists in the table.
func (n personWithLockTable) PrimaryKeyNode() *query.ColumnNode {
	return n.ID()
}

// ID represents the id column in the database.
func (n personWithLockTable) ID() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd",
		"person_with_lock",
		"id",
		"ID",
		query.ColTypeString,
		true,
	)
	query.SetParentNode(cn, n)
	return cn
}

// FirstName represents the first_name column in the database.
func (n personWithLockTable) FirstName() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd",
		"person_with_lock",
		"first_name",
		"FirstName",
		query.ColTypeString,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

// LastName represents the last_name column in the database.
func (n personWithLockTable) LastName() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd",
		"person_with_lock",
		"last_name",
		"LastName",
		query.ColTypeString,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

// SysTimestamp represents the sys_timestamp column in the database.
func (n personWithLockTable) SysTimestamp() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd",
		"person_with_lock",
		"sys_timestamp",
		"SysTimestamp",
		query.ColTypeTime,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

func init() {
	gob.Register(new(personWithLockTable))
	gob.Register(new(personWithLockReverse))
}
