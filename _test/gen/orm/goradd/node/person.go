// Code generated by goradd-orm. DO NOT EDIT.

package node

import (
	"bytes"
	"encoding/gob"

	"github.com/goradd/orm/pkg/query"
	"github.com/goradd/orm/pkg/schema"
)

// PersonNode is the builder interface to the Person nodes.
type PersonNode interface {
	query.TableNodeI
	// PrimaryKey returns the column node representing the primary key of the table
	PrimaryKey() *query.ColumnNode
	// ID represents the id column in the database.
	ID() *query.ColumnNode
	// FirstName represents the first_name column in the database.
	FirstName() *query.ColumnNode
	// LastName represents the last_name column in the database.
	LastName() *query.ColumnNode
	// PersonTypeEnum represents the person_type_enum column in the database.
	PersonTypeEnum() *query.ColumnNode
	// Created represents the created column in the database.
	Created() *query.ColumnNode
	// Modified represents the modified column in the database.
	Modified() *query.ColumnNode
	// Projects represents the many-many reference to Project objects.
	Projects() ProjectNode
	// ManagerProjects represents the ManagerProjects reverse reference to Project objects
	// through the ManagerID foreign key there.
	ManagerProjects() ProjectNode
	// PersonAddresses represents the PersonAddresses reverse reference to Address objects
	// through the PersonID foreign key there.
	PersonAddresses() AddressNode
	// PersonEmployeeInfo represents the PersonEmployeeInfo reverse reference to a EmployeeInfo object
	// through the PersonID foreign key there.
	PersonEmployeeInfo() EmployeeInfoNode
	// PersonLogin represents the PersonLogin reverse reference to a Login object
	// through the PersonID foreign key there.
	PersonLogin() LoginNode
}

// personTable represents the person table in a query. It uses a builder pattern to chain
// together other tables and columns to form a node chain in a query.
//
// To use the personTable, call [Person()] to start a reference chain when querying the person table.
type personTable struct {
}

type personReference struct {
	personTable
	query.ReferenceNode
}

type personAssociation struct {
	personTable
	query.ManyManyNode
}

// Person returns a table node that starts a node chain that begins with the person table.
func Person() PersonNode {
	return personTable{}
}

// TableName_ returns the query name of the table the node is associated with.
func (n personTable) TableName_() string {
	return "person"
}

// NodeType_ returns the query.NodeType of the node.
func (n personTable) NodeType_() query.NodeType {
	return query.TableNodeType
}

// DatabaseKey_ returns the database key of the database the node is associated with.
func (n personTable) DatabaseKey_() string {
	return "goradd"
}

// ColumnNodes_ returns a list of all the column nodes in this node.
func (n personTable) ColumnNodes_() (nodes []query.Node) {
	nodes = append(nodes, n.ID())
	nodes = append(nodes, n.FirstName())
	nodes = append(nodes, n.LastName())
	nodes = append(nodes, n.PersonTypeEnum())
	nodes = append(nodes, n.Created())
	nodes = append(nodes, n.Modified())
	return nodes
}

func (n *personReference) ColumnNodes_() (nodes []query.Node) {
	nodes = n.personTable.ColumnNodes_()
	for _, cn := range nodes {
		query.NodeSetParent(cn, n)
	}
	return
}

func (n *personAssociation) ColumnNodes_() (nodes []query.Node) {
	nodes = n.personTable.ColumnNodes_()
	for _, cn := range nodes {
		query.NodeSetParent(cn, n)
	}
	return
}

func (n *personReference) NodeType_() query.NodeType {
	return query.ReferenceNodeType
}

func (n *personAssociation) NodeType_() query.NodeType {
	return query.ManyManyNodeType
}

// PrimaryKeys returns the primary key column nodes to satisfy the PrimaryKeyer interface.
func (n personTable) PrimaryKeys() []*query.ColumnNode {
	return []*query.ColumnNode{
		n.ID(),
	}
}

// PrimaryKey returns the primary key column node.
func (n personTable) PrimaryKey() *query.ColumnNode {
	return n.ID()
}

// PrimaryKeys returns the primary key column nodes.
func (n *personReference) PrimaryKeys() []*query.ColumnNode {
	return []*query.ColumnNode{
		n.ID(),
	}
}

// PrimaryKey returns the primary key column nodes.
func (n personReference) PrimaryKey() *query.ColumnNode {
	return n.ID()
}

// PrimaryKeys returns the primary key column nodes.
func (n *personAssociation) PrimaryKeys() []*query.ColumnNode {
	return []*query.ColumnNode{
		n.ID(),
	}
}

func (n personTable) ID() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:     "id",
		Identifier:    "ID",
		ReceiverType:  query.ColTypeString,
		SchemaType:    schema.ColTypeAutoPrimaryKey,
		SchemaSubType: schema.ColSubTypeNone,
		IsPrimaryKey:  true,
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n *personReference) ID() *query.ColumnNode {
	cn := n.personTable.ID()
	query.NodeSetParent(cn, n)
	return cn
}

func (n *personAssociation) ID() *query.ColumnNode {
	cn := n.personTable.ID()
	query.NodeSetParent(cn, n)
	return cn
}

func (n personTable) FirstName() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:     "first_name",
		Identifier:    "FirstName",
		ReceiverType:  query.ColTypeString,
		SchemaType:    schema.ColTypeString,
		SchemaSubType: schema.ColSubTypeNone,
		IsPrimaryKey:  false,
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n *personReference) FirstName() *query.ColumnNode {
	cn := n.personTable.FirstName()
	query.NodeSetParent(cn, n)
	return cn
}

func (n *personAssociation) FirstName() *query.ColumnNode {
	cn := n.personTable.FirstName()
	query.NodeSetParent(cn, n)
	return cn
}

func (n personTable) LastName() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:     "last_name",
		Identifier:    "LastName",
		ReceiverType:  query.ColTypeString,
		SchemaType:    schema.ColTypeString,
		SchemaSubType: schema.ColSubTypeNone,
		IsPrimaryKey:  false,
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n *personReference) LastName() *query.ColumnNode {
	cn := n.personTable.LastName()
	query.NodeSetParent(cn, n)
	return cn
}

func (n *personAssociation) LastName() *query.ColumnNode {
	cn := n.personTable.LastName()
	query.NodeSetParent(cn, n)
	return cn
}

func (n personTable) PersonTypeEnum() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:     "person_type_enum",
		Identifier:    "PersonTypeEnum",
		ReceiverType:  query.ColTypeInteger,
		SchemaType:    schema.ColTypeEnum,
		SchemaSubType: schema.ColSubTypeNone,
		IsPrimaryKey:  false,
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n *personReference) PersonTypeEnum() *query.ColumnNode {
	cn := n.personTable.PersonTypeEnum()
	query.NodeSetParent(cn, n)
	return cn
}

func (n *personAssociation) PersonTypeEnum() *query.ColumnNode {
	cn := n.personTable.PersonTypeEnum()
	query.NodeSetParent(cn, n)
	return cn
}

func (n personTable) Created() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:     "created",
		Identifier:    "Created",
		ReceiverType:  query.ColTypeTime,
		SchemaType:    schema.ColTypeTime,
		SchemaSubType: schema.ColSubTypeNone,
		IsPrimaryKey:  false,
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n *personReference) Created() *query.ColumnNode {
	cn := n.personTable.Created()
	query.NodeSetParent(cn, n)
	return cn
}

func (n *personAssociation) Created() *query.ColumnNode {
	cn := n.personTable.Created()
	query.NodeSetParent(cn, n)
	return cn
}

func (n personTable) Modified() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName:     "modified",
		Identifier:    "Modified",
		ReceiverType:  query.ColTypeTime,
		SchemaType:    schema.ColTypeTime,
		SchemaSubType: schema.ColSubTypeNone,
		IsPrimaryKey:  false,
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n *personReference) Modified() *query.ColumnNode {
	cn := n.personTable.Modified()
	query.NodeSetParent(cn, n)
	return cn
}

func (n *personAssociation) Modified() *query.ColumnNode {
	cn := n.personTable.Modified()
	query.NodeSetParent(cn, n)
	return cn
}

// Projects represents the many-to-many relationship formed by the team_member_project_assn table.
func (n personTable) Projects() ProjectNode {
	cn := &projectAssociation{
		ManyManyNode: query.ManyManyNode{
			AssnTableQueryName: "team_member_project_assn",
			ParentForeignKey:   "team_member_id",
			ParentPrimaryKey:   "id",
			Identifier:         "Projects",
			RefForeignKey:      "project_id",
			RefPrimaryKey:      "id",
		},
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n *personReference) Projects() ProjectNode {
	cn := n.personTable.Projects().(*projectAssociation)
	query.NodeSetParent(cn, n)
	return cn
}

func (n *personAssociation) Projects() ProjectNode {
	cn := n.personTable.Projects().(*projectAssociation)
	query.NodeSetParent(cn, n)
	return cn
}

// ManagerProjects represents the many-to-one relationship formed by the reverse reference from the
// manager_id column in the project table.
func (n personTable) ManagerProjects() ProjectNode {
	cn := &projectReverse{
		ReverseNode: query.ReverseNode{
			ForeignKey: "manager_id",
			Identifier: "ManagerProjects",
			IsUnique:   false,
		},
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n *personReference) ManagerProjects() ProjectNode {
	cn := n.personTable.ManagerProjects().(*projectReverse)
	query.NodeSetParent(cn, n)
	return cn
}

func (n *personAssociation) ManagerProjects() ProjectNode {
	cn := n.personTable.ManagerProjects().(*projectReverse)
	query.NodeSetParent(cn, n)
	return cn
}

// PersonAddresses represents the many-to-one relationship formed by the reverse reference from the
// person_id column in the address table.
func (n personTable) PersonAddresses() AddressNode {
	cn := &addressReverse{
		ReverseNode: query.ReverseNode{
			ForeignKey: "person_id",
			Identifier: "PersonAddresses",
			IsUnique:   false,
		},
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n *personReference) PersonAddresses() AddressNode {
	cn := n.personTable.PersonAddresses().(*addressReverse)
	query.NodeSetParent(cn, n)
	return cn
}

func (n *personAssociation) PersonAddresses() AddressNode {
	cn := n.personTable.PersonAddresses().(*addressReverse)
	query.NodeSetParent(cn, n)
	return cn
}

// PersonEmployeeInfo represents the one-to-one relationship formed by the reverse reference from the
// person_id column in the employee_info table.
func (n personTable) PersonEmployeeInfo() EmployeeInfoNode {
	cn := &employeeInfoReverse{
		ReverseNode: query.ReverseNode{
			ForeignKey: "person_id",
			PrimaryKey: "id",
			Identifier: "PersonEmployeeInfo",
			IsUnique:   true,
		},
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n *personReference) PersonEmployeeInfo() EmployeeInfoNode {
	cn := n.personTable.PersonEmployeeInfo().(*employeeInfoReverse)
	query.NodeSetParent(cn, n)
	return cn
}

func (n *personAssociation) PersonEmployeeInfo() EmployeeInfoNode {
	cn := n.personTable.PersonEmployeeInfo().(*employeeInfoReverse)
	query.NodeSetParent(cn, n)
	return cn
}

// PersonLogin represents the one-to-one relationship formed by the reverse reference from the
// person_id column in the login table.
func (n personTable) PersonLogin() LoginNode {
	cn := &loginReverse{
		ReverseNode: query.ReverseNode{
			ForeignKey: "person_id",
			PrimaryKey: "id",
			Identifier: "PersonLogin",
			IsUnique:   true,
		},
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n *personReference) PersonLogin() LoginNode {
	cn := n.personTable.PersonLogin().(*loginReverse)
	query.NodeSetParent(cn, n)
	return cn
}

func (n *personAssociation) PersonLogin() LoginNode {
	cn := n.personTable.PersonLogin().(*loginReverse)
	query.NodeSetParent(cn, n)
	return cn
}

func (n personTable) GobEncode() (data []byte, err error) {
	return
}

func (n *personTable) GobDecode(data []byte) (err error) {
	return
}

func (n *personReference) GobEncode() (data []byte, err error) {
	var buf bytes.Buffer
	e := gob.NewEncoder(&buf)

	if err = e.Encode(&n.ReferenceNode); err != nil {
		panic(err)
	}
	data = buf.Bytes()
	return
}

func (n *personReference) GobDecode(data []byte) (err error) {
	buf := bytes.NewBuffer(data)
	dec := gob.NewDecoder(buf)

	if err = dec.Decode(&n.ReferenceNode); err != nil {
		panic(err)
	}
	return
}

func (n *personAssociation) GobEncode() (data []byte, err error) {
	var buf bytes.Buffer
	e := gob.NewEncoder(&buf)

	if err = e.Encode(&n.ManyManyNode); err != nil {
		panic(err)
	}
	data = buf.Bytes()
	return
}

func (n *personAssociation) GobDecode(data []byte) (err error) {
	buf := bytes.NewBuffer(data)
	dec := gob.NewDecoder(buf)

	if err = dec.Decode(&n.ManyManyNode); err != nil {
		panic(err)
	}
	return
}

func init() {
	gob.Register(new(personTable))
	gob.Register(new(personReference))
	gob.Register(new(personAssociation))
}
