// Code generated by goradd-orm. DO NOT EDIT.

package node

import (
	"encoding/gob"

	"github.com/goradd/orm/pkg/query"
)

// PersonNodeI is the builder interface to the Person nodes.
type PersonNodeI interface {
	query.NodeI
	PrimaryKeyNode() *query.ColumnNode
	// ID represents the id column in the database.
	ID() *query.ColumnNode
	// FirstName represents the first_name column in the database.
	FirstName() *query.ColumnNode
	// LastName represents the last_name column in the database.
	LastName() *query.ColumnNode
	// PersonTypes represents the PersonTypes reference to PersonType objects.
	PersonTypes() PersonTypeExpander
	// Projects represents the Projects reference to Project objects.
	Projects() ProjectExpander
	// Addresses represents the Address reference to Address objects.
	Addresses() AddressExpander
	// EmployeeInfo represents the EmployeeInfo reference to a EmployeeInfo object.
	EmployeeInfo() EmployeeInfoNodeI
	// Login represents the Login reference to a Login object.
	Login() LoginNodeI
	// ManagerProjects represents the ManagerProject reference to Project objects.
	ManagerProjects() ProjectExpander
}

// PersonExpander is the builder interface for People that are expandable.
type PersonExpander interface {
	PersonNodeI
	// Expand causes the node to produce separate rows with individual items, rather than a single row with an array of items.
	Expand() PersonNodeI
}

// personTable represents the person table in a query. It uses a builder pattern to chain
// together other tables and columns to form a node chain in a query.
//
// To use the personTable, call [Person()] to start a reference chain when querying the person table.
type personTable struct {
}

type personReference struct {
	personTable
	referenceColumn *query.ColumnNode
}

type personReverse struct {
	personTable
	reverseColumn *query.ColumnNode
}

type personAssociation struct {
	personTable
	query.ManyManyNode
}

// Person returns a table node that starts a node chain that begins with the person table.
func Person() PersonNodeI {
	// Table nodes are empty structs, and do not have pointer receivers,
	var n personTable
	return n
}

// SelectNodes_ is used internally by the framework to return the list of all the column nodes.
func (n personTable) SelectNodes_() (nodes []*query.ColumnNode) {
	nodes = append(nodes, n.ID())
	nodes = append(nodes, n.FirstName())
	nodes = append(nodes, n.LastName())
	return nodes
}

// Copy_ is used internally by the framework to deep copy the node.
func (n personTable) Copy_() query.NodeI {
	// Table nodes are empty so just offer a copy
	var t personTable
	return t
}

// PrimaryKeyNode returns a node that points to the primary key column, if
// a single primary key exists in the table.
func (n personTable) PrimaryKeyNode() *query.ColumnNode {
	return n.ID()
}

// ID represents the id column in the database.
func (n personTable) ID() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd",
		"person",
		"id",
		"ID",
		query.ColTypeString,
		true,
	)
	query.SetParentNode(cn, n)
	return cn
}

// FirstName represents the first_name column in the database.
func (n personTable) FirstName() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd",
		"person",
		"first_name",
		"FirstName",
		query.ColTypeString,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

// LastName represents the last_name column in the database.
func (n personTable) LastName() *query.ColumnNode {
	cn := query.NewColumnNode(
		"goradd",
		"person",
		"last_name",
		"LastName",
		query.ColTypeString,
		false,
	)
	query.SetParentNode(cn, n)
	return cn
}

// PersonTypes represents the many-to-many relationship formed by the person_persontype_assn table.
func (n personTable) PersonTypes() PersonTypeNodeI {
	cn := &PersonTypeNode{
		query.NewManyManyNode(
			"goradd",
			"person_persontype_assn",
			"person_id",
			"PersonTypes",
			"person_type_enum",
			"person_type_id",
			"id",
			true,
		),
	}
	query.SetParentNode(cn, n)
	return cn
}

// Projects represents the many-to-many relationship formed by the team_member_project_assn table.
func (n personTable) Projects() ProjectNodeI {
	cn := &ProjectNode{
		query.NewManyManyNode(
			"goradd",
			"team_member_project_assn",
			"team_member_id",
			"Projects",
			"project",
			"project_id",
			"id",
			false,
		),
	}
	query.SetParentNode(cn, n)
	return cn
}

// Addresses represents the many-to-one relationship formed by the reverse reference from the
// person_id column in the address table.
func (n personTable) Addresses() AddressNodeI {
	cn := &AddressNode{
		query.NewReverseReferenceNode(
			"goradd",
			"person",
			"id",
			"Addresses",
			"address",
			"person_id",
			true,
		),
	}
	query.SetParentNode(cn, n)
	return cn
}

// EmployeeInfo represents the one-to-one relationship formed by the reverse reference from the
// person_id column in the employee_info table.
func (n personTable) EmployeeInfo() EmployeeInfoNodeI {

	cn := &EmployeeInfoNode{
		query.NewReverseReferenceNode(
			"goradd",
			"person",
			"id",
			"EmployeeInfo",
			"employee_info",
			"person_id",
			false,
		),
	}
	query.SetParentNode(cn, n)
	return cn

}

// Login represents the one-to-one relationship formed by the reverse reference from the
// person_id column in the login table.
func (n personTable) Login() LoginNodeI {

	cn := &LoginNode{
		query.NewReverseReferenceNode(
			"goradd",
			"person",
			"id",
			"Login",
			"login",
			"person_id",
			false,
		),
	}
	query.SetParentNode(cn, n)
	return cn

}

// ManagerProjects represents the many-to-one relationship formed by the reverse reference from the
// manager_id column in the project table.
func (n personTable) ManagerProjects() ProjectNodeI {
	cn := &ProjectNode{
		query.NewReverseReferenceNode(
			"goradd",
			"person",
			"id",
			"ManagerProjects",
			"project",
			"manager_id",
			true,
		),
	}
	query.SetParentNode(cn, n)
	return cn
}

func init() {
	gob.Register(new(personTable))
	gob.Register(new(personReference))
	gob.Register(new(personReverse))
	gob.Register(new(personAssociation))
}
