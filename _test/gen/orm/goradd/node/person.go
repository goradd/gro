// Code generated by goradd-orm. DO NOT EDIT.

package node

import (
	"bytes"
	"encoding/gob"

	"github.com/goradd/orm/pkg/query"
	"github.com/goradd/orm/pkg/schema"
)

// PersonNode is the builder interface to the Person nodes.
type PersonNode interface {
	query.TableNodeI
	// PrimaryKey returns the column node representing the primary key of the table
	PrimaryKey() *query.ColumnNode
	// ID represents the id column in the database.
	ID() *query.ColumnNode
	// FirstName represents the first_name column in the database.
	FirstName() *query.ColumnNode
	// LastName represents the last_name column in the database.
	LastName() *query.ColumnNode
	// PersonType represents the person_type column in the database.
	PersonType() *query.ColumnNode
	// Created represents the created column in the database.
	Created() *query.ColumnNode
	// Modified represents the modified column in the database.
	Modified() *query.ColumnNode
	// Projects represents the many-many reference to Project objects.
	Projects() ProjectNode
	// ManagerProject represents the ManagerProject reverse reference to Project objects
	// through the ManagerID foreign key there.
	ManagerProjects() ProjectNode
	// Address represents the Address reverse reference to Address objects
	// through the PersonID foreign key there.
	Addresses() AddressNode
	// EmployeeInfo represents the EmployeeInfo reverse reference to a EmployeeInfo object
	// through the PersonID foreign key there.
	EmployeeInfo() EmployeeInfoNode
	// Login represents the Login reverse reference to a Login object
	// through the PersonID foreign key there.
	Login() LoginNode
}

// personTable represents the person table in a query. It uses a builder pattern to chain
// together other tables and columns to form a node chain in a query.
//
// To use the personTable, call [Person()] to start a reference chain when querying the person table.
type personTable struct {
}

type personReference struct {
	personTable
	query.ReferenceNode
}

type personAssociation struct {
	personTable
	query.ManyManyNode
}

// Person returns a table node that starts a node chain that begins with the person table.
func Person() PersonNode {
	return personTable{}
}

// TableName_ returns the query name of the table the node is associated with.
func (n personTable) TableName_() string {
	return "person"
}

// NodeType_ returns the query.NodeType of the node.
func (n personTable) NodeType_() query.NodeType {
	return query.TableNodeType
}

// DatabaseKey_ returns the database key of the database the node is associated with.
func (n personTable) DatabaseKey_() string {
	return "goradd"
}

// ColumnNodes_ returns a list of all the column nodes in this node.
func (n personTable) ColumnNodes_() (nodes []query.Node) {
	nodes = append(nodes, n.ID())
	nodes = append(nodes, n.FirstName())
	nodes = append(nodes, n.LastName())
	nodes = append(nodes, n.PersonType())
	nodes = append(nodes, n.Created())
	nodes = append(nodes, n.Modified())
	return nodes
}

func (n *personReference) ColumnNodes_() (nodes []query.Node) {
	nodes = n.personTable.ColumnNodes_()
	for _, cn := range nodes {
		query.NodeSetParent(cn, n)
	}
	return
}

func (n *personAssociation) ColumnNodes_() (nodes []query.Node) {
	nodes = n.personTable.ColumnNodes_()
	for _, cn := range nodes {
		query.NodeSetParent(cn, n)
	}
	return
}

func (n *personReference) NodeType_() query.NodeType {
	return query.ReferenceNodeType
}

func (n *personAssociation) NodeType_() query.NodeType {
	return query.ManyManyNodeType
}

// PrimaryKeys returns the primary key column nodes to satisfy the PrimaryKeyer interface.
func (n personTable) PrimaryKeys() []*query.ColumnNode {
	return []*query.ColumnNode{
		n.ID(),
	}
}

// PrimaryKey returns the single primary key column node.
func (n personTable) PrimaryKey() *query.ColumnNode {
	return n.ID()
}

// PrimaryKeys returns the primary key column nodes.
func (n *personReference) PrimaryKeys() []*query.ColumnNode {
	return []*query.ColumnNode{
		n.ID(),
	}
}

// PrimaryKey returns the single primary key column node.
func (n personReference) PrimaryKey() *query.ColumnNode {
	return n.ID()
}

// PrimaryKeys returns the primary key column nodes.
func (n *personAssociation) PrimaryKeys() []*query.ColumnNode {
	return []*query.ColumnNode{
		n.ID(),
	}
}

// PrimaryKey returns the single primary key column node.
func (n personAssociation) PrimaryKey() *query.ColumnNode {
	return n.ID()
}

func (n personTable) ID() *query.ColumnNode {
	cn := query.NewColumnNode(
		"id",
		"id",
		query.ColTypeString,
		schema.ColTypeAutoPrimaryKey,
		schema.ColSubTypeNone,
		true,
		n,
	)
	return cn
}

func (n *personReference) ID() *query.ColumnNode {
	cn := n.personTable.ID()
	query.NodeSetParent(cn, n)
	return cn
}

func (n *personAssociation) ID() *query.ColumnNode {
	cn := n.personTable.ID()
	query.NodeSetParent(cn, n)
	return cn
}

func (n personTable) FirstName() *query.ColumnNode {
	cn := query.NewColumnNode(
		"first_name",
		"firstName",
		query.ColTypeString,
		schema.ColTypeString,
		schema.ColSubTypeNone,
		false,
		n,
	)
	return cn
}

func (n *personReference) FirstName() *query.ColumnNode {
	cn := n.personTable.FirstName()
	query.NodeSetParent(cn, n)
	return cn
}

func (n *personAssociation) FirstName() *query.ColumnNode {
	cn := n.personTable.FirstName()
	query.NodeSetParent(cn, n)
	return cn
}

func (n personTable) LastName() *query.ColumnNode {
	cn := query.NewColumnNode(
		"last_name",
		"lastName",
		query.ColTypeString,
		schema.ColTypeString,
		schema.ColSubTypeNone,
		false,
		n,
	)
	return cn
}

func (n *personReference) LastName() *query.ColumnNode {
	cn := n.personTable.LastName()
	query.NodeSetParent(cn, n)
	return cn
}

func (n *personAssociation) LastName() *query.ColumnNode {
	cn := n.personTable.LastName()
	query.NodeSetParent(cn, n)
	return cn
}

func (n personTable) PersonType() *query.ColumnNode {
	cn := query.NewColumnNode(
		"person_type",
		"personType",
		query.ColTypeInteger,
		schema.ColTypeEnum,
		schema.ColSubTypeNone,
		false,
		n,
	)
	return cn
}

func (n *personReference) PersonType() *query.ColumnNode {
	cn := n.personTable.PersonType()
	query.NodeSetParent(cn, n)
	return cn
}

func (n *personAssociation) PersonType() *query.ColumnNode {
	cn := n.personTable.PersonType()
	query.NodeSetParent(cn, n)
	return cn
}

func (n personTable) Created() *query.ColumnNode {
	cn := query.NewColumnNode(
		"created",
		"created",
		query.ColTypeTime,
		schema.ColTypeTime,
		schema.ColSubTypeNone,
		false,
		n,
	)
	return cn
}

func (n *personReference) Created() *query.ColumnNode {
	cn := n.personTable.Created()
	query.NodeSetParent(cn, n)
	return cn
}

func (n *personAssociation) Created() *query.ColumnNode {
	cn := n.personTable.Created()
	query.NodeSetParent(cn, n)
	return cn
}

func (n personTable) Modified() *query.ColumnNode {
	cn := query.NewColumnNode(
		"modified",
		"modified",
		query.ColTypeTime,
		schema.ColTypeTime,
		schema.ColSubTypeNone,
		false,
		n,
	)
	return cn
}

func (n *personReference) Modified() *query.ColumnNode {
	cn := n.personTable.Modified()
	query.NodeSetParent(cn, n)
	return cn
}

func (n *personAssociation) Modified() *query.ColumnNode {
	cn := n.personTable.Modified()
	query.NodeSetParent(cn, n)
	return cn
}

// Projects represents the many-to-many relationship formed by the team_member_project_assn table.
func (n personTable) Projects() ProjectNode {
	cn := &projectAssociation{
		ManyManyNode: query.ManyManyNode{
			AssnTableQueryName: "team_member_project_assn",
			ParentForeignKey:   "team_member_id",
			ParentPrimaryKey:   "id",
			Field:              "projects",
			RefForeignKey:      "project_id",
			RefPrimaryKey:      "id",
		},
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n *personReference) Projects() ProjectNode {
	cn := n.personTable.Projects().(*projectAssociation)
	query.NodeSetParent(cn, n)
	return cn
}

func (n *personAssociation) Projects() ProjectNode {
	cn := n.personTable.Projects().(*projectAssociation)
	query.NodeSetParent(cn, n)
	return cn
}

// ManagerProject represents the many-to-one relationship formed by the reverse reference from the
// manager_id column in the project table.
func (n personTable) ManagerProjects() ProjectNode {
	cn := &projectReverse{
		ReverseNode: query.ReverseNode{
			ForeignKey: "manager_id",
			PrimaryKey: "id",
			Field:      "managerProjects",
			IsUnique:   false,
		},
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n *personReference) ManagerProjects() ProjectNode {
	cn := n.personTable.ManagerProjects().(*projectReverse)
	query.NodeSetParent(cn, n)
	return cn
}

func (n *personAssociation) ManagerProjects() ProjectNode {
	cn := n.personTable.ManagerProjects().(*projectReverse)
	query.NodeSetParent(cn, n)
	return cn
}

// Address represents the many-to-one relationship formed by the reverse reference from the
// person_id column in the address table.
func (n personTable) Addresses() AddressNode {
	cn := &addressReverse{
		ReverseNode: query.ReverseNode{
			ForeignKey: "person_id",
			PrimaryKey: "id",
			Field:      "addresses",
			IsUnique:   false,
		},
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n *personReference) Addresses() AddressNode {
	cn := n.personTable.Addresses().(*addressReverse)
	query.NodeSetParent(cn, n)
	return cn
}

func (n *personAssociation) Addresses() AddressNode {
	cn := n.personTable.Addresses().(*addressReverse)
	query.NodeSetParent(cn, n)
	return cn
}

// EmployeeInfo represents the one-to-one relationship formed by the reverse reference from the
// person_id column in the employee_info table.
func (n personTable) EmployeeInfo() EmployeeInfoNode {
	cn := &employeeInfoReverse{
		ReverseNode: query.ReverseNode{
			ForeignKey: "person_id",
			PrimaryKey: "id",
			Field:      "employeeInfo",
			IsUnique:   true,
		},
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n *personReference) EmployeeInfo() EmployeeInfoNode {
	cn := n.personTable.EmployeeInfo().(*employeeInfoReverse)
	query.NodeSetParent(cn, n)
	return cn
}

func (n *personAssociation) EmployeeInfo() EmployeeInfoNode {
	cn := n.personTable.EmployeeInfo().(*employeeInfoReverse)
	query.NodeSetParent(cn, n)
	return cn
}

// Login represents the one-to-one relationship formed by the reverse reference from the
// person_id column in the login table.
func (n personTable) Login() LoginNode {
	cn := &loginReverse{
		ReverseNode: query.ReverseNode{
			ForeignKey: "person_id",
			PrimaryKey: "id",
			Field:      "login",
			IsUnique:   true,
		},
	}
	query.NodeSetParent(cn, n)
	return cn
}

func (n *personReference) Login() LoginNode {
	cn := n.personTable.Login().(*loginReverse)
	query.NodeSetParent(cn, n)
	return cn
}

func (n *personAssociation) Login() LoginNode {
	cn := n.personTable.Login().(*loginReverse)
	query.NodeSetParent(cn, n)
	return cn
}

func (n personTable) GobEncode() (data []byte, err error) {
	return
}

func (n *personTable) GobDecode(data []byte) (err error) {
	return
}

func (n *personReference) GobEncode() (data []byte, err error) {
	var buf bytes.Buffer
	e := gob.NewEncoder(&buf)

	if err = e.Encode(&n.ReferenceNode); err != nil {
		panic(err)
	}
	data = buf.Bytes()
	return
}

func (n *personReference) GobDecode(data []byte) (err error) {
	buf := bytes.NewBuffer(data)
	dec := gob.NewDecoder(buf)

	if err = dec.Decode(&n.ReferenceNode); err != nil {
		panic(err)
	}
	return
}

func (n *personAssociation) GobEncode() (data []byte, err error) {
	var buf bytes.Buffer
	e := gob.NewEncoder(&buf)

	if err = e.Encode(&n.ManyManyNode); err != nil {
		panic(err)
	}
	data = buf.Bytes()
	return
}

func (n *personAssociation) GobDecode(data []byte) (err error) {
	buf := bytes.NewBuffer(data)
	dec := gob.NewDecoder(buf)

	if err = dec.Decode(&n.ManyManyNode); err != nil {
		panic(err)
	}
	return
}

func init() {
	gob.Register(new(personTable))
	gob.Register(new(personReference))
	gob.Register(new(personAssociation))
}
