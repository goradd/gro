// Code generated by goradd-orm. DO NOT EDIT.

package goradd

import (
	"context"
	"time"

	"github.com/goradd/orm/pkg/test"
)

// createMinimalSampleProject creates an unsaved minimal version of a Project object
// for testing.
func createMinimalSampleProject() *Project {
	obj := NewProject()
	updateMinimalSampleProject(obj)
	return obj
}

// updateMinimalSampleProject sets the values of a minimal sample to new, random values.
func updateMinimalSampleProject(obj *Project) {

	obj.SetNum(test.RandomValue[int](32))

	obj.SetStatus(test.RandomEnum(ProjectStatuses()))

	obj.SetName(test.RandomValue[string](100))

	obj.SetDescription(test.RandomValue[string](65535))

	obj.SetStartDate(test.RandomValue[time.Time](0))

	obj.SetEndDate(test.RandomValue[time.Time](0))

}

// createMaximalSampleProject creates an unsaved version of a Project object
// for testing that includes references to minimal objects.
func createMaximalSampleProject() *Project {
	obj := NewProject()
	updateMaximalSampleProject(obj)
	return obj
}

// updateMaximalSampleProject sets all the maximal sample values to new values.
func updateMaximalSampleProject(obj *Project) {
	updateMinimalSampleProject(obj)

	obj.SetManager(createMinimalSamplePerson())

	obj.SetParentProject(createMinimalSampleProject())

	obj.SetMilestones(createMinimalSampleMilestone())
	obj.SetParentProjectProjects(createMinimalSampleProject())
	obj.SetChildren(createMinimalSampleProject())
	obj.SetParents(createMinimalSampleProject())
	obj.SetTeamMembers(createMinimalSamplePerson())
}

// deleteSampleProject deletes an object created and saved by one of the sample creator functions.
func deleteSampleProject(ctx context.Context, obj *Project) {
	if obj == nil {
		return
	}

	for _, item := range obj.Milestones() {
		deleteSampleMilestone(ctx, item)
	}
	for _, item := range obj.ParentProjectProjects() {
		deleteSampleProject(ctx, item)
	}

	for _, item := range obj.Children() {
		deleteSampleProject(ctx, item)
	}
	for _, item := range obj.Parents() {
		deleteSampleProject(ctx, item)
	}
	for _, item := range obj.TeamMembers() {
		deleteSamplePerson(ctx, item)
	}

	obj.Delete(ctx)

	deleteSamplePerson(ctx, obj.Manager())

	deleteSampleProject(ctx, obj.ParentProject())

}
