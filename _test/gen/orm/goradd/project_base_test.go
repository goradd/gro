// Code generated by goradd-orm. DO NOT EDIT.

package goradd

import (
	"testing"
	"time"

	"github.com/goradd/orm/pkg/test"
	"github.com/stretchr/testify/assert"
)

func TestProject_SetNum(t *testing.T) {

	obj := NewProject()
	val := test.RandomValue[int](32)
	obj.SetNum(val)
	assert.Equal(t, val, obj.Num())

	// test default
	obj.SetNum(0)
	assert.EqualValues(t, 0, obj.Num(), "set default")

}
func TestProject_SetStatus(t *testing.T) {

	obj := NewProject()

	val := test.RandomEnum(ProjectStatuses())
	obj.SetStatus(val)

	assert.Equal(t, val, obj.Status())

	// test default
	obj.SetStatus(0)
	assert.EqualValues(t, 0, obj.Status(), "set default")

}
func TestProject_SetManagerID(t *testing.T) {

	obj := NewProject()
	val := test.RandomValue[string](0)
	obj.SetManagerID(val)
	assert.Equal(t, val, obj.ManagerID())
	assert.False(t, obj.ManagerIDIsNull())

	// Test NULL
	obj.SetManagerIDToNull()
	assert.EqualValues(t, "", obj.ManagerID())
	assert.True(t, obj.ManagerIDIsNull())

	// test default
	obj.SetManagerID("")
	assert.EqualValues(t, "", obj.ManagerID(), "set default")

}
func TestProject_SetName(t *testing.T) {

	obj := NewProject()
	val := test.RandomValue[string](100)
	obj.SetName(val)
	assert.Equal(t, val, obj.Name())

	// test default
	obj.SetName("")
	assert.EqualValues(t, "", obj.Name(), "set default")

	// test panic on setting value larger than maximum size allowed
	val = test.RandomValue[string](101)
	assert.Panics(t, func() {
		obj.SetName(val)
	})
}
func TestProject_SetDescription(t *testing.T) {

	obj := NewProject()
	val := test.RandomValue[string](65535)
	obj.SetDescription(val)
	assert.Equal(t, val, obj.Description())
	assert.False(t, obj.DescriptionIsNull())

	// Test NULL
	obj.SetDescriptionToNull()
	assert.EqualValues(t, "", obj.Description())
	assert.True(t, obj.DescriptionIsNull())

	// test default
	obj.SetDescription("")
	assert.EqualValues(t, "", obj.Description(), "set default")

	// test panic on setting value larger than maximum size allowed
	val = test.RandomValue[string](65536)
	assert.Panics(t, func() {
		obj.SetDescription(val)
	})
}
func TestProject_SetStartDate(t *testing.T) {

	obj := NewProject()
	val := test.RandomValue[time.Time](0)
	obj.SetStartDate(val)
	val = obj.StartDate()
	assert.Zero(t, val.Minute()) // make sure minute part is zero'd
	assert.Zero(t, val.Hour())   // make sure hour part is zero'd
	assert.Zero(t, val.Second()) // make sure second part is zero'd
	assert.False(t, obj.StartDateIsNull())

	// Test NULL
	obj.SetStartDateToNull()
	assert.EqualValues(t, time.Time{}, obj.StartDate())
	assert.True(t, obj.StartDateIsNull())

	// test default
	obj.SetStartDate(time.Time{})
	assert.EqualValues(t, time.Time{}, obj.StartDate(), "set default")

}
func TestProject_SetEndDate(t *testing.T) {

	obj := NewProject()
	val := test.RandomValue[time.Time](0)
	obj.SetEndDate(val)
	val = obj.EndDate()
	assert.Zero(t, val.Minute()) // make sure minute part is zero'd
	assert.Zero(t, val.Hour())   // make sure hour part is zero'd
	assert.Zero(t, val.Second()) // make sure second part is zero'd
	assert.False(t, obj.EndDateIsNull())

	// Test NULL
	obj.SetEndDateToNull()
	assert.EqualValues(t, time.Time{}, obj.EndDate())
	assert.True(t, obj.EndDateIsNull())

	// test default
	obj.SetEndDate(time.Time{})
	assert.EqualValues(t, time.Time{}, obj.EndDate(), "set default")

}
func TestProject_SetBudget(t *testing.T) {

	obj := NewProject()
	val := test.RandomValue[[]byte](15)
	obj.SetBudget(val)
	assert.Equal(t, val, obj.Budget())
	assert.False(t, obj.BudgetIsNull())

	// Test NULL
	obj.SetBudgetToNull()
	assert.EqualValues(t, []byte{}, obj.Budget())
	assert.True(t, obj.BudgetIsNull())

	// test default
	obj.SetBudget([]byte{})
	assert.EqualValues(t, []byte{}, obj.Budget(), "set default")

	// test panic on setting value larger than maximum size allowed
	val = test.RandomValue[[]byte](16)
	assert.Panics(t, func() {
		obj.SetBudget(val)
	})
}
func TestProject_SetSpent(t *testing.T) {

	obj := NewProject()
	val := test.RandomValue[[]byte](15)
	obj.SetSpent(val)
	assert.Equal(t, val, obj.Spent())
	assert.False(t, obj.SpentIsNull())

	// Test NULL
	obj.SetSpentToNull()
	assert.EqualValues(t, []byte{}, obj.Spent())
	assert.True(t, obj.SpentIsNull())

	// test default
	obj.SetSpent([]byte{})
	assert.EqualValues(t, []byte{}, obj.Spent(), "set default")

	// test panic on setting value larger than maximum size allowed
	val = test.RandomValue[[]byte](16)
	assert.Panics(t, func() {
		obj.SetSpent(val)
	})
}
func TestProject_SetParentProjectID(t *testing.T) {

	obj := NewProject()
	val := test.RandomValue[string](0)
	obj.SetParentProjectID(val)
	assert.Equal(t, val, obj.ParentProjectID())
	assert.False(t, obj.ParentProjectIDIsNull())

	// Test NULL
	obj.SetParentProjectIDToNull()
	assert.EqualValues(t, "", obj.ParentProjectID())
	assert.True(t, obj.ParentProjectIDIsNull())

	// test default
	obj.SetParentProjectID("")
	assert.EqualValues(t, "", obj.ParentProjectID(), "set default")

}

// createMinimalSampleProject creates an unsaved minimal version of a Project object
// for testing.
func createMinimalSampleProject() *Project {
	obj := NewProject()

	obj.SetNum(test.RandomValue[int](32))

	obj.SetStatus(test.RandomEnum(ProjectStatuses()))

	obj.SetName(test.RandomValue[string](100))

	obj.SetDescription(test.RandomValue[string](65535))

	obj.SetStartDate(test.RandomValue[time.Time](0))

	obj.SetEndDate(test.RandomValue[time.Time](0))

	return obj
}

// createMaximalSampleProject creates an unsaved version of a Project object
// for testing that includes references to minimal objects.
func createMaximalSampleProject() *Project {
	obj := createMinimalSampleProject()

	obj.SetManager(createMinimalSamplePerson())

	obj.SetParentProject(createMinimalSampleProject())

	obj.SetMilestones(createMinimalSampleMilestone())
	obj.SetParentProjectProjects(createMinimalSampleProject())
	obj.SetChildren(createMinimalSampleProject())
	obj.SetParents(createMinimalSampleProject())
	obj.SetTeamMembers(createMinimalSamplePerson())
	return obj
}
