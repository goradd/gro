// Code generated by goradd-orm. DO NOT EDIT.

package goradd

import (
	"testing"

	strings2 "github.com/goradd/strings"
	"github.com/stretchr/testify/assert"
)

func TestProject_SetName(t *testing.T) {
	obj := NewProject()

	name := strings2.RandomString(strings2.AlphaAll, 10)
	obj.SetName(name)
	assert.Equal(t, name, obj.Name())

	obj.SetName("")
	assert.Equal(t, "", obj.Name(), "set empty")

}
func TestProject_SetDescription(t *testing.T) {
	obj := NewProject()

	description := strings2.RandomString(strings2.AlphaAll, 10)
	obj.SetDescription(description)
	assert.Equal(t, description, obj.Description())
	assert.False(t, obj.DescriptionIsNull())

	obj.SetDescription(nil)
	assert.True(t, obj.DescriptionIsNull())

	obj.SetDescription("")
	assert.Equal(t, "", obj.Description(), "set empty")
	assert.False(t, obj.DescriptionIsNull())

}
func TestProject_SetBudget(t *testing.T) {
	obj := NewProject()

	budget := strings2.RandomString(strings2.AlphaAll, 10)
	obj.SetBudget(budget)
	assert.Equal(t, budget, obj.Budget())
	assert.False(t, obj.BudgetIsNull())

	obj.SetBudget(nil)
	assert.True(t, obj.BudgetIsNull())

	obj.SetBudget("")
	assert.Equal(t, "", obj.Budget(), "set empty")
	assert.False(t, obj.BudgetIsNull())

}
func TestProject_SetSpent(t *testing.T) {
	obj := NewProject()

	spent := strings2.RandomString(strings2.AlphaAll, 10)
	obj.SetSpent(spent)
	assert.Equal(t, spent, obj.Spent())
	assert.False(t, obj.SpentIsNull())

	obj.SetSpent(nil)
	assert.True(t, obj.SpentIsNull())

	obj.SetSpent("")
	assert.Equal(t, "", obj.Spent(), "set empty")
	assert.False(t, obj.SpentIsNull())

}
