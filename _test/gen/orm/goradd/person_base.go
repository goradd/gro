// Code generated by goradd-orm. DO NOT EDIT.

package goradd

import (
	"bytes"
	"context"
	"encoding/gob"
	"encoding/json"
	"fmt"
	"unicode/utf8"

	"github.com/goradd/all"
	"github.com/goradd/maps"
	"github.com/goradd/orm/_test/gen/orm/goradd/node"
	"github.com/goradd/orm/pkg/broadcast"
	"github.com/goradd/orm/pkg/db"
	"github.com/goradd/orm/pkg/op"
	"github.com/goradd/orm/pkg/query"
)

// PersonBase is embedded in a Person object and provides the ORM access to the database.
// The member variables of the structure are private and should not normally be accessed by the Person embedder.
// Instead, use the accessor functions.
type personBase struct {
	id        string
	idIsValid bool
	idIsDirty bool

	firstName        string
	firstNameIsValid bool
	firstNameIsDirty bool

	lastName        string
	lastNameIsValid bool
	lastNameIsDirty bool

	types        PersonTypeSet
	typesIsValid bool
	typesIsDirty bool

	// Reverse reference objects.

	revAddresses        maps.SliceMap[string, *Address] // Objects in the order they were queried
	revAddressesPks     []string                        // Primary keys to associate at Save time
	revAddressesIsDirty bool

	revEmployeeInfo        *EmployeeInfo
	revEmployeeInfoIsDirty bool
	revEmployeeInfoPk      *string // Primary key to associate at Save time

	revLogin        *Login
	revLoginIsDirty bool
	revLoginPk      *string // Primary key to associate at Save time

	revManagerProjects        maps.SliceMap[string, *Project] // Objects in the order they were queried
	revManagerProjectsPks     []string                        // Primary keys to associate at Save time
	revManagerProjectsIsDirty bool

	// Many-Many reference objects.
	mmProjects        maps.SliceMap[string, *Project]
	mmProjectsPks     []string // Primary keys to associate at Save time
	mmProjectsIsDirty bool

	// Custom aliases, if specified
	_aliases map[string]any

	// Indicates whether this is a new object, or one loaded from the database. Used by Save to know whether to Insert or Update.
	_restored bool

	_originalPK string
}

// IDs used to access the Person object fields by name using the Get function.
// doc: type=Person
const (
	Person_ID        = `ID`
	Person_FirstName = `FirstName`
	Person_LastName  = `LastName`
	Person_Types     = `Types`

	PersonAddresses       = `Addresses`
	PersonEmployeeInfo    = `EmployeeInfo`
	PersonLogin           = `Login`
	PersonManagerProjects = `ManagerProjects`

	PersonProject  = `Project`
	PersonProjects = `Projects`
)

const PersonFirstNameMaxLength = 50 // The number of runes the column can hold
const PersonLastNameMaxLength = 50  // The number of runes the column can hold
const PersonTypesMaxLength = 40     // The number of runes the column can hold

// Initialize or re-initialize a Person database object to default values.
// The primary key will get a temporary negative number which will be replaced when the object is saved.
// Multiple calls to Initialize are not guaranteed to create sequential values for the primary key.
func (o *personBase) Initialize() {

	newObjectPkCounter = newObjectPkCounter - 1
	o.id = fmt.Sprintf("%d", newObjectPkCounter)

	o.idIsValid = false
	o.idIsDirty = false

	o.firstName = ""

	o.firstNameIsValid = false
	o.firstNameIsDirty = false

	o.lastName = ""

	o.lastNameIsValid = false
	o.lastNameIsDirty = false

	o.types = PersonTypeSet{}

	o.typesIsValid = false
	o.typesIsDirty = false

	o._restored = false
}

// PrimaryKey returns the current value of the primary key field.
func (o *personBase) PrimaryKey() string {
	return o.id
}

// OriginalPrimaryKey returns the value of the primary key that was originally loaded into the object when it was
// read from the database.
func (o *personBase) OriginalPrimaryKey() string {
	return o._originalPK
}

// Copy copies all valid fields to a new Person object.
// Forward reference ids will be copied, but reverse and many-many references will not.
// Attached objects will not be included in the copy.
// Call Save() on the new object to save it into the database.
// Copy might panic if any fields in the database were set to a size larger than the
// maximum size through a process that accessed the database outside of the ORM.
func (o *personBase) Copy() (newObject *Person) {
	newObject = NewPerson()
	if o.firstNameIsValid {
		newObject.SetFirstName(o.firstName)
	}
	if o.lastNameIsValid {
		newObject.SetLastName(o.lastName)
	}
	if o.typesIsValid {
		newObject.SetTypes(o.types)
	}
	return
}

// ID returns the loaded value of ID or
// the zero value if not loaded. Call IDIsValid() to determine
// if it is loaded.
func (o *personBase) ID() string {
	return fmt.Sprint(o.id)
}

// IDIsValid returns true if the value was loaded from the database or has been set.
func (o *personBase) IDIsValid() bool {
	return o._restored && o.idIsValid
}

// FirstName returns the loaded value of FirstName.
func (o *personBase) FirstName() string {
	if o._restored && !o.firstNameIsValid {
		panic("FirstName was not selected in the last query and has not been set, and so is not valid")
	}
	return o.firstName
}

// FirstNameIsValid returns true if the value was loaded from the database or has been set.
func (o *personBase) FirstNameIsValid() bool {
	return o.firstNameIsValid
}

// SetFirstName sets the value of FirstName in the object, to be saved later using the Save() function.
func (o *personBase) SetFirstName(firstName string) {
	o.firstNameIsValid = true
	if utf8.RuneCountInString(firstName) > PersonFirstNameMaxLength {
		panic("attempted to set Person.FirstName to a value larger than its maximum length in runes")
	}
	if o.firstName != firstName || !o._restored {
		o.firstName = firstName
		o.firstNameIsDirty = true
	}

}

// LastName returns the loaded value of LastName.
func (o *personBase) LastName() string {
	if o._restored && !o.lastNameIsValid {
		panic("LastName was not selected in the last query and has not been set, and so is not valid")
	}
	return o.lastName
}

// LastNameIsValid returns true if the value was loaded from the database or has been set.
func (o *personBase) LastNameIsValid() bool {
	return o.lastNameIsValid
}

// SetLastName sets the value of LastName in the object, to be saved later using the Save() function.
func (o *personBase) SetLastName(lastName string) {
	o.lastNameIsValid = true
	if utf8.RuneCountInString(lastName) > PersonLastNameMaxLength {
		panic("attempted to set Person.LastName to a value larger than its maximum length in runes")
	}
	if o.lastName != lastName || !o._restored {
		o.lastName = lastName
		o.lastNameIsDirty = true
	}

}

// Types returns the loaded value of Types.
func (o *personBase) Types() PersonTypeSet {
	if o._restored && !o.typesIsValid {
		panic("Types was not selected in the last query and has not been set, and so is not valid")
	}
	return o.types
}

// TypesIsValid returns true if the value was loaded from the database or has been set.
func (o *personBase) TypesIsValid() bool {
	return o.typesIsValid
}

// SetTypes sets the value of Types in the object, to be saved later using the Save() function.
func (o *personBase) SetTypes(types PersonTypeSet) {
	o.typesIsValid = true
	if !o.types.Equal(&types) ||
		!o._restored {
		o.types = types
		o.typesIsDirty = true
	}

}

// GetAlias returns the alias for the given key.
func (o *personBase) GetAlias(key string) query.AliasValue {
	if a, ok := o._aliases[key]; ok {
		return query.NewAliasValue(a)
	} else {
		panic("Alias " + key + " not found.")
	}
}

// IsNew returns true if the object will create a new record when saved.
func (o *personBase) IsNew() bool {
	return !o._restored
}

// Project returns a single Project object by primary key pk, if one was loaded.
// Otherwise, it will return nil.
func (o *personBase) Project(pk string) *Project {
	return o.mmProjects.Get(pk)
}

// Projects returns a slice of Project objects if loaded. If not loaded, will return nil.
// The values will be ordered by the latest query or in the order they were assigned.
func (o *personBase) Projects() []*Project {
	return o.mmProjects.Values()
}

// SetProjects sets the associated objects to the given slice of Project objects
// in preparation for saving. The associations will not be updated until Save() is called.
// Objects that are modified or are new will be saved before completing the association.
func (o *personBase) SetProjects(objs []*Project) {
	o.mmProjects.Clear()
	o.mmProjectsIsDirty = true
	o.mmProjectsPks = nil
	for _, obj := range objs {
		o.mmProjects.Set(obj.PrimaryKey(), obj)
	}
}

// SetProjectsByID prepares to associate Project objects by
// the primary keys in ids.
// If objects are currently loaded, they will be unloaded.
// The association does not take place until Save() is called. Calling Load before calling
// Save will load the items that will be associated in the database after the Save call.
// After calling Save, the objects will be unloaded, and you must call Load again if you want
// them loaded.
func (o *personBase) SetProjectsByID(ids []string) {
	o.mmProjects.Clear()
	o.mmProjectsPks = ids
	o.mmProjectsIsDirty = true
}

// LoadProjects loads the Project objects associated through the Project-TeamMember relationship.
func (o *personBase) LoadProjects(ctx context.Context) []*Project {
	if o.mmProjectsIsDirty && o.mmProjectsPks == nil {
		panic("dirty many-many relationships cannot be loaded; call Save() first")
	}

	var objs []*Project

	if o.mmProjectsPks != nil {
		// Load the objects that will be associated after a Save
		objs = QueryProjects(ctx).
			Where(op.In(node.Project().PrimaryKeyNode(), o.mmProjectsPks...)).
			Load()
	} else {
		objs = QueryProjects(ctx).
			Where(op.Equal(node.Project().TeamMembers(), o.PrimaryKey())).
			Load()
	}

	o.mmProjects.Clear()
	for _, obj := range objs {
		o.mmProjects.Set(obj.PrimaryKey(), obj)
	}
	return o.mmProjects.Values()
}

// CountProjects counts the number of associated mmProjects objects in the database.
// Note that this returns what is reflected by the database at that instant, and not what
// is the count of the loaded objects.
func (o *personBase) CountProjects(ctx context.Context) int {
	return int(QueryProjects(ctx).
		Where(op.Equal(node.Project().TeamMembers(), o.PrimaryKey())).
		Count(false))

}

// Address returns a single Address object by primary key, if one was loaded.
// Otherwise, it will return nil. It will not return Address objects that are not saved.
func (o *personBase) Address(pk string) *Address {
	v := o.revAddresses.Get(pk)
	return v
}

// Addresses returns a slice of Address objects if loaded.
func (o *personBase) Addresses() []*Address {
	return o.revAddresses.Values()
}

// LoadAddresses loads a new slice of Address objects and returns it.
func (o *personBase) LoadAddresses(ctx context.Context, conditions ...interface{}) []*Address {
	if o.IsNew() {
		return nil
	}
	for obj := range o.revAddresses.ValuesIter() {
		if obj.IsDirty() {
			panic("You cannot load over items that have changed but have not been saved.")
		}
	}

	qb := queryAddresses(ctx)
	var cond *query.OperationNode
	if o.revAddressesPks != nil {
		cond = op.In(node.Address().PrimaryKeyNode(), o.revAddressesPks...)
	} else {
		cond = op.Equal(node.Address().PersonID(), o.PrimaryKey())
	}
	if conditions != nil {
		conditions = append(conditions, cond)
		cond = op.And(conditions...)
	}

	objs := qb.Where(cond).Load()
	o.revAddresses.Clear()

	for _, obj := range objs {
		pk := obj.ID()
		o.revAddresses.Set(pk, obj)
	}
	o.revAddressesPks = nil

	if o.revAddresses.Len() == 0 {
		return nil
	}
	return o.revAddresses.Values()
}

// CountAddresses returns the number of Address objects in the database connected to this object.
func (o *personBase) CountAddresses(ctx context.Context) int {
	return CountAddressByPersonID(ctx, o.PrimaryKey())
}

// SetAddresses associates the objects in objs with the Person.
// WARNING! If it has items already associated with it that will not be associated after a save,
// Save will panic. Be sure to delete those items or otherwise fix those pointers before calling save.
func (o *personBase) SetAddresses(objs []*Address) {
	for obj := range o.revAddresses.ValuesIter() {
		if obj.IsDirty() {
			panic("You cannot overwrite items that have changed but have not been saved.")
		}
	}

	o.revAddresses.Clear()
	for _, obj := range objs {
		pk := obj.ID()
		o.revAddresses.Set(pk, obj)
	}
	o.revAddressesPks = nil
	o.revAddressesIsDirty = true
}

// SetAddressesByID associates this Person with the Addresses that have primary keys in ids.
// The association is done through the Address.PersonID reverse relationship.
//
// The association is temporary until you call Save().
//
// WARNING! If it has items already associated with it that will not be associated after a save,
// Save will panic. You should delete those items first.
func (o *personBase) SetAddressesByID(ids []string) {
	for obj := range o.revAddresses.ValuesIter() {
		if obj.IsDirty() {
			panic("You cannot overwrite items that have changed but have not been saved.")
		}
	}

	o.revAddresses.Clear()
	o.revAddressesPks = ids
	o.revAddressesIsDirty = true
}

// EmployeeInfo returns the connected EmployeeInfo object, if one was loaded.
// Otherwise, it will return nil.
func (o *personBase) EmployeeInfo() *EmployeeInfo {
	if o.revEmployeeInfo == nil {
		return nil
	}
	return o.revEmployeeInfo
}

// LoadEmployeeInfo returns the connected EmployeeInfo object, if one was loaded.
// Otherwise, it will load a new one and return it.
func (o *personBase) LoadEmployeeInfo(ctx context.Context) *EmployeeInfo {
	if o.revEmployeeInfo != nil && o.revEmployeeInfo.IsDirty() {
		panic("The EmployeeInfo has changed. You must save it first before changing to a different one.")
	}
	if o.revEmployeeInfo == nil {
		var pk string
		if o.revEmployeeInfoPk != nil {
			pk = *o.revEmployeeInfoPk
		} else {
			pk = o.ID()
		}
		o.revEmployeeInfo = LoadEmployeeInfoByPersonID(ctx, pk)
	}
	return o.revEmployeeInfo
}

// SetEmployeeInfo associates obj with this Person
// through the reverse relationship in EmployeeInfo.PersonID.
//
// The association is temporary until you call Save().
// WARNING! Since this is a non-nullable unique relationship,
// if a different EmployeeInfo object is currently pointing to this Person,
// Save() will panic. You should delete that object first.
func (o *personBase) SetEmployeeInfo(obj *EmployeeInfo) {
	if o.revEmployeeInfo != nil && o.revEmployeeInfo.IsDirty() {
		panic("The EmployeeInfo has changed. You must save it first before changing to a different one.")
	}
	o.revEmployeeInfo = obj
	o.revEmployeeInfoPk = nil
	o.revEmployeeInfoIsDirty = true
}

// SetEmployeeInfoByID
// associates this Person with the EmployeeInfo
// that has primary key ids.
//
// The association is temporary until you call Save().
// If a EmployeeInfo is loaded, it will be unloaded.
//
// WARNING! Since this is a non-nullable unique relationship,
// if a different EmployeeInfo object is currently pointing to this Person,
// Save() will panic. You should delete that object first.
func (o *personBase) SetEmployeeInfoByID(id string) {
	if o.revEmployeeInfo != nil && o.revEmployeeInfo.IsDirty() {
		panic("The PersonID value has changed. You must save it first before changing to a different one.")
	}
	o.revEmployeeInfo = nil
	o.revEmployeeInfoIsDirty = true
	o.revEmployeeInfoPk = &id
}

// Login returns the connected Login object, if one was loaded.
// Otherwise, it will return nil.
func (o *personBase) Login() *Login {
	if o.revLogin == nil {
		return nil
	}
	return o.revLogin
}

// LoadLogin returns the connected Login object, if one was loaded.
// Otherwise, it will load a new one and return it.
func (o *personBase) LoadLogin(ctx context.Context) *Login {
	if o.revLogin != nil && o.revLogin.IsDirty() {
		panic("The Login has changed. You must save it first before changing to a different one.")
	}
	if o.revLogin == nil {
		var pk string
		if o.revLoginPk != nil {
			pk = *o.revLoginPk
		} else {
			pk = o.ID()
		}
		o.revLogin = LoadLoginByPersonID(ctx, pk)
	}
	return o.revLogin
}

// SetLogin associates obj with this Person
// through the reverse relationship in Login.PersonID.
//
// The association is temporary until you call Save().
// Since this is a unique relationship, if a different Login object is currently pointing to this Person,
// that Login's PersonID value will be set to null when Save is called.
// If you did not use a join to query the attached Login in the first place, used a conditional join,
// or joined with an expansion, be particularly careful, since you may be inadvertently  changing an item
// that is not currently attached to this Person.
func (o *personBase) SetLogin(obj *Login) {
	if o.revLogin != nil && o.revLogin.IsDirty() {
		panic("The Login has changed. You must save it first before changing to a different one.")
	}
	o.revLogin = obj
	o.revLoginPk = nil
	o.revLoginIsDirty = true
}

// SetLoginByID
// associates this Person with the Login
// that has primary key ids.
//
// The association is temporary until you call Save().
// If a Login is loaded, it will be unloaded.
//
// Since this is a unique relationship, if a different Login object is currently pointing to this Person,
// that Login's PersonID value will be set to null when Save is called.
// If you did not use a join to query the attached Login in the first place, used a conditional join,
// or joined with an expansion, be particularly careful, since you may be inadvertently  changing an item
// that is not currently loaded in this Person.
func (o *personBase) SetLoginByID(id string) {
	if o.revLogin != nil && o.revLogin.IsDirty() {
		panic("The PersonID value has changed. You must save it first before changing to a different one.")
	}
	o.revLogin = nil
	o.revLoginIsDirty = true
	o.revLoginPk = &id
}

// ManagerProject returns a single Project object by primary key, if one was loaded.
// Otherwise, it will return nil. It will not return Project objects that are not saved.
func (o *personBase) ManagerProject(pk string) *Project {
	v := o.revManagerProjects.Get(pk)
	return v
}

// ManagerProjects returns a slice of Project objects if loaded.
func (o *personBase) ManagerProjects() []*Project {
	return o.revManagerProjects.Values()
}

// LoadManagerProjects loads a new slice of Project objects and returns it.
func (o *personBase) LoadManagerProjects(ctx context.Context, conditions ...interface{}) []*Project {
	if o.IsNew() {
		return nil
	}
	for obj := range o.revManagerProjects.ValuesIter() {
		if obj.IsDirty() {
			panic("You cannot load over items that have changed but have not been saved.")
		}
	}

	qb := queryProjects(ctx)
	var cond *query.OperationNode
	if o.revManagerProjectsPks != nil {
		cond = op.In(node.Project().PrimaryKeyNode(), o.revManagerProjectsPks...)
	} else {
		cond = op.Equal(node.Project().ManagerID(), o.PrimaryKey())
	}
	if conditions != nil {
		conditions = append(conditions, cond)
		cond = op.And(conditions...)
	}

	objs := qb.Where(cond).Load()
	o.revManagerProjects.Clear()

	for _, obj := range objs {
		pk := obj.ID()
		o.revManagerProjects.Set(pk, obj)
	}
	o.revManagerProjectsPks = nil

	if o.revManagerProjects.Len() == 0 {
		return nil
	}
	return o.revManagerProjects.Values()
}

// CountManagerProjects returns the number of Project objects in the database connected to this object.
func (o *personBase) CountManagerProjects(ctx context.Context) int {
	return CountProjectByManagerID(ctx, o.PrimaryKey())
}

// SetManagerProjects associates the objects in objs with the Person.
// If it has items already associated with it that will not be associated after a save,
// the foreign keys for those items will be set to null.
// If you did not use a join to query the items in the first place, used a conditional join,
// or joined with an expansion, be particularly careful, since you may be changing items
// that are not currently attached to this Person.
func (o *personBase) SetManagerProjects(objs []*Project) {
	for obj := range o.revManagerProjects.ValuesIter() {
		if obj.IsDirty() {
			panic("You cannot overwrite items that have changed but have not been saved.")
		}
	}

	o.revManagerProjects.Clear()
	for _, obj := range objs {
		pk := obj.ID()
		o.revManagerProjects.Set(pk, obj)
	}
	o.revManagerProjectsPks = nil
	o.revManagerProjectsIsDirty = true
}

// SetManagerProjectsByID associates this Person with the Projects that have primary keys in ids.
// The association is done through the Project.ManagerID reverse relationship.
//
// The association is temporary until you call Save().
//
// If there are Project objects currently associated with this Person that are not included
// in ids, those objects will have their ManagerID value set to null when Save is called.
// If you did not use a join to query the items in the first place, used a conditional join,
// or joined with an expansion, be particularly careful, since you may be inadvertently changing items
// that are not currently loaded in this Person object.
func (o *personBase) SetManagerProjectsByID(ids []string) {
	for obj := range o.revManagerProjects.ValuesIter() {
		if obj.IsDirty() {
			panic("You cannot overwrite items that have changed but have not been saved.")
		}
	}

	o.revManagerProjects.Clear()
	o.revManagerProjectsPks = ids
	o.revManagerProjectsIsDirty = true
}

// LoadPerson returns a Person from the database.
// joinOrSelectNodes lets you provide nodes for joining to other tables or selecting specific fields.
// Table nodes will be considered Join nodes, and column nodes will be Select nodes.
// See [PersonBuilder.Join] and [PeopleBuilder.Select] for more info.
func LoadPerson(ctx context.Context, id string, joinOrSelectNodes ...query.Node) *Person {
	return queryPeople(ctx).
		Where(op.Equal(node.Person().ID(), id)).
		joinOrSelect(joinOrSelectNodes...).
		Get()
}

// HasPerson returns true if a Person with the given primaryKey exists in the database.
// doc: type=Person
func HasPerson(ctx context.Context, id string) bool {
	return queryPeople(ctx).
		Where(op.Equal(node.Person().ID(), id)).
		Count(false) == 1
}

// The PersonBuilder uses the query.BuilderI interface to build a query.
// All query operations go through this query builder.
// End a query by calling either Load, LoadCursor, Get, Count, or Delete
type PersonBuilder interface {
	// Join adds node n to the node tree so that its fields will appear in the query.
	// Optionally add conditions to filter what gets included. Multiple conditions are anded.
	Join(n query.Node, conditions ...query.Node) PersonBuilder

	// Where adds a condition to filter what gets selected.
	// Calling Where multiple times will AND the conditions together.
	Where(c query.Node) PersonBuilder

	// OrderBy specifies how the resulting data should be sorted.
	// By default, the given nodes are sorted in ascending order.
	// Add Descending() to the node to specify that it should be sorted in descending order.
	OrderBy(nodes ...query.Sorter) PersonBuilder

	// Limit will return a subset of the data, limited to the offset and number of rows specified.
	// For large data sets and specific types of queries, this can be slow, because it will perform
	// the entire query before computing the limit.
	// You cannot limit a query that has embedded arrays.
	Limit(maxRowCount int, offset int) PersonBuilder

	// Select optimizes the query to only return the specified fields.
	// Once you put a Select in your query, you must specify all the fields that you will eventually read out.
	// Some fields, like primary keys, are always selected.
	// If you are using a GroupBy, most database drivers will only allow selecting on fields in the GroupBy, and
	// doing otherwise will result in an error.
	Select(nodes ...query.Node) PersonBuilder

	// Calculation adds a calculation node with an aliased name.
	// After the query, you can read the data using GetAlias() on a returned object.
	Calculation(name string, n query.Aliaser) PersonBuilder

	// Distinct removes duplicates from the results of the query.
	// Adding a Select() is usually required.
	Distinct() PersonBuilder

	// GroupBy controls how results are grouped when using aggregate functions with Calculation.
	GroupBy(nodes ...query.Node) PersonBuilder

	// Having does additional filtering on the results of the query after the query is performed.
	Having(node query.Node) PersonBuilder

	// Load terminates the query builder, performs the query, and returns a slice of Person objects.
	// If there are any errors, nil is returned and the specific error is stored in the context.
	// If no results come back from the query, it will return a non-nil empty slice.
	Load() []*Person
	// Load terminates the query builder, performs the query, and returns a slice of interfaces.
	// This can then satisfy a general interface that loads arrays of objects.
	// If there are any errors, nil is returned and the specific error is stored in the context.
	// If no results come back from the query, it will return a non-nil empty slice.
	LoadI() []any

	// LoadCursor terminates the query builder, performs the query, and returns a cursor to the query.
	//
	// A query cursor is useful for dealing with large amounts of query results. However, there are some
	// limitations to its use. When working with SQL databases, you cannot use a cursor while querying
	// many-to-many or reverse relationships that will create an array of values.
	//
	// Call Next() on the returned cursor object to step through the results. Make sure you call Close
	// on the cursor object when you are done. You should use
	//   defer cursor.Close()
	// to make sure the cursor gets closed.
	LoadCursor() peopleCursor

	// Get is a convenience method to return only the first item found in a query.
	// The entire query is performed, so you should generally use this only if you know
	// you are selecting on one or very few items.
	//
	// If an error occurs, or no results are found, a nil is returned.
	// In the case of an error, the error is returned in the context.
	Get() *Person

	// Count terminates a query and returns just the number of items selected.
	// distinct wll count the number of distinct items, ignoring duplicates.
	// nodes will select individual fields, and should be accompanied by a GroupBy.
	Count(distinct bool, nodes ...query.Node) int

	// Delete uses the query builder to delete a group of records that match the criteria
	Delete()

	// Subquery terminates the query builder and tags it as a subquery within a larger query.
	// You MUST include what you are selecting by adding Calculation or Select functions on the subquery builder.
	// Generally you would use this as a node to a Calculation function on the surrounding query builder.
	Subquery() *query.SubqueryNode

	joinOrSelect(nodes ...query.Node) PersonBuilder
}

type personQueryBuilder struct {
	builder *query.Builder
}

func newPersonBuilder(ctx context.Context) PersonBuilder {
	b := personQueryBuilder{
		builder: query.NewBuilder(ctx),
	}
	return b.Join(node.Person()) // seed builder with the top table
}

// Load terminates the query builder, performs the query, and returns a slice of Person objects.
// If there are any errors, nil is returned and the specific error is stored in the context.
// If no results come back from the query, it will return a non-nil empty slice.
func (b *personQueryBuilder) Load() (people []*Person) {
	b.builder.Command = query.BuilderCommandLoad
	database := db.GetDatabase("goradd")
	results := database.BuilderQuery(b.builder.Ctx, b.builder)
	if results == nil {
		return
	}
	for _, item := range results.([]map[string]any) {
		o := new(Person)
		o.load(item, o, nil, "")
		people = append(people, o)
	}
	return
}

// Load terminates the query builder, performs the query, and returns a slice of interfaces.
// This can then satisfy a general interface that loads arrays of objects.
// If there are any errors, nil is returned and the specific error is stored in the context.
// If no results come back from the query, it will return a non-nil empty slice.
func (b *personQueryBuilder) LoadI() (people []any) {
	b.builder.Command = query.BuilderCommandLoad
	database := db.GetDatabase("goradd")
	results := database.BuilderQuery(b.builder.Ctx, b.builder)
	if results == nil {
		return
	}
	for _, item := range results.([]map[string]any) {
		o := new(Person)
		o.load(item, o, nil, "")
		people = append(people, o)
	}
	return
}

// LoadCursor terminates the query builder, performs the query, and returns a cursor to the query.
//
// A query cursor is useful for dealing with large amounts of query results. However, there are some
// limitations to its use. When working with SQL databases, you cannot use a cursor while querying
// many-to-many or reverse relationships that will create an array of values.
//
// Call Next() on the returned cursor object to step through the results. Make sure you call Close
// on the cursor object when you are done. You should use
//
//	defer cursor.Close()
//
// to make sure the cursor gets closed.
func (b *personQueryBuilder) LoadCursor() peopleCursor {
	b.builder.Command = query.BuilderCommandLoadCursor
	database := db.GetDatabase("goradd")
	result := database.BuilderQuery(b.builder.Ctx, b.builder)
	if result == nil {
		return peopleCursor{}
	}
	cursor := result.(query.CursorI)

	return peopleCursor{cursor}
}

type peopleCursor struct {
	query.CursorI
}

// Next returns the current Person object and moves the cursor to the next one.
//
// If there are no more records, it returns nil.
func (c peopleCursor) Next() *Person {
	if c.CursorI == nil {
		return nil
	}

	row := c.CursorI.Next()
	if row == nil {
		return nil
	}
	o := new(Person)
	o.load(row, o, nil, "")
	return o
}

// Get is a convenience method to return only the first item found in a query.
// The entire query is performed, so you should generally use this only if you know
// you are selecting on one or very few items.
//
// If an error occurs, or no results are found, a nil is returned.
// In the case of an error, the error is returned in the context.
func (b *personQueryBuilder) Get() *Person {
	results := b.Load()
	if results != nil && len(results) > 0 {
		obj := results[0]
		return obj
	} else {
		return nil
	}
}

// Join adds node n to the node tree so that its fields will appear in the query.
// Optionally add conditions to filter what gets included. Multiple conditions are anded.
func (b *personQueryBuilder) Join(n query.Node, conditions ...query.Node) PersonBuilder {
	if query.RootNode(n).TableName_() != "person" {
		panic("you can only join a node that is rooted at node.Person()")
	}

	var condition query.Node
	if len(conditions) > 1 {
		condition = op.And(conditions)
	} else if len(conditions) == 1 {
		condition = conditions[0]
	}
	b.builder.Join(n, condition)
	return b
}

// Where adds a condition to filter what gets selected.
// Calling Where multiple times will AND the conditions together.
func (b *personQueryBuilder) Where(c query.Node) PersonBuilder {
	b.builder.Where(c)
	return b
}

// OrderBy specifies how the resulting data should be sorted.
// By default, the given nodes are sorted in ascending order.
// Add Descending() to the node to specify that it should be sorted in descending order.
func (b *personQueryBuilder) OrderBy(nodes ...query.Sorter) PersonBuilder {
	b.builder.OrderBy(nodes...)
	return b
}

// Limit will return a subset of the data, limited to the offset and number of rows specified.
// For large data sets and specific types of queries, this can be slow, because it will perform
// the entire query before computing the limit.
// You cannot limit a query that has embedded arrays.
func (b *personQueryBuilder) Limit(maxRowCount int, offset int) PersonBuilder {
	b.builder.Limit(maxRowCount, offset)
	return b
}

// Select optimizes the query to only return the specified fields.
// Once you put a Select in your query, you must specify all the fields that you will eventually read out.
func (b *personQueryBuilder) Select(nodes ...query.Node) PersonBuilder {
	b.builder.Select(nodes...)
	return b
}

// Calculation adds a calculation node with an aliased name.
// After the query, you can read the data using GetAlias() on a returned object.
func (b *personQueryBuilder) Calculation(name string, n query.Aliaser) PersonBuilder {
	b.builder.Calculation(name, n)
	return b
}

// Distinct removes duplicates from the results of the query.
// Adding a Select() is usually required.
func (b *personQueryBuilder) Distinct() PersonBuilder {
	b.builder.Distinct()
	return b
}

// GroupBy controls how results are grouped when using aggregate functions with Calculation.
func (b *personQueryBuilder) GroupBy(nodes ...query.Node) PersonBuilder {
	b.builder.GroupBy(nodes...)
	return b
}

// Having does additional filtering on the results of the query after the query is performed.
func (b *personQueryBuilder) Having(node query.Node) PersonBuilder {
	b.builder.Having(node)
	return b
}

// Count terminates a query and returns just the number of items selected.
// distinct wll count the number of distinct items, ignoring duplicates.
// nodes will select individual fields, and should be accompanied by a GroupBy.
func (b *personQueryBuilder) Count(distinct bool, nodes ...query.Node) int {
	b.builder.Command = query.BuilderCommandCount
	if distinct {
		b.builder.Distinct()
	}
	database := db.GetDatabase("goradd")
	results := database.BuilderQuery(b.builder.Ctx, b.builder)
	if results == nil {
		return 0
	}
	return results.(int)
}

// Delete uses the query builder to delete a group of records that match the criteria
func (b *personQueryBuilder) Delete() {
	b.builder.Command = query.BuilderCommandDelete
	database := db.GetDatabase("goradd")
	database.BuilderQuery(b.builder.Ctx, b.builder)
	broadcast.BulkChange(b.builder.Context(), "goradd", "person")
}

// Subquery terminates the query builder and tags it as a subquery within a larger query.
// You MUST include what you are selecting by adding Calculation or Select functions on the subquery builder.
// Generally you would use this as a node to a Calculation function on the surrounding query builder.
func (b *personQueryBuilder) Subquery() *query.SubqueryNode {
	return b.builder.Subquery()
}

// joinOrSelect is a private helper function for the Load* functions
func (b *personQueryBuilder) joinOrSelect(nodes ...query.Node) PersonBuilder {
	for _, n := range nodes {
		switch n.(type) {
		case query.TableNodeI:
			b.builder.Join(n, nil)
		case *query.ColumnNode:
			b.Select(n)
		}
	}
	return b
}

// CountPersonByID queries the database and returns the number of Person objects that
// have id.
// doc: type=Person
func CountPersonByID(ctx context.Context, id string) int {
	return int(queryPeople(ctx).Where(op.Equal(node.Person().ID(), id)).Count(false))
}

// CountPersonByFirstName queries the database and returns the number of Person objects that
// have firstName.
// doc: type=Person
func CountPersonByFirstName(ctx context.Context, firstName string) int {
	return int(queryPeople(ctx).Where(op.Equal(node.Person().FirstName(), firstName)).Count(false))
}

// CountPersonByLastName queries the database and returns the number of Person objects that
// have lastName.
// doc: type=Person
func CountPersonByLastName(ctx context.Context, lastName string) int {
	return int(queryPeople(ctx).Where(op.Equal(node.Person().LastName(), lastName)).Count(false))
}

// load is the private loader that transforms data coming from the database into a tree structure reflecting the relationships
// between the object chain requested by the user in the query.
// Care must be taken in the query, as Select clauses might not be honored if the child object has fields selected which the parent object does not have.
func (o *personBase) load(m map[string]interface{}, objThis *Person, objParent interface{}, parentKey string) {

	if v, ok := m["id"]; ok && v != nil {
		if o.id, ok = v.(string); ok {
			o.idIsValid = true
			o.idIsDirty = false

			o._originalPK = o.id

		} else {
			panic("Wrong type found for id.")
		}
	} else {
		o.idIsValid = false
		o.id = ""
	}

	if v, ok := m["first_name"]; ok && v != nil {
		if o.firstName, ok = v.(string); ok {
			o.firstNameIsValid = true
			o.firstNameIsDirty = false

		} else {
			panic("Wrong type found for first_name.")
		}
	} else {
		o.firstNameIsValid = false
		o.firstName = ""
	}

	if v, ok := m["last_name"]; ok && v != nil {
		if o.lastName, ok = v.(string); ok {
			o.lastNameIsValid = true
			o.lastNameIsDirty = false

		} else {
			panic("Wrong type found for last_name.")
		}
	} else {
		o.lastNameIsValid = false
		o.lastName = ""
	}

	if v, ok := m["type_enum"]; ok && v != nil {
		if s, ok2 := v.(string); ok2 {
			var v PersonTypeSet
			if err := json.Unmarshal([]byte(s), &v); err != nil {
				panic("Value for type_enum is not valid json")
			}
			o.types = v
			o.typesIsValid = true
			o.typesIsDirty = false

		} else {
			panic("Wrong type found for type_enum.")
		}
	} else {
		o.typesIsValid = false
		o.types = PersonTypeSet{}
	}

	// Many-Many references

	if v, ok := m["Projects"]; ok {
		if v2, ok2 := v.([]db.ValueMap); ok2 {
			o.mmProjects.Clear()

			for _, v3 := range v2 {
				obj := new(Project)
				obj.load(v3, obj, objThis, "TeamMembers")
				o.mmProjects.Set(obj.PrimaryKey(), obj)
			}
			o.mmProjectsPks = nil
		} else {
			panic("Wrong type found for mmProjects object.")
		}
	} else {
		o.mmProjects.Clear()
		o.mmProjectsPks = nil
	}

	// Reverse references

	if v, ok := m["Addresses"]; ok {
		switch v2 := v.(type) {
		case []db.ValueMap: // array expansion
			o.revAddresses.Clear()
			o.revAddressesIsDirty = false
			for _, v3 := range v2 {
				obj := new(Address)
				obj.load(v3, obj, objThis, "Person")
				o.revAddresses.Set(obj.PrimaryKey(), obj)
			}
		case db.ValueMap: // single expansion
			obj := new(Address)
			obj.load(v2, obj, objThis, "Person")
			o.revAddresses.Clear()
			o.revAddresses.Set(obj.PrimaryKey(), obj)
			o.revAddressesIsDirty = false
		default:
			panic("Wrong type found for revAddresses object.")
		}
	} else {
		o.revAddresses.Clear()
		o.revAddressesIsDirty = false
	}

	if v, ok := m["EmployeeInfo"]; ok {
		if v2, ok2 := v.(db.ValueMap); ok2 {
			o.revEmployeeInfo = new(EmployeeInfo)
			o.revEmployeeInfo.load(v2, o.revEmployeeInfo, objThis, "Person")
			o.revEmployeeInfoIsDirty = false
		} else {
			panic("Wrong type found for personID object.")
		}
	} else {
		o.revEmployeeInfo = nil
		o.revEmployeeInfoIsDirty = false
	}

	if v, ok := m["Login"]; ok {
		if v2, ok2 := v.(db.ValueMap); ok2 {
			o.revLogin = new(Login)
			o.revLogin.load(v2, o.revLogin, objThis, "Person")
			o.revLoginIsDirty = false
		} else {
			panic("Wrong type found for personID object.")
		}
	} else {
		o.revLogin = nil
		o.revLoginIsDirty = false
	}

	if v, ok := m["ManagerProjects"]; ok {
		switch v2 := v.(type) {
		case []db.ValueMap: // array expansion
			o.revManagerProjects.Clear()
			o.revManagerProjectsIsDirty = false
			for _, v3 := range v2 {
				obj := new(Project)
				obj.load(v3, obj, objThis, "Manager")
				o.revManagerProjects.Set(obj.PrimaryKey(), obj)
			}
		case db.ValueMap: // single expansion
			obj := new(Project)
			obj.load(v2, obj, objThis, "Manager")
			o.revManagerProjects.Clear()
			o.revManagerProjects.Set(obj.PrimaryKey(), obj)
			o.revManagerProjectsIsDirty = false
		default:
			panic("Wrong type found for revManagerProjects object.")
		}
	} else {
		o.revManagerProjects.Clear()
		o.revManagerProjectsIsDirty = false
	}

	if v, ok := m["aliases_"]; ok {
		o._aliases = map[string]interface{}(v.(db.ValueMap))
	}

	o._restored = true

}

// Save will update or insert the object, depending on the state of the object.
// If it has any auto-generated ids, those will be updated.
func (o *personBase) Save(ctx context.Context) {
	if o._restored {
		o.update(ctx)
	} else {
		o.insert(ctx)
	}
}

// update will update the values in the database, saving any changed values.
func (o *personBase) update(ctx context.Context) {
	if !o._restored {
		panic("cannot update a record that was not originally read from the database.")
	}

	var modifiedFields map[string]interface{}
	d := Database()
	db.ExecuteTransaction(ctx, d, func() {

		// TODO: Perform all reads and consistency checks before saves

		// Save all modified fields to the database
		modifiedFields = o.getModifiedFields()
		if len(modifiedFields) != 0 {
			d.Update(ctx, "person", modifiedFields, map[string]any{"id": o._originalPK})
		}

		if o.revAddressesIsDirty {
			// relation connection changed

			// Since the other side of the relationship cannot be null, there cannot be objects that will be detached
			// TODO: Make this check earlier to lock the rows being changed

			objs := QueryAddresses(ctx).
				Where(op.Equal(node.Address().PersonID(), o.PrimaryKey())).
				Select(node.Address().PersonID()).
				Load()
			for _, obj := range objs {
				if !o.revAddresses.Has(obj.PrimaryKey()) {
					// The old object is not in the group of new objects
					panic("cannot remove a non-null reference. ")
				}
			}

			for obj := range o.revAddresses.ValuesIter() {
				obj.personIDIsDirty = true // force a change in case data is stale
				obj.SetPersonID(o.PrimaryKey())
				obj.Save(ctx)
			}

		} else {

			// save related objects
			for obj := range o.revAddresses.ValuesIter() {
				obj.Save(ctx)
			}

		}
		if o.revEmployeeInfoIsDirty {
			// relation connection changed

			// Since the other side of the relationship cannot be null, if there is an object already attached,
			// we panic.
			// TODO: return an error instead
			obj := QueryEmployeeInfos(ctx).
				Where(op.Equal(node.EmployeeInfo().PersonID(), o.PrimaryKey())).
				Get()
			if obj != nil && obj.PrimaryKey() != o.revEmployeeInfo.PrimaryKey() {
				panic("cannot set a unique non-null reference when another object is already set to it. Record " + obj.PrimaryKey() + " is pointing to " + o.PrimaryKey())
			}

		} else {

			// save related object
			if o.revEmployeeInfo != nil {
				o.revEmployeeInfo.Save(ctx)
			}

		}
		if o.revLoginIsDirty {
			// relation connection changed

			obj := QueryLogins(ctx).
				Where(op.Equal(node.Login().PersonID(), o.PrimaryKey())).
				Get()
			if obj != nil && obj.PrimaryKey() != o.revLogin.PrimaryKey() {
				obj.SetPersonID(nil)
				obj.Save(ctx)
			}
			if o.revLoginPk != nil {
				if o.revLogin != nil && o.revLogin.IsDirty() {
					// Save detached record
					o.revLogin.Save(ctx)
				}
				o.revLogin = LoadLogin(ctx, *o.revLoginPk, node.Login().PrimaryKeyNode())
			}
			o.revLogin.personIDIsDirty = true // force a change in case data is stale
			o.revLogin.SetPersonID(o.PrimaryKey())
			o.revLogin.Save(ctx)

		} else {

			// save related object
			if o.revLogin != nil {
				o.revLogin.Save(ctx)
			}

		}
		if o.revManagerProjectsIsDirty {
			// relation connection changed

			if o.revManagerProjectsPks != nil {
				// Get objects we are going to associate if not already loaded
				objs := QueryProjects(ctx).
					Where(op.In(node.Project().PrimaryKeyNode(), o.revManagerProjectsPks...)).
					Select(node.Project().ManagerID()).
					Load()
				_ = objs
				// TODO: save new group of objects
			}
			objs := QueryProjects(ctx).
				Where(op.Equal(node.Project().ManagerID(), o.PrimaryKey())).
				Select(node.Project().ManagerID()).
				Load()

			for _, obj := range objs {
				if !o.revManagerProjects.Has(obj.PrimaryKey()) {
					// The old object is not in the group of new objects
					obj.SetManagerID(nil)
					obj.Save(ctx)
				}
			}
			for obj := range o.revManagerProjects.ValuesIter() {
				obj.managerIDIsDirty = true // force a change in case data is stale
				obj.SetManagerID(o.PrimaryKey())
				obj.Save(ctx)
			}

		} else {

			// save related objects
			for obj := range o.revManagerProjects.ValuesIter() {
				obj.Save(ctx)
			}

		}

		if o.mmProjectsIsDirty {
			for obj := range o.mmProjects.ValuesIter() {
				obj.Save(ctx)
			}
			// TODO: fix associations
		}

	}) // transaction

	o.resetDirtyStatus()
	if len(modifiedFields) != 0 {
		broadcast.Update(ctx, "goradd", "person", o._originalPK, all.SortedKeys(modifiedFields)...)
	}
}

// insert will insert the object into the database. Related items will be saved.
func (o *personBase) insert(ctx context.Context) {
	d := Database()
	db.ExecuteTransaction(ctx, d, func() {

		if !o.firstNameIsValid {
			panic("a value for FirstName is required, and there is no default value. Call SetFirstName() before inserting the record.")
		}

		if !o.lastNameIsValid {
			panic("a value for LastName is required, and there is no default value. Call SetLastName() before inserting the record.")
		}

		if !o.typesIsValid {
			panic("a value for Types is required, and there is no default value. Call SetTypes() before inserting the record.")
		}

		m := o.getValidFields()

		id := d.Insert(ctx, "person", m)
		o.id = id
		o._originalPK = id

		o.revAddresses.Clear()
		for _, obj := range o.revAddresses.All() {
			obj.SetPersonID(id)
			obj.Save(ctx)
			o.revAddresses.Set(obj.PrimaryKey(), obj)
		}

		if o.revEmployeeInfo != nil {
			o.revEmployeeInfo.SetPersonID(id)
			o.revEmployeeInfo.Save(ctx)
		}

		if o.revLogin != nil {
			o.revLogin.SetPersonID(id)
			o.revLogin.Save(ctx)
		}

		o.revManagerProjects.Clear()
		for _, obj := range o.revManagerProjects.All() {
			obj.SetManagerID(id)
			obj.Save(ctx)
			o.revManagerProjects.Set(obj.PrimaryKey(), obj)
		}

		o.mmProjects.Clear()
		for _, obj := range o.mmProjects.All() {
			obj.Save(ctx)

		}

		// TODO: Fix associations

	}) // transaction

	o.resetDirtyStatus()
	o._restored = true
	broadcast.Insert(ctx, "goradd", "person", o.PrimaryKey())
}

// getModifiedFields returns the database columns that have been modified. This
// will determine which specific fields are sent to the database to be changed.
func (o *personBase) getModifiedFields() (fields map[string]interface{}) {
	fields = map[string]interface{}{}
	if o.idIsDirty {
		fields["id"] = o.id
	}
	if o.firstNameIsDirty {
		fields["first_name"] = o.firstName
	}
	if o.lastNameIsDirty {
		fields["last_name"] = o.lastName
	}
	if o.typesIsDirty {
		b, _ := json.Marshal(o.types)
		fields["type_enum"] = string(b)
	}
	return
}

// getValidFields returns the fields that have valid data in them in a form ready to send to the database.
func (o *personBase) getValidFields() (fields map[string]interface{}) {
	fields = map[string]interface{}{}
	if o.firstNameIsValid {
		fields["first_name"] = o.firstName
	}
	if o.lastNameIsValid {
		fields["last_name"] = o.lastName
	}
	if o.typesIsValid {
		b, _ := json.Marshal(o.types)
		fields["type_enum"] = string(b)
	}
	return
}

// Delete deletes the record from the database.
func (o *personBase) Delete(ctx context.Context) {
	if !o._restored {
		panic("Cannot delete a record that has no primary key value.")
	}
	d := Database()
	db.ExecuteTransaction(ctx, d, func() {

		{
			objs := QueryAddresses(ctx).
				Where(op.Equal(node.Address().PersonID(), o.id)).
				Load()
			for _, obj := range objs {
				obj.Delete(ctx)
			}
			o.revAddresses.Clear()
		}

		{
			obj := QueryEmployeeInfos(ctx).
				Where(op.Equal(node.EmployeeInfo().PersonID(), o.id)).
				Get()
			if obj != nil {
				obj.Delete(ctx)
			}
			// Set this object's pointer to the reverse object to nil to mark that we broke the link
			o.revEmployeeInfo = nil
		}

		{
			// Set the related objects pointer to us to NULL in the database
			obj := QueryLogins(ctx).
				Where(op.Equal(node.Login().PersonID(), o.id)).
				Select(node.Login().PersonID()).
				Get()
			if obj != nil {
				obj.SetPersonID(nil)
				obj.Save(ctx)
			}
			// Set this object's pointer to the reverse object to nil to mark that we broke the link
			o.revLogin = nil
		}

		{
			objs := QueryProjects(ctx).
				Where(op.Equal(node.Project().ManagerID(), o.id)).
				Select(node.Project().ManagerID()).
				Load()
			for _, obj := range objs {
				obj.SetManagerID(nil)
				obj.Save(ctx)
			}
			o.revManagerProjects.Clear()
		}

		db.AssociateOnly(ctx,
			d,
			"team_member_project_assn",
			"team_member_id",
			o.PrimaryKey(),
			"id",
			[]Project(nil))

		d.Delete(ctx, "person", map[string]any{"ID": o.id})
	})
	broadcast.Delete(ctx, "goradd", "person", fmt.Sprint(o.id))
}

// deletePerson deletes the associated record from the database.
func deletePerson(ctx context.Context, pk string) {
	if obj := LoadPerson(ctx, pk, node.Person().PrimaryKeyNode()); obj != nil {
		obj.Delete(ctx)
	}
}

// resetDirtyStatus resets the dirty status of every field in the object.
func (o *personBase) resetDirtyStatus() {
	o.idIsDirty = false
	o.firstNameIsDirty = false
	o.lastNameIsDirty = false
	o.typesIsDirty = false
	o.revAddressesIsDirty = false
	o.revEmployeeInfoIsDirty = false
	o.revLoginIsDirty = false
	o.revManagerProjectsIsDirty = false
	o.mmProjectsIsDirty = false

}

// IsDirty returns true if the object has been changed since it was read from the database.
func (o *personBase) IsDirty() (dirty bool) {
	dirty = o.idIsDirty ||
		o.firstNameIsDirty ||
		o.lastNameIsDirty ||
		o.typesIsDirty

	dirty = dirty ||
		o.revAddressesIsDirty ||
		o.revEmployeeInfoIsDirty ||
		o.revLoginIsDirty ||
		o.revManagerProjectsIsDirty

	for obj := range o.revAddresses.ValuesIter() {
		dirty = dirty || obj.IsDirty()
	}
	dirty = dirty || (o.revEmployeeInfo != nil && o.revEmployeeInfo.IsDirty())
	dirty = dirty || (o.revLogin != nil && o.revLogin.IsDirty())
	for obj := range o.revManagerProjects.ValuesIter() {
		dirty = dirty || obj.IsDirty()
	}

	dirty = dirty ||
		o.mmProjectsIsDirty

	for obj := range o.mmProjects.ValuesIter() {
		dirty = dirty || obj.IsDirty()
	}

	return
}

// Get returns the value of a field in the object based on the field's name.
// It will also get related objects if they are loaded.
// Invalid fields and objects are returned as nil
func (o *personBase) Get(key string) interface{} {

	switch key {

	case "ID":
		if !o.idIsValid {
			return nil
		}
		return o.id

	case "FirstName":
		if !o.firstNameIsValid {
			return nil
		}
		return o.firstName

	case "LastName":
		if !o.lastNameIsValid {
			return nil
		}
		return o.lastName

	case "Types":
		if !o.typesIsValid {
			return nil
		}
		return o.types

	case "Addresses":
		return o.revAddresses.Values()
	case "EmployeeInfo":
		return o.revEmployeeInfo
	case "Login":
		return o.revLogin
	case "ManagerProjects":
		return o.revManagerProjects.Values()

	case "Projects":
		return o.mmProjects.Values()

	}
	return nil
}

// MarshalBinary serializes the object into a buffer that is deserializable using UnmarshalBinary.
// It should be used for transmitting database objects over the wire, or for temporary storage. It does not send
// a version number, so if the data format changes, its up to you to invalidate the old stored objects.
// The framework uses this to serialize the object when it is stored in a control.
func (o *personBase) MarshalBinary() ([]byte, error) {
	buf := new(bytes.Buffer)
	encoder := gob.NewEncoder(buf)

	if err := encoder.Encode(o.id); err != nil {
		return nil, fmt.Errorf("error encoding Person.id: %w", err)
	}
	if err := encoder.Encode(o.idIsValid); err != nil {
		return nil, fmt.Errorf("error encoding Person.idIsValid: %w", err)
	}
	if err := encoder.Encode(o.idIsDirty); err != nil {
		return nil, fmt.Errorf("error encoding Person.idIsDirty: %w", err)
	}

	if err := encoder.Encode(o.firstName); err != nil {
		return nil, fmt.Errorf("error encoding Person.firstName: %w", err)
	}
	if err := encoder.Encode(o.firstNameIsValid); err != nil {
		return nil, fmt.Errorf("error encoding Person.firstNameIsValid: %w", err)
	}
	if err := encoder.Encode(o.firstNameIsDirty); err != nil {
		return nil, fmt.Errorf("error encoding Person.firstNameIsDirty: %w", err)
	}

	if err := encoder.Encode(o.lastName); err != nil {
		return nil, fmt.Errorf("error encoding Person.lastName: %w", err)
	}
	if err := encoder.Encode(o.lastNameIsValid); err != nil {
		return nil, fmt.Errorf("error encoding Person.lastNameIsValid: %w", err)
	}
	if err := encoder.Encode(o.lastNameIsDirty); err != nil {
		return nil, fmt.Errorf("error encoding Person.lastNameIsDirty: %w", err)
	}

	if err := encoder.Encode(o.types); err != nil {
		return nil, fmt.Errorf("error encoding Person.types: %w", err)
	}
	if err := encoder.Encode(o.typesIsValid); err != nil {
		return nil, fmt.Errorf("error encoding Person.typesIsValid: %w", err)
	}
	if err := encoder.Encode(o.typesIsDirty); err != nil {
		return nil, fmt.Errorf("error encoding Person.typesIsDirty: %w", err)
	}

	if err := encoder.Encode(&o.revAddresses); err != nil {
		return nil, err
	}
	if err := encoder.Encode(len(o.revAddressesPks) != 0); err != nil {
		return nil, err
	}
	if len(o.revAddressesPks) != 0 {
		if err := encoder.Encode(o.revAddressesPks); err != nil {
			return nil, err
		}
	}

	if err := encoder.Encode(o.revAddressesIsDirty); err != nil {
		return nil, err
	}

	if o.revEmployeeInfo == nil {
		if err := encoder.Encode(false); err != nil {
			return nil, err
		}
	} else {
		if err := encoder.Encode(true); err != nil {
			return nil, err
		}
		if err := encoder.Encode(o.revEmployeeInfo); err != nil {
			return nil, fmt.Errorf("error encoding Person.revEmployeeInfo: %w", err)
		}
	}

	if o.revEmployeeInfoPk == nil {
		if err := encoder.Encode(false); err != nil {
			return nil, err
		}
	} else {
		if err := encoder.Encode(true); err != nil {
			return nil, err
		}
		if err := encoder.Encode(*o.revEmployeeInfoPk); err != nil {
			return nil, fmt.Errorf("error encoding Person.revEmployeeInfoPk: %w", err)
		}
	}

	if err := encoder.Encode(o.revEmployeeInfoIsDirty); err != nil {
		return nil, fmt.Errorf("error encoding Person.revEmployeeInfoIsDirty: %w", err)
	}
	if o.revLogin == nil {
		if err := encoder.Encode(false); err != nil {
			return nil, err
		}
	} else {
		if err := encoder.Encode(true); err != nil {
			return nil, err
		}
		if err := encoder.Encode(o.revLogin); err != nil {
			return nil, fmt.Errorf("error encoding Person.revLogin: %w", err)
		}
	}

	if o.revLoginPk == nil {
		if err := encoder.Encode(false); err != nil {
			return nil, err
		}
	} else {
		if err := encoder.Encode(true); err != nil {
			return nil, err
		}
		if err := encoder.Encode(*o.revLoginPk); err != nil {
			return nil, fmt.Errorf("error encoding Person.revLoginPk: %w", err)
		}
	}

	if err := encoder.Encode(o.revLoginIsDirty); err != nil {
		return nil, fmt.Errorf("error encoding Person.revLoginIsDirty: %w", err)
	}
	if err := encoder.Encode(&o.revManagerProjects); err != nil {
		return nil, err
	}
	if err := encoder.Encode(len(o.revManagerProjectsPks) != 0); err != nil {
		return nil, err
	}
	if len(o.revManagerProjectsPks) != 0 {
		if err := encoder.Encode(o.revManagerProjectsPks); err != nil {
			return nil, err
		}
	}

	if err := encoder.Encode(o.revManagerProjectsIsDirty); err != nil {
		return nil, err
	}

	if err := encoder.Encode(&o.mmProjects); err != nil {
		return nil, fmt.Errorf("error encoding Person.mmProjects: %w", err)
	}
	if err := encoder.Encode(o.mmProjectsIsDirty); err != nil {
		return nil, fmt.Errorf("error encoding Person.mmProjectsIsDirty: %w", err)
	}
	if err := encoder.Encode(o.mmProjectsPks != nil); err != nil {
		return nil, err
	}
	if o.mmProjectsPks != nil {
		if err := encoder.Encode(o.mmProjectsPks); err != nil {
			return nil, fmt.Errorf("error encoding Person.mmProjectsPks: %w", err)
		}
	}

	if o._aliases == nil {
		if err := encoder.Encode(false); err != nil {
			return nil, err
		}
	} else {
		if err := encoder.Encode(true); err != nil {
			return nil, err
		}
		if err := encoder.Encode(o._aliases); err != nil {
			return nil, fmt.Errorf("error encoding Person._aliases: %w", err)
		}
	}

	if err := encoder.Encode(o._restored); err != nil {
		return nil, fmt.Errorf("error encoding Person._restored: %w", err)
	}
	if err := encoder.Encode(o._originalPK); err != nil {
		return nil, fmt.Errorf("error encoding Person._originalPK: %w", err)
	}

	return buf.Bytes(), nil

	return buf.Bytes(), nil
}

// UnmarshalBinary converts a structure that was created with MarshalBinary into a Person object.
func (o *personBase) UnmarshalBinary(data []byte) (err error) {

	buf := bytes.NewBuffer(data)
	dec := gob.NewDecoder(buf)
	var isPtr bool

	_ = isPtr
	if err = dec.Decode(&o.id); err != nil {
		return fmt.Errorf("error decoding Person.id: %w", err)
	}
	if err = dec.Decode(&o.idIsValid); err != nil {
		return fmt.Errorf("error decoding Person.idIsValid: %w", err)
	}
	if err = dec.Decode(&o.idIsDirty); err != nil {
		return fmt.Errorf("error decoding Person.idIsDirty: %w", err)
	}

	if err = dec.Decode(&o.firstName); err != nil {
		return fmt.Errorf("error decoding Person.firstName: %w", err)
	}
	if err = dec.Decode(&o.firstNameIsValid); err != nil {
		return fmt.Errorf("error decoding Person.firstNameIsValid: %w", err)
	}
	if err = dec.Decode(&o.firstNameIsDirty); err != nil {
		return fmt.Errorf("error decoding Person.firstNameIsDirty: %w", err)
	}

	if err = dec.Decode(&o.lastName); err != nil {
		return fmt.Errorf("error decoding Person.lastName: %w", err)
	}
	if err = dec.Decode(&o.lastNameIsValid); err != nil {
		return fmt.Errorf("error decoding Person.lastNameIsValid: %w", err)
	}
	if err = dec.Decode(&o.lastNameIsDirty); err != nil {
		return fmt.Errorf("error decoding Person.lastNameIsDirty: %w", err)
	}

	if err = dec.Decode(&o.types); err != nil {
		return fmt.Errorf("error decoding Person.types: %w", err)
	}
	if err = dec.Decode(&o.typesIsValid); err != nil {
		return fmt.Errorf("error decoding Person.typesIsValid: %w", err)
	}
	if err = dec.Decode(&o.typesIsDirty); err != nil {
		return fmt.Errorf("error decoding Person.typesIsDirty: %w", err)
	}

	if err = dec.Decode(&o.revAddresses); err != nil {
		return fmt.Errorf("error decoding Person.revAddresses: %w", err)
	}

	if err = dec.Decode(&isPtr); err != nil {
		return fmt.Errorf("error decoding Person.revAddressesPks isPtr: %w", err)
	}
	if isPtr {
		if err = dec.Decode(&o.revAddressesPks); err != nil {
			return fmt.Errorf("error decoding Person.revAddressesPks: %w", err)
		}
	}

	if err = dec.Decode(&o.revAddressesIsDirty); err != nil {
		return fmt.Errorf("error decoding Person.revAddressesIsDirty: %w", err)
	}

	if err = dec.Decode(&isPtr); err != nil {
		return fmt.Errorf("error decoding Person.revEmployeeInfo isPtr: %w", err)
	}
	if isPtr {
		if err = dec.Decode(&o.revEmployeeInfo); err != nil {
			return fmt.Errorf("error decoding Person.revEmployeeInfo: %w", err)
		}
	}

	if err = dec.Decode(&isPtr); err != nil {
		return fmt.Errorf("error decoding Person.revEmployeeInfoPk isPtr: %w", err)
	}
	if isPtr {
		if err = dec.Decode(&o.revEmployeeInfoPk); err != nil {
			return fmt.Errorf("error decoding Person.revEmployeeInfoPk: %w", err)
		}
	}

	if err = dec.Decode(&o.revEmployeeInfoIsDirty); err != nil {
		return fmt.Errorf("error decoding Person.revEmployeeInfoIsDirty: %w", err)
	}
	if err = dec.Decode(&isPtr); err != nil {
		return fmt.Errorf("error decoding Person.revLogin isPtr: %w", err)
	}
	if isPtr {
		if err = dec.Decode(&o.revLogin); err != nil {
			return fmt.Errorf("error decoding Person.revLogin: %w", err)
		}
	}

	if err = dec.Decode(&isPtr); err != nil {
		return fmt.Errorf("error decoding Person.revLoginPk isPtr: %w", err)
	}
	if isPtr {
		if err = dec.Decode(&o.revLoginPk); err != nil {
			return fmt.Errorf("error decoding Person.revLoginPk: %w", err)
		}
	}

	if err = dec.Decode(&o.revLoginIsDirty); err != nil {
		return fmt.Errorf("error decoding Person.revLoginIsDirty: %w", err)
	}
	if err = dec.Decode(&o.revManagerProjects); err != nil {
		return fmt.Errorf("error decoding Person.revManagerProjects: %w", err)
	}

	if err = dec.Decode(&isPtr); err != nil {
		return fmt.Errorf("error decoding Person.revManagerProjectsPks isPtr: %w", err)
	}
	if isPtr {
		if err = dec.Decode(&o.revManagerProjectsPks); err != nil {
			return fmt.Errorf("error decoding Person.revManagerProjectsPks: %w", err)
		}
	}

	if err = dec.Decode(&o.revManagerProjectsIsDirty); err != nil {
		return fmt.Errorf("error decoding Person.revManagerProjectsIsDirty: %w", err)
	}

	if err = dec.Decode(&o.mmProjects); err != nil {
		return fmt.Errorf("error decoding Person.mmProjectsPks: %w", err)
	}
	if err = dec.Decode(&o.mmProjectsIsDirty); err != nil {
		return fmt.Errorf("error decoding Person.mmProjectsIsDirty: %w", err)
	}
	if err = dec.Decode(&isPtr); err != nil {
		return fmt.Errorf("error decoding Person.mmProjectsPks isPtr: %w", err)
	}
	if isPtr {
		if err = dec.Decode(&o.mmProjectsPks); err != nil {
			return fmt.Errorf("error decoding Person.mmProjectsPks: %w", err)
		}
	}
	return
}

// MarshalJSON serializes the object into a JSON object.
// Only valid data will be serialized, meaning, you can control what gets serialized by using Select to
// select only the fields you want when you query for the object. Another way to control the output
// is to call MarshalStringMap, modify the map, then encode the map.
func (o *personBase) MarshalJSON() (data []byte, err error) {
	v := o.MarshalStringMap()
	return json.Marshal(v)
}

// MarshalStringMap serializes the object into a string map of interfaces.
// Only valid data will be serialized, meaning, you can control what gets serialized by using Select to
// select only the fields you want when you query for the object. The keys are the same as the json keys.
func (o *personBase) MarshalStringMap() map[string]interface{} {
	v := make(map[string]interface{})

	if o.idIsValid {
		v["id"] = o.id
	}

	if o.firstNameIsValid {
		v["firstName"] = o.firstName
	}

	if o.lastNameIsValid {
		v["lastName"] = o.lastName
	}

	if o.typesIsValid {
		v["types"] = o.types
	}

	if o.revAddresses.Len() != 0 {
		var vals []map[string]interface{}
		for obj := range o.revAddresses.ValuesIter() {
			vals = append(vals, obj.MarshalStringMap())
		}
		v["addresses"] = vals
	}
	if obj := o.revEmployeeInfo; obj != nil {
		v["employeeInfo"] = obj.MarshalStringMap()
	}
	if obj := o.revLogin; obj != nil {
		v["login"] = obj.MarshalStringMap()
	}
	if o.revManagerProjects.Len() != 0 {
		var vals []map[string]interface{}
		for obj := range o.revManagerProjects.ValuesIter() {
			vals = append(vals, obj.MarshalStringMap())
		}
		v["managerProjects"] = vals
	}
	if o.mmProjects.Len() != 0 {
		var vals []map[string]interface{}
		for obj := range o.mmProjects.ValuesIter() {
			vals = append(vals, obj.MarshalStringMap())
		}
		v["projects"] = vals
	}
	for _k, _v := range o._aliases {
		v[_k] = _v
	}
	return v
}

// UnmarshalJSON unmarshalls the given json data into the Person. The Person can be a
// newly created object, or one loaded from the database.
//
// After unmarshalling, the object is not  saved. You must call Save to insert it into the database
// or update it.
//
// Unmarshalling of sub-objects, as in objects linked via foreign keys, is not currently supported.
//
// The fields it expects are:
//
//	"id" - string
//	"firstName" - string
//	"lastName" - string
//	"types" - PersonTypeSet
func (o *personBase) UnmarshalJSON(data []byte) (err error) {
	var v map[string]interface{}
	if err = json.Unmarshal(data, &v); err != nil {
		return err
	}
	return o.UnmarshalStringMap(v)
}

// UnmarshalStringMap will load the values from the stringmap into the object.
//
// Override this in Person to modify the json before sending it here.
func (o *personBase) UnmarshalStringMap(m map[string]interface{}) (err error) {
	for k, v := range m {
		switch k {

		case "firstName":
			{
				if v == nil {
					return fmt.Errorf("json field %s cannot be null", k)
				}

				if s, ok := v.(string); !ok {
					return fmt.Errorf("json field %s must be a string", k)
				} else {
					o.SetFirstName(s)
				}
			}

		case "lastName":
			{
				if v == nil {
					return fmt.Errorf("json field %s cannot be null", k)
				}

				if s, ok := v.(string); !ok {
					return fmt.Errorf("json field %s must be a string", k)
				} else {
					o.SetLastName(s)
				}
			}

		case "types":
			{
				if v == nil {
					return fmt.Errorf("json field %s cannot be null", k)
				}

				if n, ok := v.([]int); ok {
					o.SetTypes(PersonTypeSetFromNumbers(n))
				} else if n, ok := v.([]float64); ok {
					o.SetTypes(PersonTypeSetFromNumbers(n))
				} else if n, ok := v.([]string); ok {
					var a PersonTypeSet
					for _, s := range n {
						a.Add(PersonTypeFromName(s))
					}
					o.SetTypes(a)
				} else {
					return fmt.Errorf("json field %s must be a number", k)
				}

			}

		}
	}
	return
}
