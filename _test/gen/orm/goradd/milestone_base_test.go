// Code generated by goradd-orm. DO NOT EDIT.

package goradd

import (
	"testing"

	"github.com/goradd/orm/pkg/db"
	"github.com/goradd/orm/pkg/test"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestMilestone_SetProjectID(t *testing.T) {

	obj := NewMilestone()
	val := test.RandomValue[string](0)
	obj.SetProjectID(val)
	assert.Equal(t, val, obj.ProjectID())

	// test default
	obj.SetProjectID("")
	assert.EqualValues(t, "", obj.ProjectID(), "set default")

}
func TestMilestone_SetName(t *testing.T) {

	obj := NewMilestone()
	val := test.RandomValue[string](50)
	obj.SetName(val)
	assert.Equal(t, val, obj.Name())

	// test default
	obj.SetName("")
	assert.EqualValues(t, "", obj.Name(), "set default")

	// test panic on setting value larger than maximum size allowed
	val = test.RandomValue[string](51)
	assert.Panics(t, func() {
		obj.SetName(val)
	})
}

// createMinimalSampleMilestone creates an unsaved minimal version of a Milestone object
// for testing.
func createMinimalSampleMilestone() *Milestone {
	obj := NewMilestone()

	// A required forward reference will need to be fulfilled just to save the minimal version of this object
	// If the database is configured so that the referenced object points back here, either directly or through multiple
	// forward references, it possible this could create an endless loop. Such a structure could not be saved anyways.
	obj.SetProject(createMinimalSampleProject())

	obj.SetName(test.RandomValue[string](50))

	return obj
}

// createMaximalSampleMilestone creates an unsaved version of a Milestone object
// for testing that includes references to minimal objects.
func createMaximalSampleMilestone() *Milestone {
	obj := createMinimalSampleMilestone()

	return obj
}

func TestMilestone_CRUD(t *testing.T) {
	obj := NewMilestone()
	ctx := db.NewContext(nil)

	v_objProject := createMinimalSampleProject()
	assert.NoError(t, v_objProject.Save(ctx))
	defer v_objProject.Delete(ctx)
	obj.SetProject(v_objProject)

	v_name := test.RandomValue[string](50)
	obj.SetName(v_name)

	err := obj.Save(ctx)
	assert.NoError(t, err)
	defer obj.Delete(ctx)

	// Test retrieval
	obj2 := LoadMilestone(ctx, obj.PrimaryKey())
	require.NotNil(t, obj2)

	assert.True(t, obj2.IDIsValid())

	assert.True(t, obj2.ProjectIDIsValid())
	assert.NotEmpty(t, obj2.ProjectID())

	assert.True(t, obj2.NameIsValid())
	assert.EqualValues(t, v_name, obj2.Name())

}
