// Code generated by goradd-orm. DO NOT EDIT.

package goradd

import (
	"context"
	"testing"

	"github.com/goradd/orm/pkg/test"
	"github.com/stretchr/testify/assert"
)

// createMinimalSampleMilestone creates an unsaved minimal version of a Milestone object
// for testing.
func createMinimalSampleMilestone() *Milestone {
	obj := NewMilestone()
	updateMinimalSampleMilestone(obj)

	return obj
}

// updateMinimalSampleMilestone sets the values of a minimal sample to new, random values.
func updateMinimalSampleMilestone(obj *Milestone) {

	obj.SetName(test.RandomValue[string](50))

}

// createMaximalSampleMilestone creates an unsaved version of a Milestone object
// for testing that includes references to minimal objects.
func createMaximalSampleMilestone(ctx context.Context) *Milestone {
	obj := NewMilestone()
	updateMaximalSampleMilestone(ctx, obj)
	return obj
}

// updateMaximalSampleMilestone sets all the maximal sample values to new values.
// This will set new values for references, so save the old values and delete them.
func updateMaximalSampleMilestone(ctx context.Context, obj *Milestone) {
	updateMinimalSampleMilestone(obj)

}

// deleteSampleMilestone deletes an object created and saved by one of the sample creator functions.
func deleteSampleMilestone(ctx context.Context, obj *Milestone) {
	if obj == nil {
		return
	}

	_ = obj.Delete(ctx)
}

// assertEqualFieldsMilestone compares two objects and asserts that the basic fields are equal.
func assertEqualFieldsMilestone(t *testing.T, obj1, obj2 *Milestone) {
	if obj1.IdIsLoaded() && obj2.IdIsLoaded() { // only check loaded values
		assert.EqualValues(t, obj1.Id(), obj2.Id())
	}
	if obj1.ProjectIdIsLoaded() && obj2.ProjectIdIsLoaded() { // only check loaded values
		assert.EqualValues(t, obj1.ProjectId(), obj2.ProjectId())
	}
	if obj1.NameIsLoaded() && obj2.NameIsLoaded() { // only check loaded values
		assert.EqualValues(t, obj1.Name(), obj2.Name())
	}

}
