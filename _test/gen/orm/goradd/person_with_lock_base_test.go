// Code generated by goradd-orm. DO NOT EDIT.

package goradd

import (
	"testing"

	"github.com/goradd/orm/pkg/db"
	"github.com/goradd/orm/pkg/test"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestPersonWithLock_SetFirstName(t *testing.T) {

	obj := NewPersonWithLock()
	val := test.RandomValue[string](50)
	obj.SetFirstName(val)
	assert.Equal(t, val, obj.FirstName())

	// test default
	obj.SetFirstName("")
	assert.EqualValues(t, "", obj.FirstName(), "set default")

	// test panic on setting value larger than maximum size allowed
	val = test.RandomValue[string](51)
	assert.Panics(t, func() {
		obj.SetFirstName(val)
	})
}
func TestPersonWithLock_SetLastName(t *testing.T) {

	obj := NewPersonWithLock()
	val := test.RandomValue[string](50)
	obj.SetLastName(val)
	assert.Equal(t, val, obj.LastName())

	// test default
	obj.SetLastName("")
	assert.EqualValues(t, "", obj.LastName(), "set default")

	// test panic on setting value larger than maximum size allowed
	val = test.RandomValue[string](51)
	assert.Panics(t, func() {
		obj.SetLastName(val)
	})
}

// createMinimalSamplePersonWithLock creates an unsaved minimal version of a PersonWithLock object
// for testing.
func createMinimalSamplePersonWithLock() *PersonWithLock {
	obj := NewPersonWithLock()

	obj.SetFirstName(test.RandomValue[string](50))

	obj.SetLastName(test.RandomValue[string](50))

	return obj
}

// createMaximalSamplePersonWithLock creates an unsaved version of a PersonWithLock object
// for testing that includes references to minimal objects.
func createMaximalSamplePersonWithLock() *PersonWithLock {
	obj := createMinimalSamplePersonWithLock()

	return obj
}

func TestPersonWithLock_CRUD(t *testing.T) {
	obj := NewPersonWithLock()
	ctx := db.NewContext(nil)

	v_firstName := test.RandomValue[string](50)
	obj.SetFirstName(v_firstName)

	v_lastName := test.RandomValue[string](50)
	obj.SetLastName(v_lastName)

	err := obj.Save(ctx)
	assert.NoError(t, err)
	defer obj.Delete(ctx)

	// Test retrieval
	obj2 := LoadPersonWithLock(ctx, obj.PrimaryKey())
	require.NotNil(t, obj2)

	assert.True(t, obj2.IDIsValid())

	assert.True(t, obj2.FirstNameIsValid())
	assert.EqualValues(t, v_firstName, obj2.FirstName())

	assert.True(t, obj2.LastNameIsValid())
	assert.EqualValues(t, v_lastName, obj2.LastName())

	assert.True(t, obj2.GroLockIsValid())

	assert.True(t, obj2.GroTimestampIsValid())

}
