// Code generated by goradd-orm. DO NOT EDIT.

package goradd

import (
	"context"
	"testing"

	"github.com/goradd/orm/pkg/db"
	"github.com/goradd/orm/pkg/test"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestLogin_SetPersonID(t *testing.T) {

	obj := NewLogin()
	val := test.RandomValue[string](0)
	obj.SetPersonID(val)
	assert.Equal(t, val, obj.PersonID())
	assert.False(t, obj.PersonIDIsNull())

	// Test NULL
	obj.SetPersonIDToNull()
	assert.EqualValues(t, "", obj.PersonID())
	assert.True(t, obj.PersonIDIsNull())

	// test default
	obj.SetPersonID("")
	assert.EqualValues(t, "", obj.PersonID(), "set default")

}
func TestLogin_SetUsername(t *testing.T) {

	obj := NewLogin()
	val := test.RandomValue[string](20)
	obj.SetUsername(val)
	assert.Equal(t, val, obj.Username())

	// test default
	obj.SetUsername("")
	assert.EqualValues(t, "", obj.Username(), "set default")

	// test panic on setting value larger than maximum size allowed
	val = test.RandomValue[string](21)
	assert.Panics(t, func() {
		obj.SetUsername(val)
	})
}
func TestLogin_SetPassword(t *testing.T) {

	obj := NewLogin()
	val := test.RandomValue[string](20)
	obj.SetPassword(val)
	assert.Equal(t, val, obj.Password())
	assert.False(t, obj.PasswordIsNull())

	// Test NULL
	obj.SetPasswordToNull()
	assert.EqualValues(t, "", obj.Password())
	assert.True(t, obj.PasswordIsNull())

	// test default
	obj.SetPassword("")
	assert.EqualValues(t, "", obj.Password(), "set default")

	// test panic on setting value larger than maximum size allowed
	val = test.RandomValue[string](21)
	assert.Panics(t, func() {
		obj.SetPassword(val)
	})
}
func TestLogin_SetIsEnabled(t *testing.T) {

	obj := NewLogin()
	val := test.RandomValue[bool](0)
	obj.SetIsEnabled(val)
	assert.Equal(t, val, obj.IsEnabled())

	// test default
	obj.SetIsEnabled(true)
	assert.EqualValues(t, true, obj.IsEnabled(), "set default")

}

// createMinimalSampleLogin creates and saves a minimal version of a Login object
// for testing.
func createMinimalSampleLogin(ctx context.Context) *Login {
	obj := NewLogin()

	obj.SetUsername(test.RandomValue[string](20))

	obj.SetPassword(test.RandomValue[string](20))

	obj.SetIsEnabled(test.RandomValue[bool](0))

	obj.Save(ctx)
	return obj
}
func TestLogin_CRUD(t *testing.T) {
	obj := NewLogin()
	ctx := db.NewContext(nil)

	v_objPerson := createMinimalSamplePerson(ctx)
	defer v_objPerson.Delete(ctx)
	obj.SetPerson(v_objPerson)

	v_username := test.RandomValue[string](20)
	obj.SetUsername(v_username)

	v_password := test.RandomValue[string](20)
	obj.SetPassword(v_password)

	v_isEnabled := test.RandomValue[bool](0)
	obj.SetIsEnabled(v_isEnabled)

	err := obj.Save(ctx)
	assert.NoError(t, err)
	defer obj.Delete(ctx)

	// Test retrieval
	obj2 := LoadLogin(ctx, obj.PrimaryKey())
	require.NotNil(t, obj2)

	assert.True(t, obj2.IDIsValid())

	assert.True(t, obj2.PersonIDIsValid())
	assert.False(t, obj2.PersonIDIsNull())
	assert.NotEmpty(t, obj2.PersonID())

	assert.True(t, obj2.UsernameIsValid())
	assert.EqualValues(t, v_username, obj2.Username())

	assert.True(t, obj2.PasswordIsValid())
	assert.False(t, obj2.PasswordIsNull())
	assert.EqualValues(t, v_password, obj2.Password())

	assert.True(t, obj2.IsEnabledIsValid())
	assert.EqualValues(t, v_isEnabled, obj2.IsEnabled())

}
