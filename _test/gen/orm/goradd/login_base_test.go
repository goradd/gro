// Code generated by goradd-orm. DO NOT EDIT.

package goradd

import (
	"context"
	"testing"

	"github.com/goradd/orm/pkg/db"
	"github.com/goradd/orm/pkg/test"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestLogin_SetPersonID(t *testing.T) {

	obj := NewLogin()
	personID := test.RandomValue[string](0)
	obj.SetPersonID(personID)
	assert.Equal(t, personID, obj.PersonID())
	assert.False(t, obj.PersonIDIsNull())

	// Test NULL
	obj.SetPersonIDToNull()
	assert.Equal(t, "", obj.PersonID())
	assert.True(t, obj.PersonIDIsNull())

	// test default
	obj.SetPersonID("")
	assert.EqualValues(t, "", obj.PersonID(), "set default")

}
func TestLogin_SetUsername(t *testing.T) {

	obj := NewLogin()
	username := test.RandomValue[string](20)
	obj.SetUsername(username)
	assert.Equal(t, username, obj.Username())

	// test default
	obj.SetUsername("")
	assert.EqualValues(t, "", obj.Username(), "set default")

	// test panic on setting value larger than maximum size allowed
	username = test.RandomValue[string](21)
	assert.Panics(t, func() {
		obj.SetUsername(username)
	})
}
func TestLogin_SetPassword(t *testing.T) {

	obj := NewLogin()
	password := test.RandomValue[string](20)
	obj.SetPassword(password)
	assert.Equal(t, password, obj.Password())
	assert.False(t, obj.PasswordIsNull())

	// Test NULL
	obj.SetPasswordToNull()
	assert.Equal(t, "", obj.Password())
	assert.True(t, obj.PasswordIsNull())

	// test default
	obj.SetPassword("")
	assert.EqualValues(t, "", obj.Password(), "set default")

	// test panic on setting value larger than maximum size allowed
	password = test.RandomValue[string](21)
	assert.Panics(t, func() {
		obj.SetPassword(password)
	})
}
func TestLogin_SetIsEnabled(t *testing.T) {

	obj := NewLogin()
	isEnabled := test.RandomValue[bool](0)
	obj.SetIsEnabled(isEnabled)
	assert.Equal(t, isEnabled, obj.IsEnabled())

	// test default
	obj.SetIsEnabled(true)
	assert.EqualValues(t, true, obj.IsEnabled(), "set default")

}

// createMinimalSampleLogin creates and saves a minimal version of a Login object
// for testing.
func createMinimalSampleLogin(ctx context.Context) *Login {
	obj := NewLogin()

	username := test.RandomValue[string](20)
	obj.SetUsername(username)

	password := test.RandomValue[string](20)
	obj.SetPassword(password)

	isEnabled := test.RandomValue[bool](0)
	obj.SetIsEnabled(isEnabled)

	obj.Save(ctx)
	return obj
}
func TestLogin_CRUD(t *testing.T) {
	obj := NewLogin()
	ctx := db.NewContext(nil)

	objPerson := createMinimalSamplePerson(ctx)
	obj.SetPerson(objPerson)

	username := test.RandomValue[string](20)
	obj.SetUsername(username)

	password := test.RandomValue[string](20)
	obj.SetPassword(password)

	isEnabled := test.RandomValue[bool](0)
	obj.SetIsEnabled(isEnabled)

	obj.Save(ctx)

	// Test retrieval
	obj = LoadLogin(ctx, obj.PrimaryKey())
	require.NotNil(t, obj)

	assert.True(t, obj.IDIsValid())

	assert.True(t, obj.PersonIDIsValid())
	assert.False(t, obj.PersonIDIsNull())
	assert.NotEmpty(t, obj.PersonID())

	assert.True(t, obj.UsernameIsValid())
	assert.Equal(t, username, obj.Username())

	assert.True(t, obj.PasswordIsValid())
	assert.False(t, obj.PasswordIsNull())
	assert.Equal(t, password, obj.Password())

	assert.True(t, obj.IsEnabledIsValid())
	assert.Equal(t, isEnabled, obj.IsEnabled())

}
