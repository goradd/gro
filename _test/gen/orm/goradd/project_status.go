// Code generated by goradd-orm. DO NOT EDIT.

package goradd

import (
	"encoding/gob"
	"encoding/json"
	"errors"
	"fmt"
	"strconv"

	"github.com/goradd/maps"
)

type ProjectStatus int

const (
	ProjectStatusOpen      ProjectStatus = 1
	ProjectStatusCanceled  ProjectStatus = 2
	ProjectStatusCompleted ProjectStatus = 3
	ProjectStatusPlanned   ProjectStatus = 4
)

// ProjectStatusMaxValue is the maximum enumerated value of ProjectStatus
// doc: type=ProjectStatus
const ProjectStatusMaxValue = 4

// String returns the name value of the type and satisfies the fmt.Stringer interface
// This is used primarily for debugging
func (e ProjectStatus) String() string {
	switch e {
	case 1:
		return "ProjectStatusOpen"
	case 2:
		return "ProjectStatusCanceled"
	case 3:
		return "ProjectStatusCompleted"
	case 4:
		return "ProjectStatusPlanned"
	default:
		return ""
	}
}

// IsValidProjectStatus returns true if i can validly be converted to a ProjectStatus.
func IsValidProjectStatus(i int) bool {
	switch i {
	case 1:
		return true
	case 2:
		return true
	case 3:
		return true
	case 4:
		return true
	default:
		return false
	}
}

// Key returns a string representation of the primary key and satisfies KeyLabeler interface.
func (e ProjectStatus) Key() string {
	// We use string keys so that if the number values change, keys will still relate to to the same conceptual item.
	switch e {
	case ProjectStatusOpen:
		return "open"
	case ProjectStatusCanceled:
		return "canceled"
	case ProjectStatusCompleted:
		return "completed"
	case ProjectStatusPlanned:
		return "planned"
	}
	return ""
}

// Keys returns all of the items in the enumerated type as string keys.
func (e ProjectStatus) Keys() []string {
	return []string{
		"open",
		"canceled",
		"completed",
		"planned",
	}
}

// ProjectStatusFromKey converts a ProjectStatus Key to a ProjectStatus
func ProjectStatusFromKey(key string) ProjectStatus {
	switch key {
	case "open":
		return ProjectStatusOpen
	case "canceled":
		return ProjectStatusCanceled
	case "completed":
		return ProjectStatusCompleted
	case "planned":
		return ProjectStatusPlanned
	}
	return ProjectStatus(0)
}

// ProjectStatusesFromKeys converts a slice of ProjectStatus Keys to a slice of ProjectStatus
func ProjectStatusesFromKeys(keys []string) (values []ProjectStatus) {
	values = make([]ProjectStatus, 0, len(keys))
	for _, key := range keys {
		values = append(values, ProjectStatusFromKey(key))
	}
	return
}

// ProjectStatuses returns a slice of all the ProjectStatus values
// in key order.
func ProjectStatuses() []ProjectStatus {
	return []ProjectStatus{
		ProjectStatusOpen,
		ProjectStatusCanceled,
		ProjectStatusCompleted,
		ProjectStatusPlanned,
	}
}

// ProjectStatusesI returns a slice of all the ProjectStatus values as generic interfaces.
// doc: type=ProjectStatus
func ProjectStatusesI() (values []any) {
	return []any{
		ProjectStatusOpen,
		ProjectStatusCanceled,
		ProjectStatusCompleted,
		ProjectStatusPlanned,
	}
}

// ProjectStatusLabel returns the Label value associated with ProjectStatus.
func (e ProjectStatus) Label() string {
	switch e {
	case 0:
		return ""
	case ProjectStatusOpen:
		return "Open"
	case ProjectStatusCanceled:
		return "Canceled"
	case ProjectStatusCompleted:
		return "Done"
	case ProjectStatusPlanned:
		return "Planned"
	default:
		panic("index out of range")
	}
}

// ProjectStatusLabels returns a slice of all the Label values associated with ProjectStatus.
// doc: type=ProjectStatus
func ProjectStatusLabels() []string {
	return []string{
		"Open",
		"Canceled",
		"Done",
		"Planned",
	}
}

// ProjectStatusDescription returns the Description value associated with ProjectStatus.
func (e ProjectStatus) Description() string {
	switch e {
	case 0:
		return ""
	case ProjectStatusOpen:
		return "The project is currently active"
	case ProjectStatusCanceled:
		return "The project has been canned"
	case ProjectStatusCompleted:
		return "The project has been completed successfully"
	case ProjectStatusPlanned:
		return "Project is in the planning stages and has not been assigned a manager"
	default:
		panic("index out of range")
	}
}

// ProjectStatusDescriptions returns a slice of all the Description values associated with ProjectStatus.
// doc: type=ProjectStatus
func ProjectStatusDescriptions() []string {
	return []string{
		"The project is currently active",
		"The project has been canned",
		"The project has been completed successfully",
		"Project is in the planning stages and has not been assigned a manager",
	}
}

// ProjectStatusGuideline returns the Guideline value associated with ProjectStatus.
func (e ProjectStatus) Guideline() string {
	switch e {
	case 0:
		return ""
	case ProjectStatusOpen:
		return "All projects that we are working on should be in this state"
	case ProjectStatusCanceled:
		return ""
	case ProjectStatusCompleted:
		return "Celebrate successes!"
	case ProjectStatusPlanned:
		return "Get ready"
	default:
		panic("index out of range")
	}
}

// ProjectStatusGuidelines returns a slice of all the Guideline values associated with ProjectStatus.
// doc: type=ProjectStatus
func ProjectStatusGuidelines() []string {
	return []string{
		"All projects that we are working on should be in this state",
		"",
		"Celebrate successes!",
		"Get ready",
	}
}

// ProjectStatusIsActive returns the IsActive value associated with ProjectStatus.
func (e ProjectStatus) IsActive() bool {
	switch e {
	case 0:
		return false
	case ProjectStatusOpen:
		return true
	case ProjectStatusCanceled:
		return true
	case ProjectStatusCompleted:
		return true
	case ProjectStatusPlanned:
		return false
	default:
		panic("index out of range")
	}
}

// ProjectStatusIsActives returns a slice of all the IsActive values associated with ProjectStatus.
// doc: type=ProjectStatus
func ProjectStatusIsActives() []bool {
	return []bool{
		true,
		true,
		true,
		false,
	}
}

// MarshalJSON converts the type to its identifier for JSON output.
func (e ProjectStatus) MarshalJSON() (data []byte, err error) {
	return json.Marshal(e.Key()) // wraps it in quotes like "active"
}

// UnmarshalJSON converts a variety of possible JSON inputs to the enum type.
func (e *ProjectStatus) UnmarshalJSON(data []byte) error {
	var i any
	var err error

	// Use Decoder or json.Unmarshal directly
	if err = json.Unmarshal(data, &i); err != nil {
		return fmt.Errorf("error unmarshaling ProjectStatus: %w", err)
	}
	*e, err = ProjectStatusFromInterface(i)
	return err
}

// ProjectStatusFromInterface converts a variety of data types to a ProjectStatus.
func ProjectStatusFromInterface(i any) (ProjectStatus, error) {
	switch v := i.(type) {
	case float64:
		if IsValidProjectStatus(int(v)) {
			return ProjectStatus(int(v)), nil
		}
	case int:
		if IsValidProjectStatus(v) {
			return ProjectStatus(v), nil
		}
	case string:
		// Try to parse as int
		if v2, err := strconv.Atoi(v); err == nil {
			if IsValidProjectStatus(v2) {
				return ProjectStatus(v2), nil
			}
		}
		// Otherwise convert from the identifier
		v3 := ProjectStatusFromKey(v)
		if v3 != 0 {
			return v3, nil
		}
	case json.Number:
		if v2, err := v.Int64(); err == nil {
			if IsValidProjectStatus(int(v2)) {
				return ProjectStatus(int(v2)), nil
			}
		}
	default:
		return ProjectStatus(0), fmt.Errorf("unsupported type for ProjectStatus: %T", v)
	}
	return ProjectStatus(0), errors.New("invalid value for ProjectStatus")
}

// ProjectStatusSet is a pointer to a group of ProjectStatus values.
type ProjectStatusSet = *maps.OrderedSet[ProjectStatus]

func NewProjectStatusSet(values ...ProjectStatus) ProjectStatusSet {
	return maps.NewOrderedSet[ProjectStatus](values...)
}

func init() {
	gob.Register(new(ProjectStatusSet))
}
