// Code generated by goradd-orm. DO NOT EDIT.

package goradd

import (
	"testing"

	"github.com/goradd/orm/pkg/db"
	"github.com/goradd/orm/pkg/test"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestAddress_SetPersonID(t *testing.T) {

	obj := NewAddress()
	val := test.RandomValue[string](0)
	obj.SetPersonID(val)
	assert.Equal(t, val, obj.PersonID())

	// test default
	obj.SetPersonID("")
	assert.EqualValues(t, "", obj.PersonID(), "set default")

}
func TestAddress_SetStreet(t *testing.T) {

	obj := NewAddress()
	val := test.RandomValue[string](100)
	obj.SetStreet(val)
	assert.Equal(t, val, obj.Street())

	// test default
	obj.SetStreet("")
	assert.EqualValues(t, "", obj.Street(), "set default")

	// test panic on setting value larger than maximum size allowed
	val = test.RandomValue[string](101)
	assert.Panics(t, func() {
		obj.SetStreet(val)
	})
}
func TestAddress_SetCity(t *testing.T) {

	obj := NewAddress()
	val := test.RandomValue[string](100)
	obj.SetCity(val)
	assert.Equal(t, val, obj.City())
	assert.False(t, obj.CityIsNull())

	// Test NULL
	obj.SetCityToNull()
	assert.EqualValues(t, "BOB", obj.City())
	assert.True(t, obj.CityIsNull())

	// test default
	obj.SetCity("BOB")
	assert.EqualValues(t, "BOB", obj.City(), "set default")

	// test panic on setting value larger than maximum size allowed
	val = test.RandomValue[string](101)
	assert.Panics(t, func() {
		obj.SetCity(val)
	})
}

// createMinimalSampleAddress creates an unsaved minimal version of a Address object
// for testing.
func createMinimalSampleAddress() *Address {
	obj := NewAddress()

	// A required forward reference will need to be fulfilled just to save the minimal version of this object
	// If the database is configured so that the referenced object points back here, either directly or through multiple
	// forward references, it possible this could create an endless loop. Such a structure could not be saved anyways.
	obj.SetPerson(createMinimalSamplePerson())

	obj.SetStreet(test.RandomValue[string](100))

	obj.SetCity(test.RandomValue[string](100))

	return obj
}

// createMaximalSampleAddress creates an unsaved version of a Address object
// for testing that includes references to minimal objects.
func createMaximalSampleAddress() *Address {
	obj := createMinimalSampleAddress()

	return obj
}

func TestAddress_CRUD(t *testing.T) {
	obj := NewAddress()
	ctx := db.NewContext(nil)

	v_objPerson := createMinimalSamplePerson()
	assert.NoError(t, v_objPerson.Save(ctx))
	defer v_objPerson.Delete(ctx)
	obj.SetPerson(v_objPerson)

	v_street := test.RandomValue[string](100)
	obj.SetStreet(v_street)

	v_city := test.RandomValue[string](100)
	obj.SetCity(v_city)

	err := obj.Save(ctx)
	assert.NoError(t, err)
	defer obj.Delete(ctx)

	// Test retrieval
	obj2 := LoadAddress(ctx, obj.PrimaryKey())
	require.NotNil(t, obj2)

	assert.True(t, obj2.IDIsValid())

	assert.True(t, obj2.PersonIDIsValid())
	assert.NotEmpty(t, obj2.PersonID())

	assert.True(t, obj2.StreetIsValid())
	assert.EqualValues(t, v_street, obj2.Street())

	assert.True(t, obj2.CityIsValid())
	assert.False(t, obj2.CityIsNull())
	assert.EqualValues(t, v_city, obj2.City())

}
