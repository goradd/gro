// Code generated by goradd-orm. DO NOT EDIT.

package goradd

import (
	"bytes"
	"context"
	"encoding/gob"
	"encoding/json"
	"strconv"
	"testing"

	"github.com/goradd/orm/_test/gen/orm/goradd/node"
	"github.com/goradd/orm/pkg/op"
	"github.com/goradd/orm/pkg/test"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

// createMinimalSampleAddress creates an unsaved minimal version of a Address object
// for testing.
func createMinimalSampleAddress() *Address {
	obj := NewAddress()
	updateMinimalSampleAddress(obj)

	// A required forward reference will need to be fulfilled just to save the minimal version of this object
	// If the database is configured so that the referenced object points back here, either directly or through multiple
	// forward references, it possible this could create an endless loop.
	obj.SetPerson(createMinimalSamplePerson())

	return obj
}

// updateMinimalSampleAddress sets the values of a minimal sample to new, random values.
func updateMinimalSampleAddress(obj *Address) {

	obj.SetStreet(test.RandomValue[string](100))

	obj.SetCity(test.RandomValue[string](100))

}

// createMaximalSampleAddress creates an unsaved version of a Address object
// for testing that includes references to minimal objects.
func createMaximalSampleAddress(ctx context.Context) *Address {
	obj := NewAddress()
	updateMaximalSampleAddress(ctx, obj)
	return obj
}

// updateMaximalSampleAddress sets all the maximal sample values to new values.
// This will set new values for references, so save the old values and delete them.
func updateMaximalSampleAddress(ctx context.Context, obj *Address) {
	updateMinimalSampleAddress(obj)
	obj.SetPerson(createMinimalSamplePerson())

}

// deleteSampleAddress deletes an object created and saved by one of the sample creator functions.
func deleteSampleAddress(ctx context.Context, obj *Address) {
	if obj == nil {
		return
	}

	_ = obj.Delete(ctx)
	deleteSamplePerson(ctx, obj.Person())
}

// assertEqualFieldsAddress compares two objects and asserts that the basic fields are equal.
func assertEqualFieldsAddress(t *testing.T, obj1, obj2 *Address) {
	if obj1.IDIsLoaded() && obj2.IDIsLoaded() { // only check loaded values
		assert.EqualValues(t, obj1.ID(), obj2.ID())
	}
	if obj1.StreetIsLoaded() && obj2.StreetIsLoaded() { // only check loaded values
		assert.EqualValues(t, obj1.Street(), obj2.Street())
	}
	if obj1.CityIsLoaded() && obj2.CityIsLoaded() { // only check loaded values
		assert.EqualValues(t, obj1.City(), obj2.City())
	}

}

func TestAddress_SetID(t *testing.T) {

	obj := NewAddress()

	assert.True(t, obj.IsNew())
	val := test.RandomNumberString()
	obj.SetID(val)
	assert.Equal(t, val, obj.ID())

	// test default
	obj.SetID("")
	assert.EqualValues(t, "", obj.ID(), "set default")

	// test panic on setting value larger than maximum size allowed
	val = test.RandomValue[string](33)
	assert.Panics(t, func() {
		obj.SetID(val)
	})
}
func TestAddress_SetStreet(t *testing.T) {

	obj := NewAddress()

	assert.True(t, obj.IsNew())
	val := test.RandomValue[string](100)
	obj.SetStreet(val)
	assert.Equal(t, val, obj.Street())

	// test default
	obj.SetStreet("")
	assert.EqualValues(t, "", obj.Street(), "set default")

	// test panic on setting value larger than maximum size allowed
	val = test.RandomValue[string](101)
	assert.Panics(t, func() {
		obj.SetStreet(val)
	})
}
func TestAddress_SetCity(t *testing.T) {

	obj := NewAddress()

	assert.True(t, obj.IsNew())
	val := test.RandomValue[string](100)
	obj.SetCity(val)
	assert.Equal(t, val, obj.City())
	assert.False(t, obj.CityIsNull())

	// Test NULL
	obj.SetCityToNull()
	assert.EqualValues(t, "BOB", obj.City())
	assert.True(t, obj.CityIsNull())

	// test default
	obj.SetCity("BOB")
	assert.EqualValues(t, "BOB", obj.City(), "set default")

	// test panic on setting value larger than maximum size allowed
	val = test.RandomValue[string](101)
	assert.Panics(t, func() {
		obj.SetCity(val)
	})
}
func TestAddress_SetPersonID(t *testing.T) {

	obj := NewAddress()

	assert.True(t, obj.IsNew())
	val := test.RandomValue[string](32)
	obj.SetPersonID(val)
	assert.Equal(t, val, obj.PersonID())

	// test default
	obj.SetPersonID("")
	assert.EqualValues(t, "", obj.PersonID(), "set default")

	// test panic on setting value larger than maximum size allowed
	val = test.RandomValue[string](33)
	assert.Panics(t, func() {
		obj.SetPersonID(val)
	})
}

func TestAddress_Copy(t *testing.T) {
	obj := createMinimalSampleAddress()

	obj2 := obj.Copy()

	assert.Equal(t, obj.Street(), obj2.Street())
	assert.Equal(t, obj.City(), obj2.City())
	assert.Equal(t, obj.PersonID(), obj2.PersonID())

}

func TestAddress_BasicInsert(t *testing.T) {
	obj := createMinimalSampleAddress()
	ctx := context.Background()
	assert.NoError(t, obj.Save(ctx))
	defer deleteSampleAddress(ctx, obj)

	// Test retrieval
	obj2, err := LoadAddress(ctx, obj.PrimaryKey())
	require.NotNil(t, obj2)
	assert.NoError(t, err)

	assert.Equal(t, obj2.PrimaryKey(), obj2.OriginalPrimaryKey())

	assert.True(t, obj2.IDIsLoaded())
	assert.Panics(t, func() {
		obj2.SetID(obj2.ID())
	})

	assert.True(t, obj2.StreetIsLoaded())
	// test that setting it to the same value will not change the dirty bit
	assert.False(t, obj2.streetIsDirty)
	obj2.SetStreet(obj2.Street())
	assert.False(t, obj2.streetIsDirty)

	assert.True(t, obj2.CityIsLoaded())
	assert.False(t, obj2.CityIsNull())
	// test that setting it to the same value will not change the dirty bit
	assert.False(t, obj2.cityIsDirty)
	obj2.SetCity(obj2.City())
	assert.False(t, obj2.cityIsDirty)

}

func TestAddress_InsertPanics(t *testing.T) {
	obj := createMinimalSampleAddress()
	_ = obj
	ctx := context.Background()
	_ = ctx

	obj.person = nil

	obj.streetIsLoaded = false
	assert.Panics(t, func() { obj.Save(ctx) })
	obj.streetIsLoaded = true

	obj.personIDIsLoaded = false
	assert.Panics(t, func() { obj.Save(ctx) })
	obj.personIDIsLoaded = true

}

func TestAddress_BasicUpdate(t *testing.T) {
	obj := createMinimalSampleAddress()
	ctx := context.Background()
	assert.NoError(t, obj.Save(ctx))
	defer deleteSampleAddress(ctx, obj)
	updateMinimalSampleAddress(obj)
	assert.NoError(t, obj.Save(ctx))
	obj2, err := LoadAddress(ctx, obj.PrimaryKey())
	assert.NoError(t, err)

	assert.Equal(t, obj2.ID(), obj.ID(), "ID did not update")
	assert.Equal(t, obj2.Street(), obj.Street(), "Street did not update")
	assert.Equal(t, obj2.City(), obj.City(), "City did not update")
}

func TestAddress_ReferenceLoad(t *testing.T) {
	ctx := context.Background()
	obj := createMaximalSampleAddress(ctx)
	assert.NoError(t, obj.Save(ctx))
	defer deleteSampleAddress(ctx, obj)

	// Test that referenced objects were saved and assigned ids
	assert.NotNil(t, obj.Person())
	assert.NotEqual(t, '-', obj.Person().PrimaryKey()[0])

	// Test lazy loading
	obj2, err := LoadAddress(ctx, obj.PrimaryKey())
	assert.NoError(t, err)
	objPkOnly, err2 := LoadAddress(ctx, obj.PrimaryKey(),
		node.Address().ID())
	assert.NoError(t, err2)
	_ = obj2 // avoid error if there are no references
	_ = objPkOnly

	assert.Nil(t, obj2.Person(), "Person is not loaded initially")
	v_Person, _ := obj2.LoadPerson(ctx)
	assert.NotNil(t, v_Person)
	assert.Equal(t, v_Person.PrimaryKey(), obj2.Person().PrimaryKey())
	assert.Equal(t, obj.Person().PrimaryKey(), obj2.Person().PrimaryKey())
	assert.True(t, obj2.PersonIDIsLoaded())

	assert.False(t, objPkOnly.PersonIDIsLoaded())
	assert.Panics(t, func() { _, _ = objPkOnly.LoadPerson(ctx) })

	assert.Panics(t, func() {
		objPkOnly.SetPerson(nil)
	})

	// test eager loading
	obj3, _ := LoadAddress(ctx, obj.PrimaryKey(), node.Address().Person())
	_ = obj3 // avoid error if there are no references

	assert.Equal(t, obj2.Person().PrimaryKey(), obj3.Person().PrimaryKey())

}

func TestAddress_ReferenceUpdateNewObjects(t *testing.T) {
	ctx := context.Background()
	obj := createMaximalSampleAddress(ctx)
	assert.NoError(t, obj.Save(ctx))
	defer deleteSampleAddress(ctx, obj)

	obj2, _ := LoadAddress(ctx, obj.PrimaryKey())
	updateMaximalSampleAddress(ctx, obj2)
	assert.NoError(t, obj2.Save(ctx))
	defer deleteSampleAddress(ctx, obj2)

	obj3, _ := LoadAddress(ctx, obj2.PrimaryKey(), node.Address().Person())
	_ = obj3 // avoid error if there are no references

	assert.Equal(t, obj2.Person().PrimaryKey(), obj3.Person().PrimaryKey())

}

func TestAddress_ReferenceUpdateOldObjects(t *testing.T) {
	ctx := context.Background()
	obj := createMaximalSampleAddress(ctx)
	assert.NoError(t, obj.Save(ctx))
	defer deleteSampleAddress(ctx, obj)

	updateMinimalSamplePerson(obj.Person())

	assert.NoError(t, obj.Save(ctx))

	obj2, _ := LoadAddress(ctx, obj.PrimaryKey(), node.Address().Person())
	_ = obj2 // avoid error if there are no references

	assertEqualFieldsPerson(t, obj2.Person(), obj.Person())

}
func TestAddress_EmptyPrimaryKeyGetter(t *testing.T) {
	obj := NewAddress()

	i, err := strconv.Atoi(obj.ID())
	assert.NoError(t, err)
	assert.True(t, i < 0)
}

func TestAddress_Getters(t *testing.T) {
	obj := createMinimalSampleAddress()

	i, err := strconv.Atoi(obj.ID())
	assert.NoError(t, err)
	assert.True(t, i < 0)

	ctx := context.Background()
	require.NoError(t, obj.Save(ctx))
	defer deleteSampleAddress(ctx, obj)

	has, _ := HasAddress(ctx, obj.PrimaryKey())
	assert.True(t, has)

	obj2, _ := LoadAddress(ctx, obj.PrimaryKey(),
		node.Address().ID())

	assert.Equal(t, obj.ID(), obj.Get(AddressIDField))
	assert.Equal(t, obj.Street(), obj.Get(AddressStreetField))
	assert.Panics(t, func() { obj2.Street() })
	assert.Nil(t, obj2.Get(AddressStreetField))
	assert.Equal(t, obj.City(), obj.Get(AddressCityField))
	assert.Panics(t, func() { obj2.City() })
	assert.Nil(t, obj2.Get(AddressCityField))
	assert.Equal(t, obj.PersonID(), obj.Get(AddressPersonIDField))
	assert.Panics(t, func() { obj2.PersonID() })
	assert.Nil(t, obj2.Get(AddressPersonIDField))
}

func TestAddress_QueryLoad(t *testing.T) {
	obj := createMinimalSampleAddress()
	ctx := context.Background()
	assert.NoError(t, obj.Save(ctx))
	defer deleteSampleAddress(ctx, obj)

	objs, err := QueryAddresses(ctx).
		Where(op.Equal(node.Address().ID(), obj.ID())).
		OrderBy(node.Address().ID()). // exercise order by
		Limit(1, 0).                  // exercise limit
		Calculation(node.Address(), "IsTrue", op.Equal("A", "A")).
		Load()
	assert.NoError(t, err)
	assert.Equal(t, obj.PrimaryKey(), objs[0].PrimaryKey())
	assert.True(t, objs[0].GetAlias("IsTrue").Bool())
}
func TestAddress_QueryLoadI(t *testing.T) {
	obj := createMinimalSampleAddress()
	ctx := context.Background()
	err := obj.Save(ctx)
	assert.NoError(t, err)
	defer deleteSampleAddress(ctx, obj)

	objs, _ := QueryAddresses(ctx).
		Where(op.Equal(node.Address().ID(), obj.ID())).
		LoadI()

	assert.Equal(t, obj.PrimaryKey(), objs[0].(*Address).PrimaryKey())
}
func TestAddress_QueryCursor(t *testing.T) {
	obj := createMinimalSampleAddress()
	ctx := context.Background()
	assert.NoError(t, obj.Save(ctx))
	defer deleteSampleAddress(ctx, obj)

	cursor, err := QueryAddresses(ctx).
		Where(op.Equal(node.Address().ID(), obj.ID())).
		LoadCursor()
	require.NoError(t, err)
	obj2, err2 := cursor.Next()
	assert.Equal(t, obj.PrimaryKey(), obj2.PrimaryKey())
	require.NoError(t, err2)
	obj2, err2 = cursor.Next()
	assert.Nil(t, obj2)
	require.NoError(t, err2)
	assert.NoError(t, cursor.Close())

	// test empty cursor result
	cursor, err = QueryAddresses(ctx).
		Where(op.Equal("B", "A")).
		LoadCursor()
	require.NoError(t, err)

	obj2, err = cursor.Next()
	assert.Nil(t, obj2)
	require.NoError(t, err)
	assert.NoError(t, cursor.Close())
}
func TestAddress_Count(t *testing.T) {
	ctx := context.Background()
	obj := createMaximalSampleAddress(ctx)
	err := obj.Save(ctx)
	assert.NoError(t, err)
	defer deleteSampleAddress(ctx, obj)
	assert.Positive(t, func() int { i, _ := CountAddresses(ctx); return i }())

	// reread in case there are data limitations imposed by the database
	obj2, _ := LoadAddress(ctx, obj.PrimaryKey())
	assert.Positive(t,
		func() int {
			i, _ := CountAddressesByPersonID(ctx,
				obj2.PersonID())
			return i
		}())

}

func TestAddress_MarshalJSON(t *testing.T) {
	obj := createMinimalSampleAddress()

	b, err := json.Marshal(obj)
	assert.NoError(t, err)

	obj2 := NewAddress()
	err = json.Unmarshal(b, &obj2)
	assert.NoError(t, err)

	assertEqualFieldsAddress(t, obj, obj2)
}

func TestAddress_MarshalBinary(t *testing.T) {
	obj := createMinimalSampleAddress()

	b, err := obj.MarshalBinary()
	assert.NoError(t, err)

	obj2 := NewAddress()
	err = obj2.UnmarshalBinary(b)
	assert.NoError(t, err)

	assertEqualFieldsAddress(t, obj, obj2)
}

func TestAddress_FailingMarshalBinary(t *testing.T) {
	obj := createMinimalSampleAddress()
	var err error

	for i := 0; i < 13; i++ {
		enc := &test.GobEncoder{Count: i}
		err = obj.encodeTo(enc)
		assert.Error(t, err)
	}
	// do it again with aliases
	obj._aliases = make(map[string]any)
	for i := 0; i < 14; i++ {
		enc := &test.GobEncoder{Count: i}
		err = obj.encodeTo(enc)
		assert.Error(t, err)
	}
}

func TestAddress_FailingUnmarshalBinary(t *testing.T) {
	obj := createMinimalSampleAddress()
	b, err := obj.MarshalBinary()
	assert.NoError(t, err)
	obj2 := NewAddress()
	for i := 0; i < 13; i++ {
		buf := bytes.NewReader(b)
		dec := &test.GobDecoder{Decoder: gob.NewDecoder(buf), Count: i}
		err = obj2.decodeFrom(dec)
		assert.Error(t, err)
	}

	// do it again with aliases
	obj = createMinimalSampleAddress()
	obj._aliases = map[string]any{"a": 1}
	b, err = obj.MarshalBinary()
	assert.NoError(t, err)

	obj2 = NewAddress()
	for i := 0; i < 14; i++ {
		buf := bytes.NewReader(b)
		dec := &test.GobDecoder{Decoder: gob.NewDecoder(buf), Count: i}
		err = obj2.decodeFrom(dec)
		assert.Error(t, err)
	}
}
