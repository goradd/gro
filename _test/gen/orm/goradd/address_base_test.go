// Code generated by goradd-orm. DO NOT EDIT.

package goradd

import (
	"context"
	"testing"

	"github.com/goradd/orm/pkg/test"
	"github.com/stretchr/testify/assert"
)

// createMinimalSampleAddress creates an unsaved minimal version of a Address object
// for testing.
func createMinimalSampleAddress() *Address {
	obj := NewAddress()
	updateMinimalSampleAddress(obj)

	return obj
}

// updateMinimalSampleAddress sets the values of a minimal sample to new, random values.
func updateMinimalSampleAddress(obj *Address) {

	obj.SetStreet(test.RandomValue[string](100))

	obj.SetCity(test.RandomValue[string](100))

}

// createMaximalSampleAddress creates an unsaved version of a Address object
// for testing that includes references to minimal objects.
func createMaximalSampleAddress(ctx context.Context) *Address {
	obj := NewAddress()
	updateMaximalSampleAddress(ctx, obj)
	return obj
}

// updateMaximalSampleAddress sets all the maximal sample values to new values.
// This will set new values for references, so save the old values and delete them.
func updateMaximalSampleAddress(ctx context.Context, obj *Address) {
	updateMinimalSampleAddress(obj)

}

// deleteSampleAddress deletes an object created and saved by one of the sample creator functions.
func deleteSampleAddress(ctx context.Context, obj *Address) {
	if obj == nil {
		return
	}

	_ = obj.Delete(ctx)
}

// assertEqualFieldsAddress compares two objects and asserts that the basic fields are equal.
func assertEqualFieldsAddress(t *testing.T, obj1, obj2 *Address) {
	if obj1.IdIsLoaded() && obj2.IdIsLoaded() { // only check loaded values
		assert.EqualValues(t, obj1.Id(), obj2.Id())
	}
	if obj1.PersonIdIsLoaded() && obj2.PersonIdIsLoaded() { // only check loaded values
		assert.EqualValues(t, obj1.PersonId(), obj2.PersonId())
	}
	if obj1.StreetIsLoaded() && obj2.StreetIsLoaded() { // only check loaded values
		assert.EqualValues(t, obj1.Street(), obj2.Street())
	}
	if obj1.CityIsLoaded() && obj2.CityIsLoaded() { // only check loaded values
		assert.EqualValues(t, obj1.City(), obj2.City())
	}

}
