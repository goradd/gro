// Code generated by goradd-orm. DO NOT EDIT.

package goradd

import (
	"context"
	"testing"

	"github.com/goradd/orm/pkg/db"
	"github.com/goradd/orm/pkg/test"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestAddress_SetPersonID(t *testing.T) {

	obj := NewAddress()

	personID := test.RandomValue[string](0)
	obj.SetPersonID(personID)
	assert.Equal(t, personID, obj.PersonID())

	// test zero
	obj.SetPersonID("")
	assert.Equal(t, "", obj.PersonID(), "set empty")

}
func TestAddress_SetStreet(t *testing.T) {

	obj := NewAddress()

	street := test.RandomValue[string](100)
	obj.SetStreet(street)
	assert.Equal(t, street, obj.Street())

	// test zero
	obj.SetStreet("")
	assert.Equal(t, "", obj.Street(), "set empty")

	// test panic on setting value larger than maximum size allowed
	street = test.RandomValue[string](101)
	assert.Panics(t, func() {
		obj.SetStreet(street)
	})
}
func TestAddress_SetCity(t *testing.T) {

	obj := NewAddress()

	city := test.RandomValue[string](100)
	obj.SetCity(city)
	assert.Equal(t, city, obj.City())
	assert.False(t, obj.CityIsNull())

	// Test nil
	obj.SetCity(nil)
	assert.Equal(t, "BOB", obj.City(), "set nil")
	assert.True(t, obj.CityIsNull())

	// test zero
	obj.SetCity("BOB")
	assert.Equal(t, "BOB", obj.City(), "set empty")
	assert.False(t, obj.CityIsNull())

	// test panic on setting value larger than maximum size allowed
	city = test.RandomValue[string](101)
	assert.Panics(t, func() {
		obj.SetCity(city)
	})
}

// createMinimalSampleAddress creates and saves a minimal version of a Address object
// for testing.
func createMinimalSampleAddress(ctx context.Context) *Address {
	obj := NewAddress()

	// A required forward reference will need to be fulfilled just to save the minimal version of this object
	objPerson := createMinimalSamplePerson(ctx)
	obj.SetPerson(objPerson)

	street := test.RandomValue[string](100)
	obj.SetStreet(street)

	city := test.RandomValue[string](100)
	obj.SetCity(city)

	obj.Save(ctx)
	return obj
}
func TestAddress_CRUD(t *testing.T) {
	obj := NewAddress()
	ctx := db.NewContext(nil)

	objPerson := createMinimalSamplePerson(ctx)
	obj.SetPerson(objPerson)

	street := test.RandomValue[string](100)
	obj.SetStreet(street)

	city := test.RandomValue[string](100)
	obj.SetCity(city)

	// Test retrieval
	obj = LoadAddress(ctx, obj.PrimaryKey())
	require.NotNil(t, obj)

	assert.True(t, obj.IDIsValid())
	assert.NotEmpty(t, obj.ID())

	assert.True(t, obj.PersonIDIsValid())
	assert.NotEmpty(t, obj.PersonID())

	assert.True(t, obj.StreetIsValid())
	assert.Equal(t, street, obj.Street())

	assert.True(t, obj.CityIsValid())
	assert.False(t, obj.CityIsNull())
	assert.Equal(t, city, obj.City())

}
