// Code generated by goradd-orm. DO NOT EDIT.

package goradd

import (
	"context"
	"strconv"
	"testing"

	"github.com/goradd/orm/_test/gen/orm/goradd/node"
	"github.com/goradd/orm/pkg/db"
	"github.com/goradd/orm/pkg/test"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

// createMinimalSampleAddress creates an unsaved minimal version of a Address object
// for testing.
func createMinimalSampleAddress() *Address {
	obj := NewAddress()
	updateMinimalSampleAddress(obj)
	return obj
}

// updateMinimalSampleAddress sets the values of a minimal sample to new, random values.
func updateMinimalSampleAddress(obj *Address) {

	// A required forward reference will need to be fulfilled just to save the minimal version of this object
	// If the database is configured so that the referenced object points back here, either directly or through multiple
	// forward references, it possible this could create an endless loop. Such a structure could not be saved anyways.
	obj.SetPerson(createMinimalSamplePerson())

	obj.SetStreet(test.RandomValue[string](100))

	obj.SetCity(test.RandomValue[string](100))

}

// createMaximalSampleAddress creates an unsaved version of a Address object
// for testing that includes references to minimal objects.
func createMaximalSampleAddress() *Address {
	obj := NewAddress()
	updateMaximalSampleAddress(obj)
	return obj
}

// updateMaximalSampleAddress sets all the maximal sample values to new values.
func updateMaximalSampleAddress(obj *Address) {
	updateMinimalSampleAddress(obj)

}

// deleteSampleAddress deletes an object created and saved by one of the sample creator functions.
func deleteSampleAddress(ctx context.Context, obj *Address) {
	if obj == nil {
		return
	}

	obj.Delete(ctx)

	deleteSamplePerson(ctx, obj.Person())

}

func TestAddress_SetPersonID(t *testing.T) {

	obj := NewAddress()
	val := test.RandomValue[string](0)
	obj.SetPersonID(val)
	assert.Equal(t, val, obj.PersonID())

	// test default
	obj.SetPersonID("")
	assert.EqualValues(t, "", obj.PersonID(), "set default")

}
func TestAddress_SetStreet(t *testing.T) {

	obj := NewAddress()
	val := test.RandomValue[string](100)
	obj.SetStreet(val)
	assert.Equal(t, val, obj.Street())

	// test default
	obj.SetStreet("")
	assert.EqualValues(t, "", obj.Street(), "set default")

	// test panic on setting value larger than maximum size allowed
	val = test.RandomValue[string](101)
	assert.Panics(t, func() {
		obj.SetStreet(val)
	})
}
func TestAddress_SetCity(t *testing.T) {

	obj := NewAddress()
	val := test.RandomValue[string](100)
	obj.SetCity(val)
	assert.Equal(t, val, obj.City())
	assert.False(t, obj.CityIsNull())

	// Test NULL
	obj.SetCityToNull()
	assert.EqualValues(t, "BOB", obj.City())
	assert.True(t, obj.CityIsNull())

	// test default
	obj.SetCity("BOB")
	assert.EqualValues(t, "BOB", obj.City(), "set default")

	// test panic on setting value larger than maximum size allowed
	val = test.RandomValue[string](101)
	assert.Panics(t, func() {
		obj.SetCity(val)
	})
}

func TestAddress_Copy(t *testing.T) {
	obj := createMinimalSampleAddress()

	obj2 := obj.Copy()

	assert.Equal(t, obj.PersonID(), obj2.PersonID())
	assert.Equal(t, obj.Street(), obj2.Street())
	assert.Equal(t, obj.City(), obj2.City())

}

func TestAddress_BasicInsert(t *testing.T) {
	obj := createMinimalSampleAddress()
	ctx := db.NewContext(nil)
	err := obj.Save(ctx)
	assert.NoError(t, err)
	defer deleteSampleAddress(ctx, obj)

	// Test retrieval
	obj2 := LoadAddress(ctx, obj.PrimaryKey())
	require.NotNil(t, obj2)

	assert.Equal(t, obj2.PrimaryKey(), obj2.OriginalPrimaryKey())

	assert.True(t, obj2.IDIsValid())

	assert.True(t, obj2.StreetIsValid())

	assert.EqualValues(t, obj.Street(), obj2.Street())

	// test that setting it to the same value will not change the dirty bit
	assert.False(t, obj2.streetIsDirty)
	obj2.SetStreet(obj2.Street())
	assert.False(t, obj2.streetIsDirty)

	assert.True(t, obj2.CityIsValid())
	assert.False(t, obj2.CityIsNull())

	assert.EqualValues(t, obj.City(), obj2.City())

	// test that setting it to the same value will not change the dirty bit
	assert.False(t, obj2.cityIsDirty)
	obj2.SetCity(obj2.City())
	assert.False(t, obj2.cityIsDirty)

}

func TestAddress_InsertPanics(t *testing.T) {
	obj := createMinimalSampleAddress()
	ctx := db.NewContext(nil)

	obj.personIDIsValid = false
	assert.Panics(t, func() { obj.Save(ctx) })
	obj.personIDIsValid = true

	obj.streetIsValid = false
	assert.Panics(t, func() { obj.Save(ctx) })
	obj.streetIsValid = true

}

func TestAddress_BasicUpdate(t *testing.T) {
	obj := createMinimalSampleAddress()
	ctx := db.NewContext(nil)
	assert.NoError(t, obj.Save(ctx))
	defer deleteSampleAddress(ctx, obj)
	updateMinimalSampleAddress(obj)
	assert.NoError(t, obj.Save(ctx))
	obj2 := LoadAddress(ctx, obj.PrimaryKey())

	assert.Equal(t, obj2.ID(), obj.ID(), "ID did not update")
	assert.Equal(t, obj2.PersonID(), obj.PersonID(), "PersonID did not update")
	assert.Equal(t, obj2.Street(), obj.Street(), "Street did not update")
	assert.Equal(t, obj2.City(), obj.City(), "City did not update")
}

func TestAddress_References(t *testing.T) {
	obj := createMaximalSampleAddress()
	ctx := db.NewContext(nil)
	obj.Save(ctx)
	defer deleteSampleAddress(ctx, obj)

	// Test that referenced objects were saved and assigned ids
	assert.NotNil(t, obj.Person())
	assert.NotEqual(t, '-', obj.Person().PrimaryKey()[0])

}
func TestAddress_EmptyPrimaryKeyGetter(t *testing.T) {
	obj := NewAddress()

	i, err := strconv.Atoi(obj.ID())
	assert.NoError(t, err)
	assert.True(t, i < 0)
}

func TestAddress_Getters(t *testing.T) {
	obj := createMinimalSampleAddress()

	i, err := strconv.Atoi(obj.ID())
	assert.NoError(t, err)
	assert.True(t, i < 0)

	ctx := db.NewContext(nil)
	require.NoError(t, obj.Save(ctx))
	defer deleteSampleAddress(ctx, obj)

	obj2 := LoadAddress(ctx, obj.PrimaryKey(), node.Address().PrimaryKey())

	assert.Panics(t, func() { obj2.PersonID() })
	assert.Panics(t, func() { obj2.Street() })
	assert.Panics(t, func() { obj2.City() })
}
