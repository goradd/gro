package pgsql

import (
	"fmt"
	"github.com/goradd/anyutil"
	"github.com/goradd/orm/pkg/db"
	"github.com/goradd/orm/pkg/schema"
	"log/slog"
	"strings"
)

// addSyncFunc adds the sync function to the given sql. It can be called multiple times for the
// same schema.
func (m *DB) addSynFuncSql(schemaName string) string {
	var schemaWithDot string

	if schemaName != "" {
		schemaWithDot = m.QuoteIdentifier(schemaName) + "."
	}
	qry := `CREATE OR REPLACE FUNCTION ` + schemaWithDot + `goradd_sync_identity_sequence(tablename TEXT, columnname TEXT)
RETURNS void AS $$
DECLARE
    seq TEXT;
    max_id BIGINT;
BEGIN
    -- Get the associated sequence name
    SELECT pg_get_serial_sequence(tablename, columnname) INTO seq;

    -- Proceed only if the sequence exists
    IF seq IS NOT NULL THEN
        -- Get the maximum existing ID or fallback to 1 (not 0!)
        EXECUTE format(
            'SELECT COALESCE(MAX(%I), 0) FROM %s',
            columnname, tablename
        ) INTO max_id;

        -- If table is empty, use 1 as the minimum acceptable value
        IF max_id < 1 THEN
            max_id := 1;
        END IF;

        -- Set the sequence value safely
        EXECUTE format('SELECT setval(%L, %s)', seq, max_id);
    END IF;
END;
$$ LANGUAGE plpgsql;
`
	return qry
}

// TableDefinitionSql will return the sql needed to create the table.
// This can include clauses separated by semicolons that add additional capabilities to the table.
func (m *DB) TableDefinitionSql(d *schema.Database, table *schema.Table) (tableSql string, extraClauses []string) {
	var sb strings.Builder

	var columnDefs []string
	var tableClauses []string

	for _, col := range table.Columns {
		colDef, tc, xc := m.buildColumnDef(col)
		if colDef == "" {
			continue // error, already reported
		}
		columnDefs = append(columnDefs, "  "+colDef)
		tableClauses = append(tableClauses, tc...)
		extraClauses = append(extraClauses, xc...)
	}

	var quotedTableName string
	if table.Schema != "" && table.Schema != "public" {
		quotedTableName = m.QuoteIdentifier(table.Schema) + "." + m.QuoteIdentifier(table.Name)
	} else {
		quotedTableName = m.QuoteIdentifier(table.Name)
	}

	// build the foreign keys
	for _, ref := range table.References {
		cc, tc, xc := m.buildReferenceDef(d, table, ref)
		if cc == "" {
			continue // error, already reported
		}
		columnDefs = append(columnDefs, cc)
		tableClauses = append(tableClauses, tc...)
		extraClauses = append(extraClauses, xc...)
	}

	for _, mci := range table.Indexes {
		tSql, extraSql := m.indexSql(table.Name, mci.IndexLevel, mci.Columns...)
		if tSql != "" {
			tableClauses = append(tableClauses, tSql)
		}
		if extraSql != "" {
			extraClauses = append(extraClauses, extraSql)
		}
	}

	columnDefs = append(columnDefs, tableClauses...)
	if table.Comment != "" {
		cmt := fmt.Sprintf("COMMENT ON TABLE %s IS '%s'", quotedTableName, table.Comment)
		extraClauses = append(extraClauses, cmt)
	}

	if table.Schema != "" {
		// Make sure a named schema exists
		sb.WriteString(`CREATE SCHEMA IF NOT EXISTS ` + m.QuoteIdentifier(table.Schema) + ";\n")
	}

	sb.WriteString(fmt.Sprintf("CREATE TABLE %s (\n", quotedTableName))
	sb.WriteString(strings.Join(columnDefs, ",\n"))
	sb.WriteString("\n)")
	extraClauses = append(extraClauses, m.addSynFuncSql(table.Schema))
	return sb.String(), extraClauses
}

// ColumnDefinitionSql returns the sql that will create the column col.
// This will include single-column foreign key references.
// This will not include a primary key designation.
func (m *DB) buildColumnDef(col *schema.Column) (columnClause string, tableClauses []string, extraClauses []string) {
	var colType string
	var collation string
	var defaultStr string
	var extraStr string

	if def := col.DatabaseDefinition[db.DriverTypePostgres]; def != nil {
		if t, ok := def["type"].(string); ok {
			colType = t
		}
		if c, ok := def["collation"].(string); ok && c != "" {
			collation = fmt.Sprintf(`COLLATE "%s"`, c)
		}
		if d, ok := def["default"].(string); ok && d != "" {
			defaultStr = " DEFAULT " + d
		}

	}
	if col.Type == schema.ColTypeEnum {
		if col.EnumTable == "" {
			slog.Error("Column skipped, EnumTable not specified for an enum value.",
				slog.String(db.LogColumn, col.Name))
			return
		}

		fk := fmt.Sprintf(" FOREIGN KEY (%s) REFERENCES %s(%s)",
			m.QuoteIdentifier(col.Name),
			m.QuoteIdentifier(col.EnumTable),
			m.QuoteIdentifier("const"))
		tableClauses = append(tableClauses, fk)
		colType = "INT"
	} else {
		colType = sqlType(col.Type, col.Size, col.SubType)
		if col.Type == schema.ColTypeAutoPrimaryKey {
			extraStr += "GENERATED BY DEFAULT AS IDENTITY"
		}
	}

	if !col.IsNullable {
		colType += " NOT NULL"
	}

	if col.DefaultValue != nil && defaultStr == "" {
		switch val := col.DefaultValue.(type) {
		case string:
			if col.Type == schema.ColTypeTime {
				if val == "now" {
					defaultStr = "DEFAULT CURRENT_TIMESTAMP"
				} else if val == "update" {
					// The way to do this is through a trigger. Since we are providing the value programmatically, we will punt on it.
				} else {
					defaultStr = fmt.Sprintf("DEFAULT '%s'", val)
				}
			} else {
				defaultStr = fmt.Sprintf("DEFAULT '%s'", val)
			}
		default:
			defaultStr = fmt.Sprintf("DEFAULT %v", val)
		}
	}

	commentStr := col.Comment
	if commentStr != "" {
		commentStr = fmt.Sprintf("COMMENT '%s'", commentStr)
	}

	columnClause = fmt.Sprintf("%s %s %s %s %s %s", m.QuoteIdentifier(col.Name), colType, defaultStr, extraStr, collation, commentStr)
	return
}

// SqlType is used by the builder to return the SQL corresponding to the given colType that will create
// the column.
func sqlType(colType schema.ColumnType, size uint64, subType schema.ColumnSubType) string {
	switch colType {
	case schema.ColTypeAutoPrimaryKey:
		return intType(size, false)
	case schema.ColTypeString:
		if subType == schema.ColSubTypeNumeric {
			precision := size & 0x0000FFFF
			scale := size >> 16
			if precision != 0 && scale != 0 {
				return fmt.Sprintf("NUMERIC(%d, %d)", precision, scale)
			} else {
				return "NUMERIC" // max precision available in postgres
			}
		} else if size == 0 {
			return "TEXT"
		} else if size < 16383 { // this is arbitrary really. Postgres behaves differently when the whole row exceeds 2KB.
			return fmt.Sprintf("VARCHAR(%d)", size)
		} else {
			return "TEXT"
		}
	case schema.ColTypeBytes:
		return "BYTEA"
	case schema.ColTypeInt:
		return intType(size, false)
	case schema.ColTypeUint:
		return intType(size, true)
	case schema.ColTypeFloat:
		if size == 32 {
			return "FLOAT4"
		}
		return "FLOAT8"
	case schema.ColTypeBool:
		return "BOOLEAN"
	case schema.ColTypeTime:
		switch subType {
		case schema.ColSubTypeDateOnly:
			return "DATE"
		case schema.ColSubTypeTimeOnly:
			return "TIME"
		case schema.ColSubTypeNone:
			return "TIMESTAMP"
		default:
			slog.Warn("Wrong subtype for time column",
				slog.String("subtype", subType.String()))
		}
		return "TIMESTAMP"
	case schema.ColTypeEnum:
		return "INT"
	case schema.ColTypeJSON:
		return "JSONB"
	default:
		return "TEXT"
	}
}

func intType(size uint64, unsigned bool) string {
	var t string

	if unsigned {
		size += 1 // postgres does not support unsigned values, so we need to make sure we pick a type
		// that covers Go's possible matching unsigned values.
	}
	switch {
	case size == 0:
		t = "INT"
	case size == 1: // unsigned int
		t = "BIGINT"
	case size <= 16:
		t = "SMALLINT"
	case size <= 32:
		t = "INT"
	default:
		t = "BIGINT"
	}
	return t
}

func (m *DB) buildReferenceDef(db *schema.Database, table *schema.Table, ref *schema.Reference) (columnClause string, tableClauses, extraClauses []string) {
	fk, pk := ref.ReferenceColumns(db, table)

	if fk.Type == schema.ColTypeAutoPrimaryKey {
		fk.Type = schema.ColTypeInt // auto columns internally are integers
	}

	columnClause, tableClauses, extraClauses = m.buildColumnDef(fk)
	if columnClause == "" {
		return // error, already logged
	}

	// Make a constraint name that will be unique within the database and logically related to the relationship.
	constraintName := table.Name + "_" + ref.Column + "_fk"

	// We use alter table after all tables are created in case of cyclic foreign keys.
	s := fmt.Sprintf("ALTER TABLE %s ADD CONSTRAINT %s FOREIGN KEY (%s) REFERENCES %s(%s)",
		m.QuoteIdentifier(table.Name),
		m.QuoteIdentifier(constraintName),
		m.QuoteIdentifier(fk.Name),
		m.QuoteIdentifier(ref.Table),
		m.QuoteIdentifier(pk.Name))
	extraClauses = append(extraClauses, s)
	return
}

// indexSql returns sql to be included after a table definition that will create an
// index on the columns. table should NOT include the schema, since index names only need to
// be unique within the schema in postgres.
func (m *DB) indexSql(table string, level schema.IndexLevel, cols ...string) (tableSql string, extraSql string) {
	quotedCols := anyutil.MapSliceFunc(cols, func(s string) string {
		return m.QuoteIdentifier(s)
	})

	var idxType string
	switch level {
	case schema.IndexLevelPrimaryKey:
		idxType = "PRIMARY KEY"
	case schema.IndexLevelUnique:
		idxType = "UNIQUE INDEX"
	case schema.IndexLevelIndexed:
		// regular indexes must be added after the table definition
		idx_name := "idx_" + table + "_" + strings.Join(cols, "_")
		extraSql = fmt.Sprintf("CREATE INDEX %s ON %s (%s)", m.QuoteIdentifier(idx_name), m.QuoteIdentifier(table), strings.Join(quotedCols, ","))
		return
	default:
		return
	}
	// handle primary and unique
	tableSql = fmt.Sprintf("%s (%s)", idxType, strings.Join(quotedCols, ","))
	return
}
