// enumTableNode

func (n *EnumTableNodeTemplate)gen(table *model.EnumTable, _w io.Writer) (err error) {
    if err = n.genHeader(table, _w); err != nil { return }
    if err = n.genPrivate(table, _w); err != nil { return }
    if err = n.genLeafNodes(table, _w); err != nil { return }
    return
}


func (n *EnumTableNodeTemplate)genHeader(table *model.EnumTable, _w io.Writer) (err error) {

{{
// Code generated by goradd. DO NOT EDIT.

package node

import (
    "encoding/gob"
	"github.com/goradd/goradd/pkg/orm/query"
)

type {{= table.Identifier }}Node struct {
	query.ReferenceNodeI
}

// PrimaryKeyNode returns a node representing the primary key column.
func (n *{{= table.Identifier }}Node) PrimaryKeyNode() (*query.ColumnNode) {
	return n.{{= table.FieldIdentifier(0) }}()
}

func init() {
   gob.Register(new({{= table.Identifier }}Node))
}

}}

    return
}


func (n *EnumTableNodeTemplate)genPrivate(table *model.EnumTable, _w io.Writer) (err error) {
{{
// SelectNodes_ is used internally by the framework to return the list of column nodes.
// doc: hide
func (n *{{= table.Identifier }}Node) SelectNodes_() ([]*query.ColumnNode) {
    return []*query.ColumnNode {
{{for i := 0; i < len(table.Fields); i++}}
	    n.{{= table.FieldIdentifier(i) }}(),
{{for}}
	}
}

// EmbeddedNode_ is used internally by the framework to return the embedded ReferenceNodeI.
// doc: hide
func (n *{{= table.Identifier }}Node) EmbeddedNode_() query.NodeI {
	return n.ReferenceNodeI
}

// Copy_ is used internally by the framework to deep copy the node.
// doc: hide
func (n *{{= table.Identifier }}Node) Copy_() query.NodeI {
	return &{{= table.Identifier }}Node{query.CopyNode(n.ReferenceNodeI)}
}

}}
    return
}


func (n *EnumTableNodeTemplate)genLeafNodes(table *model.EnumTable, _w io.Writer) (err error) {

    for i := 0; i < len(table.Fields); i++ {
        fn := table.FieldIdentifier(i)
{{

func (n *{{= table.Identifier }}Node) {{= fn }}() *query.ColumnNode {

	cn := query.NewColumnNode (
		"{{= table.DbKey }}",
		"{{= table.QueryName }}",
		"{{= table.FieldQueryName(i) }}",
		"{{= fn }}",
		query.{{= table.FieldReceiverType(i).String() }},
		{{if i == 0 }}true{{else}}false{{if}},
	)
	query.SetParentNode(cn, n)
	return cn
}
}}
    }
    return
}
