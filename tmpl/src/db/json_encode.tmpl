{{g
//*** {{includeName}}

{
    orderedTables := database.MarshalOrder()
    var processedTables maps.Set[string]
    assnTables := database.UniqueManyManyReferences()
}}


{{

// JsonEncodeAll sends the entire database to writer as JSON.
func JsonEncodeAll(ctx context.Context, writer io.Writer) error {
	encoder := json.NewEncoder(writer)
	encoder.SetIndent("", "  ")

	if _,err := io.WriteString(writer, "[\n"); err != nil {
        return fmt.Errorf("writer error: %w", err)
	}

{{for tableNum,table := range orderedTables}}
{{g
    processedTables.Add(table.QueryName)
}}
	{	// Write {{= table.IdentifierPlural }}
		if _,err := io.WriteString(writer, "["); err != nil {
            return fmt.Errorf("writer error: %w", err)
		}

		if _,err := io.WriteString(writer, `"{{= table.QueryName }}"`); err != nil {
            return fmt.Errorf("writer error: %w", err)
		}
        if _,err := io.WriteString(writer, ",\n["); err != nil {
            return fmt.Errorf("writer error: %w", err)
        }

		cursor, err := Query{{= table.IdentifierPlural }}(ctx).LoadCursor()
		if err != nil {
            return fmt.Errorf("query error: %w", err)
		}
		defer cursor.Close()
		obj, err2 := cursor.Next()
        if err2 != nil {
            return fmt.Errorf("database cursor error: %w", err)
        }
		if obj != nil {
			if err := encoder.Encode(obj); err != nil {
                return fmt.Errorf("encoding error: %w", err)
			}
		}

		for obj, err = cursor.Next(); obj != nil && err == nil; obj, err = cursor.Next() {
			if _, err := io.WriteString(writer, ",\n"); err != nil {
                return fmt.Errorf("writer error: %w", err)
			}
			if err := encoder.Encode(obj); err != nil {
                return fmt.Errorf("encoding error: %w", err)
			}
		}
		if err != nil {
            return fmt.Errorf("database cursor error: %w", err)
		}

		if _,err := io.WriteString(writer, "]\n]"); err != nil {
            return fmt.Errorf("writer error: %w", err)
		}

{{if tableNum < len(orderedTables) - 1}}
        if _,err := io.WriteString(writer, ","); err != nil {
            return fmt.Errorf("writer error: %w", err)
        }
{{if}}
		if _,err := io.WriteString(writer, "\n"); err != nil {
            return fmt.Errorf("writer error: %w", err)
		}
	}
{{for}} {{# tables}}

{{if len(assnTables) > 0 }}
    db := Database()
{{for _, mm := range assnTables}}
    {
        if _,err := io.WriteString(writer, ",\n["); err != nil {
            return fmt.Errorf("writer error: %w", err)
        }
        if _,err := io.WriteString(writer, `{{L mm.AssnTableName}},[`); err != nil {
            return fmt.Errorf("writer error: %w", err)
        }


        cursor, err := db.Query(ctx, {{L mm.AssnTableName}},
            map[string]query.ReceiverType{
                {{L mm.AssnSourceColumnName}}: query.{{= mm.AssnSourceColumnType.String() }},
                {{L mm.AssnDestColumnName}}: query.{{= mm.AssnDestColumnType.String() }},
            },
            nil,
            nil)
        if err != nil {
            return fmt.Errorf("query error: %w", err)
        }
        if rec, err2 := cursor.Next(); err2 != nil {
            return fmt.Errorf("database cursor error: %w", err2)
        } else if rec != nil {
            if err = encoder.Encode(rec); err != nil {
                return fmt.Errorf("encoding error: %w", err)
            }
        }
        for {
            rec, err2 := cursor.Next()
            if err2 != nil {
                return fmt.Errorf("database cursor error: %w", err2)
            }
            if rec == nil {
                break
            }

            if _, err := io.WriteString(writer, ",\n"); err != nil {
                return fmt.Errorf("writer error: %w", err)
            }
            if err := encoder.Encode(rec); err != nil {
                return fmt.Errorf("encoding error: %w", err)
            }
        }
        if _,err := io.WriteString(writer, `]]`); err != nil {
            return fmt.Errorf("writer error: %w", err)
        }
    }
{{for}}
{{if}}

	if _, err := io.WriteString(writer, "]"); err != nil {
        return fmt.Errorf("writer error: %w", err)
	}
	return nil
}

}}

{{g

}

}}
