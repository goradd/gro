{{g
//*** {{includeName}}
}}

{{g
    orderedTables := database.MarshalOrder()
    //assnTables := database.UniqueManyManyReferences()
}}

{{
// TestDbJson will export the entire database as JSON into a memory buffer, clear the database, then
// import the entire database from the buffer. It will then do some sanity checks.
func TestDbJson(t *testing.T) {
return
    ctx := db.NewContext(nil)

    // get single comparison objects and data sizes
    // database must be pre-populated for test

{{for _,table := range orderedTables}}
    v_{{= table.Identifier}}, _ := Query{{= table.IdentifierPlural }}(ctx).OrderBy(node.{{= table.Identifier }}().PrimaryKey()).Get() // gets first record
{{for}}
{{for _,table := range orderedTables}}
    v_{{= table.Identifier}}Count, _ := Count{{= table.IdentifierPlural}}(ctx)
{{for}}

    var b bytes.Buffer
    w := bufio.NewWriter(&b)
    assert.NoError(t, JsonEncodeAll(ctx, w))

    ClearAll(ctx)
{{for _,table := range orderedTables}}
    assert.Equal(t, 0, func() int {i,_ := Count{{= table.IdentifierPlural}}(ctx); return i}() )
{{for}}

    r := bufio.NewReader(&b)
    assert.NoError(t, JsonDecodeAll(ctx, r))

{{for _,table := range orderedTables}}
    if v_{{= table.Identifier}} != nil {
        obj, _ := Query{{= table.IdentifierPlural }}(ctx).OrderBy(node.{{= table.Identifier }}().PrimaryKey()).Get()
        assertEqualFields{{= table.Identifier}}(t, v_{{= table.Identifier}}, obj)
    }
{{for}}
{{for _,table := range orderedTables}}
    assert.Equal(t, v_{{= table.Identifier}}Count, func() int {i,_ := Count{{= table.IdentifierPlural}}(ctx); return i}() )
{{for}}
}

}}