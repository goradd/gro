{{g
//*** {{includeName}}

{
    orderedTables := database.MarshalOrder()
    assnTables := database.UniqueManyManyReferences()

}}

{{

// JsonDecodeAll imports the entire database from JSON that was created using JsonEncodeAll.
func JsonDecodeAll(ctx context.Context,  reader io.Reader) error {
	decoder := json.NewDecoder(reader)

	token, err := decoder.Token()
	if err != nil {
		fmt.Println("Error reading opening token:", err)
		return err
	}
	// Ensure the first token is a start of an array
	if delim, ok := token.(json.Delim); !ok || delim != '[' {
		fmt.Println("Error: Expected the JSON to start with an array")
		return err
	}

	for decoder.More() {
		if err := jsonDecodeTable(ctx, decoder); err != nil {
			return err
		}
	}

	// Check if the last token is the end of the array
	token, err = decoder.Token()
	if err != nil {
		fmt.Println("Error reading the last token:", err)
		return err
	}

	if delim, ok := token.(json.Delim); !ok || delim != ']' {
		fmt.Println("Error: Expected the JSON to end with a closing array token")
		return err
	}

	return nil
}

func jsonDecodeTable(ctx context.Context,  decoder *json.Decoder) error {
	token, err := decoder.Token()
	if err != nil {
		fmt.Println("Error reading opening token:", err)
		return err
	}
	// Ensure the first token is a start of an array
	if delim, ok := token.(json.Delim); !ok || delim != '[' {
		fmt.Println("Error: Expected the duple to start with an array")
		return err
	}

	token, err = decoder.Token()
	if err != nil {
		fmt.Println("Error reading name of table:", err)
		return err
	}

	if tableName, ok := token.(string); !ok {
		fmt.Println("Error: Expected a name of a table.")
		return err
	} else {
		switch tableName {
{{for _,table := range orderedTables}}
		case {{L table.QueryName }}:
			err = jsonDecode{{= table.IdentifierPlural }}(ctx, decoder)
{{for}}
{{for _,mm := range assnTables}}
		case {{L mm.AssnTableName }}:
			err = jsonDecode{{= mm.TableIdentifier() }}(ctx, decoder)
{{for}}

		}
		if err != nil {
			return err
		}
	}

	// Check if the last token is the end of the array
	token, err = decoder.Token()
	if err != nil {
		fmt.Println("Error reading the last token:", err)
		return err
	}

	if delim, ok := token.(json.Delim); !ok || delim != ']' {
		fmt.Println("Error: Expected the JSON to end with a closing array token")
		return err
	}

	return nil
}

{{for _,table := range orderedTables}}
func jsonDecode{{= table.IdentifierPlural}}(ctx context.Context,  decoder *json.Decoder) error {
	token, err := decoder.Token()
	if err != nil {
		fmt.Println("Error reading opening token:", err)
		return err
	}
	// Ensure the first token is a start of an array
	if delim, ok := token.(json.Delim); !ok || delim != '[' {
		fmt.Println("Error: Expected the {{= table.Identifier }} list to start with an array")
		return err
	}

	for decoder.More() {
		obj := New{{= table.Identifier}}()
		if err = decoder.Decode(&obj); err != nil {
			return err
		}
		obj.Save(ctx)
	}

	// Check if the last token is the end of the array
	token, err = decoder.Token()
	if err != nil {
		fmt.Println("Error reading the last token:", err)
		return err
	}

	if delim, ok := token.(json.Delim); !ok || delim != ']' {
		fmt.Println("Error: Expected the JSON to end with a closing array token")
		return err
	}

	return nil
}
{{for}}

{{for _,mm := range assnTables}}
func jsonDecode{{= mm.TableIdentifier() }}(ctx context.Context,  decoder *json.Decoder) error {
	token, err := decoder.Token()
	if err != nil {
		fmt.Println("Error reading opening token:", err)
		return err
	}
	// Ensure the first token is a start of an array
	if delim, ok := token.(json.Delim); !ok || delim != '[' {
		fmt.Println("Error: Expected the {{= mm.TableIdentifier() }} list to start with an array")
		return err
	}

    database := Database()
	for decoder.More() {
	    var imp struct {
            Src {{= mm.AssnSourceColumnType.GoType() }} `json:"{{= mm.AssnSourceColumnName }}"`
            Dest {{= mm.AssnDestColumnType.GoType() }} `json:"{{= mm.AssnDestColumnName }}"`
        }

		if err = decoder.Decode(&imp); err != nil {
			return err
		}
		db.Associate(ctx, database, {{L mm.AssnTableName }}, {{L mm.AssnSourceColumnName }}, imp.Src, {{L mm.AssnDestColumnName }}, imp.Dest)
	}

	// Check if the last token is the end of the array
	token, err = decoder.Token()
	if err != nil {
		fmt.Println("Error reading the last token:", err)
		return err
	}

	if delim, ok := token.(json.Delim); !ok || delim != ']' {
		fmt.Println("Error: Expected the JSON to end with a closing array token")
		return err
	}

	return nil
}
{{for}}


}}

{{g
}
}}
