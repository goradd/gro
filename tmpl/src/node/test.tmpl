
{{g
//*** {{includeName}}
}}
{{
package node

import (
	"testing"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestSerializeTable{{= table.Identifier}}Table(t *testing.T) {
	var n query.Node = {{= table.Identifier }}()

    assert.Equal(t, "{{= table.QueryName }}", n.TableName_())
    assert.Equal(t, query.TableNodeType, n.NodeType_())
    assert.Equal(t, "{{= table.DbKey }}", n.DatabaseKey_())

	n2 := serNode(t, n)

    assert.Equal(t, "{{= table.QueryName }}", n2.TableName_())
    assert.Equal(t, query.TableNodeType, n2.NodeType_())
    assert.Equal(t, "{{= table.DbKey }}", n2.DatabaseKey_())

    nodes := {{= table.DecapIdentifier }}Table{}.ColumnNodes_()
    for _,cn := range nodes {
        cn2 := serNode(t, cn)
        assert.Equal(t, "{{= table.QueryName }}", cn2.TableName_())
        require.Implements(t, (*query.Linker)(nil), cn2)
        assert.Equal(t, query.TableNodeType, cn2.(query.Linker).Parent().NodeType_())
    }
}

func TestSerializeReferences{{= table.Identifier}}Table(t *testing.T) {
{{for _, col := range table.Columns}}
{{if col.IsReference() }}

{
    n := {{= table.Identifier }}().{{col.ReferenceIdentifier() }}()
    n2 := serNode(t, n)
    parentNode := n2.(query.Linker).Parent()
    assert.Equal(t, query.TableNodeType, parentNode.NodeType_())
    assert.Equal(t, "{{= table.QueryName }}", parentNode.TableName_())

    nodes := n.(query.TableNodeI).ColumnNodes_()
    for _,cn := range nodes {
        cn2 := serNode(t, cn)
        assert.Equal(t, n.TableName_(), cn2.TableName_())
        require.Implements(t, (*query.Linker)(nil), cn2)
        assert.Equal(t, query.ReferenceNodeType, cn2.(query.Linker).Parent().NodeType_())
    }
}

{{if}}
{{for}}
}

func TestSerializeReverseReferences{{= table.Identifier}}Table(t *testing.T) {
{{for _, rev := range table.ReverseReferences}}

{
    n := {{= table.Identifier }}().{{rev.ReverseIdentifier() }}()
    n2 := serNode(t, n)
    parentNode := n2.(query.Linker).Parent()
    assert.Equal(t, query.TableNodeType, parentNode.NodeType_())
    assert.Equal(t, "{{= table.QueryName }}", parentNode.TableName_())

    nodes := n.(query.TableNodeI).ColumnNodes_()
    for _,cn := range nodes {
        cn2 := serNode(t, cn)
        assert.Equal(t, n.TableName_(), cn2.TableName_())
        require.Implements(t, (*query.Linker)(nil), cn2)
        assert.Equal(t, query.ReverseNodeType, cn2.(query.Linker).Parent().NodeType_())
    }
}

{{for}}
}

func TestSerializeAssociations{{= table.Identifier}}Table(t *testing.T) {
{{for _, mm := range table.ManyManyReferences}}

{
    n := {{= table.Identifier }}().{{mm.IdentifierPlural }}()
    n2 := serNode(t, n)
    assert.Equal(t, query.ManyManyNodeType, n2.NodeType_())
    parentNode := n2.(query.Linker).Parent()
    assert.Equal(t, query.TableNodeType, parentNode.NodeType_())
    assert.Equal(t, "{{= table.QueryName }}", parentNode.TableName_())

    nodes := n.(query.TableNodeI).ColumnNodes_()
    for _,cn := range nodes {
        cn2 := serNode(t, cn)
//        assert.Equal(t, query.ColumnNodeType, cn2.NodeType_())
        parentNode = cn2.(query.Linker).Parent()
        assert.Equal(t, query.ManyManyNodeType, parentNode.NodeType_())
    }
}

{{for}}
}


}}