
{{g
//*** {{includeName}}
}}
{{
package node

import (
	"testing"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestSerializeTable{{= table.Identifier}}Table(t *testing.T) {
	var n query.Node = {{= table.Identifier }}()

    assert.Equal(t, "{{= table.QueryName }}", n.TableName_())
    assert.Equal(t, query.TableNodeType, n.NodeType_())
    assert.Equal(t, "{{= table.DbKey }}", n.DatabaseKey_())

	n2 := serNode(t, n)

    assert.Equal(t, "{{= table.QueryName }}", n2.TableName_())
    assert.Equal(t, query.TableNodeType, n2.NodeType_())
    assert.Equal(t, "{{= table.DbKey }}", n2.DatabaseKey_())

    nodes := {{= table.DecapIdentifier }}Table{}.ColumnNodes_()
    for _,cn := range nodes {
        cn2 := serNode(t, cn)
        assert.Equal(t, "{{= table.QueryName }}", cn2.TableName_())
        assert.Equal(t, query.TableNodeType, query.NodeParent(cn2).NodeType_())
    }
}

func TestSerializeReferences{{= table.Identifier}}Table(t *testing.T) {
{{for _, ref := range table.References}}
{
    n := {{= table.Identifier }}().{{ref.Identifier }}()
    n2 := serNode(t, n)
    parentNode := query.NodeParent(n2)
    assert.Equal(t, query.TableNodeType, parentNode.NodeType_())
    assert.Equal(t, "{{= table.QueryName }}", parentNode.TableName_())

    nodes := n.(query.TableNodeI).ColumnNodes_()
    for _,cn := range nodes {
        cn2 := serNode(t, cn)
        assert.Equal(t, n.TableName_(), cn2.TableName_())
        assert.Equal(t, query.ReferenceNodeType, query.NodeParent(cn2).NodeType_())
    }

{{for _, col2 := range ref.ReferencedTable.Columns}}
    assert.True(t, query.NodesMatch({{= table.Identifier }}().{{= ref.Identifier }}().{{= col2.Identifier }}(), n2.({{= ref.ReferencedTable.Identifier }}Node).{{= col2.Identifier }}()))
{{for}}
{{for _, ref2 := range ref.ReferencedTable.References}}
    assert.True(t, query.NodesMatch({{= table.Identifier }}().{{= ref.Identifier }}().{{= ref2.ForeignKey.Identifier }}(), n2.({{= ref.ReferencedTable.Identifier }}Node).{{= ref2.ForeignKey.Identifier }}()))
    assert.True(t, query.NodesMatch({{= table.Identifier }}().{{= ref.Identifier }}().{{= ref2.Identifier }}(), n2.({{= ref.ReferencedTable.Identifier }}Node).{{= ref2.Identifier }}()))
{{for}}
{{for _, rev2 := range ref.ReferencedTable.ReverseReferences}}
	assert.True(t, query.NodesMatch({{= table.Identifier }}().{{= ref.Identifier }}().{{= rev2.ReverseIdentifier }}(), n2.({{= ref.ReferencedTable.Identifier }}Node).{{= rev2.ReverseIdentifier }}()))
{{for}}
{{for _, mm2 := range ref.ReferencedTable.ManyManyReferences}}
	assert.True(t, query.NodesMatch({{= table.Identifier }}().{{= ref.Identifier }}().{{= mm2.IdentifierPlural }}(), n2.({{= ref.ReferencedTable.Identifier }}Node).{{= mm2.IdentifierPlural }}()))
{{for}}

}

{{for}}
}

func TestSerializeReverseReferences{{= table.Identifier}}Table(t *testing.T) {
{{for _, rev := range table.ReverseReferences}}

{
    n := {{= table.Identifier }}().{{= rev.ReverseIdentifier }}()
    n2 := serNode(t, n)
    parentNode := query.NodeParent(n2)
    assert.Equal(t, query.TableNodeType, parentNode.NodeType_())
    assert.Equal(t, "{{= table.QueryName }}", parentNode.TableName_())

    nodes := n.(query.TableNodeI).ColumnNodes_()
    for _,cn := range nodes {
        cn2 := serNode(t, cn)
        assert.Equal(t, n.TableName_(), cn2.TableName_())
        assert.Equal(t, query.ReverseNodeType, query.NodeParent(cn2).NodeType_())
    }

{{for _, col := range rev.Table.Columns}}
	assert.True(t, query.NodesMatch({{= table.Identifier }}().{{= rev.ReverseIdentifier }}().{{= col.Identifier }}(), n2.({{= rev.Table.Identifier }}Node).{{= col.Identifier }}()))
{{for}}
{{for _, ref := range rev.Table.References}}
	assert.True(t, query.NodesMatch({{= table.Identifier }}().{{= rev.ReverseIdentifier }}().{{= ref.ForeignKey.Identifier }}(), n2.({{= rev.Table.Identifier }}Node).{{= ref.ForeignKey.Identifier }}()))
    assert.True(t, query.NodesMatch({{= table.Identifier }}().{{= rev.ReverseIdentifier }}().{{= ref.Identifier }}(), n2.({{= rev.Table.Identifier }}Node).{{= ref.Identifier }}()))
{{for}}
{{for _, rev2 := range rev.Table.ReverseReferences}}
	assert.True(t, query.NodesMatch({{= table.Identifier }}().{{= rev.ReverseIdentifier }}().{{= rev2.ReverseIdentifier }}(), n2.({{= rev.Table.Identifier }}Node).{{= rev2.ReverseIdentifier }}()))
{{for}}
{{for _, mm2 := range rev.Table.ManyManyReferences}}
	assert.True(t, query.NodesMatch({{= table.Identifier }}().{{= rev.ReverseIdentifier }}().{{= mm2.IdentifierPlural }}(), n2.({{= rev.Table.Identifier }}Node).{{= mm2.IdentifierPlural }}()))
{{for}}

}

{{for}}
}

func TestSerializeAssociations{{= table.Identifier}}Table(t *testing.T) {
{{for _, mm := range table.ManyManyReferences}}

{
    n := {{= table.Identifier }}().{{mm.IdentifierPlural }}()
    n2 := serNode(t, n)
    assert.Equal(t, query.ManyManyNodeType, n2.NodeType_())
    parentNode := query.NodeParent(n2)
    assert.Equal(t, query.TableNodeType, parentNode.NodeType_())
    assert.Equal(t, "{{= table.QueryName }}", parentNode.TableName_())

    nodes := n.(query.TableNodeI).ColumnNodes_()
    for _,cn := range nodes {
        cn2 := serNode(t, cn)
//        assert.Equal(t, query.ColumnNodeType, cn2.NodeType_())
        parentNode = query.NodeParent(cn2)
        assert.Equal(t, query.ManyManyNodeType, parentNode.NodeType_())
    }

{{for _, col := range mm.ReferencedTable.Columns }}
    assert.True(t, query.NodesMatch({{= table.Identifier }}().{{= mm.IdentifierPlural }}().{{= col.Identifier }}(), n2.({{= mm.ReferencedTable.Identifier }}Node).{{= col.Identifier }}()))
{{for}}
{{for _, ref := range mm.ReferencedTable.References }}
    assert.True(t, query.NodesMatch({{= table.Identifier }}().{{= mm.IdentifierPlural }}().{{= ref.ForeignKey.Identifier }}(), n2.({{= mm.ReferencedTable.Identifier }}Node).{{= ref.ForeignKey.Identifier }}()))
    assert.True(t, query.NodesMatch({{= table.Identifier }}().{{= mm.IdentifierPlural }}().{{= ref.Identifier }}(), n2.({{= mm.ReferencedTable.Identifier }}Node).{{= ref.Identifier }}()))
{{for}}
{{for _, rev2 := range mm.ReferencedTable.ReverseReferences}}
	assert.True(t, query.NodesMatch({{= table.Identifier }}().{{= mm.IdentifierPlural }}().{{= rev2.ReverseIdentifier }}(), n2.({{= mm.ReferencedTable.Identifier }}Node).{{= rev2.ReverseIdentifier }}()))
{{for}}
{{for _, mm2 := range mm.ReferencedTable.ManyManyReferences}}
	assert.True(t, query.NodesMatch({{= table.Identifier }}().{{= mm.IdentifierPlural }}().{{= mm2.IdentifierPlural }}(), n2.({{= mm.ReferencedTable.Identifier }}Node).{{= mm2.IdentifierPlural }}()))
{{for}}

}

{{for}}
}


}}