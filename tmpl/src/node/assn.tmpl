{{g
//*** {{includeName}}
}}

func (n *NodeTemplate)genAssn(table *model.Table, _w io.Writer) (err error) {
    for _,mm := range table.ManyManyReferences {
        if err = n.genAssnTable(table, mm, _w); err != nil {return}
    }
    return
}

func (n *NodeTemplate)genAssnTable(table *model.Table, mm *model.ManyManyReference, _w io.Writer) (err error) {
{{
// {{= mm.IdentifierPlural }} represents the many-to-many relationship formed by the {{= mm.AssnTableName }} table.
func (n {{= table.DecapIdentifier }}Table) {{= mm.IdentifierPlural }}() {{= mm.ObjectType() }}NodeI  {
	cn := &{{= mm.ObjectType() }}Node {
		query.NewManyManyNode (
			"{{= table.DbKey }}",
			"{{= mm.AssnTableName }}",
			"{{= mm.AssnSourceColumnName }}",
			"{{= mm.IdentifierPlural }}",
			"{{= mm.QueryName() }}",
			"{{= mm.AssnDestColumnName }}",
			"{{= mm.PrimaryKey() }}",
			{{b mm.DestinationEnumTable != nil }},
		),
	}
	query.SetParentNode(cn, n)
	return cn
}
}}
    return
}

