{{g
//*** {{includeName}}
}}

func (n *NodeTemplate)genAssn(table *model.Table, _w io.Writer) (err error) {
    for _,mm := range table.ManyManyReferences {
        if err = n.genAssnTable(table, mm, _w); err != nil {return}
    }
    return
}

func (n *NodeTemplate)genAssnTable(table *model.Table, mm *model.ManyManyReference, _w io.Writer) (err error) {
    var returnType, objectType string
    if mm.IsEnum()  {
        returnType = mm.ObjectType() + "Node"
        objectType = mm.DestinationEnumTable.DecapIdentifier + "Association"
    } else {
        returnType = mm.ObjectType() + "Expander"
        objectType = mm.DestinationTable.DecapIdentifier + "Association"
    }
{{
// {{= mm.IdentifierPlural }} represents the many-to-many relationship formed by the {{= mm.AssnTableName }} table.
func (n {{= table.DecapIdentifier }}Table) {{= mm.IdentifierPlural }}() {{= returnType }}  {
	cn := &{{= objectType }} {
		ManyManyNode: query.ManyManyNode{
			AssnTableQueryName:      "{{= mm.AssnTableName }}",
			ParentColumnQueryName:    "{{= mm.AssnSourceColumnName }}",
			ParentColumnReceiverType: query.{{= mm.AssnSourceColumnType.String() }},
			Identifier:               "{{= mm.IdentifierPlural }}",
			RefColumnQueryName:       "{{= mm.AssnDestColumnName }}",
			RefColumnReceiverType:    query.{{= mm.AssnDestColumnType.String() }},
		},
	}
	cn.SetParent(n)
	return cn
}

{{if hasReverse}}
func (n *{{= table.DecapIdentifier}}Reference) {{= mm.IdentifierPlural }}() {{= returnType }}  {
    cn := n.{{= table.DecapIdentifier}}Table.{{= mm.IdentifierPlural }}().(*{{= objectType }})
    cn.SetParent(n)
    return cn
}

{{if}}
{{if hasReference}}
func (n *{{= table.DecapIdentifier}}Reverse) {{= mm.IdentifierPlural }}() {{= returnType }}  {
    cn := n.{{= table.DecapIdentifier}}Table.{{= mm.IdentifierPlural }}().(*{{= objectType }})
    cn.SetParent(n)
    return cn
}

{{if}}
{{if hasAssociation}}
func (n *{{= table.DecapIdentifier}}Association) {{= mm.IdentifierPlural }}() {{= returnType }}  {
    cn := n.{{= table.DecapIdentifier}}Table.{{= mm.IdentifierPlural }}().(*{{= objectType }})
    cn.SetParent(n)
    return cn
}

{{if}}

}}
    return
}

