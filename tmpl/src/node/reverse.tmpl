
{{g
//*** {{includeName}}
}}
func (n *NodeTemplate)genReverse(table *model.Table, _w io.Writer) (err error) {
    for _,rev := range table.ReverseReferences {
	    if rev.IsUnique {
            if err = n.genReverseOne(table, rev, _w); err != nil {return}
        } else {
            if err = n.genReverseMany(table, rev, _w); err != nil {return}
        }
    }
    return
}


func (n *NodeTemplate)genReverseOne(table *model.Table, rev *model.Column, _w io.Writer) (err error) {
{{
// {{= rev.ReverseIdentifier() }} represents the one-to-one relationship formed by the reverse reference from the
// {{= rev.QueryName }} column in the {{= rev.Table.QueryName }} table.
func (n {{= table.DecapIdentifier}}Table) {{= rev.ReverseIdentifier() }}() {{= rev.Table.Identifier }}NodeI  {
	cn := &{{= rev.Table.DecapIdentifier }}Reverse{
		ReverseNode: query.ReverseNode{
			ColumnQueryName: "{{= rev.QueryName }}",
			Identifier:      "{{= rev.ReverseIdentifier() }}",
			ReceiverType:    query.{{= rev.Type.String() }},
		},
	}
	cn.SetParent(n)
	return cn
}

{{if hasReverse}}
func (n *{{= table.DecapIdentifier}}Reference) {{= rev.ReverseIdentifier() }}() {{= rev.Table.Identifier }}NodeI  {
    cn := n.{{= table.DecapIdentifier}}Table.{{= rev.ReverseIdentifier() }}().(*{{= rev.Table.DecapIdentifier }}Reverse)
    cn.SetParent(n)
    return cn
}

{{if}}
{{if hasReference}}
func (n *{{= table.DecapIdentifier}}Reverse) {{= rev.ReverseIdentifier() }}() {{= rev.Table.Identifier }}NodeI  {
    cn := n.{{= table.DecapIdentifier}}Table.{{= rev.ReverseIdentifier() }}().(*{{= rev.Table.DecapIdentifier }}Reverse)
    cn.SetParent(n)
    return cn
}

{{if}}
{{if hasAssociation}}
func (n *{{= table.DecapIdentifier}}Association) {{= rev.ReverseIdentifier() }}() {{= rev.Table.Identifier }}NodeI  {
    cn := n.{{= table.DecapIdentifier}}Table.{{= rev.ReverseIdentifier() }}().(*{{= rev.Table.DecapIdentifier }}Reverse)
    cn.SetParent(n)
    return cn
}

{{if}}

}}
    return
}

func (n *NodeTemplate)genReverseMany(table *model.Table, rev *model.Column, _w io.Writer) (err error) {
{{

// {{= rev.ReverseIdentifier() }} represents the many-to-one relationship formed by the reverse reference from the
// {{= rev.QueryName }} column in the {{= rev.Table.QueryName }} table.
func (n {{= table.DecapIdentifier }}Table) {{= rev.ReverseIdentifier() }}() {{= rev.Table.Identifier }}Expander  {
	cn := &{{= rev.Table.DecapIdentifier }}Reverse{
		ReverseNode: query.ReverseNode{
			ColumnQueryName: "{{= rev.QueryName }}",
			Identifier:      "{{= rev.ReverseIdentifier() }}",
			ReceiverType:    query.{{= rev.Type.String() }},
		},
	}
	cn.SetParent(n)
	return cn
}

{{if hasReverse}}
func (n *{{= table.DecapIdentifier}}Reference) {{= rev.ReverseIdentifier() }}() {{= rev.Table.Identifier }}Expander  {
    cn := n.{{= table.DecapIdentifier}}Table.{{= rev.ReverseIdentifier() }}().(*{{= rev.Table.DecapIdentifier }}Reverse)
    cn.SetParent(n)
    return cn
}

{{if}}
{{if hasReference}}
func (n *{{= table.DecapIdentifier}}Reverse) {{= rev.ReverseIdentifier() }}() {{= rev.Table.Identifier }}Expander  {
    cn := n.{{= table.DecapIdentifier}}Table.{{= rev.ReverseIdentifier() }}().(*{{= rev.Table.DecapIdentifier }}Reverse)
    cn.SetParent(n)
    return cn
}

{{if}}
{{if hasAssociation}}
func (n *{{= table.DecapIdentifier}}Association) {{= rev.ReverseIdentifier() }}() {{= rev.Table.Identifier }}Expander  {
    cn := n.{{= table.DecapIdentifier}}Table.{{= rev.ReverseIdentifier() }}().(*{{= rev.Table.DecapIdentifier }}Reverse)
    cn.SetParent(n)
    return cn
}

{{if}}
}}

	return
}