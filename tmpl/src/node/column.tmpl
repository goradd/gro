
{{g
//*** {{includeName}}
}}

func (n *NodeTemplate)genColumn(table *model.Table, col *model.Column, _w io.Writer) (err error) {
    if err = n.genColumnNode(table, col, _w); err != nil { return }
    if col.Reference != nil {
        if col.Reference.Table != nil {
            if err = n.genTableRefNode(table, col, _w); err != nil { return }
        } else {
            if err = n.genEnumTableRefNode(table, col, _w); err != nil { return }
        }
    }
    return
}

func (n *NodeTemplate)genColumnNode(table *model.Table, col *model.Column, _w io.Writer) (err error) {
{{
// {{= col.Identifier }} represents the {{= col.QueryName }} column in the database.
func (n *{{= table.Identifier}}Node) {{= col.Identifier }}() *query.ColumnNode {
	cn := query.NewColumnNode (
		"{{= table.DbKey }}",
		"{{= table.QueryName }}",
		"{{= col.QueryName }}",
		"{{= col.Identifier }}",
		query.{{= col.Type.String() }},
		{{if col.IsPk}}true{{else}}false{{if}},
	)
	query.SetParentNode(cn, n)
	return cn
}
}}
    return
}


func (n *NodeTemplate)genTableRefNode(table *model.Table, col *model.Column, _w io.Writer) (err error) {
{{
// {{= col.ReferenceIdentifier() }} represents the link to a {{= col.ReferenceType() }} object.
func (n *{{= table.Identifier}}Node) {{= col.ReferenceIdentifier() }}() *{{= col.ReferenceType() }}Node {
	cn := &{{= col.ReferenceType() }}Node {
		query.NewReferenceNode (
			"{{= table.DbKey }}",
			"{{= table.QueryName }}",
			"{{= col.QueryName }}",
			"{{= col.Identifier }}",
			"{{= col.ReferenceIdentifier() }}",
			"{{= col.Reference.Table.QueryName }}",
			"{{= col.Reference.Table.PrimaryKeyColumn().QueryName }}",
			false,
			query.{{= col.Type.String() }},
		),
	}
	query.SetParentNode(cn, n)
	return cn
}
}}
    return
}


func (n *NodeTemplate)genEnumTableRefNode(table *model.Table, col *model.Column, _w io.Writer) (err error) {
{{
// {{= col.ReferenceIdentifier() }} represents the link to a {{= col.Reference.EnumTable.Identifier }} object.
func (n *{{= table.Identifier}}Node) {{= col.ReferenceIdentifier() }}() *{{= col.Reference.EnumTable.Identifier }}Node {
    cn := &{{= col.Reference.EnumTable.Identifier }}Node {
        query.NewReferenceNode (
            "{{= table.DbKey }}",
            "{{= table.QueryName }}",
            "{{= col.QueryName }}",
            "{{= col.Identifier }}",
            "{{= col.Reference.EnumTable.QueryName }}",
            "{{= col.Reference.EnumTable.PkQueryName() }}",
            true,
            query.{{= col.Type.String() }},
        ),
    }
    query.SetParentNode(cn, n)
    return cn
}
}}
	return
}
