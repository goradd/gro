
{{g
//*** {{includeName}}
}}

func (n *NodeTemplate)genColumn(table *model.Table, col *model.Column, _w io.Writer) (err error) {
    if col.IsReference() {
       if err = n.genColumnNode(table, col, _w); err != nil { return }
       if err = n.genTableRefNode(table, col, _w); err != nil { return }
    } else {
        if err = n.genColumnNode(table, col, _w); err != nil { return }
    }
    return
}

func (n *NodeTemplate)genColumnNode(table *model.Table, col *model.Column, _w io.Writer) (err error) {
{{
// {{= col.Identifier }} represents the {{= col.QueryName }} column in the database.
func (n {{= table.DecapIdentifier}}Table) {{= col.Identifier }}() *query.ColumnNode {
	cn := query.ColumnNode{
		QueryName: {{L col.QueryName }},
		Identifier: {{L col.Identifier }},
		ReceiverType: query.{{= col.Type.String() }},
		IsPrimaryKey: {{b col.IsPrimaryKey }},
	}
	cn.SetParent(n._self)
	return &cn
}
}}
    return
}


func (n *NodeTemplate)genTableRefNode(table *model.Table, col *model.Column, _w io.Writer) (err error) {
{{
// {{= col.ReferenceIdentifier() }} represents the link to a {{= col.ReferenceType() }} object.
func (n {{= table.DecapIdentifier}}Table) {{= col.ReferenceIdentifier() }}() {{= col.ReferenceType() }}NodeI {
	cn := &{{= col.Reference.Table.DecapIdentifier }}Reference{
		ReferenceNode: query.ReferenceNode {
            ColumnQueryName: {{L col.QueryName }},
            Identifier:      {{L col.Identifier }},
            ReceiverType:    query.{{= col.Type.String() }},
		},
	}
	cn._self = cn
	cn.SetParent(n._self)
	return cn
}
}}
    return
}


func (n *NodeTemplate)genEnumTableRefNode(table *model.Table, col *model.Column, _w io.Writer) (err error) {
{{
// {{= col.ReferenceIdentifier() }} represents the link to a {{= col.Reference.EnumTable.Identifier }} object.
func (n {{= table.DecapIdentifier}}Table) {{= col.ReferenceIdentifier() }}() {{= col.Reference.EnumTable.Identifier }}NodeI {
    cn := &{{= col.Reference.EnumTable.Identifier }}Node {
        query.NewReferenceNode (
            "{{= table.DbKey }}",
            "{{= table.QueryName }}",
            "{{= col.QueryName }}",
            "{{= col.Identifier }}",
            "{{= col.Reference.Identifier }}",
            "{{= col.Reference.EnumTable.QueryName }}",
            "{{= col.Reference.EnumTable.PkQueryName() }}",
            true,
            query.{{= col.Type.String() }},
        ),
    }
    query.SetParentNode(cn, n)
    return cn
}
}}
	return
}
