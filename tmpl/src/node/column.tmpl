{{g
//*** {{includeName}}
}}

func (n *NodeTemplate)genColumn(table *model.Table, col *model.Column, _w io.Writer) (err error) {
    if err = n.genColumnNode(table, col, _w); err != nil { return }
    return
}

func (n *NodeTemplate)genColumnNode(table *model.Table, col *model.Column, _w io.Writer) (err error) {
{{
func (n {{= table.DecapIdentifier}}Table) {{= col.Identifier }}() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName: "{{= col.QueryName }}",
		Identifier: "{{= col.Identifier }}",
		ReceiverType: query.{{= col.ReceiverType.String() }},
		SchemaType: schema.{{= col.SchemaType.String() }},
		SchemaSubType: schema.{{= col.SchemaSubType.String() }},
		IsPrimaryKey: {{b col.IsPrimaryKey }},
	}
	query.NodeSetParent(cn, n)
	return cn
}

{{if hasReverse}}
func (n *{{= table.DecapIdentifier}}Reference) {{= col.Identifier }}() *query.ColumnNode {
    cn := n.{{= table.DecapIdentifier}}Table.{{= col.Identifier }}()
    query.NodeSetParent(cn, n)
    return cn
}

{{if}}
{{if hasReference}}
func (n *{{= table.DecapIdentifier}}Reverse) {{= col.Identifier }}() *query.ColumnNode {
    cn := n.{{= table.DecapIdentifier}}Table.{{= col.Identifier }}()
    query.NodeSetParent(cn, n)
    return cn
}

{{if}}
{{if hasAssociation}}
func (n *{{= table.DecapIdentifier}}Association) {{= col.Identifier }}() *query.ColumnNode {
    cn := n.{{= table.DecapIdentifier}}Table.{{= col.Identifier }}()
    query.NodeSetParent(cn, n)
    return cn
}
{{if}}

}}
    return
}



