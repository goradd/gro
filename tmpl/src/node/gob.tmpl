{{g
//*** {{includeName}}
}}

{{

func (n *{{= table.DecapIdentifier }}Table) GobEncode() (data []byte, err error) {
	return
}

func (n *{{= table.DecapIdentifier }}Table) GobDecode(data []byte) (err error) {
	n._self = n
	return
}

{{if hasReverse}}
func (n *{{= table.DecapIdentifier}}Reference) GobEncode() (data []byte, err error) {
	var buf bytes.Buffer
	e := gob.NewEncoder(&buf)

	if err = e.Encode(n.ReferenceNode); err != nil {
		panic(err)
	}
	data = buf.Bytes()
	return
}

func (n *{{= table.DecapIdentifier}}Reference) GobDecode(data []byte) (err error) {
	buf := bytes.NewBuffer(data)
	dec := gob.NewDecoder(buf)

	if err = dec.Decode(&n.ReferenceNode); err != nil {
		panic(err)
	}
	n._self = n
	return
}
{{if}}

{{if hasReference}}
func (n *{{= table.DecapIdentifier}}Reverse) GobEncode() (data []byte, err error) {
	var buf bytes.Buffer
	e := gob.NewEncoder(&buf)

	if err = e.Encode(n.ReverseNode); err != nil {
		panic(err)
	}
	data = buf.Bytes()
	return
}

func (n *{{= table.DecapIdentifier}}Reverse) GobDecode(data []byte) (err error) {
	buf := bytes.NewBuffer(data)
	dec := gob.NewDecoder(buf)

	if err = dec.Decode(&n.ReverseNode); err != nil {
		panic(err)
	}
	n._self = n
	return
}
{{if}}

{{if hasAssociation}}
func (n *{{= table.DecapIdentifier}}Association) GobEncode() (data []byte, err error) {
	var buf bytes.Buffer
	e := gob.NewEncoder(&buf)

	if err = e.Encode(n.ManyManyNode); err != nil {
		panic(err)
	}
	data = buf.Bytes()
	return
}

func (n *{{= table.DecapIdentifier}}Association) GobDecode(data []byte) (err error) {
	buf := bytes.NewBuffer(data)
	dec := gob.NewDecoder(buf)

	if err = dec.Decode(&n.ManyManyNode); err != nil {
		panic(err)
	}
	n._self = n
	return
}
{{if}}

}}
