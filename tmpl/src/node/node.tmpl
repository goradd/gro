
//*** {{includeName}}

{{# The master template for the nodes for a particular column.}}

func (n *NodeTemplate)gen(table *model.Table, _w io.Writer) (err error) {
    if err = n.genHeader(table, _w); err != nil { return }
    if err = n.genStruct(table, _w); err != nil { return }
    if err = n.genTableNode(table, _w); err != nil { return }
    if err = n.genPrivate(table, _w); err != nil { return }
    if err = n.genPrimaryKey(table, _w); err != nil { return }
    if err = n.genColumns(table, _w); err != nil { return }
    if err = n.genAssn(table, _w); err != nil { return }
    return
}

func (n *NodeTemplate)genHeader(table *model.Table, _w io.Writer) (err error) {
{{
// Code generated by GoRADD. DO NOT EDIT.

package node


import (
    "bytes"
    "encoding/gob"
	"github.com/goradd/goradd/pkg/orm/query"
)
}}
    return
}

func (n *NodeTemplate)genStruct(table *model.Table, _w io.Writer) (err error) {
{{
// {{= table.Identifier}}Node represents the {{= table.QueryName}} table in a query. It uses a builder pattern to chain
// together other tables and columns to form a node in a query.
//
// To use the {{= table.Identifier }}Node, call [{{= table.Identifier }}] to start a reference chain when querying the {{= table.QueryName }} table.
type {{= table.Identifier}}Node struct {
    // ReferenceNodeI is an internal object that represents the capabilities of the node. Since it is embedded, all
    // of its functions are exported and are callable along with the {{= table.DecapIdentifier}}Node functions here.
	query.ReferenceNodeI
}
}}
    return
}

func (n *NodeTemplate)genTableNode(table *model.Table, _w io.Writer) (err error) {
{{
// {{= table.Identifier }} returns a table node that starts a node chain that begins with the {{= table.QueryName }} table.
func {{= table.Identifier }}() *{{= table.Identifier }}Node {
	n := {{= table.Identifier }}Node {
		query.NewTableNode("{{= table.DbKey }}", "{{= table.QueryName }}",  "{{= table.Identifier }}"),
	}
	query.SetParentNode(&n, nil)
	return &n
}
}}
    return
}

func (n *NodeTemplate)genPrivate(table *model.Table, _w io.Writer) (err error) {
{{

// SelectNodes_ is used internally by the framework to return the list of all the column nodes.
// doc: hide
func (n *{{= table.Identifier }}Node) SelectNodes_() (nodes []*query.ColumnNode) {
{{for _,col := range table.Columns}}
	nodes = append(nodes, n.{{col.Identifier}}())
{{for}}
	return nodes
}

// EmbeddedNode is used internally by the framework to return the embedded Reference node.
// doc: hide
func (n *{{= table.Identifier }}Node) EmbeddedNode_() query.NodeI {
	return n.ReferenceNodeI
}

// Copy_ is used internally by the framework to deep copy the node.
// doc: hide
func (n *{{= table.Identifier }}Node) Copy_() query.NodeI {
	return &{{= table.Identifier }}Node{query.CopyNode(n.ReferenceNodeI)}
}

}}
    return
}

func (n *NodeTemplate)genPrimaryKey(table *model.Table, _w io.Writer) (err error) {
    if col := table.PrimaryKeyColumn(); col != nil {
{{
// PrimaryKeyNode returns a node that points to the primary key column, if
// a single primary key exists in the table.
func (n *{{= table.Identifier }}Node) PrimaryKeyNode() (*query.ColumnNode) {
    return n.{{col.Identifier}}()
}
}}
    }
    return
}

func (n *NodeTemplate)genColumns(table *model.Table, _w io.Writer) (err error) {
    for _,col := range table.Columns {
        if err = n.genColumn(table, col, _w); err != nil { return }
    }
    return
}

{{: column.tmpl }}
{{: assn.tmpl }}
{{: reverse.tmpl }}


