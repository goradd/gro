{{g
//*** {{includeName}}

    var hasReverse bool
    var hasReference bool
    var hasAssociation bool

}}

{{# The master template for the nodes for a particular table.}}

func (n *NodeTemplate)gen(table *model.Table, _w io.Writer) (err error) {
    hasReference = len(table.References) > 0
    hasAssociation = len(table.ManyManyReferences) > 0
    hasReverse = len(table.ReverseReferences) > 0

    if err = n.genHeader(table, _w); err != nil { return }
    if err = n.genStruct(table, _w); err != nil { return }
    if err = n.genTableNode(table, _w); err != nil { return }
    if err = n.genPrivate(table, _w); err != nil { return }
    if err = n.genPrimaryKey(table, _w); err != nil { return }
    if err = n.genColumns(table, _w); err != nil { return }
    if err = n.genReferences(table, _w); err != nil { return }
    if err = n.genAssn(table, _w); err != nil { return }
    if err = n.genReverse(table, _w); err != nil { return }
    if err = n.genGob(table, _w); err != nil { return }
    if err = n.genInit(table, _w); err != nil { return }
    return
}

func (n *NodeTemplate)genHeader(table *model.Table, _w io.Writer) (err error) {
{{
// Code generated by goradd-orm. DO NOT EDIT.

package node


import (
    "bytes"
    "encoding/gob"
	"github.com/goradd/orm/pkg/query"
	"github.com/goradd/orm/pkg/schema"
)
}}
    return
}

func (n *NodeTemplate)genStruct(table *model.Table, _w io.Writer) (err error) {
{{: struct.tmpl}}
    return
}

func (n *NodeTemplate)genTableNode(table *model.Table, _w io.Writer) (err error) {
{{: "table.tmpl"}}
    return
}

func (n *NodeTemplate)genPrivate(table *model.Table, _w io.Writer) (err error) {
{{: "private.tmpl"}}
    return
}

func (n *NodeTemplate)genPrimaryKey(table *model.Table, _w io.Writer) (err error) {
    if col := table.PrimaryKeyColumn(); col != nil {
{{: "pk.tmpl"}}
    }
    return
}

func (n *NodeTemplate)genColumns(table *model.Table, _w io.Writer) (err error) {
    for _,col := range table.Columns {
        if err = n.genColumn(table, col, _w); err != nil { return }
    }
    return
}

func (n *NodeTemplate)genReference(table *model.Table, _w io.Writer) (err error) {
    for _,ref := range table.References {
        if err = n.genColumn(table, ref.Column, _w); err != nil { return }
        if err = n.genRefNode(table, ref.Column, _w); err != nil { return }
    }
    return
}


func (n *NodeTemplate)genGob(table *model.Table, _w io.Writer) (err error) {
{{: "gob.tmpl" }}
    return
}

func (n *NodeTemplate)genInit(table *model.Table, _w io.Writer) (err error) {
{{: "init.tmpl" }}
    return
}

{{: column.tmpl }}
{{: referemce.tmpl }}
{{: assn.tmpl }}
{{: reverse.tmpl }}

