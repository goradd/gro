{{g
//*** {{includeName}}
}}

{{

{{# The following 3 functions are in support of the NodeI interface and use of the node in the goradd framework. }}

// TableName_ returns the query name of the table the node is associated with.
func (n {{= table.DecapIdentifier }}Table) TableName_() string {
    return "{{= table.QueryName }}"
}

// NodeType_ returns the query.NodeType of the node.
func (n {{= table.DecapIdentifier }}Table) NodeType_() query.NodeType {
    return query.TableNodeType
}

// DatabaseKey_ returns the database key of the database the node is associated with.
func (n {{= table.DecapIdentifier }}Table) DatabaseKey_() string {
    return "{{= table.DbKey }}"
}

// ColumnNodes_ is used internally by the framework to return the list of all the column nodes.
// This may include reference nodes to enum types.
func (n {{= table.DecapIdentifier }}Table) ColumnNodes_() (nodes []query.NodeI) {
{{for _,col := range table.Columns}}
	nodes = append(nodes, n.{{col.Identifier}}())
{{for}}
	return nodes
}

// Columns_ is used internally by the framework to return the list of all the columns in the table.
func (n {{= table.DecapIdentifier }}Table) Columns_() []string {
    return []string {
{{for _,col := range table.Columns}}
        "{{= col.QueryName }}",
{{for}}
	}
}


// IsEnum_ is used internally by the framework to determine if the current table is an enumerated type.
func (n {{= table.DecapIdentifier }}Table) IsEnum_() bool {
    return false
}

{{if hasReverse}}
func (n *{{= table.DecapIdentifier }}Reference) NodeType_() query.NodeType {
    return query.ReferenceNodeType
}
{{if}}

{{if hasReference}}
func (n *{{= table.DecapIdentifier }}Reverse) NodeType_() query.NodeType {
    return query.ReverseNodeType
}
{{if}}

{{if hasAssociation}}
func (n *{{= table.DecapIdentifier }}Association) NodeType_() query.NodeType {
    return query.ManyManyNodeType
}
{{if}}

}}
