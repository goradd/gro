
{{g
//*** {{includeName}}
}}
{{

// IDs used to access the {{= table.Identifier }} object fields by name using the Get function.
// doc: type={{= table.Identifier }}
const  (

{{for _,col := range table.Columns}}
    {{= table.Identifier }}_{{= col.Identifier}} = `{{= col.Identifier }}`
{{if col.IsReference()}}
    {{= table.Identifier }}_{{= col.ReferenceIdentifier() }} = `{{= col.ReferenceIdentifier() }}`
{{if}}
{{for}}

{{for _,col := range table.ReverseReferences}}
{{if col.IsUnique }}
    {{= table.Identifier }}{{= col.Reference.ReverseIdentifier }} = `{{= col.Reference.ReverseIdentifier }}`
{{else}}
    {{= table.Identifier }}{{= col.Reference.ReverseIdentifierPlural }} = `{{= col.Reference.ReverseIdentifierPlural }}`
{{if}}
{{for}}

{{for _,mm := range table.ManyManyReferences}}
    {{= table.Identifier }}{{= mm.Identifier }} = `{{= mm.Identifier }}`
    {{= table.Identifier }}{{= mm.IdentifierPlural }} = `{{= mm.IdentifierPlural }}`
{{for}}

) {{# const}}

{{for _,col := range table.Columns}}
{{if col.Size > 0}}
{{if col.Type == query.ColTypeString}}
    const {{= table.Identifier }}{{= col.Identifier }}MaxLength = {{u col.Size }} // The number of runes the column can hold
{{elseif col.Type == query.ColTypeBytes || col.Type == query.ColTypeUnknown }}
    const {{= table.Identifier }}{{= col.Identifier }}MaxLength = {{u col.Size }} // The number of bytes the column can hold
{{elseif col.Type == query.ColTypeInteger || col.Type == query.ColTypeUnsigned }}
    const {{= table.Identifier }}{{= col.Identifier }}Max = {{L col.MaxInt() }}
    const {{= table.Identifier }}{{= col.Identifier }}Min = {{L col.MinInt() }}
{{if}}
{{if}}
{{for}}

}}
