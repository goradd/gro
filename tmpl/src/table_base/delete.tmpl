
{{g
//*** {{includeName}}
}}
{{
// Delete deletes the record from the database.
{{if len(table.ReverseReferences) > 0 }}
//
{{for _,rev := range table.ReverseReferences }}
{{if rev.IsUnique}}
{{if rev.IsNullable}}
// An associated {{= rev.ReverseIdentifier() }} will have its {{= rev.Identifier }} field set to NULL.
{{else}}
// An associated {{{= rev.ReverseIdentifier() }} will also be deleted since its {{= rev.Identifier }} field is not nullable.
{{if}}
{{else}}
{{if rev.IsNullable}}
// Associated {{= rev.ReverseIdentifier() }} will have their {{= rev.Identifier }} field set to NULL.
{{else}}
// Associated {{= rev.ReverseIdentifier() }} will also be deleted since their {{= rev.Identifier }} fields are not nullable.
{{if}}
{{if}}
{{for}}
{{if}}
func (o *{{= table.DecapIdentifier}}Base) Delete(ctx context.Context) (err error) {
    if o == nil {
        return // allow deleting of a nil object to be a noop
    }
	if !o._restored {
		panic ("Cannot delete a record that has no primary key value.")
	}
	d := Database()
{{if len(table.ReverseReferences) == 0 && len(table.ManyManyReferences) == 0}}
	d.Delete(ctx, "{{table.QueryName}}", map[string]any{"{{= table.PrimaryKeyColumn().Identifier }}":o.{{= table.PrimaryKeyColumn().DecapIdentifier }} })
    return nil
{{else}}
    err = db.ExecuteTransaction(ctx, d, func() error {
	{{for _,rev := range table.ReverseReferences }}
        {{if rev.IsUnique }}
            {{if rev.IsNullable}}
            {
                // Set the related objects pointer to us to NULL in the database
                obj := Query{{= rev.Table.IdentifierPlural }}(ctx).
                          Where(op.Equal(node.{{= rev.Table.Identifier }}().{{= rev.Identifier }}(), o.{{= table.PrimaryKeyColumn().VariableIdentifier() }})).
                          Select(node.{{= rev.Table.Identifier}}().{{= rev.Identifier }}()).
                          Get()
                if obj != nil {
                    obj.Set{{= rev.Identifier }}ToNull()
                    if err = obj.Save(ctx); err != nil {
                        return err
                    }
                }
                // Set this object's pointer to the reverse object to nil to mark that we broke the link
                o.{{= rev.ReverseVariableIdentifier() }} = nil
            }
            {{else}}
            {
                 obj := Query{{= rev.Table.IdentifierPlural }}(ctx).
                           Where(op.Equal(node.{{= rev.Table.Identifier}}().{{= rev.Identifier }}(), o.{{= table.PrimaryKeyColumn().VariableIdentifier() }})).
                           Get()
                 if obj != nil {
                     if err = obj.Delete(ctx); err != nil {
                         return err
                     }
                 }
                 // Set this object's pointer to the reverse object to nil to mark that we broke the link
                 o.{{= rev.ReverseVariableIdentifier() }} = nil
            }
            {{if}}
        {{else}} {{# one-to-many}}
            {{if rev.IsNullable}}
            {
                objs := Query{{= rev.Table.IdentifierPlural }}(ctx).
                          Where(op.Equal(node.{{= rev.Table.Identifier }}().{{= rev.Identifier }}(), o.{{= table.PrimaryKeyColumn().VariableIdentifier() }})).
                          Select(node.{{= rev.Table.Identifier }}().{{= rev.Identifier }}()).
                          Load()
                for _,obj := range objs {
                    obj.Set{{= rev.Identifier }}ToNull()
                    if err = obj.Save(ctx); err != nil {
                        return err
                    }
                }
                o.{{= rev.ReverseVariableIdentifier() }}.Clear()
            }
            {{else}}
            {
                objs := Query{{= rev.Table.IdentifierPlural }}(ctx).
                          Where(op.Equal(node.{{= rev.Table.Identifier}}().{{= rev.Identifier}}(), o.{{= table.PrimaryKeyColumn().VariableIdentifier() }})).
                          Load()
                for _,obj := range objs {
                    if err = obj.Delete(ctx); err != nil {
                        return err
                    }
                }
                o.{{= rev.ReverseVariableIdentifier() }}.Clear()
            }
            {{if}}
        {{if}}
    {{for}}

    {{for _,mm := range table.ManyManyReferences}}
        db.AssociateOnly(ctx,
            d,
            "{{= mm.AssnTableName }}",
            "{{= mm.AssnSourceColumnName }}",
            o.PrimaryKey(),
            "{{= mm.PrimaryKey() }}",
            []{{= mm.ObjectType() }}(nil))

    {{for}}

	    d.Delete(ctx, "{{= table.QueryName }}", map[string]any{"{{= table.PrimaryKeyColumn().Identifier }}": o.{{= table.PrimaryKeyColumn().VariableIdentifier() }} })
        return nil
	})

	if err != nil {
	    return err
	}
{{if}}
	broadcast.Delete(ctx, "{{= table.DbKey }}", "{{= table.QueryName }}", fmt.Sprint(o.{{= table.PrimaryKeyColumn().VariableIdentifier() }}))
	return
}

// delete{{= table.Identifier }} deletes the {{= table.Identifier }} with primary key pk from the database
// and handles associated records.
func delete{{= table.Identifier }}(ctx context.Context, pk {{= table.PrimaryKeyGoType() }}) error {
{{if len(table.ReverseReferences) == 0 && len(table.ManyManyReferences) == 0 }}
	d := db.GetDatabase("{{= table.DbKey }}")
	d.Delete(ctx, "{{= table.QueryName }}", map[string]any{"{{= table.PrimaryKeyColumn().Identifier }}": pk} )
	broadcast.Delete(ctx, "{{= table.DbKey }}", "{{= table.QueryName }}", fmt.Sprint(pk))
{{else}}
    if obj := Load{{= table.Identifier }}(ctx, pk, node.{{= table.Identifier}}().PrimaryKey()); obj != nil {
        if err := obj.Delete(ctx); err != nil {
            return err
        }
    }
{{if}}
    return nil
}
}}