
//*** {{includeName}}

{{
// Delete deletes the associated record from the database.
func (o *{{= table.Identifier}}Base) Delete(ctx context.Context) {
	if !o._restored {
		panic ("Cannot delete a record that has no primary key value.")
	}
	d := Database()
{{if len(table.ReverseReferences) == 0 && len(table.ManyManyReferences) == 0}}
	d.Delete(ctx, "{{table.QueryName}}", "{{= table.PrimaryKeyColumn().Identifier }}", o.{{= table.PrimaryKeyColumn().DecapIdentifier }})
{{else}}
    db.ExecuteTransaction(ctx, d, func() {
	{{for _,col := range table.ReverseReferences }}
        {{if col.IsUnique }}
            {{if col.IsNullable}}
            {
                // Set the related objects pointer to us to NULL in the database
                obj := Query{{= col.Table.IdentifierPlural }}(ctx).
                          Where(Equal(node.{{= col.Table.Identifier }}().{{= col.Identifier }}(), o.{{= col.ReverseVariableIdentifier() }})).
                          Select(node.{{= col.Table.Identifier}}().{{= col.ReverseVariableIdentifier() }}()).
                          Get()
                if obj != nil {
                   obj.Set{{= col.Identifier }}(nil)
                   obj.Save(ctx)
                }
                // Set this object's pointer to the reverse object to nil to mark that we broke the link
                o.{{= col.ReverseVariableIdentifier() }} = nil
            }
            {{else}}
            {
                 obj := Query{{= col.Table.IdentifierPlural }}(ctx).
                           Where(Equal(node.{{= col.Table.Identifier}}().{{= col.Identifier }}(), o.{{= col.ReverseVariableIdentifier() }})).
                           Get()
                 if obj != nil {
                     obj.Delete(ctx)
                 }
                 // Set this object's pointer to the reverse object to nil to mark that we broke the link
                 o.{{= col.ReverseVariableIdentifier() }} = nil
            }
            {{if}}
        {{else}} {{# one-to-many}}
            {{if col.IsNullable}}
            {
                objs := Query{{= col.Table.IdentifierPlural }}(ctx).
                          Where(Equal(node.{{= col.Table.Identifier }}().{{= col.Identifier }}(), o.{{= col.ReverseVariableIdentifier() }})).
                          Select(node.{{= col.Table.Identifier }}().PrimaryKeyNode()).
                          Load()
                for _,obj := range objs {
                   obj.Set{{= col.Identifier }}(nil)
                   obj.Save(ctx)
                }
                o.{{= col.ReverseVariableIdentifier() }} = nil
            }
            {{else}}
            {
                objs := Query{{= col.Table.IdentifierPlural }}(ctx).
                          Where(Equal(node.{{= col.Table.Identifier}}().{{= col.Identifier}}(), o.{{= col.ReverseVariableIdentifier() }})).
                          Load()
                for _,obj := range objs {
                    obj.Delete(ctx)
                }
                o.{{= col.ReverseVariableIdentifier() }} = nil
            }
            {{if}}
        {{if}}
    {{for}}

    {{for _,mm := range table.ManyManyReferences}}
        d.Associate(ctx,
            "{{= mm.AssnTableName }}",
            "{{= mm.AssnSourceColumnName }}",
            o.PrimaryKey(),
            "{{= mm.DestinationTable.QueryName }}",
            "{{= mm.DestinationTable.PrimaryKeyColumn().QueryName }}",
            nil)

    {{for}}

	d.Delete(ctx, "{{= table.QueryName }}", "{{= table.PrimaryKeyColumn().Identifier }}", o.{{= table.PrimaryKeyColumn().VariableIdentifier() }})
	})
{{if}}
	broadcast.Delete(ctx, "{{= table.DbKey }}", "{{= table.QueryName }}", fmt.Sprint(o.{{= table.PrimaryKeyColumn().VariableIdentifier() }}))
}

// delete{{= table.Identifier }} deletes the associated record from the database.
func delete{{= table.Identifier }}(ctx context.Context, pk {{= table.PrimaryKeyGoType() }}) {
{{if len(table.ReverseReferences) == 0 && len(table.ManyManyReferences) == 0 }}
	d := db.GetDatabase("{{= table.DbKey }}")
	d.Delete(ctx, "{{= table.QueryName }}", "{{= table.PrimaryKeyColumn().Identifier }}", pk)
	broadcast.Delete(ctx, "{{= table.DbKey }}", "{{= table.QueryName }}", fmt.Sprint(pk))
{{else}}
    if obj := Load{{= table.Identifier }}(ctx, pk, node.{{= table.Identifier}}().PrimaryKeyNode()); obj != nil {
        obj.Delete(ctx)
    }
{{if}}
}
}}