
{{g
//*** {{includeName}}
}}
{{
        case "{{= rev.ReverseJsonKey() }}":
{{if rev.IsUnique }}
            v2 := New{{= rev.Table.Identifier }}()
            m2,ok := v.(map[string]any)
            if !ok {
                return fmt.Errorf("json field %s must be a map", k)
            }
            err = v2.UnmarshalStringMap(m2)
            if err != nil {return}
            o.Set{{= rev.ReverseIdentifier }}(v2)
{{else}}
            v2,ok := v.([]any)
            if !ok {
                return fmt.Errorf("json field %s must be an array of maps", k)
            }
            var s []*{{= rev.Table.Identifier }}
            for _,i2 := range v2 {
                m2,ok := i2.(map[string]any)
                if !ok {
                    return fmt.Errorf("json field %s must be an array of maps", k)
                }
                v3 := New{{= rev.Table.Identifier }}()
                err = v3.UnmarshalStringMap(m2)
                if err != nil {return}
                s = append(s, v3)
            }
            o.Set{{= rev.ReverseIdentifier }}(s...)
{{if}}


}}
