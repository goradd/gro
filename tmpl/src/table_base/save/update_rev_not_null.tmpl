
{{g
//*** {{includeName}}
}}
{{
                    // Since the other side of the relationship cannot be null, there cannot be objects that will be detached.
                    if oldObjs, err := Query{{= col.Table.IdentifierPlural }}(ctx).
                                Where(op.Equal(node.{{= col.Table.Identifier }}().{{= col.Identifier }}(), o.PrimaryKey())).
                                Select(node.{{= col.Table.Identifier }}().{{= col.Identifier }}()).
{{if col.Table.LockColumn() != nil }}
                                Select(node.{{= col.Table.Identifier }}().{{= col.Table.LockColumn().Identifier }}()).
{{if}}
                                Load(); err != nil {
                        return err
                    } else {
                        for _,obj := range oldObjs {
                            if !o.{{= col.ReverseField }}.Has(obj.PrimaryKey()) {
                                err = obj.Delete(ctx) // old object is not in group of new objects, so delete it since it has a non-null reference to o.
                                if err != nil {
                                    return err
                                }
                            }
                        }
                        keys := o.{{= col.ReverseField }}.Keys() // Make a copy of the keys, since we will change the slicemap while iterating
                        for i, k := range keys {
                            obj := o.{{= col.ReverseField }}.Get(k)
                            if obj == nil {
                                // object was deleted during save?
                                continue
                            }
                            obj.Set{{= col.Identifier }}(o.PrimaryKey())
                            obj.{{= col.Field }}IsDirty = true // force a change in case data is stale
                            if err = obj.Save(ctx); err != nil {
                                return err
                            }
                            if obj.PrimaryKey() != k {
                                // update slice map key without changing order
                                o.{{= col.ReverseField }}.Delete(k)
                                o.{{= col.ReverseField }}.SetAt(i, obj.PrimaryKey(), obj)
                            }
                        }
                    }
}}
