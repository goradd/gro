
{{g
//*** {{includeName}}
}}
{{
                if currentObjs, err := Query{{= col.Table.IdentifierPlural }}(ctx).
                          Where(op.Equal(node.{{= col.Table.Identifier }}().{{= col.Identifier }}(), o.PrimaryKey())).
                          Select(node.{{= col.Table.Identifier }}().{{= col.Identifier }}()).
{{if col.Table.LockColumn() != nil }}
                          Select(node.{{= col.Table.Identifier }}().{{= col.Table.LockColumn().Identifier }}()).
{{if}}
                          Load(); err != nil {
                    return err
                } else {
                    for _,obj := range currentObjs {
                        if !o.{{= col.ReverseField }}.Has(obj.PrimaryKey()) {
                            // The old object is not in the group of new objects
                            obj.Set{{= col.Identifier }}ToNull()
                            if err = obj.Save(ctx); err != nil {
                                return err
                            }
                        }
                    }
                    keys := o.{{= col.ReverseField }}.Keys() // Make a copy of the keys, since we will change the slicemap while iterating
                    for i, k := range keys {
                        obj := o.{{= col.ReverseField }}.Get(k)
                        obj.Set{{= col.Identifier }}(o.PrimaryKey())
                        obj.{{= col.Field }}IsDirty = true // force a change in case data is stale
                        if err = obj.Save(ctx); err != nil {
                            return err
                        }
                        if obj.PrimaryKey() != k {
                            // update slice map key without changing order
                            o.{{= col.ReverseField }}.Delete(k)
                            o.{{= col.ReverseField }}.SetAt(i, obj.PrimaryKey(), obj)
                        }
                    }
                }

}}
