
{{g
//*** {{includeName}}
}}
{{
// update will update the values in the database, saving any changed values.
func (o *{{= table.DecapIdentifier}}Base) update(ctx context.Context) error {
    if !o._restored {
        panic ("cannot update a record that was not originally read from the database.")
    }

    var modifiedFields map[string]interface{}
    d := Database()
    err := db.ExecuteTransaction(ctx, d, func() error {
{{: "update_ref.tmpl" }}
        // Save all modified fields to the database
        modifiedFields = o.getModifiedFields()
        if len(modifiedFields) != 0 {
{{if c := table.LockColumn(); c == nil }}
            err := d.Update(ctx, "{{= table.QueryName }}", "{{= table.PrimaryKeyColumn().QueryName }}", o._originalPK, modifiedFields, "", 0)
{{else}}
            // If this panics with an invalid {{= c.Identifier}} value, then the {{= c.Identifier}} field was not selected in a prior query. Be sure to include it in any Select statements.
            err := d.Update(ctx, "{{= table.QueryName }}", "{{= table.PrimaryKeyColumn().QueryName }}", o._originalPK, modifiedFields, "{{= c.QueryName }}", o.{{= c.Identifier}}())
{{if}}
            if err != nil {
                return err
            }
        }

{{: "update_rev.tmpl" }}
{{: "update_mm.tmpl" }}

        return nil
    }) // transaction
    if err != nil {
        return err
    }

	o.resetDirtyStatus()
	if len(modifiedFields) != 0 {
        broadcast.Update(ctx, "{{= table.DbKey}}", "{{= table.QueryName}}", o._originalPK, all.SortedKeys(modifiedFields)...)
	}

	return nil
}

}}
