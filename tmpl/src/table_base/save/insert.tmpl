
{{g
//*** {{includeName}}
}}
{{
// insert will insert the object into the database. Related items will be saved.
func (o *{{= table.DecapIdentifier}}Base) insert(ctx context.Context) (err error) {
    var insertFields map[string]interface{}
    d := Database()
{{if table.WriteTimeout != 0 }}

    var cancel context.CancelFunc
    ctx, cancel = context.WithTimeout(ctx, {{= table.WriteTimeoutConst() }})
    defer cancel()

{{if}}
	err = db.ExecuteTransaction(ctx, d, func() error {
{{: update_ref.tmpl }}
{{for _,col := range table.SettableColumns() }}
{{if !col.IsAutoPK && !col.IsNullable}}
{{# Note: Most likely the user is inserting a new record, but forgot to set a required value, but there is the
              possibility that this is a retrieved record with missing fields (through the Select statement) and those
              missing fields are required, and the user is forcing an insert. }}
    if !o.{{= col.VariableIdentifier() }}IsLoaded {
        panic("a value for {{= col.Identifier }} is required, and there is no default value. Call Set{{= col.Identifier }}() before inserting the record.")
    }
{{if}}
{{for}}
{{: unique_check.tmpl }}
    insertFields = get{{= table.Identifier }}InsertFields(o)
    var newPK {{= table.PrimaryKeyGoType() }}
{{if table.HasAutoPK() }}
	newPK, err = d.Insert(ctx, "{{= table.QueryName }}", "{{= table.PrimaryKeyColumn().QueryName }}", insertFields)
    if err != nil {
        return err
    }
	o.{{= table.PrimaryKeyColumn().VariableIdentifier() }} = newPK
	o._originalPK = newPK
    o.{{= table.PrimaryKeyColumn().VariableIdentifier() }}IsLoaded = true
{{else}}
	_, err = d.Insert(ctx, "{{= table.QueryName }}", "", insertFields)
    if err != nil {
        return err
    }
	o._originalPK = o.PrimaryKey()
	newPK = o.PrimaryKey()
	_ = newPK
{{if}}

{{g

{{: "insert_rev.tmpl"  }}
{{: "insert_mm.tmpl"  }}

}}

        return nil

    }) // transaction

    if err != nil {
        return
    }
{{# Update local copies of auto generated fields }}
{{for _,col := range table.Columns}}
{{if col.ReceiverType == query.ColTypeTime && (col.DefaultValue == model.CreatedTime || col.DefaultValue == model.ModifiedTime) ||
        col.SchemaSubType == schema.ColSubTypeTimestamp ||
        col.SchemaSubType == schema.ColSubTypeLock }}
    if t,ok := insertFields["{{= col.QueryName }}"]; ok {
        o.{{= col.VariableIdentifier() }} = t.({{= col.GoType() }})
        o.{{= col.VariableIdentifier() }}IsLoaded = true
    }
{{if}}
{{for}}

	o.resetDirtyStatus()
	o._restored = true
	broadcast.Insert(ctx, "{{= table.DbKey }}", "{{= table.QueryName }}", o.PrimaryKey())
	return
}

}}

