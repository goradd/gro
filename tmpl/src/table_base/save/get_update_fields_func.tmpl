{{g
//*** {{includeName}}

    var hasTimestamp bool

    for _,col := range table.Columns {
        if col.ReceiverType == query.ColTypeTime && col.DefaultValue == model.ModifiedTime ||
            col.SchemaSubType == schema.ColSubTypeTimestamp {
            hasTimestamp = true
        }
    }
}}
{{
// getUpdateFields returns the database columns that will be sent to the update process.
// This will include timestamp fields only if some other column has changed.
func (o *{{= table.DecapIdentifier }}Base) getUpdateFields() (fields map[string]interface{}) {
	fields = map[string]interface{}{}
{{for _,col := range table.SettableColumns() }}
	if o.{{= col.VariableIdentifier() }}IsDirty {
{{if col.IsNullable}}
        if 	o.{{= col.VariableIdentifier() }}IsNull {
            fields["{{= col.QueryName }}"] = nil
        } else {
{{if col.IsEnumArray() }}
            var a []int
            for _,v := range o.{{= col.VariableIdentifier() }}.Values() {
                a = append(a, int(v))
            }
            b, _ := json.Marshal(a)
            fields["{{= col.QueryName }}"] = string(b)
{{else}}
  		    fields["{{= col.QueryName }}"] = o.{{= col.VariableIdentifier() }}
{{if}}
        }
{{else}}
{{if col.IsEnumArray() }}
        b,_ := json.Marshal(o.{{= col.VariableIdentifier() }})
        fields["{{= col.QueryName }}"] = string(b)
{{else}}
        fields["{{= col.QueryName }}"] = o.{{= col.VariableIdentifier() }}
{{if}}
{{if}}
	}
{{for}}
{{if hasTimestamp}}
    if len(fields) > 0 {
{{for _,col := range table.Columns }}
{{if col.ReceiverType == query.ColTypeTime && col.DefaultValue == model.ModifiedTime }}
        fields["{{= col.QueryName }}"] = time.Now().UTC()
{{elseif col.SchemaSubType == schema.ColSubTypeTimestamp }}
        fields["{{= col.QueryName }}"] = time.Now().UnixMicro()
{{if}}
{{for}}
    }
{{if}}
	return
}

}}
