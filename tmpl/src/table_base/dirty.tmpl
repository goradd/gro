
{{g
//*** {{includeName}}
}}
{{
// resetDirtyStatus resets the dirty status of every field in the object.
func (o *{{= table.DecapIdentifier}}Base) resetDirtyStatus() {
{{for _,col := range table.Columns }}
	o.{{= col.VariableIdentifier() }}IsDirty = false
{{for}}
{{for _,ref := range table.ReverseReferences }}
	o.{{= ref.ReverseVariableIdentifier() }}IsDirty = false
{{for}}
{{for _,mm := range table.ManyManyReferences }}
	o.{{= mm.VariableIdentifier() }}IsDirty = false
{{for}}

}

// IsDirty returns true if the object has been changed since it was read from the database.
func (o *{{= table.DecapIdentifier}}Base) IsDirty() (dirty bool) {
    dirty = {{join table.Columns, "|| \n"}}o.{{= _j.VariableIdentifier() }}IsDirty {{if _j.IsReference() && !_j.IsEnumReference() }} ||
	    (o.{{= _j.ReferenceVariableIdentifier() }} != nil && o.{{= _j.ReferenceVariableIdentifier() }}.IsDirty()) {{if}}{{join}}

{{if len(table.ReverseReferences) > 0}}
	dirty = dirty ||
	    {{join table.ReverseReferences, "|| \n"}}o.{{= _j.ReverseVariableIdentifier() }}IsDirty{{join}}

{{for _,ref := range table.ReverseReferences }}
{{if ref.IsUnique }}
    dirty = dirty || (o.{{= ref.ReverseVariableIdentifier() }} != nil && o.{{= ref.ReverseVariableIdentifier() }}.IsDirty())
{{else}}
    for obj := range o.{{= ref.ReverseVariableIdentifier() }}.ValuesIter() {
        dirty = dirty || obj.IsDirty()
    }
{{if}}
{{for}}
{{if}}

{{if len(table.ManyManyReferences) > 0}}
	dirty = dirty ||
	    {{join table.ManyManyReferences, "|| \n"}}o.{{= _j.VariableIdentifier() }}IsDirty{{join}}

    {{for _,mm := range table.ManyManyReferences}}
        {{if !mm.IsEnum() }}

    for obj := range o.{{= mm.VariableIdentifier() }}.ValuesIter() {
        dirty = dirty || obj.IsDirty()
    }
        {{if}}
    {{for}}
{{if}}

    return
}

}}
