
{{g
//*** {{includeName}}
}}
func (tmpl *TableBaseTemplate)genAccessors(table *model.Table, _w io.Writer) (err error) {
    if err = tmpl.genColPrimaryKey(table, _w); err != nil {return}

    for _,col := range table.AllColumns() {
        if col.IsAPrimaryKey() {
            continue
        }
        if err = tmpl.genColGetter(table, col, _w); err != nil {return}
        if err = tmpl.genColValid(table, col, _w); err != nil {return}
        if col.IsNullable {
            if err = tmpl.genColNullGetter(table, col, _w); err != nil {return}
        }

        if err = tmpl.genColSetter(table, col, _w); err != nil {return}
        if col.IsNullable{
            if err = tmpl.genColNullSetter(table, col, _w); err != nil {return}
        }
    }

    for _,ref := range table.References {
        if err = tmpl.genRefGetter(table, ref, _w); err != nil {return}
        if ref.IsNullable {
            if err = tmpl.genRefNullSetter(table, ref, _w); err != nil {return}
        } else {
            if err = tmpl.genRefNotNullSetter(table, ref, _w); err != nil {return}
        }
    }

    if err = tmpl.genAliasGetter(table, _w); err != nil {return}
    if err = tmpl.genIsNew(table, _w); err != nil {return}

    return
}

func (tmpl *TableBaseTemplate)genColGetter(table *model.Table, col *model.Column, _w io.Writer) (err error) {
{{: "accessors/column_getter.tmpl" }}
    return
}

func (tmpl *TableBaseTemplate)genColValid(table *model.Table, col *model.Column, _w io.Writer) (err error) {
{{: "accessors/column_valid.tmpl" }}
    return
}

func (tmpl *TableBaseTemplate)genColSetter(table *model.Table, col *model.Column, _w io.Writer) (err error) {
    if !col.HasSetter() {
        return
    }
    switch col.ReceiverType {
    case query.ColTypeUnknown: fallthrough
    case query.ColTypeBytes:
{{: "accessors/column_setter_bytes.tmpl" }}
    case query.ColTypeTime:
{{: "accessors/column_setter_time.tmpl" }}
    case query.ColTypeString:
{{: "accessors/column_setter_string.tmpl" }}
    default:
{{: "accessors/column_setter_other.tmpl" }}
    }
    return
}

func (tmpl *TableBaseTemplate)genColPrimaryKey(table *model.Table, _w io.Writer) (err error) {
{{: "accessors/column_pk.tmpl" }}
    return
}


func (tmpl *TableBaseTemplate)genColNullGetter(table *model.Table, col *model.Column, _w io.Writer) (err error) {
{{: "accessors/column_null_getter.tmpl" }}
    return
}

func (tmpl *TableBaseTemplate)genColNullSetter(table *model.Table, col *model.Column, _w io.Writer) (err error) {
    if !col.HasSetter() {
        return
    }
{{: "accessors/column_setter_null.tmpl" }}
    return
}


func (tmpl *TableBaseTemplate)genRefGetter(table *model.Table, ref *model.Reference, _w io.Writer) (err error) {
{{: "accessors/ref_getter.tmpl" }}
    return
}

func (tmpl *TableBaseTemplate)genRefNullSetter(table *model.Table, ref *model.Reference, _w io.Writer) (err error) {
{{: "accessors/ref_null_setter.tmpl" }}
    return
}

func (tmpl *TableBaseTemplate)genRefNotNullSetter(table *model.Table, ref *model.Reference, _w io.Writer) (err error) {
{{: "accessors/ref_not_null_setter.tmpl" }}
    return
}


func (tmpl *TableBaseTemplate)genAliasGetter(table *model.Table, _w io.Writer) (err error) {
{{: "accessors/alias_getter.tmpl" }}
    return
}


func (tmpl *TableBaseTemplate)genIsNew(table *model.Table, _w io.Writer) (err error) {
{{: "accessors/is_new.tmpl" }}
    return
}







