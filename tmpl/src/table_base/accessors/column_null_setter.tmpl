
{{g
//*** {{includeName}}
}}
{{

// Set{{= col.Identifier }} prepares for setting the {{= col.QueryName }} value in the database.
//
// Pass nil to set it to a NULL value in the database.
//
{{if col.SchemaType == schema.ColTypeTime}}
// The input will immediately be converted to UTC time.
{{if col.SchemaSubType == schema.ColSubTypeDateOnly}}
// The time will also be zeroed. This may cause the date value to change. To prevent this, be sure that the date given is already in UTC time.
{{elseif col.SchemaSubType == schema.ColSubTypeTimeOnly}}
// The date will also be zeroed. This process may cause the time value to change. To prevent this, be sure that the time given is already in UTC time.
{{if}}
{{if}}
func (o *{{= table.DecapIdentifier}}Base) Set{{= col.Identifier }}(i interface{}) {
	o.{{= col.VariableIdentifier() }}IsValid = true
	if i == nil {
		if !o.{{= col.VariableIdentifier() }}IsNull {
			o.{{= col.VariableIdentifier() }}IsNull = true
			o.{{= col.VariableIdentifier() }}IsDirty = true
			o.{{= col.VariableIdentifier() }} = {{= col.DefaultValueAsValue() }}
{{if col.IsReference() }}
			o.{{= col.ReferenceVariableIdentifier() }} = nil
{{if}}
		}
	} else {
		v := i.({{= col.GoType() }})
{{if col.SchemaType == schema.ColTypeTime}}
        v = v.UTC()
    {{if col.SchemaSubType == schema.ColSubTypeDateOnly}}
        v = time.Date(v.Year(), v.Month(), v.Day(), 0, 0, 0, 0, v.Location())
    {{elseif col.SchemaSubType == schema.ColSubTypeTimeOnly}}
		v = time.Date(0, 1, 1, v.Hour(), v.Minute(), v.Second(), v.Nanosecond(), time.UTC)
    {{if}}
{{if}}
{{if col.Size > 0}}

{{if col.ReceiverType == query.ColTypeBytes || col.ReceiverType == query.ColTypeUnknown }}
        if len(v) > {{= table.Identifier}}{{= col.Identifier}}MaxLength {
            panic("attempted to set {{= table.Identifier}}.{{= col.Identifier }} to a value larger than its maximum length")
        }
{{elseif col.ReceiverType == query.ColTypeString && !col.IsEnumArray() }}
        if utf8.RuneCountInString(v) > {{= table.Identifier}}{{= col.Identifier}}MaxLength {
            panic("attempted to set {{= table.Identifier}}.{{= col.Identifier }} to a value larger than its maximum length in runes")
        }
{{if}}
{{if}}
		if o.{{= col.VariableIdentifier() }}IsNull ||
		    !o._restored ||
{{if col.ReceiverType == query.ColTypeBytes || col.ReceiverType == query.ColTypeUnknown }}!bytes.Equal(o.{{= col.VariableIdentifier() }}, v){{elseif col.IsEnumArray() }}!o.{{= col.VariableIdentifier() }}.Equal(v){{else}}o.{{= col.VariableIdentifier() }} != v{{if}} {
			    o.{{= col.VariableIdentifier() }}IsNull = false
{{if col.ReceiverType == query.ColTypeBytes || col.ReceiverType == query.ColTypeUnknown }}
                o.{{= col.VariableIdentifier() }} = slices.Clone(v)
{{else}}
			    o.{{= col.VariableIdentifier() }} = v
{{if}}
			    o.{{= col.VariableIdentifier() }}IsDirty = true
{{if col.IsReference() }}
			    o.{{= col.ReferenceVariableIdentifier() }} = nil
{{if}}
		}
	}
}

}}

