{{g
//*** {{includeName}}
}}
{{

// {{= rev.ReverseIdentifier() }} returns the connected {{= rev.Table.Identifier }} object, if one was loaded.
// Otherwise, it will return nil.
func (o *{{= table.DecapIdentifier}}Base) {{= rev.ReverseIdentifier() }}() *{{= rev.Table.Identifier}} {
	if o.{{= rev.ReverseVariableIdentifier() }} == nil {
		return nil
	}
	return o.{{= rev.ReverseVariableIdentifier() }}
}

// Load{{= rev.ReverseIdentifier() }} returns the connected {{= rev.Table.Identifier }} object, if one was loaded.
// Otherwise, it will load a new one and return it.
func (o *{{= table.DecapIdentifier}}Base) Load{{= rev.ReverseIdentifier() }}(ctx context.Context) *{{= rev.Table.Identifier }} {
    if o.{{= rev.ReverseVariableIdentifier() }} != nil && o.{{= rev.ReverseVariableIdentifier() }}.IsDirty() {
        panic("The {{= rev.ReverseIdentifier() }} has changed. You must save it first before changing to a different one.")
    }
	if o.{{= rev.ReverseVariableIdentifier() }} == nil {
	    var pk {{= rev.Table.PrimaryKeyColumn().GoType() }}
	    if o.{{= rev.ReversePkIdentifier() }} != nil {
	        pk = *o.{{= rev.ReversePkIdentifier() }}
	    } else {
	        pk = o.{{= rev.Table.PrimaryKeyColumn().Identifier }}()
	    }
		o.{{= rev.ReverseVariableIdentifier() }} = Load{{= rev.Table.Identifier }}By{{= rev.Identifier }}(ctx, pk)
	}
	return o.{{= rev.ReverseVariableIdentifier() }}
}

// Set{{= rev.ReverseIdentifier() }} associates obj with this {{= table.Identifier }}
// through the reverse relationship in {{= rev.Table.Identifier }}.{{= rev.Identifier }}.
//
// The association is temporary until you call Save().
{{if rev.IsNullable }}
// Since this is a unique relationship, if a different {{= rev.Table.Identifier }} object is currently pointing to this {{= table.Identifier }},
// that {{= rev.Table.Identifier }}'s {{= rev.Identifier }} value will be set to null when Save is called.
// If you did not use a join to query the attached {{= rev.Table.Identifier }} in the first place, used a conditional join,
// or joined with an expansion, be particularly careful, since you may be inadvertently  changing an item
// that is not currently attached to this {{table.Identifier}}.
{{else}}
// WARNING! Since this is a non-nullable unique relationship,
// if a different {{= rev.Table.Identifier }} object is currently pointing to this {{= table.Identifier }},
// Save() will panic. You should delete that object first.
{{if}}
func (o *{{= table.DecapIdentifier}}Base) Set{{= rev.ReverseIdentifier() }}(obj *{{= rev.Table.Identifier }}) {
    if o.{{= rev.ReverseVariableIdentifier() }} != nil && o.{{= rev.ReverseVariableIdentifier() }}.IsDirty() {
        panic("The {{= rev.ReverseIdentifier() }} has changed. You must save it first before changing to a different one.")
    }
	o.{{= rev.ReverseVariableIdentifier() }} = obj
	o.{{= rev.ReversePkIdentifier() }} = nil
	o.{{= rev.ReverseVariableIdentifier() }}IsDirty = true
}

// Set{{= rev.ReverseIdentifier() }}By{{= rev.Table.PrimaryKeyColumn().Identifier }}
// associates this {{= table.Identifier }} with the {{= rev.Table.Identifier }}
// that has primary key {{= rev.Table.PrimaryKeyColumn().VariableIdentifierPlural() }}.
//
// The association is temporary until you call Save().
// If a {{= rev.Table.Identifier }} is loaded, it will be unloaded.
//
{{if rev.IsNullable }}
// Since this is a unique relationship, if a different {{= rev.Table.Identifier }} object is currently pointing to this {{= table.Identifier }},
// that {{= rev.Table.Identifier }}'s {{= rev.Identifier }} value will be set to null when Save is called.
// If you did not use a join to query the attached {{= rev.Table.Identifier }} in the first place, used a conditional join,
// or joined with an expansion, be particularly careful, since you may be inadvertently  changing an item
// that is not currently loaded in this {{table.Identifier}}.
{{else}}
// WARNING! Since this is a non-nullable unique relationship,
// if a different {{= rev.Table.Identifier }} object is currently pointing to this {{= table.Identifier }},
// Save() will panic. You should delete that object first.
{{if}}
func (o *{{= table.DecapIdentifier}}Base) Set{{= rev.ReverseIdentifier() }}By{{= rev.Table.PrimaryKeyColumn().Identifier }}({{= rev.Table.PrimaryKeyColumn().VariableIdentifier() }} {{= rev.Table.PrimaryKeyGoType() }}) {
    if o.{{= rev.ReverseVariableIdentifier() }} != nil && o.{{= rev.ReverseVariableIdentifier() }}.IsDirty() {
        panic("The {{= rev.Identifier }} value has changed. You must save it first before changing to a different one.")
    }
	o.{{= rev.ReverseVariableIdentifier() }} = nil
	o.{{= rev.ReverseVariableIdentifier() }}IsDirty = true
	o.{{= rev.ReversePkIdentifier() }} = &{{= rev.Table.PrimaryKeyColumn().VariableIdentifier() }}
}

}}
