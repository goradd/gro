
{{g
//*** {{includeName}}
}}
builderStruct := table.Identifier + "Builder"
{{

// The {{= builderStruct}} uses a builder pattern to create a query on the database.
// Create a {{= builderStruct}} by calling Query{{= table.IdentifierPlural }}, which will select all
// the {{= table.Identifier }} object in the database. Then filter and arrange those objects
// by calling Where, Select, etc.
// End a query by calling either Load, LoadI, LoadCursor, Get, or Count.
// A {{= builderStruct }} stores the context it will use to perform the query, and thus is
// meant to be a short-lived object. You should not save it for later use.
type {{= builderStruct }} struct {
	builder *query.Builder
	ctx context.Context
}

func new{{= table.Identifier }}Builder(ctx context.Context) *{{= builderStruct }} {
	b := {{= builderStruct }}{
		builder: query.NewBuilder(node.{{= table.Identifier }}()),
		ctx: ctx,
	}
	return &b
}

// Load terminates the query builder, performs the query, and returns a slice of {{= table.Identifier }} objects.
// If there are any errors, nil is returned and the specific error is stored in the context.
// If no results come back from the query, it will return a non-nil empty slice.
func (b *{{= builderStruct }}) Load() ({{= table.VariableNamePlural() }} []*{{= table.Identifier }}, err error) {
	b.builder.Command = query.BuilderCommandLoad
	database := db.GetDatabase("{{= table.DbKey }}")
	var results any

    ctx := b.ctx
{{if table.ReadTimeout != 0 }}
    var cancel context.CancelFunc
    ctx, cancel = context.WithTimeout(ctx, {{= table.ReadTimeoutConst() }})
    defer cancel()

{{if}}
	results, err = database.BuilderQuery(ctx, b.builder)
	if results == nil || err != nil {
		return
	}
	for _,item := range results.([]map[string]any) {
		o := new({{= table.Identifier }})
		o.unpack(item, o)
		{{= table.VariableNamePlural() }} = append({{= table.VariableNamePlural() }}, o)
	}
	return
}

// LoadI terminates the query builder, performs the query, and returns a slice of interfaces.
// This can then satisfy a variety of interfaces that load arrays of objects, including KeyLabeler.
// If there are any errors, nil is returned and the specific error is stored in the context.
// If no results come back from the query, it will return a non-nil empty slice.
func (b *{{= builderStruct }}) LoadI() ({{= table.VariableNamePlural() }} []query.OrmObj, err error) {
	b.builder.Command = query.BuilderCommandLoad
	database := db.GetDatabase("{{= table.DbKey }}")
	var results any

    ctx := b.ctx
{{if table.ReadTimeout != 0 }}
    var cancel context.CancelFunc
    ctx, cancel = context.WithTimeout(ctx, {{= table.ReadTimeoutConst() }})
    defer cancel()

{{if}}
	results, err = database.BuilderQuery(ctx, b.builder)
	if results == nil || err != nil {
		return
	}
	for _,item := range results.([]map[string]any) {
		o := new({{= table.Identifier }})
		o.unpack(item, o)
		{{= table.VariableNamePlural() }} = append({{= table.VariableNamePlural() }}, o)
	}
	return
}


// LoadCursor terminates the query builder, performs the query, and returns a cursor to the query.
//
// A query cursor is useful for dealing with large amounts of query results. However, there are some
// limitations to its use. When working with SQL databases, you cannot use a cursor while querying
// many-to-many or reverse relationships that will create an array of values.
//
// Call Next() on the returned cursor object to step through the results. Make sure you call Close
// on the cursor object when you are done. You should use
//   defer cursor.Close()
// to make sure the cursor gets closed.
//
{{if table.ReadTimeout != 0 }}
// LoadCursor is NOT protected by a timeout on the context. You should set your own timeout on the context,
// but all the rows of the cursor must be read before canceling the cursor.
{{if}}
func (b *{{= builderStruct }}) LoadCursor() ({{= table.VariableNamePlural() }}Cursor, error) {
	b.builder.Command = query.BuilderCommandLoadCursor
	database := db.GetDatabase("{{= table.DbKey }}")
	result, err := database.BuilderQuery(b.builder)
	cursor := result.(query.CursorI)

	return {{= table.VariableNamePlural() }}Cursor{cursor}, err
}

type {{= table.VariableNamePlural() }}Cursor struct {
	query.CursorI
}

// Next returns the current {{= table.Identifier }} object and moves the cursor to the next one.
//
// If there are no more records, it returns nil.
func (c {{= table.VariableNamePlural() }}Cursor) Next() (*{{= table.Identifier }}, error) {
    if c.CursorI == nil {
        return nil, nil
    }

	row, err := c.CursorI.Next()
	if row == nil || err != nil {
		return nil, err
	}
	o := new({{= table.Identifier }})
	o.unpack(row, o)
	return o, nil
}

// Get is a convenience method to return only the first item found in a query.
// The entire query is performed, so you should generally use this only if you know
// you are selecting on one or very few items.
// If an error occurs, or no results are found, a nil is returned.
func (b *{{= builderStruct }}) Get() (*{{= table.Identifier }}, error) {
    results, err := b.Load()
    if err != nil || len(results) == 0 {
        return nil, err
    }
    return results[0], nil
}

// Where adds a condition to filter what gets selected.
// Calling Where multiple times will AND the conditions together.
func (b *{{= builderStruct }})  Where(c query.Node) *{{= builderStruct }} {
	b.builder.Where(c)
	return b
}

// OrderBy specifies how the resulting data should be sorted.
// By default, the given nodes are sorted in ascending order.
// Add Descending() to the node to specify that it should be sorted in descending order.
func (b *{{= builderStruct }})  OrderBy(nodes... query.Sorter) *{{= builderStruct }} {
	b.builder.OrderBy(nodes...)
	return b
}

// Limit will return a subset of the data, limited to the offset and number of rows specified.
// For large data sets and specific types of queries, this can be slow, because it will perform
// the entire query before computing the limit.
// You cannot limit a query that has embedded arrays.
func (b *{{= builderStruct }})  Limit(maxRowCount int, offset int) *{{= builderStruct }} {
	b.builder.Limit(maxRowCount, offset)
	return b
}

// Select specifies what specific columns will be loaded with data.
// By default, all the columns of the {{= table.QueryName }} table will be queried and loaded.
// If nodes contains columns from the {{= table.QueryName }} table, that will limit the columns queried and loaded to only those columns.
// If related tables are specified, then all the columns from those tables are queried, selected and joined to the result.
// If columns in related tables are specified, then only those columns will be queried and loaded.
// Depending on the query, additional columns may automatically be added to the query. In particular, primary key columns
// will be added in most situations. The exception to this would be in distinct queries, group by queries, or subqueries.
func (b *{{= builderStruct }})  Select(nodes... query.Node) *{{= builderStruct }} {
	b.builder.Select(nodes...)
	return b
}

// Calculation adds operation as an aliased value onto base.
// After the query, you can read the data by passing alias to GetAlias on the returned object.
func (b *{{= builderStruct }}) Calculation(base query.TableNodeI, alias string, operation query.OperationNodeI) *{{= builderStruct }} {
	b.builder.Calculation(base, alias, operation)
	return b
}

// Distinct removes duplicates from the results of the query.
// Adding a Select() is usually required.
func (b *{{= builderStruct }})  Distinct() *{{= builderStruct }} {
	b.builder.Distinct()
	return b
}

// GroupBy controls how results are grouped when using aggregate functions with Calculation.
func (b *{{= builderStruct }})  GroupBy(nodes... query.Node) *{{= builderStruct }} {
	b.builder.GroupBy(nodes...)
	return b
}

// Having does additional filtering on the results of the query after the query is performed.
func (b *{{= builderStruct }})  Having(node query.Node)  *{{= builderStruct }} {
	 b.builder.Having(node)
	 return b
}

// Count terminates a query and returns just the number of items in the result.
// If you have Select or Calculation columns in the query, it will count NULL results as well.
// To not count NULL values, use Where in the builder with a NotNull operation.
// To count distinct combinations of items, call Distinct() on the builder.
func (b *{{= builderStruct }})  Count() (int, error) {
	b.builder.Command = query.BuilderCommandCount
	database := db.GetDatabase("{{= table.DbKey }}")

    ctx := b.ctx
{{if table.ReadTimeout != 0 }}
    var cancel context.CancelFunc
    ctx, cancel = context.WithTimeout(ctx, {{= table.ReadTimeoutConst() }})
    defer cancel()

{{if}}
	results, err := database.BuilderQuery(ctx, b.builder)
    if results == nil || err != nil {
        return 0, err
    }
	return results.(int), nil
}

}}

