
{{g
//*** {{includeName}}
}}
func (tmpl *EnumTemplate)gen(table *model.Enum, _w io.Writer) (err error) {
    if err = tmpl.genHeader(table, _w); err != nil { return }
    if err = tmpl.genConstants(table, _w); err != nil { return }
    if err = tmpl.genString(table, _w); err != nil { return }
    if err = tmpl.genId(table, _w); err != nil { return }
    if err = tmpl.genPlurals(table, _w); err != nil { return }
    if err = tmpl.genInterfaces(table, _w); err != nil { return }
    if err = tmpl.genFields(table, _w); err != nil { return }
    if err = tmpl.genSet(table, _w); err != nil { return }
    return
}

func (tmpl *EnumTemplate)genHeader(table *model.Enum, _w io.Writer) (err error) {
{{
// Code generated by goradd-orm. DO NOT EDIT.

package {{= tmpl.Package }}

import (
	"strconv"
	"github.com/goradd/maps"
    "sort"
)
}}
    return
}

func (tmpl *EnumTemplate)genConstants(table *model.Enum, _w io.Writer) (err error) {
{{
type {{= table.Identifier }} int

const (
}}

    maxKey := 0
    for _,con := range table.Constants {
        if con.Value > maxKey {
            maxKey = con.Value
        }
{{
	{{= con.Const }} {{= table.Identifier }} = {{i con.Value }}
}}
    }

{{
)

// {{= table.Identifier }}MaxValue is the maximum enumerated value of {{= table.Identifier }}
// doc: type={{= table.Identifier }}
const {{= table.Identifier }}MaxValue = {{i maxKey }}

}}

    return
}


func (tmpl *EnumTemplate)genString(table *model.Enum, _w io.Writer) (err error) {
{{
// String returns the name value of the type and satisfies the fmt.Stringer interface
func (e {{= table.Identifier }}) String() string {
	switch e {
	case 0: return ""
{{for _,con := range table.Constants }}
	case {{= con.Const }}: return `{{v table.FieldValue(con.Value, 1) }}`
{{for}}
	default: panic("index out of range")
	}
	return "" // prevent warning
}
}}
    return
}

func (tmpl *EnumTemplate)genId(table *model.Enum, _w io.Writer) (err error) {

{{
// ID returns a string representation of the id and satisfies the IDer interface
func (e {{= table.Identifier }}) ID() string {
	return strconv.Itoa(int(e))
}

// {{= table.Identifier }}FromID converts a {{= table.Identifier }} ID to a {{= table.Identifier }}
func {{= table.Identifier }}FromID (id string) {{= table.Identifier }} {
	switch id {
{{for _,con := range table.Constants }}
    case `{{i con.Value }}`: return {{= con.Const }}
{{for}}
	}
	return {{= table.Identifier }}(0)
}

// {{= table.IdentifierPlural }}FromIDs converts a slice of {{= table.Identifier }} IDs to a slice of {{= table.Identifier }}
func {{= table.IdentifierPlural }}FromIDs (ids []string) (values []{{= table.Identifier }}) {
    values = make([]{{= table.Identifier }}, 0, len(ids))
    for _,id := range ids {
        values = append(values, {{= table.Identifier }}FromID(id))
    }
    return
}

// {{= table.Identifier }}FromName converts a {{= table.Identifier }} name to a {{= table.Identifier }}
func {{= table.Identifier }}FromName (name string) {{= table.Identifier }} {
	switch name {
{{for _,con := range table.Constants }}
	case `{{v table.FieldValue(con.Value, 1) }}`: return {{= con.Const }}
{{for}}
	}
	return {{= table.Identifier }}(0)
}

}}

    return
}

func (tmpl *EnumTemplate)genPlurals(table *model.Enum, _w io.Writer) (err error) {

{{
// {{= table.IdentifierPlural }} returns a slice of all the {{= table.Identifier }} values
// in key order.
func {{= table.IdentifierPlural }}() ([]{{= table.Identifier }}) {
    return []{{= table.Identifier }}{ 
{{for _,con := range table.Constants }}
        {{= con.Const }},
{{for}}
    }
}

// {{= table.IdentifierPlural }}I returns a slice of all the {{= table.Identifier }} values as generic interfaces.
// doc: type={{= table.Identifier }}
func {{= table.IdentifierPlural }}I() (values []any) {
    return []any{ 
{{for _,con := range table.Constants }}
        {{= con.Const }},
{{for}}
    }
}

}}
    return
}

func (tmpl *EnumTemplate)genInterfaces(table *model.Enum, _w io.Writer) (err error) {
{{
// Label returns the string that will be displayed to a user for this item and satsifies goradd's Labeler interface.
func (e {{= table.Identifier }}) Label() string {
	return e.String()
}

// Value returns the value as an interface. It satisfies goradd's Valuer interface.
func (e {{= table.Identifier }}) Value() any {
	return e.ID()
}

}}
    return
}

func (tmpl *EnumTemplate)genFields(table *model.Enum, _w io.Writer) (err error) {

    for i,field := range table.Fields[2:] {
        fieldNum := i + 2
{{
func (e {{= table.Identifier }}) {{= field.Identifier }}() {{= field.GoType()}} {
	switch e {
	case 0: return {{= field.Type.DefaultValueString() }}
{{for _,con := range table.Constants }}
	case {{= con.Const }}: return {{L table.FieldValue(con.Value, fieldNum) }}
{{for}}
	default: panic("Index out of range")
	}
	return {{= field.Type.DefaultValueString() }} // prevent warning
}

// {{= table.Identifier }}{{= field.IdentifierPlural }} returns a slice of all the {{= field.TitlePlural }} associated with {{= table.Identifier }} values.
// doc: type={{= table.Identifier }}
func {{= table.Identifier }}{{= field.IdentifierPlural }}() []{{= field.GoType()}} {
	return []{{= field.GoType()

 }} {
	    // 0 item will be a zero value
	    {{= field.Type.DefaultValueString() }},
{{for _,con := range table.Constants }}
	    {{L table.FieldValue(con.Value, fieldNum) }},
{{for}}
    }
}

}}  
    }
    return
}

func (tmpl *EnumTemplate)genSet(table *model.Enum, _w io.Writer) (err error) {
{{

// {{= table.Identifier }}Set is a group of {{= table.Identifier }} values.
type {{= table.Identifier }}Set = maps.Set[{{= table.Identifier }}]

// {{= table.Identifier }}SetFromNumbers converts an array of numeric values into a {{= table.Identifier }}Set.
func {{= table.Identifier }}SetFromNumbers[T ~int | ~int8 | ~int16 | ~int32 | ~int64 |
        ~uint | ~uint8 | ~uint16 | ~uint32 | ~uint64 | ~float32 | ~float64] (nums []T) (values {{= table.Identifier }}Set) {
	var s {{= table.Identifier }}Set
	for _, n := range nums {
		s.Add({{= table.Identifier }}(n))
	}
	return s
}

// {{= table.Identifier }}SetToInts
func {{= table.Identifier }}SetToInts(values {{= table.Identifier }}Set) (ints []int) {
	for _,v := range values.Values() {
		ints = append(ints, int(v))
	}
	sort.Ints(ints)
	return
}

}}
    return
}



