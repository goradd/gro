{{g
//*** {{includeName}}
}}

func (tmpl *EnumNodeTemplate)gen(table *model.Enum, _w io.Writer) (err error) {
    if err = tmpl.genHeader(table, _w); err != nil { return }
    if err = tmpl.genPrivate(table, _w); err != nil { return }
    if err = tmpl.genLeafNodes(table, _w); err != nil { return }
    return
}

func (tmpl *EnumNodeTemplate)genHeader(table *model.Enum, _w io.Writer) (err error) {

{{
// Code generated by goradd-orm. DO NOT EDIT.

package node

import (
    "encoding/gob"
	"github.com/goradd/orm/pkg/query"
)

// {{= table.Identifier}}NodeI is the builder interface to the {{= table.Identifier}} nodes.
type {{= table.Identifier}}NodeI interface {
    query.NodeI
    PrimaryKeyNode() *query.ColumnNode
{{for i := 0; i < len(table.Fields); i++}}
    {{= table.FieldIdentifier(i) }}() *query.ColumnNode
{{for}}
}

type {{= table.DecapIdentifier }}Enum struct {
    _self query.NodeI
}

{{# No easy way to determine if this is needed, so just make it in case. }}
type {{= table.DecapIdentifier}}Association struct {
    {{= table.DecapIdentifier}}Enum
    query.ManyManyNode
}

// PrimaryKeyNode returns a node representing the primary key column.
func (n {{= table.DecapIdentifier }}Enum) PrimaryKeyNode() (*query.ColumnNode) {
	return n.{{= table.FieldIdentifier(0) }}()
}

func init() {
   gob.Register(new({{= table.DecapIdentifier }}Enum))
}

}}

    return
}


func (tmpl *EnumNodeTemplate)genPrivate(table *model.Enum, _w io.Writer) (err error) {
{{
// SelectNodes_ is used internally by the framework to return the list of column nodes.
func (n {{= table.DecapIdentifier }}Enum) SelectNodes_() ([]*query.ColumnNode) {
    return []*query.ColumnNode {
{{for i := 0; i < len(table.Fields); i++}}
	    n.{{= table.FieldIdentifier(i) }}(),
{{for}}
	}
}

func (n *{{= table.DecapIdentifier}}Enum) NodeType_() query.NodeType {
	return query.EnumNodeType
}

func (n *{{= table.DecapIdentifier}}Association) NodeType_() query.NodeType {
	return query.ManyEnumNodeType
}

// TableName_ returns the query name of the table the node is associated with.
func (n {{= table.DecapIdentifier }}Enum) TableName_() string {
    return {{L table.QueryName }}
}

// DatabaseKey_ returns the database key of the database the node is associated with.
func (n {{= table.DecapIdentifier }}Enum) DatabaseKey_() string {
    return {{L table.DbKey }}
}

}}
    return
}

func (tmpl *EnumNodeTemplate)genLeafNodes(table *model.Enum, _w io.Writer) (err error) {

    for i := 0; i < len(table.Fields); i++ {
        fn := table.FieldIdentifier(i)
{{

func (n {{= table.DecapIdentifier }}Enum) {{= fn }}() *query.ColumnNode {
	cn := query.ColumnNode{
		QueryName: {{L table.FieldQueryName(i) }},
		Identifier: {{L fn }},
		ReceiverType: query.{{= table.FieldReceiverType(i).String() }},
		IsPrimaryKey: {{if i == 0 }}true{{else}}false{{if}},
	}
	cn.SetParent(n._self)
	return &cn
}
}}
    }
    return
}
