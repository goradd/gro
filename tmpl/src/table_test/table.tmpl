//*** table_test.tmpl

// The master template for the table test

var hasRequiredUnknown bool
for _, col := range table.Columns {
    if col.ReceiverType == query.ColTypeUnknown && !col.IsNullable {
        hasRequiredUnknown = true
    } // cannot know what the set of valid input characters are.
}

{{
package {{= tmpl.Package }}

// This is the test file for the {{= table.Identifier }} ORM object.
// Add your tests to this file or modify the one provided.
// Your edits to this file will be preserved.

import (
    "fmt"
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"

)

func Test{{= table.Identifier }}_String(t *testing.T) {
    var obj *{{= table.Identifier }}

    assert.Equal(t, "", obj.String())

    obj = New{{= table.Identifier }}()
    s := obj.String()
    assert.True(t, strings.HasPrefix(s, "{{= table.Identifier }}"))
}

func Test{{= table.Identifier }}_Key(t *testing.T) {
    var obj *{{= table.Identifier }}
    assert.Equal(t, "", obj.Key())

    obj = New{{= table.Identifier }}()
    assert.Equal(t, fmt.Sprintf("%v", obj.PrimaryKey()), obj.Key())
}

func Test{{= table.Identifier }}_Label(t *testing.T) {
    var obj *{{= table.Identifier }}
    assert.Equal(t, "", obj.Key())

    obj = New{{= table.Identifier }}()
    s := obj.Label()
{{if col := table.ColumnByName("name"); col != nil}}
    assert.Equal(t, "", s)
{{else}}
    assert.True(t, strings.HasPrefix(s, "{{= table.Label }}"))
{{if}}
}



func Test{{= table.Identifier }}_Delete(t *testing.T) {
{{if !hasRequiredUnknown}}
    ctx := db.NewContext(nil)
    obj := createMinimalSample{{= table.Identifier }}()
    err := obj.Save(ctx)
{{for _,col := range table.Columns }}
{{if col.IsReference() && !col.IsNullable }}
    defer obj.{{= col.ReferenceIdentifier() }}().Delete(ctx)
{{if}}
{{for}}
    assert.NoError(t, err)
    Delete{{= table.Identifier }}(ctx, obj.PrimaryKey())
    obj2 := Load{{= table.Identifier }}(ctx, obj.PrimaryKey())
    assert.Nil(t, obj2)
{{if}}
}



}}
