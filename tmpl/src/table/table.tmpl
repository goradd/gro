//*** table.tmpl

// The master template for the table classes

{{
package {{= tmpl.Package }}

// This is the implementation file for the {{= table.Identifier }} ORM object.
// This is where you build the api to your data model for your web application and potentially mobile apps.
// Your edits to this file will be preserved.

import (
    "fmt"
    "context"
)

// {{= table.Identifier }} represents an item in the {{= table.QueryName }} table in the database.
type {{= table.Identifier }} struct {
	{{= table.DecapIdentifier }}Base
}

// New{{= table.Identifier }} creates a new {{= table.Identifier }} object and initializes it to default values.
func New{{= table.Identifier }}() *{{= table.Identifier }} {
	o := new({{= table.Identifier }})
	o.Initialize()
	return o
}

// Initialize will initialize or re-initialize a {{= table.Identifier }} database object to default values.
func (o *{{= table.Identifier }}) Initialize() {
	o.{{= table.DecapIdentifier }}Base.Initialize()
    // Add your own initializations here
}

// String implements the Stringer interface and returns a description of the record, primarily for debugging.
func (o *{{= table.Identifier }}) String() string  {
    if o == nil {
        return ""
    }
    return fmt.Sprintf("{{= table.Identifier }} %v", o.PrimaryKey())
}

// Key returns a unique key for the object, among a list of similar objects.
func (o *{{= table.Identifier }}) Key() string  {
    if o == nil {
        return ""
    }
    return fmt.Sprintf("%v", o.PrimaryKey())
}

// Label returns a human-readable label of the object.
// This would be what a user would see as a description of the object if choosing from a list.
func (o *{{= table.Identifier }}) Label() string  {
    if o == nil {
        return ""
    }
{{if col := table.ColumnByName("name"); col != nil}}
    return o.{{= col.Identifier }}()
{{else}}
    return fmt.Sprintf("{{= table.Label }} %v", o.PrimaryKey())
{{if}}
}

// Save will update or insert the object, depending on the state of the object.
//
// If it has an auto-generated primary key, it will be updated after an insert.
// Database errors generally will be handled by a panic and not returned here,
// since those indicate a problem with a database driver or configuration.
//
// Save will return a db.OptimisticLockError if it detects a collision when two users
// are attempting to change the same database record.
//
// It will return a db.UniqueValueError if it detects a collision when an attempt
// is made to add a record with a unique column that is given a value that is already in the database.
//
// Updating a record that has not changed will have no effect on the database.
// Updating a record that has linked records will also update any linked records that are MODIFIED,
// and if optimistic locking is in effect, will also check whether those records have been altered or deleted,
// returning an OptimisticLockError if so.
func (o *{{= table.Identifier }}) Save(ctx context.Context) error {
    return o.save(ctx)
}


// Query{{= table.IdentifierPlural }} returns a new query builder.
func Query{{= table.IdentifierPlural }}(ctx context.Context) {{= table.Identifier }}Builder {
	return query{{= table.IdentifierPlural }}(ctx)
}

// query{{= table.IdentifierPlural }} creates a new builder and is the central spot where all queries are directed.
// You can modify this function to enforce restrictions on queries, for example to make sure the user is authorized to
// access the data.
func query{{= table.IdentifierPlural }}(ctx context.Context) {{= table.Identifier }}Builder {
	return new{{= table.Identifier }}Builder(ctx)
}

// get{{= table.Identifier}}InsertFields returns fields and values that will be used for a new record in the database.
// You can add or modify the fields here before they are sent to the database. If you set a primary key, it will be
// used instead of a generated primary key.
func get{{= table.Identifier}}InsertFields(o *{{= table.DecapIdentifier}}Base) (fields map[string]interface{}) {
    return o.getInsertFields()
}

// get{{= table.Identifier}}UpdateFields returns fields and values that will be used to update a current record in
// the database.
// You can add or modify the fields here before they are sent to the database.
func get{{= table.Identifier}}UpdateFields(o *{{= table.DecapIdentifier}}Base) (fields map[string]interface{}) {
    return o.getUpdateFields()
}


{{if table.PrimaryKeyColumn() != nil}}
// Delete{{= table.Identifier }} deletes the {{= table.QueryName }} record with primary key pk from the database.
// Note that you can also delete loaded {{= table.Identifier }} objects by calling Delete on them.
// Returns an error only if there was a problem with the database during the delete.
// If the record was not found, no error will be returned.
// doc: type={{= table.Identifier }}
func Delete{{= table.Identifier }}(ctx context.Context, pk {{= table.PrimaryKeyColumn().GoType() }}) error {
	return delete{{= table.Identifier }}(ctx, pk)
}
{{if}}

func init() {
    gob.RegisterName("{{= table.DbKey }}{{= table.Identifier }}", new({{= table.Identifier }}))
}

}}
