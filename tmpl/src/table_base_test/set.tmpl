//*** {{includeName}}

for _,col := range table.Columns {
    if !col.HasSetter() {continue}
{{
func Test{{= table.Identifier }}_Set{{= col.Identifier }}(t *testing.T) {

    obj := New{{= table.Identifier }}()

    {{= col.VariableIdentifier() }} := 	test.RandomValue[{{= col.GoType() }}]({{u col.Size }})
    obj.Set{{= col.Identifier }}({{= col.VariableIdentifier() }})
    assert.Equal(t, {{= col.VariableIdentifier() }}, obj.{{= col.Identifier }}())
{{if col.IsNullable }}
    assert.False(t, obj.{{= col.Identifier }}IsNull())
{{if}}

{{if col.IsNullable }}
    // Test nil
    obj.Set{{= col.Identifier }}(nil)
    assert.Equal(t, {{= col.DefaultValueAsValue() }}, obj.{{= col.Identifier }}(), "set nil")
    assert.True(t, obj.{{= col.Identifier }}IsNull())
{{if}}

    // test zero
    obj.Set{{= col.Identifier }}({{= col.DefaultValueAsValue() }})
    assert.Equal(t, {{= col.DefaultValueAsValue() }}, obj.{{= col.Identifier }}(), "set empty")
{{if col.IsNullable }}
    assert.False(t, obj.{{= col.Identifier }}IsNull())
{{if}}

{{if col.Size > 0 && (col.Type == query.ColTypeBytes || col.Type == query.ColTypeString || col.Type == query.ColTypeUnknown) }}
    // test panic on setting value larger than maximum size allowed
    {{= col.VariableIdentifier() }} = test.RandomValue[{{= col.GoType() }}]({{u col.Size + 1}})
    assert.Panics(t, func() {
        obj.Set{{= col.Identifier }}({{= col.VariableIdentifier() }})
    })
{{if}}
}
}}
}