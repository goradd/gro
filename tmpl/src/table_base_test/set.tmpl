//*** {{includeName}}

for _,col := range table.SettableColumns() {
    testSize := min(col.Size, 100000)
{{
func Test{{= table.Identifier }}_Set{{= col.Identifier }}(t *testing.T) {

    obj := New{{= table.Identifier }}()

    assert.True(t, obj.IsNew())
{{if col.IsEnum() }}
    val := test.RandomEnum({{= col.Reference.EnumTable.IdentifierPlural}}())
    obj.Set{{= col.Identifier }}(val)
{{else}}
{{if col.IsAutoPK}}
    val := 	test.RandomNumberString()
{{elseif col.SchemaSubType == schema.ColSubTypeNumeric }}
    val := 	test.RandomDecimal({{u col.DecimalPrecision()}}, {{u col.DecimalScale()}} )
{{else}}
    val := 	test.RandomValue[{{= col.GoType() }}]({{u testSize }})
{{if}}
    obj.Set{{= col.Identifier }}(val)
{{if}}
{{if col.SchemaSubType == schema.ColSubTypeDateOnly}}
    val = obj.{{= col.Identifier }}()
    assert.Zero(t, val.Minute()) // make sure minute part is zero'd
    assert.Zero(t, val.Hour()) // make sure hour part is zero'd
    assert.Zero(t, val.Second()) // make sure second part is zero'd
{{elseif col.SchemaSubType == schema.ColSubTypeTimeOnly}}
    val = obj.{{= col.Identifier }}()
    assert.EqualValues(t, 1, val.Year()) // make sure year part is zero'd. The zero value of time.Time has a year of 1.
    assert.EqualValues(t, 1, val.Month()) // make sure month part is zero'd
    assert.EqualValues(t, 1, val.Day()) // make sure day part is zero'd
{{else}}
    assert.Equal(t, val, obj.{{= col.Identifier }}())
{{if}}
{{if col.IsNullable }}
    assert.False(t, obj.{{= col.Identifier }}IsNull())
{{if}}

{{if col.IsNullable }}
    // Test NULL
    obj.Set{{= col.Identifier }}ToNull()
{{if col.DefaultValueAsValue() == "nil" }}
    assert.Nil(t, obj.{{= col.Identifier }}())
{{else}}
    assert.EqualValues(t, {{= col.DefaultValueAsValue() }}, obj.{{= col.Identifier }}())
{{if}}
    assert.True(t, obj.{{= col.Identifier }}IsNull())
{{if}}

    // test default
    obj.Set{{= col.Identifier }}({{= col.DefaultValueAsValue() }})
    assert.EqualValues(t, {{= col.DefaultValueAsValue() }}, obj.{{= col.Identifier }}(), "set default")

{{if col.Size > 0 &&
        col.Size == testSize &&
        !col.IsEnum() &&
        (col.ReceiverType == query.ColTypeBytes || col.ReceiverType == query.ColTypeString || col.ReceiverType == query.ColTypeUnknown) }}
    // test panic on setting value larger than maximum size allowed
    val = test.RandomValue[{{= col.GoType() }}]({{u col.MaxLength() + 1}})
    assert.Panics(t, func() {
        obj.Set{{= col.Identifier }}(val)
    })
{{if}}
}
}}
}

{{

func Test{{= table.Identifier }}_Copy(t *testing.T) {
    obj := createMinimalSample{{= table.Identifier }}()

    obj2 := obj.Copy()

{{for _,col := range table.SettableColumns() }}
{{if !col.IsAutoPK }}
    assert.Equal(t, obj.{{= col.Identifier }}(), obj2.{{= col.Identifier }}())
{{if}}
{{for}}

}

}}