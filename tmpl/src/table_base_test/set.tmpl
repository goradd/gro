//*** {{includeName}}

for _,col := range table.Columns {
    if !col.HasSetter() {continue}
{{
func Test{{= table.Identifier }}_Set{{= col.Identifier }}(t *testing.T) {

    obj := New{{= table.Identifier }}()
{{if col.IsEnum() }}
    {{if col.IsEnumArray() }}
    {{= col.VariableIdentifier() }} := 	test.RandomEnumArray({{= col.Reference.EnumTable.IdentifierPlural}}())
    obj.Set{{= col.Identifier }}({{= col.VariableIdentifier() }})
    {{else}}
    {{= col.VariableIdentifier() }} := test.RandomEnum({{= col.Reference.EnumTable.IdentifierPlural}}())
     obj.Set{{= col.Identifier }}({{= col.VariableIdentifier() }})
   {{if}}
{{else}}
    {{= col.VariableIdentifier() }} := 	test.RandomValue[{{= col.GoType() }}]({{u col.Size }})
    obj.Set{{= col.Identifier }}({{= col.VariableIdentifier() }})
{{if}}
{{if col.SchemaSubType == schema.ColSubTypeDateOnly}}
    {{= col.VariableIdentifier() }} = obj.{{= col.Identifier }}()
    assert.Zero(t, {{= col.VariableIdentifier() }}.Minute()) // make sure time part is zero'd
    assert.Zero(t, {{= col.VariableIdentifier() }}.Hour()) // make sure time part is zero'd
    assert.Zero(t, {{= col.VariableIdentifier() }}.Second()) // make sure time part is zero'd
{{elseif col.SchemaSubType == schema.ColSubTypeTimeOnly}}
    {{= col.VariableIdentifier() }} = obj.{{= col.Identifier }}()
    assert.Zero(t, {{= col.VariableIdentifier() }}.Year()) // make sure minute part is zero'd
    assert.Equal(t, 1, {{= col.VariableIdentifier() }}.Month()) // make sure minute part is zero'd
    assert.Equal(t, 1, {{= col.VariableIdentifier() }}.Day()) // make sure minute part is zero'd
{{else}}
    assert.Equal(t, {{= col.VariableIdentifier() }}, obj.{{= col.Identifier }}())
{{if}}
{{if col.IsNullable }}
    assert.False(t, obj.{{= col.Identifier }}IsNull())
{{if}}

{{if col.IsNullable }}
    // Test nil
    obj.Set{{= col.Identifier }}(nil)
    assert.Equal(t, {{= col.DefaultValueAsValue() }}, obj.{{= col.Identifier }}(), "set nil")
    assert.True(t, obj.{{= col.Identifier }}IsNull())
{{if}}

    // test default
{{if col.IsEnumArray()}}
    obj.Set{{= col.Identifier }}({{= col.DefaultValueAsValue() }})
    assert.True(t, obj.{{= col.Identifier }}().Equal({{= col.GoType() }}({{= col.DefaultValueAsValue() }})), "set default")
{{else}}
    obj.Set{{= col.Identifier }}({{= col.DefaultValueAsValue() }})
    assert.EqualValues(t, {{= col.DefaultValueAsValue() }}, obj.{{= col.Identifier }}(), "set default")
    {{if col.IsNullable }}
    assert.False(t, obj.{{= col.Identifier }}IsNull())
    {{if}}
{{if}}

{{if col.Size > 0 &&
        !col.IsEnum() &&
        (col.ReceiverType == query.ColTypeBytes || col.ReceiverType == query.ColTypeString || col.ReceiverType == query.ColTypeUnknown) }}
    // test panic on setting value larger than maximum size allowed
    {{= col.VariableIdentifier() }} = test.RandomValue[{{= col.GoType() }}]({{u col.Size + 1}})
    assert.Panics(t, func() {
        obj.Set{{= col.Identifier }}({{= col.VariableIdentifier() }})
    })
{{if}}
}
}}
}