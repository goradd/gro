//*** {{includeName}}

size := col.Size
if col.Size == 0 || col.Size > 10 {
    size = 10
}

{{
func Test{{= table.Identifier }}_Set{{= col.Identifier }}(t *testing.T) {
    obj := New{{= table.Identifier }}()

    {{= col.VariableIdentifier() }} := 	[]byte(strings2.RandomString(strings2.AlphaAll, {{u size}}))
    obj.Set{{= col.Identifier }}({{= col.VariableIdentifier() }})
    assert.Equal(t, {{= col.VariableIdentifier() }}, obj.{{= col.Identifier }}())
{{if col.IsNullable }}
    assert.False(t, obj.{{= col.Identifier }}IsNull())
{{if}}

    obj.Set{{= col.Identifier }}(nil)
    assert.Equal(t, []byte{}, obj.{{= col.Identifier }}(), "set nil")
{{if col.IsNullable }}
    assert.True(t, obj.{{= col.Identifier }}IsNull())
{{if}}

    obj.Set{{= col.Identifier }}([]byte{})
    assert.Equal(t, []byte{}, obj.{{= col.Identifier }}(), "set empty")
{{if col.IsNullable }}
    assert.False(t, obj.{{= col.Identifier }}IsNull())
{{if}}
}

}}
