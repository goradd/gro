//*** {{includeName}}

{{
// createMinimalSample{{= table.Identifier }} creates and saves a minimal version of a {{= table.Identifier }} object
// for testing.
func createMinimalSample{{= table.Identifier }}(ctx context.Context) *{{= table.Identifier }} {
    obj := New{{= table.Identifier }}()

{{for _,col := range table.Columns}}
{{g
    if col.ReceiverType == query.ColTypeUnknown {continue} // cannot know what the set of valid input characters are.
}}
{{if col.HasSetter()}}
    {{if col.IsReference()}}
        {{if !col.IsNullable }}
    // A required forward reference will need to be fulfilled just to save the minimal version of this object
    {{= col.ReferenceVariableIdentifier() }} := createMinimalSample{{= col.ReferenceIdentifier() }}(ctx)
    obj.Set{{= col.ReferenceIdentifier() }}({{= col.ReferenceVariableIdentifier() }})
        {{if}}
        {{# otherwise do not set the reference to avoid possible endless loop}}
    {{elseif col.IsEnum() }}
        {{if col.IsEnumArray() }}
    {{= col.VariableIdentifier() }} := test.RandomEnumArray({{= col.Reference.EnumTable.IdentifierPlural}}())
     obj.Set{{= col.Identifier }}({{= col.VariableIdentifier() }})
       {{else}}
    {{= col.VariableIdentifier() }} := test.RandomEnum({{= col.Reference.EnumTable.IdentifierPlural}}())
     obj.Set{{= col.Identifier }}({{= col.VariableIdentifier() }})
        {{if}}
    {{else}}
    {{= col.VariableIdentifier() }} := 	test.RandomValue[{{= col.GoType() }}]({{u col.Size }})
     obj.Set{{= col.Identifier }}({{= col.VariableIdentifier() }})
   {{if}}

{{if}}
{{for}}
    obj.Save(ctx)
    return obj
}
}}
