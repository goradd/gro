//*** {{includeName}}

{{
// createMinimalSample{{= table.Identifier }} creates an unsaved minimal version of a {{= table.Identifier }} object
// for testing.
func createMinimalSample{{= table.Identifier }}() *{{= table.Identifier }} {
    obj := New{{= table.Identifier }}()
    updateMinimalSample{{= table.Identifier }}(obj)

{{for _,col := range table.Columns }}
{{if col.IsPrimaryKey && !col.IsAutoPK }}
    obj.Set{{= col.Identifier }}(test.RandomValue[{{= col.GoType() }}]({{u min(col.Size, 100000)}}))
{{if}}
{{if col.IsReference() && !col.IsNullable }}
        // A required forward reference will need to be fulfilled just to save the minimal version of this object
        // If the database is configured so that the referenced object points back here, either directly or through multiple
        // forward references, it possible this could create an endless loop. Such a structure could not be saved anyways.
        obj.Set{{= col.ReferenceIdentifier() }}(createMinimalSample{{= col.ReferenceType() }}())
{{if}}
{{for}}

    return obj
}

// updateMinimalSample{{= table.Identifier }} sets the values of a minimal sample to new, random values.
func updateMinimalSample{{= table.Identifier }}(obj *{{= table.Identifier }})  {
{{for _,col := range table.SettableColumns() }}
{{g
    if col.ReceiverType == query.ColTypeUnknown {continue} // cannot know what the set of valid input characters are.
    if col.IsReference() {continue} // references must point to objects
    if col.IsPrimaryKey {continue} // cannot change a primary key
    testSize := min(col.Size, 100000)
}}

{{if col.IsEnum() }}

{{if col.IsEnumArray() }}
     obj.Set{{= col.Identifier }}(test.RandomEnumArray({{= col.Reference.EnumTable.IdentifierPlural}}()))
{{else}}
     obj.Set{{= col.Identifier }}(test.RandomEnum({{= col.Reference.EnumTable.IdentifierPlural}}()))
{{if}}

{{else}} {{# IsEnum}}

{{if col.IsDecimal() }}
    obj.Set{{= col.Identifier }}(test.RandomDecimal({{u col.DecimalPrecision()}}, {{u col.DecimalScale()}} ))
{{else}}
    obj.Set{{= col.Identifier }}(test.RandomValue[{{= col.GoType() }}]({{u testSize}}))
{{if}}

{{if}}

{{for}}
}

// createMaximalSample{{= table.Identifier }} creates an unsaved version of a {{= table.Identifier }} object
// for testing that includes references to minimal objects.
func createMaximalSample{{= table.Identifier }}(ctx context.Context) *{{= table.Identifier }} {
    obj := New{{= table.Identifier }}()
{{for _,col := range table.Columns }}
{{if col.IsPrimaryKey && !col.IsAutoPK }}
    obj.Set{{= col.Identifier }}(test.RandomValue[{{= col.GoType() }}]({{u min(col.Size, 100000)}}))
{{if}}
{{for}}
    updateMaximalSample{{= table.Identifier }}(ctx, obj)
    return obj
}

// updateMaximalSample{{= table.Identifier }} sets all the maximal sample values to new values.
// This will set new values for references, so save the old values and delete them.
func updateMaximalSample{{= table.Identifier }}(ctx context.Context, obj *{{= table.Identifier }}) {
    updateMinimalSample{{= table.Identifier }}(obj)
{{for _,col := range table.Columns}}
{{if col.HasSetter()}}
{{if col.IsReference()}}
    obj.Set{{= col.ReferenceIdentifier() }}(createMinimalSample{{= col.ReferenceType() }}())
{{if}}
{{if}}
{{for}}

{{for _,col := range table.ReverseReferences}}
{{if col.IsUnique}}
    // only update if not already set, since it can't be changed once set unless the reverse object is deleted first.
    if obj.Load{{= col.ReverseIdentifier() }}(ctx) == nil {
        obj.Set{{= col.ReverseIdentifier() }}(createMinimalSample{{= col.Table.Identifier }}())
    }
{{else}}
    obj.Set{{= col.ReverseIdentifier() }}(createMinimalSample{{= col.Table.Identifier }}())
{{if}}
{{for}}
{{for _,mm := range table.ManyManyReferences}}
    obj.Set{{= mm.IdentifierPlural }}(createMinimalSample{{= mm.DestinationTable.Identifier }}())
{{for}}
}

// deleteSample{{= table.Identifier }} deletes an object created and saved by one of the sample creator functions.
func deleteSample{{= table.Identifier }}(ctx context.Context, obj *{{= table.Identifier }}) {
    if obj == nil {
        return
    }

{{for _,col := range table.ReverseReferences}}
{{if col.IsUnique }}
    deleteSample{{= col.Table.Identifier }}(ctx, obj.{{= col.ReverseIdentifier() }}())
{{else}}
    for _,item := range obj.{{= col.ReverseIdentifier() }}() {
        deleteSample{{= col.Table.Identifier }}(ctx, item)
    }
{{if}}
{{for}}

{{for _,mm := range table.ManyManyReferences}}
    for _,item := range obj.{{= mm.IdentifierPlural }}() {
        deleteSample{{= mm.ObjectType() }}(ctx, item)
    }
{{for}}

    obj.Delete(ctx)
{{for _,col := range table.Columns}}
{{if col.HasSetter()}}
    {{if col.IsReference()}}
    deleteSample{{= col.ReferenceType() }}(ctx, obj.{{= col.ReferenceIdentifier() }}())
    {{if}}
{{if}}
{{for}}
}

// assertEqualFields{{= table.Identifier }} compares two objects and asserts that the basic fields are equal.
func assertEqualFields{{= table.Identifier }}(t *testing.T, obj1, obj2 *{{= table.Identifier }})  {
{{for _,col := range table.Columns }}
    if obj1.{{= col.Identifier }}IsLoaded() && obj2.{{= col.Identifier }}IsLoaded() { // only check loaded values
{{if col.IsEnum() }}
{{if col.IsEnumArray() }}
        assert.True(t, obj1.{{= col.Identifier }}().Equal(obj2.{{= col.Identifier }}()))
{{else}}
        assert.EqualValues(t, obj1.{{= col.Identifier }}(), obj2.{{= col.Identifier }}())
{{if}}
{{elseif col.IsDecimal() }}
        assert.True(t, test.EqualDecimals(obj1.{{= col.Identifier }}(), obj2.{{= col.Identifier }}()))
{{elseif col.ReceiverType == query.ColTypeTime }}
        // ignore fractional seconds since some types truncate to the second.
        assert.WithinDuration(t, obj1.{{= col.Identifier }}(), obj2.{{= col.Identifier }}(), time.Second)
{{else}}
        assert.EqualValues(t, obj1.{{= col.Identifier }}(), obj2.{{= col.Identifier }}())
{{if}}
    }
{{for}}

}

}}
