//*** {{includeName}}

{{
// createMinimalSample{{= table.Identifier }} creates an unsaved minimal version of a {{= table.Identifier }} object
// for testing.
func createMinimalSample{{= table.Identifier }}() *{{= table.Identifier }} {
    obj := New{{= table.Identifier }}()
    updateMinimalSample{{= table.Identifier }}(obj)
    return obj
}

// updateMinimalSample{{= table.Identifier }} sets the values of a minimal sample to new, random values.
func updateMinimalSample{{= table.Identifier }}(obj *{{= table.Identifier }})  {
{{for _,col := range table.Columns}}
{{g
    if col.ReceiverType == query.ColTypeUnknown {continue} // cannot know what the set of valid input characters are.
    testSize := min(col.Size, 100000)
}}

{{if col.HasSetter()}}
{{if col.IsReference()}}
{{if !col.IsNullable }}
    // A required forward reference will need to be fulfilled just to save the minimal version of this object
    // If the database is configured so that the referenced object points back here, either directly or through multiple
    // forward references, it possible this could create an endless loop. Such a structure could not be saved anyways.
    obj.Set{{= col.ReferenceIdentifier() }}(createMinimalSample{{= col.ReferenceType() }}())
{{if}}
{{elseif col.IsEnum() }}
{{if col.IsEnumArray() }}
     obj.Set{{= col.Identifier }}(test.RandomEnumArray({{= col.Reference.EnumTable.IdentifierPlural}}()))
{{else}}
     obj.Set{{= col.Identifier }}(test.RandomEnum({{= col.Reference.EnumTable.IdentifierPlural}}()))
{{if}}
{{else}}
     obj.Set{{= col.Identifier }}(test.RandomValue[{{= col.GoType() }}]({{u testSize}}))
{{if}}
{{if}}
{{for}}
}

// createMaximalSample{{= table.Identifier }} creates an unsaved version of a {{= table.Identifier }} object
// for testing that includes references to minimal objects.
func createMaximalSample{{= table.Identifier }}() *{{= table.Identifier }} {
    obj := New{{= table.Identifier }}()
    updateMaximalSample{{= table.Identifier }}(obj)
    return obj
}

// updateMaximalSample{{= table.Identifier }} sets all the maximal sample values to new values.
func updateMaximalSample{{= table.Identifier }}(obj *{{= table.Identifier }}) {
    updateMinimalSample{{= table.Identifier }}(obj)
{{for _,col := range table.Columns}}
{{if col.HasSetter()}}
    {{if col.IsReference()}}
        {{if col.IsNullable }}
    obj.Set{{= col.ReferenceIdentifier() }}(createMinimalSample{{= col.ReferenceType() }}())
        {{if}}
    {{if}}
{{if}}
{{for}}

{{for _,col := range table.ReverseReferences}}
    obj.Set{{= col.ReverseIdentifier() }}(createMinimalSample{{= col.Table.Identifier }}())
{{for}}
{{for _,mm := range table.ManyManyReferences}}
    obj.Set{{= mm.IdentifierPlural }}(createMinimalSample{{= mm.DestinationTable.Identifier }}())
{{for}}
}

// deleteSample{{= table.Identifier }} deletes an object created and saved by one of the sample creator functions.
func deleteSample{{= table.Identifier }}(ctx context.Context, obj *{{= table.Identifier }}) {
    if obj == nil {
        return
    }

{{for _,col := range table.ReverseReferences}}
{{if col.IsUnique }}
    deleteSample{{= col.Table.Identifier }}(ctx, obj.{{= col.ReverseIdentifier() }}())
{{else}}
    for _,item := range obj.{{= col.ReverseIdentifier() }}() {
        deleteSample{{= col.Table.Identifier }}(ctx, item)
    }
{{if}}
{{for}}

{{for _,mm := range table.ManyManyReferences}}
    for _,item := range obj.{{= mm.IdentifierPlural }}() {
        deleteSample{{= mm.ObjectType() }}(ctx, item)
    }
{{for}}

    obj.Delete(ctx)
{{for _,col := range table.Columns}}
{{if col.HasSetter()}}
    {{if col.IsReference()}}
    deleteSample{{= col.ReferenceType() }}(ctx, obj.{{= col.ReferenceIdentifier() }}())
    {{if}}
{{if}}
{{for}}
}


}}
