//*** {{includeName}}

{{
func Test{{= table.Identifier }}_EmptyPrimaryKeyGetter(t *testing.T) {
    obj := New{{= table.Identifier }}()

{{if table.PrimaryKeyColumn().IsAutoId }}
    i,err := strconv.Atoi(obj.{{= table.PrimaryKeyColumn().Identifier }}())
    assert.NoError(t, err)
    assert.True(t, i < 0)
{{else}}
    assert.Zero(t, obj.{{= table.PrimaryKeyColumn().Identifier }}())
{{if}}
}

func Test{{= table.Identifier }}_Getters(t *testing.T) {
    obj := createMinimalSample{{= table.Identifier }}()

{{if table.PrimaryKeyColumn().IsAutoId }}
    i,err := strconv.Atoi(obj.{{= table.PrimaryKeyColumn().Identifier }}())
    assert.NoError(t, err)
    assert.True(t, i < 0)
{{if}}

    ctx := db.NewContext(nil)
    require.NoError(t, obj.Save(ctx))
    defer deleteSample{{= table.Identifier }}(ctx, obj)

    assert.True(t, Has{{= table.Identifier }}(ctx, obj.PrimaryKey()))

    obj2 := Load{{= table.Identifier }}(ctx, obj.PrimaryKey(), node.{{= table.Identifier }}().PrimaryKey())
{{if !table.PrimaryKeyColumn().IsAutoId }}
    assert.Equal(t, obj.{{= table.PrimaryKeyColumn().Identifier }}(), obj2.{{= table.PrimaryKeyColumn().Identifier }}())
{{if}}

{{for _, col := range table.Columns }}
    assert.Equal(t, obj.{{= col.Identifier }}(), obj.Get(node.{{= table.Identifier }}().{{= col.Identifier }}().Identifier))
{{if !col.IsPrimaryKey }}
    assert.Panics(t, func() { obj2.{{= col.Identifier }}() })
    assert.Nil(t, obj2.Get(node.{{= table.Identifier }}().{{= col.Identifier }}().Identifier))
{{if}}
{{for}}
}

}}

