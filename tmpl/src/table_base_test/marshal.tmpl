//*** {{includeName}}

{{
func Test{{= table.Identifier }}_MarshalJSON(t *testing.T) {
    obj := createMinimalSample{{= table.Identifier }}()

    b,err := json.Marshal(obj)
    assert.NoError(t, err)

    obj2 := New{{= table.Identifier }}()
    err = json.Unmarshal(b, &obj2)
    assert.NoError(t, err)

    assertEqualFields{{= table.Identifier }}(t, obj, obj2)
}

func Test{{= table.Identifier }}_MarshalBinary(t *testing.T) {
    obj := createMinimalSample{{= table.Identifier }}()

    b,err := obj.MarshalBinary()
    assert.NoError(t, err)

    obj2 := New{{= table.Identifier }}()
    err = obj2.UnmarshalBinary(b)
    assert.NoError(t, err)

    assertEqualFields{{= table.Identifier }}(t, obj, obj2)
}

{{g
    totalLines := len(table.Columns) * 3 +
        len(table.ReverseReferences) * 2 +
        len(table.ManyManyReferences) * 2 +
        3
    // reduce by columns that have no dirty variable
    totalLines -= len(table.Columns) - len(table.SettableColumns())
}}

func Test{{= table.Identifier }}_FailingMarshalBinary(t *testing.T) {
    obj := createMinimalSample{{= table.Identifier }}()
	var err error
	for i := 0; i < {{i totalLines }}; i++ {
		w := &test.FailingWriter{Count: i}
		err = obj.encodeTo(w)
		assert.Error(t, err)
	}
	// do it again with aliases
	obj._aliases = make(map[string]any)
    for i := 0; i < {{i totalLines + 1 }}; i++ {
        w := &test.FailingWriter{Count: i}
        err = obj.encodeTo(w)
        assert.Error(t, err)
    }

}


}}
