//*** {{includeName}}

{{
func Test{{= table.Identifier }}_CRUD(t *testing.T) {
    obj := New{{= table.Identifier }}()
    ctx := db.NewContext(nil)

{{for _,col := range table.Columns}}
{{g
    if col.Type == query.ColTypeUnknown {continue} // cannot know what the set of valid input characters are.
}}

{{if col.HasSetter()}}
    {{if col.IsReference()}}
    {{= col.ReferenceVariableIdentifier() }} := createMinimalSample{{= col.ReferenceType() }}(ctx)
    obj.Set{{= col.ReferenceIdentifier() }}({{= col.ReferenceVariableIdentifier() }})
    {{else}}
    {{= col.VariableIdentifier() }} := 	test.RandomValue[{{= col.GoType() }}]({{u col.Size }})
    obj.Set{{= col.Identifier }}({{= col.VariableIdentifier() }})
    {{if}}
{{if}}
{{for}}

    // Test retrieval
    obj = Load{{= table.Identifier }}(ctx, obj.PrimaryKey())
    require.NotNil(t, obj)

{{for _,col := range table.Columns}}
{{g
    if col.Type == query.ColTypeUnknown {continue} // cannot know what the set of valid input characters are.
}}

    assert.True(t, obj.{{= col.Identifier }}IsValid())
{{if col.IsNullable}}
    assert.False(t, obj.{{= col.Identifier }}IsNull())
{{if}}
{{if col.HasSetter() && !col.IsReference() }}
    assert.Equal(t, {{= col.VariableIdentifier() }}, obj.{{= col.Identifier }}())
{{else}}
    assert.NotEmpty(t, obj.{{= col.Identifier }}())
{{if}}
{{for}}

}
}}
