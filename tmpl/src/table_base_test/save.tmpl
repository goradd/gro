//*** {{includeName}}

{{
func Test{{= table.Identifier }}_BasicInsert(t *testing.T) {
    obj := New{{= table.Identifier }}()
    ctx := db.NewContext(nil)

{{for _,col := range table.Columns}}
{{g
    testSize := min(100000, col.Size)
}}

{{if col.HasSetter()}}
    {{if col.IsReference()}}
    v_{{= col.ReferenceVariableIdentifier() }} := createMinimalSample{{= col.ReferenceType() }}()
    assert.NoError(t, v_{{= col.ReferenceVariableIdentifier() }}.Save(ctx))
    defer deleteSample{{= col.ReferenceType() }}(ctx, v_{{= col.ReferenceVariableIdentifier() }})
    obj.Set{{= col.ReferenceIdentifier() }}(v_{{= col.ReferenceVariableIdentifier() }})
    {{elseif col.IsEnum() }}
        {{if col.IsEnumArray() }}
    v_{{= col.VariableIdentifier() }} := test.RandomEnumArray({{= col.Reference.EnumTable.IdentifierPlural}}())
    obj.Set{{= col.Identifier }}(v_{{= col.VariableIdentifier() }})
        {{else}}
    v_{{= col.VariableIdentifier() }} := test.RandomEnum({{= col.Reference.EnumTable.IdentifierPlural}}())
    obj.Set{{= col.Identifier }}(v_{{= col.VariableIdentifier() }})
        {{if}}
    {{else}}
    v_{{= col.VariableIdentifier() }} := test.RandomValue[{{= col.GoType() }}]({{u testSize }})
    obj.Set{{= col.Identifier }}(v_{{= col.VariableIdentifier() }})
        {{if col.SchemaType == schema.ColTypeTime}}
    v_{{= col.VariableIdentifier() }} = obj.{{= col.Identifier }}()
        {{if}}
    {{if}}
{{if}}
{{for}}
    err := obj.Save(ctx)
	assert.NoError(t, err)
    defer obj.Delete(ctx)

    // Test retrieval
    obj2 := Load{{= table.Identifier }}(ctx, obj.PrimaryKey())
    require.NotNil(t, obj2)

    assert.Equal(t, obj2.PrimaryKey(), obj2.OriginalPrimaryKey())

{{for _,col := range table.Columns}}
{{g
    if col.ReceiverType == query.ColTypeUnknown {continue} // cannot know what the set of valid input characters are.
}}

    assert.True(t, obj2.{{= col.Identifier }}IsValid())
{{if col.IsNullable}}
    assert.False(t, obj2.{{= col.Identifier }}IsNull())
{{if}}
{{if col.HasSetter()}}
{{if col.IsReference() }}
    assert.NotEmpty(t, obj2.{{= col.Identifier }}())
{{elseif col.IsEnumArray() }}
    assert.True(t, v_{{= col.VariableIdentifier() }}.Equal(obj2.{{= col.Identifier }}()))
{{else}}
    assert.EqualValues(t, v_{{= col.VariableIdentifier() }}, obj2.{{= col.Identifier }}())
{{if}}
    // test that setting it to the same value will not change the dirty bit
    assert.False(t, obj2.{{= col.VariableIdentifier() }}IsDirty)
    obj2.Set{{= col.Identifier }}(obj2.{{= col.Identifier }}())
    assert.False(t, obj2.{{= col.VariableIdentifier() }}IsDirty)
{{if}}
{{for}}

}

func Test{{= table.Identifier }}_InsertPanics(t *testing.T) {
    obj := createMinimalSample{{= table.Identifier }}()
    ctx := db.NewContext(nil)

 {{for _, col := range table.Columns }}
 {{if !col.IsNullable && col.HasSetter() && col.DefaultValue == nil }}
    obj.{{= col.VariableIdentifier() }}IsValid = false
    assert.Panics(t, func() {obj.Save(ctx)})
    obj.{{= col.VariableIdentifier() }}IsValid = true

 {{if}}
 {{for}}
}

func Test{{= table.Identifier }}_BasicUpdate(t *testing.T) {
    obj := createMinimalSample{{= table.Identifier }}()
    ctx := db.NewContext(nil)
    assert.NoError(t, obj.Save(ctx))
    defer deleteSample{{= table.Identifier }}(ctx, obj)
    updateMinimalSample{{= table.Identifier }}(obj)
    assert.NoError(t, obj.Save(ctx))
    obj2 := Load{{= table.Identifier }}(ctx, obj.PrimaryKey())

{{for _,col := range table.Columns}}
    assert.Equal(t, obj2.{{= col.Identifier }}(), obj.{{= col.Identifier }}())
{{for}}
}



func Test{{= table.Identifier }}_References(t *testing.T) {
    obj := createMaximalSample{{= table.Identifier }}()
    ctx := db.NewContext(nil)
    obj.Save(ctx)
    defer deleteSample{{= table.Identifier }}(ctx, obj)

    // Test that referenced objects were saved and assigned ids
{{for _,col := range table.Columns }}
{{if col.IsReference() }}
    assert.NotNil(t, obj.{{= col.ReferenceIdentifier() }}())
{{if col.Reference.Table.PrimaryKeyColumn().IsAutoId }}
    assert.NotEqual(t, '-', obj.{{= col.ReferenceIdentifier() }}().PrimaryKey()[0])
{{if}}

{{if}}
{{for}}


}
}}
