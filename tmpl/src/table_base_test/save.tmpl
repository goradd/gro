//*** {{includeName}}

{{
func Test{{= table.Identifier }}_BasicInsert(t *testing.T) {
    obj := createMinimalSample{{= table.Identifier }}()
    ctx := db.NewContext(nil)
    err := obj.Save(ctx)
	assert.NoError(t, err)
    defer deleteSample{{= table.Identifier }}(ctx, obj)

    // Test retrieval
    obj2 := Load{{= table.Identifier }}(ctx, obj.PrimaryKey())
    require.NotNil(t, obj2)

    assert.Equal(t, obj2.PrimaryKey(), obj2.OriginalPrimaryKey())

{{for _,col := range table.Columns}}
{{g
    if col.ReceiverType == query.ColTypeUnknown {continue} // cannot know what the set of valid input characters are.
    if col.IsReference() {continue} // forward references will be tested in the References test.
}}

    assert.True(t, obj2.{{= col.Identifier }}IsLoaded())
{{if col.IsNullable}}
    assert.False(t, obj2.{{= col.Identifier }}IsNull())
{{if}}
{{if col.HasSetter()}}
{{if col.IsEnumArray() }}
    assert.True(t, obj.{{= col.Identifier }}().Equal(obj2.{{= col.Identifier }}()))
{{elseif col.IsDecimal() }}
    assert.True(t, test.EqualDecimals(obj.{{= col.Identifier }}(), obj2.{{= col.Identifier }}()))
{{if}}
{{if col.IsAutoPK}}
    assert.Panics(t, func() {
        obj2.Set{{= col.Identifier }}(obj2.{{= col.Identifier }}())
    })
{{else}}
    // test that setting it to the same value will not change the dirty bit
    assert.False(t, obj2.{{= col.VariableIdentifier() }}IsDirty)
    obj2.Set{{= col.Identifier }}(obj2.{{= col.Identifier }}())
    assert.False(t, obj2.{{= col.VariableIdentifier() }}IsDirty)
{{if}}
{{if}}{{# HasSetter }}
{{for}}

}

func Test{{= table.Identifier }}_InsertPanics(t *testing.T) {
    obj := createMinimalSample{{= table.Identifier }}()
    _ = obj
    ctx := db.NewContext(nil)
    _ = ctx

 {{for _, col := range table.SettableColumns() }}
 {{if !col.IsAutoPK && !col.IsNullable }}
    obj.{{= col.VariableIdentifier() }}IsLoaded = false
    assert.Panics(t, func() {obj.Save(ctx)})
    obj.{{= col.VariableIdentifier() }}IsLoaded = true

 {{if}}
 {{for}}
}

func Test{{= table.Identifier }}_BasicUpdate(t *testing.T) {
    obj := createMinimalSample{{= table.Identifier }}()
    ctx := db.NewContext(nil)
    assert.NoError(t, obj.Save(ctx))
    defer deleteSample{{= table.Identifier }}(ctx, obj)
    updateMinimalSample{{= table.Identifier }}(obj)
    assert.NoError(t, obj.Save(ctx))
    obj2 := Load{{= table.Identifier }}(ctx, obj.PrimaryKey())

{{for _,col := range table.Columns}}
{{if col.ReceiverType == query.ColTypeTime}} {{# In some situations, fractional times may be truncated by the database }}
    assert.WithinDuration(t, obj2.{{= col.Identifier }}(), obj.{{= col.Identifier }}(), time.Second, "{{= col.Identifier }} not within one second")
{{elseif col.SchemaSubType != schema.ColSubTypeNumeric &&
        !col.IsReference() }}
    assert.Equal(t, obj2.{{= col.Identifier }}(), obj.{{= col.Identifier }}(), "{{= col.Identifier }} did not update")
{{if}}
{{for}}
}



func Test{{= table.Identifier }}_ReferenceLoad(t *testing.T) {
    ctx := db.NewContext(nil)
    obj := createMaximalSample{{= table.Identifier }}(ctx)
    obj.Save(ctx)
    defer deleteSample{{= table.Identifier }}(ctx, obj)

    // Test that referenced objects were saved and assigned ids
{{for _,col := range table.Columns }}
{{if col.IsReference() }}
    assert.NotNil(t, obj.{{= col.ReferenceIdentifier() }}())
{{if col.Reference.Table.PrimaryKeyColumn().IsAutoPK }}
    assert.NotEqual(t, '-', obj.{{= col.ReferenceIdentifier() }}().PrimaryKey()[0])
{{if}}

{{if}}
{{for}}

    // Test lazy loading
    obj2 := Load{{= table.Identifier }}(ctx, obj.PrimaryKey())
    objPkOnly := Load{{= table.Identifier }}(ctx, obj.PrimaryKey(), node.{{= table.Identifier }}().PrimaryKey())
    _ = obj2 // avoid error if there are no references
    _ = objPkOnly

{{for _,col := range table.Columns }}
{{if col.IsReference() }}
    assert.Nil(t, obj2.{{= col.ReferenceIdentifier() }}(), "{{= col.ReferenceIdentifier() }} is not loaded initially")
    v_{{= col.ReferenceIdentifier() }} := obj2.Load{{= col.ReferenceIdentifier() }}(ctx)
    assert.NotNil(t, v_{{= col.ReferenceIdentifier() }})
    assert.Equal(t, v_{{= col.ReferenceIdentifier() }}.PrimaryKey(), obj2.{{= col.ReferenceIdentifier() }}().PrimaryKey())
    assert.Equal(t, obj.{{= col.ReferenceIdentifier() }}().PrimaryKey(), obj2.{{= col.ReferenceIdentifier() }}().PrimaryKey())
    assert.True(t, obj2.{{= col.Identifier }}IsLoaded())

    assert.False(t, objPkOnly.{{= col.Identifier }}IsLoaded())
    assert.Nil(t, objPkOnly.Load{{= col.ReferenceIdentifier() }}(ctx))

{{if !col.IsNullable }}
    assert.Panics(t, func() {
        objPkOnly.Set{{= col.ReferenceIdentifier() }}(nil)
    })
{{if}}

{{if}}
{{for}}

{{for _,col := range table.ReverseReferences }}
    assert.Nil(t, obj2.{{= col.ReverseIdentifier() }}(), "{{= col.ReverseIdentifier() }} is not loaded initially")
    v_{{= col.ReverseIdentifier() }} := obj2.Load{{= col.ReverseIdentifier() }}(ctx)
    assert.NotNil(t, v_{{= col.ReverseIdentifier() }})
{{if col.IsUnique}}
    assert.Equal(t, v_{{= col.ReverseIdentifier() }}.PrimaryKey(), obj2.{{= col.ReverseIdentifier() }}().PrimaryKey())
    assert.Equal(t, obj.{{= col.ReverseIdentifier() }}().PrimaryKey(), obj2.{{= col.ReverseIdentifier() }}().PrimaryKey())
{{else}}
    assert.Len(t, v_{{= col.ReverseIdentifier() }}, 1)
{{if}}
{{for}}

{{for _,mm := range table.ManyManyReferences }}
    assert.Nil(t, obj2.{{= mm.IdentifierPlural }}(), "{{= mm.IdentifierPlural }} is not loaded initially")
    v_{{= mm.IdentifierPlural }} := obj2.Load{{= mm.IdentifierPlural }}(ctx)
    assert.NotNil(t, v_{{= mm.IdentifierPlural }})
    assert.Len(t, v_{{= mm.IdentifierPlural }}, 1)
{{for}}

    // test eager loading
    obj3 := Load{{= table.Identifier }}(ctx, obj.PrimaryKey(), {{for _,col := range table.Columns
}} {{if col.IsReference() }}node.{{= table.Identifier }}().{{= col.ReferenceIdentifier() }}(),
{{if}}
{{for}}{{for _,col := range table.ReverseReferences
}}node.{{= table.Identifier }}().{{= col.ReverseIdentifier() }}(),
{{for}}{{for _,mm := range table.ManyManyReferences
}}node.{{= table.Identifier }}().{{= mm.IdentifierPlural }}(),
{{for}}
    )
    _ = obj3 // avoid error if there are no references

{{for _,col := range table.Columns }}
{{if col.IsReference() }}
    assert.Equal(t, obj2.{{= col.ReferenceIdentifier() }}().PrimaryKey(), obj3.{{= col.ReferenceIdentifier() }}().PrimaryKey())
{{if}}
{{for}}
{{for _,col := range table.ReverseReferences }}
{{if col.IsUnique}}
    assert.Equal(t, obj2.{{= col.ReverseIdentifier() }}().PrimaryKey(), obj3.{{= col.ReverseIdentifier() }}().PrimaryKey())
{{else}}
    assert.Equal(t, len(obj2.{{= col.ReverseIdentifier() }}()), len(obj3.{{= col.ReverseIdentifier() }}()))
{{if}}
{{for}}
{{for _,mm := range table.ManyManyReferences }}
    assert.Equal(t, len(obj2.{{= mm.IdentifierPlural }}()), len(obj3.{{= mm.IdentifierPlural }}()))
{{for}}

}

func Test{{= table.Identifier }}_ReferenceUpdateNewObjects(t *testing.T) {
    ctx := db.NewContext(nil)
    obj := createMaximalSample{{= table.Identifier }}(ctx)
    obj.Save(ctx)
    defer deleteSample{{= table.Identifier }}(ctx, obj)

    obj2 := Load{{= table.Identifier }}(ctx, obj.PrimaryKey())
    updateMaximalSample{{= table.Identifier }}(ctx, obj2)
    assert.NoError(t, obj2.Save(ctx))
    defer deleteSample{{= table.Identifier }}(ctx, obj2)

    obj3 := Load{{= table.Identifier }}(ctx, obj2.PrimaryKey(), {{for _,col := range table.Columns
}} {{if col.IsReference() }}node.{{= table.Identifier }}().{{= col.ReferenceIdentifier() }}(),
{{if}}
{{for}}{{for _,col := range table.ReverseReferences
}}node.{{= table.Identifier }}().{{= col.ReverseIdentifier() }}(),
{{for}}{{for _,mm := range table.ManyManyReferences
}}node.{{= table.Identifier }}().{{= mm.IdentifierPlural }}(),
{{for}}
    )
    _ = obj3 // avoid error if there are no references

{{for _,col := range table.Columns }}
{{if col.IsReference() }}
    assert.Equal(t, obj2.{{= col.ReferenceIdentifier() }}().PrimaryKey(), obj3.{{= col.ReferenceIdentifier() }}().PrimaryKey())
{{if}}
{{for}}

{{for _,col := range table.ReverseReferences }}
{{if col.IsUnique}}
    assert.Equal(t, obj2.{{= col.ReverseIdentifier() }}().PrimaryKey(), obj3.{{= col.ReverseIdentifier() }}().PrimaryKey())
{{else}}
    assert.Equal(t, len(obj2.{{= col.ReverseIdentifier() }}()), len(obj3.{{= col.ReverseIdentifier() }}()))
{{if}}
{{for}}

{{for _,mm := range table.ManyManyReferences }}
    assert.Equal(t, len(obj2.{{= mm.IdentifierPlural }}()), len(obj3.{{= mm.IdentifierPlural }}()))
{{for}}

}

func Test{{= table.Identifier }}_ReferenceUpdateOldObjects(t *testing.T) {
    ctx := db.NewContext(nil)
    obj := createMaximalSample{{= table.Identifier }}(ctx)
    assert.NoError(t, obj.Save(ctx))
    defer deleteSample{{= table.Identifier }}(ctx, obj)

{{for _,col := range table.Columns }}
{{if col.IsReference() }}
    updateMinimalSample{{= col.ReferenceType() }}(obj.{{= col.ReferenceIdentifier() }}())
{{if}}
{{for}}
{{for _,col := range table.ReverseReferences }}
{{if col.IsUnique}}
    updateMinimalSample{{= col.Table.Identifier }}(obj.{{= col.ReverseIdentifier() }}())
{{else}}
    updateMinimalSample{{= col.Table.Identifier }}(obj.{{= col.ReverseIdentifier() }}()[0])
{{if}}
{{for}}
{{for _,mm := range table.ManyManyReferences }}
    updateMinimalSample{{= mm.ObjectType() }}(obj.{{= mm.IdentifierPlural }}()[0])
{{for}}

    assert.NoError(t, obj.Save(ctx))

    obj2 := Load{{= table.Identifier }}(ctx, obj.PrimaryKey(), {{for _,col := range table.Columns
    }} {{if col.IsReference() }}node.{{= table.Identifier }}().{{= col.ReferenceIdentifier() }}(),
    {{if}}
    {{for}}{{for _,col := range table.ReverseReferences
    }}node.{{= table.Identifier }}().{{= col.ReverseIdentifier() }}(),
    {{for}}{{for _,mm := range table.ManyManyReferences
    }}node.{{= table.Identifier }}().{{= mm.IdentifierPlural }}(),
    {{for}}
    )
    _ = obj2 // avoid error if there are no references

{{for _,col := range table.Columns }}
{{if col.IsReference() }}
    assertEqualFields{{= col.ReferenceType() }}(t, obj2.{{= col.ReferenceIdentifier() }}(), obj.{{= col.ReferenceIdentifier() }}())
{{if}}
{{for}}

{{for _,col := range table.ReverseReferences }}
{{if col.IsUnique}}
    assertEqualFields{{= col.Table.Identifier }}(t, obj2.{{= col.ReverseIdentifier() }}(), obj.{{= col.ReverseIdentifier() }}())
{{else}}
    assertEqualFields{{= col.Table.Identifier }}(t, obj2.{{= col.ReverseIdentifier() }}()[0], obj.{{= col.ReverseIdentifier() }}()[0])
{{if}}
{{for}}

{{for _,mm := range table.ManyManyReferences }}
    assertEqualFields{{= mm.ObjectType() }}(t, obj2.{{= mm.IdentifierPlural }}()[0], obj.{{= mm.IdentifierPlural }}()[0])
{{for}}
}
}}

