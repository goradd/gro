//*** {{includeName}}

{{
func Test{{= table.Identifier }}_CRUD(t *testing.T) {
    obj := New{{= table.Identifier }}()
    ctx := db.NewContext(nil)

{{for _,col := range table.Columns}}
{{g
    testSize := min(100000, col.Size)
}}

{{if col.HasSetter()}}
    {{if col.IsReference()}}
    v_{{= col.ReferenceVariableIdentifier() }} := createMinimalSample{{= col.ReferenceType() }}()
    assert.NoError(t, v_{{= col.ReferenceVariableIdentifier() }}.Save(ctx))
    defer v_{{= col.ReferenceVariableIdentifier() }}.Delete(ctx)
    obj.Set{{= col.ReferenceIdentifier() }}(v_{{= col.ReferenceVariableIdentifier() }})
    {{elseif col.IsEnum() }}
        {{if col.IsEnumArray() }}
    v_{{= col.VariableIdentifier() }} := test.RandomEnumArray({{= col.Reference.EnumTable.IdentifierPlural}}())
    obj.Set{{= col.Identifier }}(v_{{= col.VariableIdentifier() }})
        {{else}}
    v_{{= col.VariableIdentifier() }} := test.RandomEnum({{= col.Reference.EnumTable.IdentifierPlural}}())
    obj.Set{{= col.Identifier }}(v_{{= col.VariableIdentifier() }})
        {{if}}
    {{else}}
    v_{{= col.VariableIdentifier() }} := test.RandomValue[{{= col.GoType() }}]({{u testSize }})
    obj.Set{{= col.Identifier }}(v_{{= col.VariableIdentifier() }})
        {{if col.SchemaType == schema.ColTypeTime}}
    v_{{= col.VariableIdentifier() }} = obj.{{= col.Identifier }}()
        {{if}}
    {{if}}
{{if}}
{{for}}
    err := obj.Save(ctx)
	assert.NoError(t, err)
    defer obj.Delete(ctx)

    // Test retrieval
    obj2 := Load{{= table.Identifier }}(ctx, obj.PrimaryKey())
    require.NotNil(t, obj2)

{{for _,col := range table.Columns}}
{{g
    if col.ReceiverType == query.ColTypeUnknown {continue} // cannot know what the set of valid input characters are.
}}

    assert.True(t, obj2.{{= col.Identifier }}IsValid())
{{if col.IsNullable}}
    assert.False(t, obj2.{{= col.Identifier }}IsNull())
{{if}}
{{if col.HasSetter()}}
{{if col.IsReference() }}
    assert.NotEmpty(t, obj2.{{= col.Identifier }}())
{{elseif col.IsEnumArray() }}
    assert.True(t, v_{{= col.VariableIdentifier() }}.Equal(obj2.{{= col.Identifier }}()))
{{else}}
    assert.EqualValues(t, v_{{= col.VariableIdentifier() }}, obj2.{{= col.Identifier }}())
{{if}}
{{if}}
{{for}}

}
}}
