//*** {{includeName}}

{{
func Test{{= table.Identifier }}_QueryLoad(t *testing.T) {
    obj := createMinimalSample{{= table.Identifier }}()
    ctx := db.NewContext(nil)
	assert.NoError(t, obj.Save(ctx))
    defer deleteSample{{= table.Identifier }}(ctx, obj)

    objs, err := Query{{= table.IdentifierPlural }}(ctx).
        Where(op.Equal(node.{{= table.Identifier }}().PrimaryKey(), obj.PrimaryKey())).
        OrderBy(node.{{= table.Identifier }}().PrimaryKey()). // exercise order by
        Limit(1,0). // exercise limit
        Calculation(node.{{= table.Identifier }}(), "IsTrue", op.Equal("A","A")).
        Load()
    assert.NoError(t, err)
    assert.Equal(t, obj.PrimaryKey(), objs[0].PrimaryKey())
	assert.True(t, objs[0].GetAlias("IsTrue").Bool())
}
}}

{{
func Test{{= table.Identifier }}_QueryLoadI(t *testing.T) {
    obj := createMinimalSample{{= table.Identifier }}()
    ctx := db.NewContext(nil)
    err := obj.Save(ctx)
	assert.NoError(t, err)
    defer deleteSample{{= table.Identifier }}(ctx, obj)

    objs, _ := Query{{= table.IdentifierPlural }}(ctx).
        Where(op.Equal(node.{{= table.Identifier }}().PrimaryKey(), obj.PrimaryKey())).
        LoadI()

    assert.Equal(t, obj.PrimaryKey(), objs[0].Get("{{= table.PrimaryKeyColumn().Identifier }}"))
}
}}

{{
func Test{{= table.Identifier }}_QueryCursor(t *testing.T) {
    obj := createMinimalSample{{= table.Identifier }}()
    ctx := db.NewContext(nil)
	assert.NoError(t, obj.Save(ctx))
    defer deleteSample{{= table.Identifier }}(ctx, obj)

    cursor, err := Query{{= table.IdentifierPlural }}(ctx).
        Where(op.Equal(node.{{= table.Identifier }}().PrimaryKey(), obj.PrimaryKey())).
        LoadCursor()
    require.NoError(t, err)
    obj2, err2 := cursor.Next()
    assert.Equal(t, obj.PrimaryKey(), obj2.PrimaryKey())
    require.NoError(t, err2)
    obj2, err2 = cursor.Next()
    assert.Nil(t, obj2)
    require.NoError(t, err2)
    assert.NoError(t, cursor.Close())

    // test empty cursor result
    cursor, err = Query{{= table.IdentifierPlural }}(ctx).
        Where(op.Equal("B", "A")).
        LoadCursor()
    require.NoError(t, err)

    obj2, err = cursor.Next()
    assert.Nil(t, obj2)
    require.NoError(t, err)
    assert.NoError(t, cursor.Close())
}
}}