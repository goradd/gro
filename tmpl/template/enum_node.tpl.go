//** This file was code generated by GoT. DO NOT EDIT. ***

package template

import (
	"io"
	"path/filepath"

	"github.com/goradd/orm/pkg/codegen"
	"github.com/goradd/orm/pkg/model"
)

func init() {
	t := EnumNodeTemplate{}
	codegen.RegisterTemplate(&t)
}

// EnumNodeTemplate generates the node code for enumerated types
type EnumNodeTemplate struct {
	Package string
}

func (tmpl *EnumNodeTemplate) FileName(table *model.Enum) string {
	return filepath.Join("orm", table.DbKey, "node", table.FileName()+".go")
}

func (tmpl *EnumNodeTemplate) GenerateEnum(table *model.Enum, _w io.Writer, importPath string) (err error) {
	return tmpl.gen(table, _w)
}

func (tmpl *EnumNodeTemplate) Overwrite() bool {
	return true
}

//*** enum_node.tmpl

func (tmpl *EnumNodeTemplate) gen(table *model.Enum, _w io.Writer) (err error) {
	if err = tmpl.genHeader(table, _w); err != nil {
		return
	}
	if err = tmpl.genPrivate(table, _w); err != nil {
		return
	}
	if err = tmpl.genLeafNodes(table, _w); err != nil {
		return
	}
	if err = tmpl.genGob(table, _w); err != nil {
		return
	}
	return
}

func (tmpl *EnumNodeTemplate) genHeader(table *model.Enum, _w io.Writer) (err error) {

	if _, err = io.WriteString(_w, `// Code generated by goradd-orm. DO NOT EDIT.

package node

import (
    "encoding/gob"
	"github.com/goradd/orm/pkg/query"
)

// `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `Node is the builder interface to the `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` nodes.
type `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `Node interface {
    query.Node
    PrimaryKeyNode() *query.ColumnNode
`); err != nil {
		return
	}

	for i := 0; i < len(table.Fields); i++ {

		if _, err = io.WriteString(_w, `    `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.FieldIdentifier(i)); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `() *query.ColumnNode
`); err != nil {
			return
		}

	}

	if _, err = io.WriteString(_w, `}

type `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `Enum struct {
}

type `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `Reference struct {
    `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `Enum
    query.ReferenceNode
}

`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `type `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `Association struct {
    `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `Enum
    query.ManyManyNode
}

// PrimaryKeyNode returns a node representing the primary key column.
func (n `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `Enum) PrimaryKeyNode() (*query.ColumnNode) {
	return n.`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.FieldIdentifier(0)); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `()
}

func (n `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `Reference) PrimaryKeyNode() (*query.ColumnNode) {
	return n.`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.FieldIdentifier(0)); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `()
}

func (n `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `Association) PrimaryKeyNode() (*query.ColumnNode) {
	return n.`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.FieldIdentifier(0)); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `()
}



func init() {
   gob.Register(new(`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `Enum))
   gob.Register(new(`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `Association))
   gob.Register(new(`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `Reference))
}

`); err != nil {
		return
	}

	return
}

func (tmpl *EnumNodeTemplate) genPrivate(table *model.Enum, _w io.Writer) (err error) {

	if _, err = io.WriteString(_w, `// ColumnNodes_ is used internally by the framework to return the list of column nodes.
func (n `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `Enum) ColumnNodes_() []query.Node {
    return []query.Node {
`); err != nil {
		return
	}

	for i := 0; i < len(table.Fields); i++ {

		if _, err = io.WriteString(_w, `	    n.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.FieldIdentifier(i)); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `(),
`); err != nil {
			return
		}

	}

	if _, err = io.WriteString(_w, `	}
}

func (n `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `Association) ColumnNodes_() []query.Node {
    return []query.Node {
`); err != nil {
		return
	}

	for i := 0; i < len(table.Fields); i++ {

		if _, err = io.WriteString(_w, `	    n.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.FieldIdentifier(i)); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `(),
`); err != nil {
			return
		}

	}

	if _, err = io.WriteString(_w, `	}
}

func (n `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `Enum) NodeType_() query.NodeType {
	return query.EnumNodeType
}

func (n *`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `Association) NodeType_() query.NodeType {
	return query.ManyEnumNodeType
}

// TableName_ returns the query name of the table the node is associated with.
func (n `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `Enum) TableName_() string {
    return "`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.QueryName); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `"
}

// TableName_ returns the query name of the table the node is associated with.
func (n `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `Association) TableName_() string {
    return n.Parent().TableName_()
}

// TableName_ returns the query name of the table the node is associated with.
func (n `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `Reference) TableName_() string {
    return n.Parent().TableName_()
}


// DatabaseKey_ returns the database key of the database the node is associated with.
func (n `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `Enum) DatabaseKey_() string {
    return "`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.DbKey); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `"
}

`); err != nil {
		return
	}

	return
}

func (tmpl *EnumNodeTemplate) genLeafNodes(table *model.Enum, _w io.Writer) (err error) {

	for i := 0; i < len(table.Fields); i++ {
		fn := table.FieldIdentifier(i)

		if _, err = io.WriteString(_w, `
func (n `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `Enum) `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, fn); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName: "`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.FieldQueryName(i)); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `",
		Identifier: "`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, fn); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `",
		ReceiverType: query.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.FieldReceiverType(i).String()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `,
		IsPrimaryKey: `); err != nil {
			return
		}

		if i == 0 {

			if _, err = io.WriteString(_w, `true`); err != nil {
				return
			}

		} else {

			if _, err = io.WriteString(_w, `false`); err != nil {
				return
			}

		}

		if _, err = io.WriteString(_w, `,
	}
	cn.SetParent(n)
	return cn
}

func (n *`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `Reference) `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, fn); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `() *query.ColumnNode {
	cn := n.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `Enum.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, fn); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `()
	cn.SetParent(n)
	return cn
}

func (n *`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `Association) `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, fn); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `() *query.ColumnNode {
	cn := n.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `Enum.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, fn); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `()
	cn.SetParent(n)
	return cn
}

`); err != nil {
			return
		}

	}
	return
}

func (tmpl *EnumNodeTemplate) genGob(table *model.Enum, _w io.Writer) (err error) {

	if _, err = io.WriteString(_w, `func (n `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `Enum) GobEncode() (data []byte, err error) {
	return
}

func (n *`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `Enum) GobDecode(data []byte) (err error) {
	return
}

func (n *`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `Reference) GobEncode() (data []byte, err error) {
	var buf bytes.Buffer
	e := gob.NewEncoder(&buf)

	if err = e.Encode(&n.ReferenceNode); err != nil {
		panic(err)
	}
	data = buf.Bytes()
	return
}

func (n *`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `Reference) GobDecode(data []byte) (err error) {
	buf := bytes.NewBuffer(data)
	dec := gob.NewDecoder(buf)

	if err = dec.Decode(&n.ReferenceNode); err != nil {
		panic(err)
	}
	return
}

func (n *`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `Association) GobEncode() (data []byte, err error) {
	var buf bytes.Buffer
	e := gob.NewEncoder(&buf)

	if err = e.Encode(&n.ManyManyNode); err != nil {
		panic(err)
	}
	data = buf.Bytes()
	return
}

func (n *`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `Association) GobDecode(data []byte) (err error) {
	buf := bytes.NewBuffer(data)
	dec := gob.NewDecoder(buf)

	if err = dec.Decode(&n.ManyManyNode); err != nil {
		panic(err)
	}
	return
}
`); err != nil {
		return
	}

	return
}
