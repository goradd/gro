//** This file was code generated by GoT. DO NOT EDIT. ***

package template

// This template generates a got template for the db.go file in the orm directory

import (
	"fmt"
	"io"

	"github.com/goradd/orm/pkg/codegen"
	"github.com/goradd/orm/pkg/model"
)

func init() {
	t := ConfigTemplate{}
	codegen.RegisterTemplate(&t)
}

// ConfigTemplate generates the db.go file
type ConfigTemplate struct {
	Package string
}

func (tmpl *ConfigTemplate) FileName(dbKey string) string {
	return "config.go"
}

func (tmpl *ConfigTemplate) GenerateDatabase(database *model.Database, _w io.Writer, importPath string) (err error) {
	tmpl.Package = database.Key

	//*** config.tmpl

	if _, err = io.WriteString(_w, `
package `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, tmpl.Package); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `

// Though this file is generated initially, if it exists, it will not be altered.
// Feel free to modify this file to suit your database configuration needs.

import (
	"encoding/json"
	"flag"
	"github.com/go-sql-driver/mysql"
	"github.com/goradd/orm/pkg/db"
	mysql2 "github.com/goradd/orm/pkg/db/sql/mysql"
	"github.com/goradd/orm/pkg/db/sql/pgsql"
	"github.com/jackc/pgx/v5"
	"os"
)

// Default credentials for purposes of local development.
// Pass configuration overrides when doing CI testing or in production.
// DO NOT put live passwords here!
const defaultUser = "root"
const defaultPassword = "12345"
const key = `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, fmt.Sprintf("%#v", database.Key)); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `
const databaseName = `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, fmt.Sprintf("%#v", database.Key)); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `

func initMysql(overrides map[string]any) {
	cfg := mysql.NewConfig()
	cfg.ParseTime = true
	cfg.DBName = databaseName
	cfg.User = defaultUser
	cfg.Passwd = defaultPassword
	mysql2.OverrideConfigSettings(cfg, overrides)

	database, err := mysql2.NewDB(key, "", cfg)
	if err != nil {
	    panic(err)
	}
	db.AddDatabase(database, key)
}

func initPostgres(overrides map[string]any) {
	cfg, _ := pgx.ParseConfig("")

	cfg.Host = "localhost"
	cfg.User = defaultUser
	cfg.Password = defaultPassword
	cfg.Database = databaseName

	pgsql.OverrideConfigSettings(cfg, overrides)
	database, err := pgsql.NewDB(key, "", cfg)
	if err != nil {
	    panic(err)
	}
	db.AddDatabase(database, key)
}

// InitDB initializes the database.
// It checks for a "goradd" command line argument, and if present, treats it as a path to a configuration file
// with database settings.
func InitDB() {
	var configFile string
	flag.StringVar(&configFile, `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, fmt.Sprintf("%#v", database.Key)); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `, "", "Path to `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, database.Key); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` database configuration file")
	flag.Parse()

	var overrides map[string]any

	if configFile != "" {
		b, err := os.ReadFile(configFile)
		if err != nil {
			panic(err)
		}
		if err = json.Unmarshal(b, &overrides); err != nil {
			panic(err)
		}
	}

	// pick a database to initialize here
	initMysql(overrides)
	//initPostgres(overrides)
}


`); err != nil {
		return
	}

	return
}

func (tmpl *ConfigTemplate) Overwrite() bool {
	return false
}
