//** This file was code generated by GoT. DO NOT EDIT. ***

package template

import (
	"io"
	"path/filepath"

	"github.com/goradd/orm/pkg/codegen"
	"github.com/goradd/orm/pkg/model"
	"github.com/goradd/orm/pkg/query"
)

func init() {
	t := TableTestTemplate{}
	codegen.RegisterTemplate(&t)
}

// TableTestTemplate generates the code for tables.
// This is one-time generated and allows the programmer to edit it to override the base table code.
type TableTestTemplate struct {
	Package string
}

func (tmpl *TableTestTemplate) FileName(table *model.Table) string {
	return filepath.Join("orm", table.DbKey, table.FileName()+"_test.go")
}

func (tmpl *TableTestTemplate) GenerateTable(table *model.Table, _w io.Writer, importPath string) (err error) {
	tmpl.Package = table.DbKey
	//*** table_test.tmpl

	// The master template for the table test

	var hasUnknown bool
	for _, col := range table.Columns {
		if col.ReceiverType == query.ColTypeUnknown {
			hasUnknown = true
		} // cannot know what the set of valid input characters are.
	}

	if _, err = io.WriteString(_w, `package `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, tmpl.Package); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `

// This is the test file for the `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` ORM object.
// Add your tests to this file or modify the one provided.
// Your edits to this file will be preserved.

import (
    "fmt"
    "context"
    "github.com/stretchr/testify/assert"
    "github.com/stretchr/testify/require"

)

func Test`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `_String(t *testing.T) {
    var obj *`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `

    assert.Equal(t, "", obj.String())

    obj = New`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `()
    s := obj.String()
`); err != nil {
		return
	}

	if col := table.ColumnByName("name"); col != nil {

		if _, err = io.WriteString(_w, `    assert.Equal(t, "", s)
`); err != nil {
			return
		}

	} else {

		if _, err = io.WriteString(_w, `    assert.True(t, strings.HasPrefix(s, "`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `"))
`); err != nil {
			return
		}

	}

	if _, err = io.WriteString(_w, `}

func Test`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `_Delete(t *testing.T) {
`); err != nil {
		return
	}

	if !hasUnknown {

		if _, err = io.WriteString(_w, `    ctx := db.NewContext(nil)
    obj := createMinimalSample`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `()
    err := obj.Save(ctx)
    assert.NoError(t, err)
    Delete`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `(ctx, obj.PrimaryKey())
    obj2 := Load`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `(ctx, obj.PrimaryKey())
    assert.Nil(t, obj2)
`); err != nil {
			return
		}

	}

	if _, err = io.WriteString(_w, `}



`); err != nil {
		return
	}

	return
}

func (tmpl *TableTestTemplate) Overwrite() bool {
	return false
}
