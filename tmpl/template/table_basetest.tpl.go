//** This file was code generated by GoT. DO NOT EDIT. ***

package template

import (
	"io"
	"path/filepath"
	"strconv"

	"github.com/goradd/orm/pkg/codegen"
	"github.com/goradd/orm/pkg/model"
	"github.com/goradd/orm/pkg/query"
	"github.com/goradd/orm/pkg/schema"
)

func init() {
	t := TableBaseTestTemplate{}
	codegen.RegisterTemplate(&t)
}

// TableBaseTestTemplate generates code for the base table tests.
type TableBaseTestTemplate struct {
	Package string
}

func (tmpl *TableBaseTestTemplate) FileName(table *model.Table) string {
	return filepath.Join("orm", table.DbKey, table.FileName()+"_base_test.go")
}

func (tmpl *TableBaseTestTemplate) GenerateTable(table *model.Table, _w io.Writer, importPath string) (err error) {
	tmpl.Package = table.DbKey

	//*** table_base_test.tmpl

	if _, err = io.WriteString(_w, `// Code generated by goradd-orm. DO NOT EDIT.

package `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, tmpl.Package); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `

import (
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	strings2 "github.com/goradd/strings"
	"github.com/goradd/orm/pkg/test"
	"testing"
)
`); err != nil {
		return
	}

	var hasRequiredUnknown bool
	for _, col := range table.Columns {
		if col.ReceiverType == query.ColTypeUnknown && !col.IsNullable {
			hasRequiredUnknown = true
		} // cannot know what the set of valid input characters are.
	}

	//*** sample.tmpl

	if _, err = io.WriteString(_w, `// createMinimalSample`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` creates an unsaved minimal version of a `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` object
// for testing.
func createMinimalSample`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `() *`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` {
    obj := New`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `()
    updateMinimalSample`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `(obj)

`); err != nil {
		return
	}

	for _, col := range table.Columns {

		if _, err = io.WriteString(_w, `    `); err != nil {
			return
		}

		if col.IsReference() && !col.IsNullable {

			if _, err = io.WriteString(_w, `
        // A required forward reference will need to be fulfilled just to save the minimal version of this object
        // If the database is configured so that the referenced object points back here, either directly or through multiple
        // forward references, it possible this could create an endless loop. Such a structure could not be saved anyways.
        obj.Set`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.ReferenceIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `(createMinimalSample`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.ReferenceType()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `())
    `); err != nil {
				return
			}

		}

		if _, err = io.WriteString(_w, `
`); err != nil {
			return
		}

	}

	if _, err = io.WriteString(_w, `
    return obj
}

// updateMinimalSample`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` sets the values of a minimal sample to new, random values.
func updateMinimalSample`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `(obj *`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `)  {
`); err != nil {
		return
	}

	for _, col := range table.SettableColumns() {

		if col.ReceiverType == query.ColTypeUnknown {
			continue
		} // cannot know what the set of valid input characters are.
		if col.IsReference() {
			continue
		} // references must point to objects
		if col.IsAutoPK {
			continue
		} // not normally testing the ability to set an auto generated primary key
		testSize := min(col.Size, 100000)

		if _, err = io.WriteString(_w, `
`); err != nil {
			return
		}

		if col.IsEnum() {

			if _, err = io.WriteString(_w, `
`); err != nil {
				return
			}

			if col.IsEnumArray() {

				if _, err = io.WriteString(_w, `     obj.Set`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `(test.RandomEnumArray(`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.Reference.EnumTable.IdentifierPlural); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `()))
`); err != nil {
					return
				}

			} else {

				if _, err = io.WriteString(_w, `     obj.Set`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `(test.RandomEnum(`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.Reference.EnumTable.IdentifierPlural); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `()))
`); err != nil {
					return
				}

			}

			if _, err = io.WriteString(_w, `
`); err != nil {
				return
			}

		} else {

			if _, err = io.WriteString(_w, ` `); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `

`); err != nil {
				return
			}

			if col.IsDecimal() {

				if _, err = io.WriteString(_w, `    obj.Set`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `(test.RandomDecimal(`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, strconv.FormatUint(uint64(col.DecimalPrecision()), 10)); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `, `); err != nil {
					return
				}

				if _, err = io.WriteString(_w, strconv.FormatUint(uint64(col.DecimalScale()), 10)); err != nil {
					return
				}

				if _, err = io.WriteString(_w, ` ))
`); err != nil {
					return
				}

			} else {

				if _, err = io.WriteString(_w, `    obj.Set`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `(test.RandomValue[`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.GoType()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `](`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, strconv.FormatUint(uint64(testSize), 10)); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `))
`); err != nil {
					return
				}

			}

			if _, err = io.WriteString(_w, `
`); err != nil {
				return
			}

		}

		if _, err = io.WriteString(_w, `
`); err != nil {
			return
		}

	}

	if _, err = io.WriteString(_w, `}

// createMaximalSample`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` creates an unsaved version of a `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` object
// for testing that includes references to minimal objects.
func createMaximalSample`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `(ctx context.Context) *`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` {
    obj := New`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `()
    updateMaximalSample`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `(ctx, obj)
    return obj
}

// updateMaximalSample`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` sets all the maximal sample values to new values.
// This will set new values for references, so save the old values and delete them.
func updateMaximalSample`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `(ctx context.Context, obj *`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `) {
    updateMinimalSample`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `(obj)
`); err != nil {
		return
	}

	for _, col := range table.Columns {

		if col.HasSetter() {

			if col.IsReference() {

				if _, err = io.WriteString(_w, `    obj.Set`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.ReferenceIdentifier()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `(createMinimalSample`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.ReferenceType()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `())
`); err != nil {
					return
				}

			}

		}

	}

	if _, err = io.WriteString(_w, `
`); err != nil {
		return
	}

	for _, col := range table.ReverseReferences {

		if col.IsUnique {

			if _, err = io.WriteString(_w, `    // only update if not already set, since it can't be changed once set unless the reverse object is deleted first.
    if obj.Load`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.ReverseIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `(ctx) == nil {
        obj.Set`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.ReverseIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `(createMinimalSample`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.Table.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `())
    }
`); err != nil {
				return
			}

		} else {

			if _, err = io.WriteString(_w, `    obj.Set`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.ReverseIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `(createMinimalSample`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.Table.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `())
`); err != nil {
				return
			}

		}

	}

	for _, mm := range table.ManyManyReferences {

		if _, err = io.WriteString(_w, `    obj.Set`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.IdentifierPlural); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `(createMinimalSample`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.DestinationTable.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `())
`); err != nil {
			return
		}

	}

	if _, err = io.WriteString(_w, `}

// deleteSample`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` deletes an object created and saved by one of the sample creator functions.
func deleteSample`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `(ctx context.Context, obj *`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `) {
    if obj == nil {
        return
    }

`); err != nil {
		return
	}

	for _, col := range table.ReverseReferences {

		if col.IsUnique {

			if _, err = io.WriteString(_w, `    deleteSample`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.Table.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `(ctx, obj.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.ReverseIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `())
`); err != nil {
				return
			}

		} else {

			if _, err = io.WriteString(_w, `    for _,item := range obj.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.ReverseIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `() {
        deleteSample`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.Table.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `(ctx, item)
    }
`); err != nil {
				return
			}

		}

	}

	if _, err = io.WriteString(_w, `
`); err != nil {
		return
	}

	for _, mm := range table.ManyManyReferences {

		if _, err = io.WriteString(_w, `    for _,item := range obj.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.IdentifierPlural); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `() {
        deleteSample`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.ObjectType()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `(ctx, item)
    }
`); err != nil {
			return
		}

	}

	if _, err = io.WriteString(_w, `
    obj.Delete(ctx)
`); err != nil {
		return
	}

	for _, col := range table.Columns {

		if col.HasSetter() {

			if _, err = io.WriteString(_w, `    `); err != nil {
				return
			}

			if col.IsReference() {

				if _, err = io.WriteString(_w, `
    deleteSample`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.ReferenceType()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `(ctx, obj.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.ReferenceIdentifier()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `())
    `); err != nil {
					return
				}

			}

			if _, err = io.WriteString(_w, `
`); err != nil {
				return
			}

		}

	}

	if _, err = io.WriteString(_w, `}

// assertEqualFields`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` compares two objects and asserts that the basic fields are equal.
func assertEqualFields`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `(t *testing.T, obj1, obj2 *`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `)  {
`); err != nil {
		return
	}

	for _, col := range table.Columns {

		if _, err = io.WriteString(_w, `    if obj1.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, col.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `IsLoaded() && obj2.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, col.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `IsLoaded() { // only check loaded values
`); err != nil {
			return
		}

		if col.IsEnum() {

			if col.IsEnumArray() {

				if _, err = io.WriteString(_w, `        assert.True(t, obj1.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `().Equal(obj2.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `()))
`); err != nil {
					return
				}

			} else {

				if _, err = io.WriteString(_w, `        assert.EqualValues(t, obj1.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `(), obj2.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `())
`); err != nil {
					return
				}

			}

		} else if col.IsDecimal() {

			if _, err = io.WriteString(_w, `        assert.True(t, test.EqualDecimals(obj1.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `(), obj2.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `()))
`); err != nil {
				return
			}

		} else if col.ReceiverType == query.ColTypeTime {

			if _, err = io.WriteString(_w, `        // ignore fractional seconds since some types truncate to the second.
        assert.WithinDuration(t, obj1.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `(), obj2.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `(), time.Second)
`); err != nil {
				return
			}

		} else {

			if _, err = io.WriteString(_w, `        assert.EqualValues(t, obj1.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `(), obj2.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `())
`); err != nil {
				return
			}

		}

		if _, err = io.WriteString(_w, `    }
`); err != nil {
			return
		}

	}

	if _, err = io.WriteString(_w, `
}

`); err != nil {
		return
	}

	if !hasRequiredUnknown {
		//*** set.tmpl

		for _, col := range table.SettableColumns() {
			testSize := min(col.Size, 100000)

			if _, err = io.WriteString(_w, `func Test`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, table.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `_Set`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `(t *testing.T) {

    obj := New`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, table.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `()

    assert.True(t, obj.IsNew())
`); err != nil {
				return
			}

			if col.IsEnum() {

				if _, err = io.WriteString(_w, `    `); err != nil {
					return
				}

				if col.IsEnumArray() {

					if _, err = io.WriteString(_w, `
    val := 	test.RandomEnumArray(`); err != nil {
						return
					}

					if _, err = io.WriteString(_w, col.Reference.EnumTable.IdentifierPlural); err != nil {
						return
					}

					if _, err = io.WriteString(_w, `())
    obj.Set`); err != nil {
						return
					}

					if _, err = io.WriteString(_w, col.Identifier); err != nil {
						return
					}

					if _, err = io.WriteString(_w, `(val)
    `); err != nil {
						return
					}

				} else {

					if _, err = io.WriteString(_w, `
    val := test.RandomEnum(`); err != nil {
						return
					}

					if _, err = io.WriteString(_w, col.Reference.EnumTable.IdentifierPlural); err != nil {
						return
					}

					if _, err = io.WriteString(_w, `())
    obj.Set`); err != nil {
						return
					}

					if _, err = io.WriteString(_w, col.Identifier); err != nil {
						return
					}

					if _, err = io.WriteString(_w, `(val)
   `); err != nil {
						return
					}

				}

				if _, err = io.WriteString(_w, `
`); err != nil {
					return
				}

			} else {

				if col.IsAutoPK {

					if _, err = io.WriteString(_w, `    val := 	test.RandomNumberString()
`); err != nil {
						return
					}

				} else if col.SchemaSubType == schema.ColSubTypeNumeric {

					if _, err = io.WriteString(_w, `    val := 	test.RandomDecimal(`); err != nil {
						return
					}

					if _, err = io.WriteString(_w, strconv.FormatUint(uint64(col.DecimalPrecision()), 10)); err != nil {
						return
					}

					if _, err = io.WriteString(_w, `, `); err != nil {
						return
					}

					if _, err = io.WriteString(_w, strconv.FormatUint(uint64(col.DecimalScale()), 10)); err != nil {
						return
					}

					if _, err = io.WriteString(_w, ` )
`); err != nil {
						return
					}

				} else {

					if _, err = io.WriteString(_w, `    val := 	test.RandomValue[`); err != nil {
						return
					}

					if _, err = io.WriteString(_w, col.GoType()); err != nil {
						return
					}

					if _, err = io.WriteString(_w, `](`); err != nil {
						return
					}

					if _, err = io.WriteString(_w, strconv.FormatUint(uint64(testSize), 10)); err != nil {
						return
					}

					if _, err = io.WriteString(_w, `)
`); err != nil {
						return
					}

				}

				if _, err = io.WriteString(_w, `    obj.Set`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `(val)
`); err != nil {
					return
				}

			}

			if col.SchemaSubType == schema.ColSubTypeDateOnly {

				if _, err = io.WriteString(_w, `    val = obj.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `()
    assert.Zero(t, val.Minute()) // make sure minute part is zero'd
    assert.Zero(t, val.Hour()) // make sure hour part is zero'd
    assert.Zero(t, val.Second()) // make sure second part is zero'd
`); err != nil {
					return
				}

			} else if col.SchemaSubType == schema.ColSubTypeTimeOnly {

				if _, err = io.WriteString(_w, `    val = obj.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `()
    assert.EqualValues(t, 1, val.Year()) // make sure year part is zero'd. The zero value of time.Time has a year of 1.
    assert.EqualValues(t, 1, val.Month()) // make sure month part is zero'd
    assert.EqualValues(t, 1, val.Day()) // make sure day part is zero'd
`); err != nil {
					return
				}

			} else {

				if _, err = io.WriteString(_w, `    assert.Equal(t, val, obj.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `())
`); err != nil {
					return
				}

			}

			if col.IsNullable {

				if _, err = io.WriteString(_w, `    assert.False(t, obj.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `IsNull())
`); err != nil {
					return
				}

			}

			if _, err = io.WriteString(_w, `
`); err != nil {
				return
			}

			if col.IsNullable {

				if _, err = io.WriteString(_w, `    // Test NULL
    obj.Set`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `ToNull()
`); err != nil {
					return
				}

				if col.DefaultValueAsValue() == "nil" {

					if _, err = io.WriteString(_w, `    assert.Nil(t, obj.`); err != nil {
						return
					}

					if _, err = io.WriteString(_w, col.Identifier); err != nil {
						return
					}

					if _, err = io.WriteString(_w, `())
`); err != nil {
						return
					}

				} else {

					if _, err = io.WriteString(_w, `    assert.EqualValues(t, `); err != nil {
						return
					}

					if _, err = io.WriteString(_w, col.DefaultValueAsValue()); err != nil {
						return
					}

					if _, err = io.WriteString(_w, `, obj.`); err != nil {
						return
					}

					if _, err = io.WriteString(_w, col.Identifier); err != nil {
						return
					}

					if _, err = io.WriteString(_w, `())
`); err != nil {
						return
					}

				}

				if _, err = io.WriteString(_w, `    assert.True(t, obj.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `IsNull())
`); err != nil {
					return
				}

			}

			if _, err = io.WriteString(_w, `
    // test default
`); err != nil {
				return
			}

			if col.IsEnumArray() {

				if _, err = io.WriteString(_w, `    obj.Set`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `(`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.DefaultValueAsValue()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `)
    assert.True(t, obj.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `().Equal(`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.GoType()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `(`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.DefaultValueAsValue()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `)), "set default")
`); err != nil {
					return
				}

			} else {

				if _, err = io.WriteString(_w, `    obj.Set`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `(`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.DefaultValueAsValue()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `)
    assert.EqualValues(t, `); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.DefaultValueAsValue()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `, obj.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `(), "set default")
`); err != nil {
					return
				}

			}

			if _, err = io.WriteString(_w, `
`); err != nil {
				return
			}

			if col.Size > 0 &&
				col.Size == testSize &&
				!col.IsEnum() &&
				(col.ReceiverType == query.ColTypeBytes || col.ReceiverType == query.ColTypeString || col.ReceiverType == query.ColTypeUnknown) {

				if _, err = io.WriteString(_w, `    // test panic on setting value larger than maximum size allowed
    val = test.RandomValue[`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.GoType()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `](`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, strconv.FormatUint(uint64(col.MaxLength()+1), 10)); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `)
    assert.Panics(t, func() {
        obj.Set`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `(val)
    })
`); err != nil {
					return
				}

			}

			if _, err = io.WriteString(_w, `}
`); err != nil {
				return
			}

		}

		if _, err = io.WriteString(_w, `
func Test`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `_Copy(t *testing.T) {
    obj := createMinimalSample`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `()

    obj2 := obj.Copy()

`); err != nil {
			return
		}

		for _, col := range table.SettableColumns() {

			if !col.IsAutoPK {

				if _, err = io.WriteString(_w, `    assert.Equal(t, obj.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `(), obj2.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `())
`); err != nil {
					return
				}

			}

		}

		if _, err = io.WriteString(_w, `
}

`); err != nil {
			return
		}

		//*** save.tmpl

		if _, err = io.WriteString(_w, `func Test`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `_BasicInsert(t *testing.T) {
    obj := createMinimalSample`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `()
    ctx := db.NewContext(nil)
    err := obj.Save(ctx)
	assert.NoError(t, err)
    defer deleteSample`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `(ctx, obj)

    // Test retrieval
    obj2 := Load`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `(ctx, obj.PrimaryKey())
    require.NotNil(t, obj2)

    assert.Equal(t, obj2.PrimaryKey(), obj2.OriginalPrimaryKey())

`); err != nil {
			return
		}

		for _, col := range table.Columns {

			if col.ReceiverType == query.ColTypeUnknown {
				continue
			} // cannot know what the set of valid input characters are.
			if col.IsReference() {
				continue
			} // forward references will be tested in the References test.

			if _, err = io.WriteString(_w, `
    assert.True(t, obj2.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `IsLoaded())
`); err != nil {
				return
			}

			if col.IsNullable {

				if _, err = io.WriteString(_w, `    assert.False(t, obj2.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `IsNull())
`); err != nil {
					return
				}

			}

			if col.HasSetter() {

				if col.IsEnumArray() {

					if _, err = io.WriteString(_w, `    assert.True(t, obj.`); err != nil {
						return
					}

					if _, err = io.WriteString(_w, col.Identifier); err != nil {
						return
					}

					if _, err = io.WriteString(_w, `().Equal(obj2.`); err != nil {
						return
					}

					if _, err = io.WriteString(_w, col.Identifier); err != nil {
						return
					}

					if _, err = io.WriteString(_w, `()))
`); err != nil {
						return
					}

				} else if col.IsDecimal() {

					if _, err = io.WriteString(_w, `    assert.True(t, test.EqualDecimals(obj.`); err != nil {
						return
					}

					if _, err = io.WriteString(_w, col.Identifier); err != nil {
						return
					}

					if _, err = io.WriteString(_w, `(), obj2.`); err != nil {
						return
					}

					if _, err = io.WriteString(_w, col.Identifier); err != nil {
						return
					}

					if _, err = io.WriteString(_w, `()))
`); err != nil {
						return
					}

				}

				if col.IsAutoPK {

					if _, err = io.WriteString(_w, `    assert.Panics(t, func() {
        obj2.Set`); err != nil {
						return
					}

					if _, err = io.WriteString(_w, col.Identifier); err != nil {
						return
					}

					if _, err = io.WriteString(_w, `(obj2.`); err != nil {
						return
					}

					if _, err = io.WriteString(_w, col.Identifier); err != nil {
						return
					}

					if _, err = io.WriteString(_w, `())
    })
`); err != nil {
						return
					}

				} else {

					if _, err = io.WriteString(_w, `    // test that setting it to the same value will not change the dirty bit
    assert.False(t, obj2.`); err != nil {
						return
					}

					if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
						return
					}

					if _, err = io.WriteString(_w, `IsDirty)
    obj2.Set`); err != nil {
						return
					}

					if _, err = io.WriteString(_w, col.Identifier); err != nil {
						return
					}

					if _, err = io.WriteString(_w, `(obj2.`); err != nil {
						return
					}

					if _, err = io.WriteString(_w, col.Identifier); err != nil {
						return
					}

					if _, err = io.WriteString(_w, `())
    assert.False(t, obj2.`); err != nil {
						return
					}

					if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
						return
					}

					if _, err = io.WriteString(_w, `IsDirty)
`); err != nil {
						return
					}

				}

			}

		}

		if _, err = io.WriteString(_w, `
}

func Test`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `_InsertPanics(t *testing.T) {
    obj := createMinimalSample`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `()
    _ = obj
    ctx := db.NewContext(nil)
    _ = ctx

 `); err != nil {
			return
		}

		for _, col := range table.SettableColumns() {

			if _, err = io.WriteString(_w, `
 `); err != nil {
				return
			}

			if !col.IsAutoPK && !col.IsNullable {

				if _, err = io.WriteString(_w, `
    obj.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `IsLoaded = false
    assert.Panics(t, func() {obj.Save(ctx)})
    obj.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `IsLoaded = true

 `); err != nil {
					return
				}

			}

			if _, err = io.WriteString(_w, `
 `); err != nil {
				return
			}

		}

		if _, err = io.WriteString(_w, `
}

func Test`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `_BasicUpdate(t *testing.T) {
    obj := createMinimalSample`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `()
    ctx := db.NewContext(nil)
    assert.NoError(t, obj.Save(ctx))
    defer deleteSample`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `(ctx, obj)
    updateMinimalSample`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `(obj)
    assert.NoError(t, obj.Save(ctx))
    obj2 := Load`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `(ctx, obj.PrimaryKey())

`); err != nil {
			return
		}

		for _, col := range table.Columns {

			if col.ReceiverType == query.ColTypeTime {

				if _, err = io.WriteString(_w, ` `); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `
    assert.WithinDuration(t, obj2.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `(), obj.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `(), time.Second, "`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, ` not within one second")
`); err != nil {
					return
				}

			} else if col.SchemaSubType != schema.ColSubTypeNumeric &&
				!col.IsReference() {

				if _, err = io.WriteString(_w, `    assert.Equal(t, obj2.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `(), obj.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `(), "`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, ` did not update")
`); err != nil {
					return
				}

			}

		}

		if _, err = io.WriteString(_w, `}



func Test`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `_ReferenceLoad(t *testing.T) {
    ctx := db.NewContext(nil)
    obj := createMaximalSample`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `(ctx)
    obj.Save(ctx)
    defer deleteSample`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `(ctx, obj)

    // Test that referenced objects were saved and assigned ids
`); err != nil {
			return
		}

		for _, col := range table.Columns {

			if col.IsReference() {

				if _, err = io.WriteString(_w, `    assert.NotNil(t, obj.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.ReferenceIdentifier()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `())
`); err != nil {
					return
				}

				if col.Reference.Table.PrimaryKeyColumn().IsAutoPK {

					if _, err = io.WriteString(_w, `    assert.NotEqual(t, '-', obj.`); err != nil {
						return
					}

					if _, err = io.WriteString(_w, col.ReferenceIdentifier()); err != nil {
						return
					}

					if _, err = io.WriteString(_w, `().PrimaryKey()[0])
`); err != nil {
						return
					}

				}

				if _, err = io.WriteString(_w, `
`); err != nil {
					return
				}

			}

		}

		if _, err = io.WriteString(_w, `
    // Test lazy loading
    obj2 := Load`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `(ctx, obj.PrimaryKey())
    objPkOnly := Load`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `(ctx, obj.PrimaryKey(), node.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `().PrimaryKey())
    _ = obj2 // avoid error if there are no references
    _ = objPkOnly

`); err != nil {
			return
		}

		for _, col := range table.Columns {

			if col.IsReference() {

				if _, err = io.WriteString(_w, `    assert.Nil(t, obj2.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.ReferenceIdentifier()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `(), "`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.ReferenceIdentifier()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, ` is not loaded initially")
    v_`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.ReferenceIdentifier()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, ` := obj2.Load`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.ReferenceIdentifier()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `(ctx)
    assert.NotNil(t, v_`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.ReferenceIdentifier()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `)
    assert.Equal(t, v_`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.ReferenceIdentifier()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `.PrimaryKey(), obj2.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.ReferenceIdentifier()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `().PrimaryKey())
    assert.Equal(t, obj.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.ReferenceIdentifier()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `().PrimaryKey(), obj2.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.ReferenceIdentifier()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `().PrimaryKey())
    assert.True(t, obj2.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `IsLoaded())

    assert.False(t, objPkOnly.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `IsLoaded())
    assert.Nil(t, objPkOnly.Load`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.ReferenceIdentifier()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `(ctx))

`); err != nil {
					return
				}

				if !col.IsNullable {

					if _, err = io.WriteString(_w, `    assert.Panics(t, func() {
        objPkOnly.Set`); err != nil {
						return
					}

					if _, err = io.WriteString(_w, col.ReferenceIdentifier()); err != nil {
						return
					}

					if _, err = io.WriteString(_w, `(nil)
    })
`); err != nil {
						return
					}

				}

				if _, err = io.WriteString(_w, `
`); err != nil {
					return
				}

			}

		}

		if _, err = io.WriteString(_w, `
`); err != nil {
			return
		}

		for _, col := range table.ReverseReferences {

			if _, err = io.WriteString(_w, `    assert.Nil(t, obj2.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.ReverseIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `(), "`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.ReverseIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ` is not loaded initially")
    v_`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.ReverseIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ` := obj2.Load`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.ReverseIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `(ctx)
    assert.NotNil(t, v_`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.ReverseIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `)
`); err != nil {
				return
			}

			if col.IsUnique {

				if _, err = io.WriteString(_w, `    assert.Equal(t, v_`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.ReverseIdentifier()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `.PrimaryKey(), obj2.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.ReverseIdentifier()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `().PrimaryKey())
    assert.Equal(t, obj.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.ReverseIdentifier()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `().PrimaryKey(), obj2.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.ReverseIdentifier()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `().PrimaryKey())
`); err != nil {
					return
				}

			} else {

				if _, err = io.WriteString(_w, `    assert.Len(t, v_`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.ReverseIdentifier()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `, 1)
`); err != nil {
					return
				}

			}

		}

		if _, err = io.WriteString(_w, `
`); err != nil {
			return
		}

		for _, mm := range table.ManyManyReferences {

			if _, err = io.WriteString(_w, `    assert.Nil(t, obj2.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, mm.IdentifierPlural); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `(), "`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, mm.IdentifierPlural); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ` is not loaded initially")
    v_`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, mm.IdentifierPlural); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ` := obj2.Load`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, mm.IdentifierPlural); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `(ctx)
    assert.NotNil(t, v_`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, mm.IdentifierPlural); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `)
    assert.Len(t, v_`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, mm.IdentifierPlural); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `, 1)
`); err != nil {
				return
			}

		}

		if _, err = io.WriteString(_w, `
    // test eager loading
    obj3 := Load`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `(ctx, obj.PrimaryKey(), `); err != nil {
			return
		}

		for _, col := range table.Columns {

			if _, err = io.WriteString(_w, ` `); err != nil {
				return
			}

			if col.IsReference() {

				if _, err = io.WriteString(_w, `node.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, table.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `().`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.ReferenceIdentifier()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `(),
`); err != nil {
					return
				}

			}

		}

		for _, col := range table.ReverseReferences {

			if _, err = io.WriteString(_w, `node.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, table.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `().`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.ReverseIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `(),
`); err != nil {
				return
			}

		}

		for _, mm := range table.ManyManyReferences {

			if _, err = io.WriteString(_w, `node.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, table.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `().`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, mm.IdentifierPlural); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `(),
`); err != nil {
				return
			}

		}

		if _, err = io.WriteString(_w, `    )
    _ = obj3 // avoid error if there are no references

`); err != nil {
			return
		}

		for _, col := range table.Columns {

			if col.IsReference() {

				if _, err = io.WriteString(_w, `    assert.Equal(t, obj2.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.ReferenceIdentifier()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `().PrimaryKey(), obj3.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.ReferenceIdentifier()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `().PrimaryKey())
`); err != nil {
					return
				}

			}

		}

		for _, col := range table.ReverseReferences {

			if col.IsUnique {

				if _, err = io.WriteString(_w, `    assert.Equal(t, obj2.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.ReverseIdentifier()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `().PrimaryKey(), obj3.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.ReverseIdentifier()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `().PrimaryKey())
`); err != nil {
					return
				}

			} else {

				if _, err = io.WriteString(_w, `    assert.Equal(t, len(obj2.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.ReverseIdentifier()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `()), len(obj3.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.ReverseIdentifier()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `()))
`); err != nil {
					return
				}

			}

		}

		for _, mm := range table.ManyManyReferences {

			if _, err = io.WriteString(_w, `    assert.Equal(t, len(obj2.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, mm.IdentifierPlural); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `()), len(obj3.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, mm.IdentifierPlural); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `()))
`); err != nil {
				return
			}

		}

		if _, err = io.WriteString(_w, `
}

func Test`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `_ReferenceUpdateNewObjects(t *testing.T) {
    ctx := db.NewContext(nil)
    obj := createMaximalSample`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `(ctx)
    obj.Save(ctx)
    defer deleteSample`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `(ctx, obj)

    obj2 := Load`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `(ctx, obj.PrimaryKey())
    updateMaximalSample`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `(ctx, obj2)
    assert.NoError(t, obj2.Save(ctx))
    defer deleteSample`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `(ctx, obj2)

    obj3 := Load`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `(ctx, obj2.PrimaryKey(), `); err != nil {
			return
		}

		for _, col := range table.Columns {

			if _, err = io.WriteString(_w, ` `); err != nil {
				return
			}

			if col.IsReference() {

				if _, err = io.WriteString(_w, `node.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, table.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `().`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.ReferenceIdentifier()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `(),
`); err != nil {
					return
				}

			}

		}

		for _, col := range table.ReverseReferences {

			if _, err = io.WriteString(_w, `node.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, table.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `().`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.ReverseIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `(),
`); err != nil {
				return
			}

		}

		for _, mm := range table.ManyManyReferences {

			if _, err = io.WriteString(_w, `node.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, table.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `().`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, mm.IdentifierPlural); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `(),
`); err != nil {
				return
			}

		}

		if _, err = io.WriteString(_w, `    )
    _ = obj3 // avoid error if there are no references

`); err != nil {
			return
		}

		for _, col := range table.Columns {

			if col.IsReference() {

				if _, err = io.WriteString(_w, `    assert.Equal(t, obj2.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.ReferenceIdentifier()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `().PrimaryKey(), obj3.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.ReferenceIdentifier()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `().PrimaryKey())
`); err != nil {
					return
				}

			}

		}

		if _, err = io.WriteString(_w, `
`); err != nil {
			return
		}

		for _, col := range table.ReverseReferences {

			if col.IsUnique {

				if _, err = io.WriteString(_w, `    assert.Equal(t, obj2.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.ReverseIdentifier()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `().PrimaryKey(), obj3.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.ReverseIdentifier()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `().PrimaryKey())
`); err != nil {
					return
				}

			} else {

				if _, err = io.WriteString(_w, `    assert.Equal(t, len(obj2.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.ReverseIdentifier()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `()), len(obj3.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.ReverseIdentifier()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `()))
`); err != nil {
					return
				}

			}

		}

		if _, err = io.WriteString(_w, `
`); err != nil {
			return
		}

		for _, mm := range table.ManyManyReferences {

			if _, err = io.WriteString(_w, `    assert.Equal(t, len(obj2.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, mm.IdentifierPlural); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `()), len(obj3.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, mm.IdentifierPlural); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `()))
`); err != nil {
				return
			}

		}

		if _, err = io.WriteString(_w, `
}

func Test`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `_ReferenceUpdateOldObjects(t *testing.T) {
    ctx := db.NewContext(nil)
    obj := createMaximalSample`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `(ctx)
    assert.NoError(t, obj.Save(ctx))
    defer deleteSample`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `(ctx, obj)

`); err != nil {
			return
		}

		for _, col := range table.Columns {

			if col.IsReference() {

				if _, err = io.WriteString(_w, `    updateMinimalSample`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.ReferenceType()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `(obj.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.ReferenceIdentifier()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `())
`); err != nil {
					return
				}

			}

		}

		for _, col := range table.ReverseReferences {

			if col.IsUnique {

				if _, err = io.WriteString(_w, `    updateMinimalSample`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.Table.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `(obj.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.ReverseIdentifier()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `())
`); err != nil {
					return
				}

			} else {

				if _, err = io.WriteString(_w, `    updateMinimalSample`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.Table.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `(obj.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.ReverseIdentifier()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `()[0])
`); err != nil {
					return
				}

			}

		}

		for _, mm := range table.ManyManyReferences {

			if _, err = io.WriteString(_w, `    updateMinimalSample`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, mm.ObjectType()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `(obj.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, mm.IdentifierPlural); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `()[0])
`); err != nil {
				return
			}

		}

		if _, err = io.WriteString(_w, `
    assert.NoError(t, obj.Save(ctx))

    obj2 := Load`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `(ctx, obj.PrimaryKey(), `); err != nil {
			return
		}

		for _, col := range table.Columns {

			if _, err = io.WriteString(_w, ` `); err != nil {
				return
			}

			if col.IsReference() {

				if _, err = io.WriteString(_w, `node.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, table.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `().`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.ReferenceIdentifier()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `(),
    `); err != nil {
					return
				}

			}

			if _, err = io.WriteString(_w, `
    `); err != nil {
				return
			}

		}

		for _, col := range table.ReverseReferences {

			if _, err = io.WriteString(_w, `node.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, table.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `().`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.ReverseIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `(),
    `); err != nil {
				return
			}

		}

		for _, mm := range table.ManyManyReferences {

			if _, err = io.WriteString(_w, `node.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, table.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `().`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, mm.IdentifierPlural); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `(),
    `); err != nil {
				return
			}

		}

		if _, err = io.WriteString(_w, `
    )
    _ = obj2 // avoid error if there are no references

`); err != nil {
			return
		}

		for _, col := range table.Columns {

			if col.IsReference() {

				if _, err = io.WriteString(_w, `    assertEqualFields`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.ReferenceType()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `(t, obj2.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.ReferenceIdentifier()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `(), obj.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.ReferenceIdentifier()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `())
`); err != nil {
					return
				}

			}

		}

		if _, err = io.WriteString(_w, `
`); err != nil {
			return
		}

		for _, col := range table.ReverseReferences {

			if col.IsUnique {

				if _, err = io.WriteString(_w, `    assertEqualFields`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.Table.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `(t, obj2.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.ReverseIdentifier()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `(), obj.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.ReverseIdentifier()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `())
`); err != nil {
					return
				}

			} else {

				if _, err = io.WriteString(_w, `    assertEqualFields`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.Table.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `(t, obj2.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.ReverseIdentifier()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `()[0], obj.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.ReverseIdentifier()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `()[0])
`); err != nil {
					return
				}

			}

		}

		if _, err = io.WriteString(_w, `
`); err != nil {
			return
		}

		for _, mm := range table.ManyManyReferences {

			if _, err = io.WriteString(_w, `    assertEqualFields`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, mm.ObjectType()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `(t, obj2.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, mm.IdentifierPlural); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `()[0], obj.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, mm.IdentifierPlural); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `()[0])
`); err != nil {
				return
			}

		}

		if _, err = io.WriteString(_w, `}
`); err != nil {
			return
		}

		//*** get.tmpl

		if _, err = io.WriteString(_w, `func Test`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `_EmptyPrimaryKeyGetter(t *testing.T) {
    obj := New`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `()

`); err != nil {
			return
		}

		if table.PrimaryKeyColumn().IsAutoPK {

			if _, err = io.WriteString(_w, `    i,err := strconv.Atoi(obj.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, table.PrimaryKeyColumn().Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `())
    assert.NoError(t, err)
    assert.True(t, i < 0)
`); err != nil {
				return
			}

		} else {

			if _, err = io.WriteString(_w, `    assert.Zero(t, obj.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, table.PrimaryKeyColumn().Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `())
`); err != nil {
				return
			}

		}

		if _, err = io.WriteString(_w, `}

func Test`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `_Getters(t *testing.T) {
    obj := createMinimalSample`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `()

`); err != nil {
			return
		}

		if table.PrimaryKeyColumn().IsAutoPK {

			if _, err = io.WriteString(_w, `    i,err := strconv.Atoi(obj.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, table.PrimaryKeyColumn().Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `())
    assert.NoError(t, err)
    assert.True(t, i < 0)
`); err != nil {
				return
			}

		}

		if _, err = io.WriteString(_w, `
    ctx := db.NewContext(nil)
    require.NoError(t, obj.Save(ctx))
    defer deleteSample`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `(ctx, obj)

    assert.True(t, Has`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `(ctx, obj.PrimaryKey()))

    obj2 := Load`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `(ctx, obj.PrimaryKey(), node.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `().PrimaryKey())
`); err != nil {
			return
		}

		if !table.PrimaryKeyColumn().IsAutoPK {

			if _, err = io.WriteString(_w, `    assert.Equal(t, obj.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, table.PrimaryKeyColumn().Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `(), obj2.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, table.PrimaryKeyColumn().Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `())
`); err != nil {
				return
			}

		}

		if _, err = io.WriteString(_w, `
`); err != nil {
			return
		}

		for _, col := range table.Columns {

			if !col.IsReference() {

				if _, err = io.WriteString(_w, `    assert.Equal(t, obj.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `(), obj.Get(node.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, table.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `().`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `().Identifier))
`); err != nil {
					return
				}

			}

			if !col.IsPrimaryKey {

				if _, err = io.WriteString(_w, `    assert.Panics(t, func() { obj2.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `() })
    assert.Nil(t, obj2.Get(node.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, table.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `().`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `().Identifier))
`); err != nil {
					return
				}

			}

		}

		if _, err = io.WriteString(_w, `}

`); err != nil {
			return
		}

		//*** query.tmpl

		if _, err = io.WriteString(_w, `func Test`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `_QueryLoad(t *testing.T) {
    obj := createMinimalSample`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `()
    ctx := db.NewContext(nil)
    err := obj.Save(ctx)
	assert.NoError(t, err)
    defer deleteSample`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `(ctx, obj)

    objs := Query`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.IdentifierPlural); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `(ctx).
        Where(op.Equal(node.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `().PrimaryKey(), obj.PrimaryKey())).
        OrderBy(node.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `().PrimaryKey()). // exercise order by
        Limit(1,0). // exercise limit
        Calculation(node.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `(), "IsTrue", op.Equal(1,1)).
        Load()

    assert.Equal(t, obj.PrimaryKey(), objs[0].PrimaryKey())
	assert.True(t, objs[0].GetAlias("IsTrue").Bool())
}
`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `func Test`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `_QueryLoadI(t *testing.T) {
    obj := createMinimalSample`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `()
    ctx := db.NewContext(nil)
    err := obj.Save(ctx)
	assert.NoError(t, err)
    defer deleteSample`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `(ctx, obj)

    objs := Query`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.IdentifierPlural); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `(ctx).
        Where(op.Equal(node.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `().PrimaryKey(), obj.PrimaryKey())).
        LoadI()

    assert.Equal(t, obj.PrimaryKey(), objs[0].Get("`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.PrimaryKeyColumn().Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `"))
}
`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `func Test`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `_QueryCursor(t *testing.T) {
    obj := createMinimalSample`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `()
    ctx := db.NewContext(nil)
    err := obj.Save(ctx)
	assert.NoError(t, err)
    defer deleteSample`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `(ctx, obj)

    cursor := Query`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.IdentifierPlural); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `(ctx).
        Where(op.Equal(node.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `().PrimaryKey(), obj.PrimaryKey())).
        LoadCursor()

    obj2 := cursor.Next()
    assert.Equal(t, obj.PrimaryKey(), obj2.PrimaryKey())
    assert.Nil(t, cursor.Next())

    // test empty cursor result
    cursor = Query`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.IdentifierPlural); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `(ctx).
        Where(op.Equal(1, 0)).
        LoadCursor()
    assert.Nil(t, cursor.Next())

}
`); err != nil {
			return
		}

		//*** count.tmpl

		if _, err = io.WriteString(_w, `func Test`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `_Count(t *testing.T) {
    ctx := db.NewContext(nil)
    obj := createMaximalSample`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `(ctx)
    err := obj.Save(ctx)
	assert.NoError(t, err)
	// reread in case there are data limitations imposed by the database
	obj2 := Load`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `(ctx, obj.PrimaryKey())
    defer deleteSample`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `(ctx, obj)

    assert.Less(t, 0, Count`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.IdentifierPlural); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `(ctx))

`); err != nil {
			return
		}

		for _, col := range table.Columns {

			if !col.IsEnum() {

				if _, err = io.WriteString(_w, `    assert.Less(t, 0, Count`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, table.IdentifierPlural); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `By`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `(ctx, obj2.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `()))
`); err != nil {
					return
				}

			}

		}

		if _, err = io.WriteString(_w, `
}
`); err != nil {
			return
		}

		//*** marshal.tmpl

		if _, err = io.WriteString(_w, `func Test`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `_MarshalJSON(t *testing.T) {
    obj := createMinimalSample`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `()

    b,err := json.Marshal(obj)
    assert.NoError(t, err)

    obj2 := New`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `()
    err = json.Unmarshal(b, &obj2)
    assert.NoError(t, err)

    assertEqualFields`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `(t, obj, obj2)
}

func Test`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `_MarshalBinary(t *testing.T) {
    obj := createMinimalSample`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `()

    b,err := obj.MarshalBinary()
    assert.NoError(t, err)

    obj2 := New`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `()
    err = obj2.UnmarshalBinary(b)
    assert.NoError(t, err)

    assertEqualFields`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `(t, obj, obj2)
}

`); err != nil {
			return
		}

		totalLines := len(table.Columns)*3 +
			len(table.ReverseReferences)*2 +
			len(table.ManyManyReferences)*2 +
			3
		// reduce by columns that have no dirty variable
		totalLines -= len(table.Columns) - len(table.SettableColumns())

		if _, err = io.WriteString(_w, `
func Test`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `_FailingMarshalBinary(t *testing.T) {
    obj := createMinimalSample`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `()
	var err error
	for i := 0; i < `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, strconv.Itoa(totalLines)); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `; i++ {
		w := &test.FailingWriter{Count: i}
		err = obj.encodeTo(w)
		assert.Error(t, err)
	}
	// do it again with aliases
	obj._aliases = make(map[string]any)
    for i := 0; i < `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, strconv.Itoa(totalLines+1)); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `; i++ {
        w := &test.FailingWriter{Count: i}
        err = obj.encodeTo(w)
        assert.Error(t, err)
    }

}


`); err != nil {
			return
		}

		//*** index.tmpl

		if table.HasUniqueIndexes() {

			if _, err = io.WriteString(_w, `func Test`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, table.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `_Indexes(t *testing.T) {
    ctx := db.NewContext(nil)
    obj := createMaximalSample`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, table.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `(ctx)
    err := obj.Save(ctx)
	assert.NoError(t, err)
    defer deleteSample`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, table.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `(ctx, obj)

    var obj2 *`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, table.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `
`); err != nil {
				return
			}

			for _, idx := range table.Indexes {

				if idx.IsUnique {

					if _, err = io.WriteString(_w, `    obj2 = Load`); err != nil {
						return
					}

					if _, err = io.WriteString(_w, table.Identifier); err != nil {
						return
					}

					if _, err = io.WriteString(_w, `By`); err != nil {
						return
					}

					for _, col := range idx.Columns {

						if _, err = io.WriteString(_w, col.Identifier); err != nil {
							return
						}

					}

					if _, err = io.WriteString(_w, ` (ctx `); err != nil {
						return
					}

					for _, col := range idx.Columns {

						if _, err = io.WriteString(_w, `, obj.`); err != nil {
							return
						}

						if _, err = io.WriteString(_w, col.Identifier); err != nil {
							return
						}

						if _, err = io.WriteString(_w, `()`); err != nil {
							return
						}

					}

					if _, err = io.WriteString(_w, `)
    assert.Equal(t, obj.PrimaryKey(), obj2.PrimaryKey())
    assert.True(t, Has`); err != nil {
						return
					}

					if _, err = io.WriteString(_w, table.Identifier); err != nil {
						return
					}

					if _, err = io.WriteString(_w, `By`); err != nil {
						return
					}

					for _, col := range idx.Columns {

						if _, err = io.WriteString(_w, col.Identifier); err != nil {
							return
						}

					}

					if _, err = io.WriteString(_w, ` (ctx `); err != nil {
						return
					}

					for _, col := range idx.Columns {

						if _, err = io.WriteString(_w, `, obj.`); err != nil {
							return
						}

						if _, err = io.WriteString(_w, col.Identifier); err != nil {
							return
						}

						if _, err = io.WriteString(_w, `()`); err != nil {
							return
						}

					}

					if _, err = io.WriteString(_w, `))

`); err != nil {
						return
					}

				}

			}

			if _, err = io.WriteString(_w, `
}
`); err != nil {
				return
			}

		}

	}

	return
}

func (tmpl *TableBaseTestTemplate) Overwrite() bool {
	return true
}
