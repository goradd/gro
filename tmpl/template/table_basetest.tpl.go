//** This file was code generated by GoT. DO NOT EDIT. ***

package template

import (
	"io"
	"path/filepath"
	"strconv"

	"github.com/goradd/orm/pkg/codegen"
	"github.com/goradd/orm/pkg/model"
	"github.com/goradd/orm/pkg/query"
	"github.com/goradd/orm/pkg/schema"
)

func init() {
	t := TableBaseTestTemplate{}
	codegen.RegisterTemplate(&t)
}

// TableBaseTestTemplate generates code for the base table tests.
type TableBaseTestTemplate struct {
	Package string
}

func (tmpl *TableBaseTestTemplate) FileName(table *model.Table) string {
	return filepath.Join("orm", table.DbKey, table.FileName()+"_base_test.go")
}

func (tmpl *TableBaseTestTemplate) GenerateTable(table *model.Table, _w io.Writer, importPath string) (err error) {
	tmpl.Package = table.DbKey

	//*** table_base_test.tmpl

	if _, err = io.WriteString(_w, `// Code generated by goradd-orm. DO NOT EDIT.

package `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, tmpl.Package); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `

import (
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	strings2 "github.com/goradd/strings"
	"github.com/goradd/orm/pkg/test"
	"testing"
)
`); err != nil {
		return
	}

	//*** set.tmpl

	for _, col := range table.Columns {
		if !col.HasSetter() {
			continue
		}
		testSize := min(col.Size, 100000)

		if _, err = io.WriteString(_w, `func Test`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `_Set`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, col.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `(t *testing.T) {

    obj := New`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `()
`); err != nil {
			return
		}

		if col.IsEnum() {

			if _, err = io.WriteString(_w, `    `); err != nil {
				return
			}

			if col.IsEnumArray() {

				if _, err = io.WriteString(_w, `
    val := 	test.RandomEnumArray(`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.Reference.EnumTable.IdentifierPlural); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `())
    obj.Set`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `(val)
    `); err != nil {
					return
				}

			} else {

				if _, err = io.WriteString(_w, `
    val := test.RandomEnum(`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.Reference.EnumTable.IdentifierPlural); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `())
    obj.Set`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `(val)
   `); err != nil {
					return
				}

			}

			if _, err = io.WriteString(_w, `
`); err != nil {
				return
			}

		} else {

			if _, err = io.WriteString(_w, `    val := 	test.RandomValue[`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.GoType()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `](`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, strconv.FormatUint(uint64(testSize), 10)); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `)
    obj.Set`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `(val)
`); err != nil {
				return
			}

		}

		if col.SchemaSubType == schema.ColSubTypeDateOnly {

			if _, err = io.WriteString(_w, `    val = obj.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `()
    assert.Zero(t, val.Minute()) // make sure minute part is zero'd
    assert.Zero(t, val.Hour()) // make sure hour part is zero'd
    assert.Zero(t, val.Second()) // make sure second part is zero'd
`); err != nil {
				return
			}

		} else if col.SchemaSubType == schema.ColSubTypeTimeOnly {

			if _, err = io.WriteString(_w, `    val = obj.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `()
    assert.EqualValues(t, 1, val.Year()) // make sure year part is zero'd. The zero value of time.Time has a year of 1.
    assert.EqualValues(t, 1, val.Month()) // make sure month part is zero'd
    assert.EqualValues(t, 1, val.Day()) // make sure day part is zero'd
`); err != nil {
				return
			}

		} else {

			if _, err = io.WriteString(_w, `    assert.Equal(t, val, obj.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `())
`); err != nil {
				return
			}

		}

		if col.IsNullable {

			if _, err = io.WriteString(_w, `    assert.False(t, obj.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `IsNull())
`); err != nil {
				return
			}

		}

		if _, err = io.WriteString(_w, `
`); err != nil {
			return
		}

		if col.IsNullable {

			if _, err = io.WriteString(_w, `    // Test NULL
    obj.Set`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `ToNull()
`); err != nil {
				return
			}

			if col.DefaultValueAsValue() == "nil" {

				if _, err = io.WriteString(_w, `    assert.Nil(t, obj.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `())
`); err != nil {
					return
				}

			} else {

				if _, err = io.WriteString(_w, `    assert.EqualValues(t, `); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.DefaultValueAsValue()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `, obj.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `())
`); err != nil {
					return
				}

			}

			if _, err = io.WriteString(_w, `    assert.True(t, obj.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `IsNull())
`); err != nil {
				return
			}

		}

		if _, err = io.WriteString(_w, `
    // test default
`); err != nil {
			return
		}

		if col.IsEnumArray() {

			if _, err = io.WriteString(_w, `    obj.Set`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `(`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.DefaultValueAsValue()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `)
    assert.True(t, obj.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `().Equal(`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.GoType()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `(`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.DefaultValueAsValue()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `)), "set default")
`); err != nil {
				return
			}

		} else {

			if _, err = io.WriteString(_w, `    obj.Set`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `(`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.DefaultValueAsValue()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `)
    assert.EqualValues(t, `); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.DefaultValueAsValue()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `, obj.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `(), "set default")
`); err != nil {
				return
			}

		}

		if _, err = io.WriteString(_w, `
`); err != nil {
			return
		}

		if col.Size > 0 &&
			col.Size == testSize &&
			!col.IsEnum() &&
			(col.ReceiverType == query.ColTypeBytes || col.ReceiverType == query.ColTypeString || col.ReceiverType == query.ColTypeUnknown) {

			if _, err = io.WriteString(_w, `    // test panic on setting value larger than maximum size allowed
    val = test.RandomValue[`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.GoType()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `](`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, strconv.FormatUint(uint64(col.Size+1), 10)); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `)
    assert.Panics(t, func() {
        obj.Set`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `(val)
    })
`); err != nil {
				return
			}

		}

		if _, err = io.WriteString(_w, `}
`); err != nil {
			return
		}

	}

	//*** sample.tmpl

	if _, err = io.WriteString(_w, `// createMinimalSample`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` creates an unsaved minimal version of a `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` object
// for testing.
func createMinimalSample`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `() *`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` {
    obj := New`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `()

`); err != nil {
		return
	}

	for _, col := range table.Columns {

		if col.ReceiverType == query.ColTypeUnknown {
			continue
		} // cannot know what the set of valid input characters are.

		if col.HasSetter() {

			if _, err = io.WriteString(_w, `    `); err != nil {
				return
			}

			if col.IsReference() {

				if _, err = io.WriteString(_w, `
        `); err != nil {
					return
				}

				if !col.IsNullable {

					if _, err = io.WriteString(_w, `
    // A required forward reference will need to be fulfilled just to save the minimal version of this object
    // If the database is configured so that the referenced object points back here, either directly or through multiple
    // forward references, it possible this could create an endless loop. Such a structure could not be saved anyways.
    obj.Set`); err != nil {
						return
					}

					if _, err = io.WriteString(_w, col.ReferenceIdentifier()); err != nil {
						return
					}

					if _, err = io.WriteString(_w, `(createMinimalSample`); err != nil {
						return
					}

					if _, err = io.WriteString(_w, col.ReferenceType()); err != nil {
						return
					}

					if _, err = io.WriteString(_w, `())
        `); err != nil {
						return
					}

				}

				if _, err = io.WriteString(_w, `
    `); err != nil {
					return
				}

			} else if col.IsEnum() {

				if _, err = io.WriteString(_w, `
        `); err != nil {
					return
				}

				if col.IsEnumArray() {

					if _, err = io.WriteString(_w, `
     obj.Set`); err != nil {
						return
					}

					if _, err = io.WriteString(_w, col.Identifier); err != nil {
						return
					}

					if _, err = io.WriteString(_w, `(test.RandomEnumArray(`); err != nil {
						return
					}

					if _, err = io.WriteString(_w, col.Reference.EnumTable.IdentifierPlural); err != nil {
						return
					}

					if _, err = io.WriteString(_w, `()))
       `); err != nil {
						return
					}

				} else {

					if _, err = io.WriteString(_w, `
     obj.Set`); err != nil {
						return
					}

					if _, err = io.WriteString(_w, col.Identifier); err != nil {
						return
					}

					if _, err = io.WriteString(_w, `(test.RandomEnum(`); err != nil {
						return
					}

					if _, err = io.WriteString(_w, col.Reference.EnumTable.IdentifierPlural); err != nil {
						return
					}

					if _, err = io.WriteString(_w, `()))
        `); err != nil {
						return
					}

				}

				if _, err = io.WriteString(_w, `
    `); err != nil {
					return
				}

			} else {

				if _, err = io.WriteString(_w, `
     obj.Set`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `(test.RandomValue[`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.GoType()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `](`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, strconv.FormatUint(uint64(col.Size), 10)); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `))
   `); err != nil {
					return
				}

			}

			if _, err = io.WriteString(_w, `

`); err != nil {
				return
			}

		}

	}

	if _, err = io.WriteString(_w, `    return obj
}

// createMaximalSample`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` creates an unsaved version of a `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` object
// for testing that includes references to minimal objects.
func createMaximalSample`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `() *`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` {
    obj := createMinimalSample`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `()
`); err != nil {
		return
	}

	for _, col := range table.Columns {

		if col.HasSetter() {

			if _, err = io.WriteString(_w, `    `); err != nil {
				return
			}

			if col.IsReference() {

				if _, err = io.WriteString(_w, `
        `); err != nil {
					return
				}

				if col.IsNullable {

					if _, err = io.WriteString(_w, `
    obj.Set`); err != nil {
						return
					}

					if _, err = io.WriteString(_w, col.ReferenceIdentifier()); err != nil {
						return
					}

					if _, err = io.WriteString(_w, `(createMinimalSample`); err != nil {
						return
					}

					if _, err = io.WriteString(_w, col.ReferenceType()); err != nil {
						return
					}

					if _, err = io.WriteString(_w, `())
        `); err != nil {
						return
					}

				}

				if _, err = io.WriteString(_w, `
    `); err != nil {
					return
				}

			}

			if _, err = io.WriteString(_w, `
`); err != nil {
				return
			}

		}

	}

	if _, err = io.WriteString(_w, `
`); err != nil {
		return
	}

	for _, col := range table.ReverseReferences {

		if _, err = io.WriteString(_w, `    obj.Set`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, col.ReverseIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `(createMinimalSample`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, col.Table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `())
`); err != nil {
			return
		}

	}

	for _, mm := range table.ManyManyReferences {

		if _, err = io.WriteString(_w, `    obj.Set`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.IdentifierPlural); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `(createMinimalSample`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.DestinationTable.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `())
`); err != nil {
			return
		}

	}

	if _, err = io.WriteString(_w, `    return obj
}

`); err != nil {
		return
	}

	var hasUnknown bool
	for _, col := range table.Columns {
		if col.ReceiverType == query.ColTypeUnknown {
			hasUnknown = true
		} // cannot know what the set of valid input characters are.
	}

	if !hasUnknown {
		//*** save.tmpl

		if _, err = io.WriteString(_w, `func Test`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `_CRUD(t *testing.T) {
    obj := New`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `()
    ctx := db.NewContext(nil)

`); err != nil {
			return
		}

		for _, col := range table.Columns {

			testSize := min(100000, col.Size)

			if _, err = io.WriteString(_w, `
`); err != nil {
				return
			}

			if col.HasSetter() {

				if _, err = io.WriteString(_w, `    `); err != nil {
					return
				}

				if col.IsReference() {

					if _, err = io.WriteString(_w, `
    v_`); err != nil {
						return
					}

					if _, err = io.WriteString(_w, col.ReferenceVariableIdentifier()); err != nil {
						return
					}

					if _, err = io.WriteString(_w, ` := createMinimalSample`); err != nil {
						return
					}

					if _, err = io.WriteString(_w, col.ReferenceType()); err != nil {
						return
					}

					if _, err = io.WriteString(_w, `()
    assert.NoError(t, v_`); err != nil {
						return
					}

					if _, err = io.WriteString(_w, col.ReferenceVariableIdentifier()); err != nil {
						return
					}

					if _, err = io.WriteString(_w, `.Save(ctx))
    defer v_`); err != nil {
						return
					}

					if _, err = io.WriteString(_w, col.ReferenceVariableIdentifier()); err != nil {
						return
					}

					if _, err = io.WriteString(_w, `.Delete(ctx)
    obj.Set`); err != nil {
						return
					}

					if _, err = io.WriteString(_w, col.ReferenceIdentifier()); err != nil {
						return
					}

					if _, err = io.WriteString(_w, `(v_`); err != nil {
						return
					}

					if _, err = io.WriteString(_w, col.ReferenceVariableIdentifier()); err != nil {
						return
					}

					if _, err = io.WriteString(_w, `)
    `); err != nil {
						return
					}

				} else if col.IsEnum() {

					if _, err = io.WriteString(_w, `
        `); err != nil {
						return
					}

					if col.IsEnumArray() {

						if _, err = io.WriteString(_w, `
    v_`); err != nil {
							return
						}

						if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
							return
						}

						if _, err = io.WriteString(_w, ` := test.RandomEnumArray(`); err != nil {
							return
						}

						if _, err = io.WriteString(_w, col.Reference.EnumTable.IdentifierPlural); err != nil {
							return
						}

						if _, err = io.WriteString(_w, `())
    obj.Set`); err != nil {
							return
						}

						if _, err = io.WriteString(_w, col.Identifier); err != nil {
							return
						}

						if _, err = io.WriteString(_w, `(v_`); err != nil {
							return
						}

						if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
							return
						}

						if _, err = io.WriteString(_w, `)
        `); err != nil {
							return
						}

					} else {

						if _, err = io.WriteString(_w, `
    v_`); err != nil {
							return
						}

						if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
							return
						}

						if _, err = io.WriteString(_w, ` := test.RandomEnum(`); err != nil {
							return
						}

						if _, err = io.WriteString(_w, col.Reference.EnumTable.IdentifierPlural); err != nil {
							return
						}

						if _, err = io.WriteString(_w, `())
    obj.Set`); err != nil {
							return
						}

						if _, err = io.WriteString(_w, col.Identifier); err != nil {
							return
						}

						if _, err = io.WriteString(_w, `(v_`); err != nil {
							return
						}

						if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
							return
						}

						if _, err = io.WriteString(_w, `)
        `); err != nil {
							return
						}

					}

					if _, err = io.WriteString(_w, `
    `); err != nil {
						return
					}

				} else {

					if _, err = io.WriteString(_w, `
    v_`); err != nil {
						return
					}

					if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
						return
					}

					if _, err = io.WriteString(_w, ` := test.RandomValue[`); err != nil {
						return
					}

					if _, err = io.WriteString(_w, col.GoType()); err != nil {
						return
					}

					if _, err = io.WriteString(_w, `](`); err != nil {
						return
					}

					if _, err = io.WriteString(_w, strconv.FormatUint(uint64(testSize), 10)); err != nil {
						return
					}

					if _, err = io.WriteString(_w, `)
    obj.Set`); err != nil {
						return
					}

					if _, err = io.WriteString(_w, col.Identifier); err != nil {
						return
					}

					if _, err = io.WriteString(_w, `(v_`); err != nil {
						return
					}

					if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
						return
					}

					if _, err = io.WriteString(_w, `)
        `); err != nil {
						return
					}

					if col.SchemaType == schema.ColTypeTime {

						if _, err = io.WriteString(_w, `
    v_`); err != nil {
							return
						}

						if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
							return
						}

						if _, err = io.WriteString(_w, ` = obj.`); err != nil {
							return
						}

						if _, err = io.WriteString(_w, col.Identifier); err != nil {
							return
						}

						if _, err = io.WriteString(_w, `()
        `); err != nil {
							return
						}

					}

					if _, err = io.WriteString(_w, `
    `); err != nil {
						return
					}

				}

				if _, err = io.WriteString(_w, `
`); err != nil {
					return
				}

			}

		}

		if _, err = io.WriteString(_w, `    err := obj.Save(ctx)
	assert.NoError(t, err)
    defer obj.Delete(ctx)

    // Test retrieval
    obj2 := Load`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `(ctx, obj.PrimaryKey())
    require.NotNil(t, obj2)

`); err != nil {
			return
		}

		for _, col := range table.Columns {

			if col.ReceiverType == query.ColTypeUnknown {
				continue
			} // cannot know what the set of valid input characters are.

			if _, err = io.WriteString(_w, `
    assert.True(t, obj2.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `IsValid())
`); err != nil {
				return
			}

			if col.IsNullable {

				if _, err = io.WriteString(_w, `    assert.False(t, obj2.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `IsNull())
`); err != nil {
					return
				}

			}

			if col.HasSetter() {

				if col.IsReference() {

					if _, err = io.WriteString(_w, `    assert.NotEmpty(t, obj2.`); err != nil {
						return
					}

					if _, err = io.WriteString(_w, col.Identifier); err != nil {
						return
					}

					if _, err = io.WriteString(_w, `())
`); err != nil {
						return
					}

				} else if col.IsEnumArray() {

					if _, err = io.WriteString(_w, `    assert.True(t, v_`); err != nil {
						return
					}

					if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
						return
					}

					if _, err = io.WriteString(_w, `.Equal(obj2.`); err != nil {
						return
					}

					if _, err = io.WriteString(_w, col.Identifier); err != nil {
						return
					}

					if _, err = io.WriteString(_w, `()))
`); err != nil {
						return
					}

				} else {

					if _, err = io.WriteString(_w, `    assert.EqualValues(t, v_`); err != nil {
						return
					}

					if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
						return
					}

					if _, err = io.WriteString(_w, `, obj2.`); err != nil {
						return
					}

					if _, err = io.WriteString(_w, col.Identifier); err != nil {
						return
					}

					if _, err = io.WriteString(_w, `())
`); err != nil {
						return
					}

				}

			}

		}

		if _, err = io.WriteString(_w, `
}
`); err != nil {
			return
		}

	}
	return
}

func (tmpl *TableBaseTestTemplate) Overwrite() bool {
	return true
}
