//** This file was code generated by GoT. DO NOT EDIT. ***

package template

import (
	"fmt"
	"io"
	"strconv"

	"github.com/goradd/orm/pkg/codegen"
	"github.com/goradd/orm/pkg/model"
)

func init() {
	t := EnumTestTemplate{}
	codegen.RegisterTemplate(&t)
}

// EnumTestTemplate generates code for the base table tests.
type EnumTestTemplate struct {
	Package string
}

func (tmpl *EnumTestTemplate) FileName(table *model.Enum) string {
	return table.FileName() + "_test.go"
}

func (tmpl *EnumTestTemplate) GenerateEnum(table *model.Enum, _w io.Writer, importPath string) (err error) {
	tmpl.Package = table.DbKey

	//*** enum_test.tmpl

	if _, err = io.WriteString(_w, `// Code generated by goradd-orm. DO NOT EDIT.

package `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, tmpl.Package); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `

import (
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	strings2 "github.com/goradd/strings"
	"github.com/goradd/orm/pkg/test"
	"testing"
)

func Test`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `_String(t *testing.T) {
`); err != nil {
		return
	}

	for _, con := range table.Constants {

		if _, err = io.WriteString(_w, `    assert.Equal(t, `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, con.Const); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `.String(), `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, con.Const); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `.Identifier())
`); err != nil {
			return
		}

	}

	if _, err = io.WriteString(_w, `}

`); err != nil {
		return
	}

	for i, field := range table.Fields[1:] {
		fieldNum := i + 1

		if _, err = io.WriteString(_w, `func Test`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `_`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, field.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `(t *testing.T) {
`); err != nil {
			return
		}

		for _, con := range table.Constants {

			if _, err = io.WriteString(_w, `    assert.Equal(t, `); err != nil {
				return
			}

			if _, err = io.WriteString(_w, con.Const); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, field.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `(), `); err != nil {
				return
			}

			if _, err = io.WriteString(_w, fmt.Sprintf("%#v", con.FieldValues[con.QueryName])); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `)
`); err != nil {
				return
			}

		}

		if _, err = io.WriteString(_w, `    assert.Zero(t, `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `(0).`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, field.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `())
    assert.Panics(t, func() {
        `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `(-1).`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, field.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `()
    })
}

func Test`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `_`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, field.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `Slice(t *testing.T) {
    a := `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, field.IdentifierPlural); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `()
`); err != nil {
			return
		}

		for i, con := range table.Constants {

			if _, err = io.WriteString(_w, `    assert.Equal(t, `); err != nil {
				return
			}

			if _, err = io.WriteString(_w, con.Const); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, field.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `(), a[`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, strconv.Itoa(i)); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `])
`); err != nil {
				return
			}

		}

		if _, err = io.WriteString(_w, `}

`); err != nil {
			return
		}

	}

	if _, err = io.WriteString(_w, `
func Test`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `_Keys(t *testing.T) {
    var keys []string

`); err != nil {
		return
	}

	for _, con := range table.Constants {

		if _, err = io.WriteString(_w, `    keys = append(keys, `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, con.Const); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `.Key())
`); err != nil {
			return
		}

	}

	if _, err = io.WriteString(_w, `    v := `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.IdentifierPlural); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `FromKeys(keys)
    assert.Equal(t, `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.IdentifierPlural); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `(), v)

    assert.Equal(t, `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `(0), `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `FromKey(""))
}

func Test`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `_Values(t *testing.T) {
    a1 := `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.IdentifierPlural); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `()
    a2 := `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.IdentifierPlural); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `I()
    for i,v1 := range a1 {
        assert.Equal(t, v1, a2[i].(`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `))
        assert.True(t, IsValid`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `(int(v1)))
    }
    assert.False(t, IsValid`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `(0))
}

func Test`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `_FromIdentifier(t *testing.T) {
    var v `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `
    var err error

`); err != nil {
		return
	}

	for _, con := range table.Constants {

		if _, err = io.WriteString(_w, `    v,err = `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `FromIdentifier(`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `(`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, strconv.Itoa(con.Value)); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `).Identifier())
    assert.NoError(t, err)
    assert.Equal(t, `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `(`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, strconv.Itoa(con.Value)); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `), v)
`); err != nil {
			return
		}

	}

	if _, err = io.WriteString(_w, `}

func Test`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `_FromInterface(t *testing.T) {
    v := `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Constants[0].Const); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `

    v2,err := `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `FromInterface(int(v))
    assert.NoError(t, err)
    assert.Equal(t, v, v2)

    v2,err = `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `FromInterface(float64(v))
    assert.NoError(t, err)
    assert.Equal(t, v, v2)

    v2,err = `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `FromInterface(json.Number(fmt.Sprintf("%d", v)))
    assert.NoError(t, err)
    assert.Equal(t, v, v2)

    v2,err = `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `FromInterface(fmt.Sprintf("%d", v))
    assert.NoError(t, err)
    assert.Equal(t, v, v2)

    v2,err = `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `FromInterface(0)
    assert.Error(t, err)
    assert.Equal(t, `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `(0), v2)

    var t1 time.Time
    v2,err = `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `FromInterface(t1)
    assert.Error(t, err)
    assert.Equal(t, `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `(0), v2)
}

func Test`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `_UnmarshalJSON(t *testing.T) {
	tests := []struct {
		input    string
		expected `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `
		wantErr  bool
	}{
		// Integer JSON
		{input: `+"`"+``); err != nil {
		return
	}

	if _, err = io.WriteString(_w, strconv.Itoa(table.Constants[0].Value)); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ``+"`"+`, expected: `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Constants[0].Const); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `, wantErr: false},
		// Float JSON
		{input: `+"`"+``); err != nil {
		return
	}

	if _, err = io.WriteString(_w, strconv.Itoa(table.Constants[0].Value)); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `.0`+"`"+`, expected: `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Constants[0].Const); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `, wantErr: false},
		// Stringified numbers
		{input: `+"`"+`"`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, strconv.Itoa(table.Constants[0].Value)); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `"`+"`"+`, expected: `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Constants[0].Const); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `, wantErr: false},
		// Invalid values
		{input: `+"`"+`"1.1.1"`+"`"+`, expected: `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `(0), wantErr: true},
	}

	for _, tt := range tests {
		var s `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `
		err := json.Unmarshal([]byte(tt.input), &s)
		if (err != nil) != tt.wantErr {
			t.Errorf("UnmarshalJSON(%s) error = %v, wantErr %v", tt.input, err, tt.wantErr)
			continue
		}
		if err == nil && s != tt.expected {
			t.Errorf("UnmarshalJSON(%s) = %v, want %v", tt.input, s, tt.expected)
		}
	}
}

`); err != nil {
		return
	}

	return
}

func (tmpl *EnumTestTemplate) Overwrite() bool {
	return true
}
