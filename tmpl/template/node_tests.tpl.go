//** This file was code generated by GoT. DO NOT EDIT. ***

package template

import (
	"fmt"
	"io"
	"path/filepath"

	"github.com/goradd/orm/pkg/codegen"
	"github.com/goradd/orm/pkg/model"
)

func init() {
	codegen.RegisterTemplate(new(NodeTestTemplate))
	codegen.RegisterTemplate(new(NodeTestUtilsTemplate))
}

// NodeTestUtilsTemplate generates test code for the node package.
type NodeTestUtilsTemplate struct{}

func (n NodeTestUtilsTemplate) FileName(dbKey string) string {
	return filepath.Join("node", "utils_test.go")
}

func (n NodeTestUtilsTemplate) GenerateDatabase(database *model.Database, _w io.Writer, importPath string) (err error) {

	//*** testutils.tmpl

	if _, err = io.WriteString(_w, `package node

func serNode(t *testing.T, n query.Node) query.Node {
	var buf bytes.Buffer
	enc := gob.NewEncoder(&buf)

	err := enc.Encode(&n)
	assert.NoError(t, err)

	var n2 query.Node
	dec := gob.NewDecoder(&buf)
	err = dec.Decode(&n2)
	assert.NoError(t, err)
	return n2
}

`); err != nil {
		return
	}

	return
}

func (n NodeTestUtilsTemplate) Overwrite() bool {
	return true
}

// NodeTestTemplate generates test code for table nodes.
type NodeTestTemplate struct {
}

func (n *NodeTestTemplate) FileName(table *model.Table) string {
	return filepath.Join("node", table.FileName()+"_test.go")
}

func (n *NodeTestTemplate) GenerateTable(table *model.Table, _w io.Writer, importPath string) (err error) {

	//*** test.tmpl

	if _, err = io.WriteString(_w, `package node

import (
	"testing"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestSerializeTable`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `Table(t *testing.T) {
	var n query.Node = `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `()

    assert.Equal(t, "`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.QueryName); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `", n.TableName_())
    assert.Equal(t, query.TableNodeType, n.NodeType_())
    assert.Equal(t, "`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.DbKey); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `", n.DatabaseKey_())

	n2 := serNode(t, n)

    assert.Equal(t, "`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.QueryName); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `", n2.TableName_())
    assert.Equal(t, query.TableNodeType, n2.NodeType_())
    assert.Equal(t, "`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.DbKey); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `", n2.DatabaseKey_())

    nodes := `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `Table{}.ColumnNodes_()
    for _,cn := range nodes {
        cn2 := serNode(t, cn)
        assert.Equal(t, "`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.QueryName); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `", cn2.TableName_())
        assert.Equal(t, query.TableNodeType, query.NodeParent(cn2).NodeType_())
    }
}

func TestSerializeReferences`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `Table(t *testing.T) {
`); err != nil {
		return
	}

	for _, ref := range table.References {

		if _, err = io.WriteString(_w, `{
    n := `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `().`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, fmt.Sprint(ref.Identifier)); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `()
    n2 := serNode(t, n)
    parentNode := query.NodeParent(n2)
    assert.Equal(t, query.TableNodeType, parentNode.NodeType_())
    assert.Equal(t, "`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.QueryName); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `", parentNode.TableName_())

    nodes := n.(query.TableNodeI).ColumnNodes_()
    for _,cn := range nodes {
        cn2 := serNode(t, cn)
        assert.Equal(t, n.TableName_(), cn2.TableName_())
        assert.Equal(t, query.ReferenceNodeType, query.NodeParent(cn2).NodeType_())
    }

`); err != nil {
			return
		}

		for _, col2 := range ref.ReferencedTable.Columns {

			if _, err = io.WriteString(_w, `    assert.True(t, query.NodesMatch(`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, table.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `().`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ref.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `().`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col2.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `(), n2.(`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ref.ReferencedTable.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `Node).`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col2.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `()))
`); err != nil {
				return
			}

		}

		for _, ref2 := range ref.ReferencedTable.References {

			if _, err = io.WriteString(_w, `    assert.True(t, query.NodesMatch(`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, table.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `().`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ref.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `().`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ref2.ForeignKey.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `(), n2.(`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ref.ReferencedTable.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `Node).`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ref2.ForeignKey.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `()))
    assert.True(t, query.NodesMatch(`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, table.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `().`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ref.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `().`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ref2.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `(), n2.(`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ref.ReferencedTable.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `Node).`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ref2.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `()))
`); err != nil {
				return
			}

		}

		for _, rev2 := range ref.ReferencedTable.ReverseReferences {

			if _, err = io.WriteString(_w, `	assert.True(t, query.NodesMatch(`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, table.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `().`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ref.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `().`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev2.ReverseIdentifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `(), n2.(`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ref.ReferencedTable.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `Node).`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev2.ReverseIdentifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `()))
`); err != nil {
				return
			}

		}

		for _, mm2 := range ref.ReferencedTable.ManyManyReferences {

			if _, err = io.WriteString(_w, `	assert.True(t, query.NodesMatch(`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, table.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `().`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ref.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `().`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, mm2.IdentifierPlural); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `(), n2.(`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ref.ReferencedTable.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `Node).`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, mm2.IdentifierPlural); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `()))
`); err != nil {
				return
			}

		}

		if _, err = io.WriteString(_w, `
}

`); err != nil {
			return
		}

	}

	if _, err = io.WriteString(_w, `}

func TestSerializeReverseReferences`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `Table(t *testing.T) {
`); err != nil {
		return
	}

	for _, rev := range table.ReverseReferences {

		if _, err = io.WriteString(_w, `
{
    n := `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `().`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, rev.ReverseIdentifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `()
    n2 := serNode(t, n)
    parentNode := query.NodeParent(n2)
    assert.Equal(t, query.TableNodeType, parentNode.NodeType_())
    assert.Equal(t, "`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.QueryName); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `", parentNode.TableName_())

    nodes := n.(query.TableNodeI).ColumnNodes_()
    for _,cn := range nodes {
        cn2 := serNode(t, cn)
        assert.Equal(t, n.TableName_(), cn2.TableName_())
        assert.Equal(t, query.ReverseNodeType, query.NodeParent(cn2).NodeType_())
    }

`); err != nil {
			return
		}

		for _, col := range rev.Table.Columns {

			if _, err = io.WriteString(_w, `	assert.True(t, query.NodesMatch(`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, table.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `().`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.ReverseIdentifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `().`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `(), n2.(`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.Table.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `Node).`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `()))
`); err != nil {
				return
			}

		}

		for _, ref := range rev.Table.References {

			if _, err = io.WriteString(_w, `	assert.True(t, query.NodesMatch(`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, table.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `().`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.ReverseIdentifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `().`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ref.ForeignKey.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `(), n2.(`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.Table.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `Node).`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ref.ForeignKey.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `()))
    assert.True(t, query.NodesMatch(`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, table.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `().`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.ReverseIdentifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `().`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ref.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `(), n2.(`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.Table.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `Node).`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ref.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `()))
`); err != nil {
				return
			}

		}

		for _, rev2 := range rev.Table.ReverseReferences {

			if _, err = io.WriteString(_w, `	assert.True(t, query.NodesMatch(`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, table.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `().`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.ReverseIdentifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `().`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev2.ReverseIdentifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `(), n2.(`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.Table.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `Node).`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev2.ReverseIdentifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `()))
`); err != nil {
				return
			}

		}

		for _, mm2 := range rev.Table.ManyManyReferences {

			if _, err = io.WriteString(_w, `	assert.True(t, query.NodesMatch(`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, table.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `().`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.ReverseIdentifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `().`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, mm2.IdentifierPlural); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `(), n2.(`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.Table.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `Node).`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, mm2.IdentifierPlural); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `()))
`); err != nil {
				return
			}

		}

		if _, err = io.WriteString(_w, `
}

`); err != nil {
			return
		}

	}

	if _, err = io.WriteString(_w, `}

func TestSerializeAssociations`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `Table(t *testing.T) {
`); err != nil {
		return
	}

	for _, mm := range table.ManyManyReferences {

		if _, err = io.WriteString(_w, `
{
    n := `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `().`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, fmt.Sprint(mm.IdentifierPlural)); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `()
    n2 := serNode(t, n)
    assert.Equal(t, query.ManyManyNodeType, n2.NodeType_())
    parentNode := query.NodeParent(n2)
    assert.Equal(t, query.TableNodeType, parentNode.NodeType_())
    assert.Equal(t, "`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.QueryName); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `", parentNode.TableName_())

    nodes := n.(query.TableNodeI).ColumnNodes_()
    for _,cn := range nodes {
        cn2 := serNode(t, cn)
//        assert.Equal(t, query.ColumnNodeType, cn2.NodeType_())
        parentNode = query.NodeParent(cn2)
        assert.Equal(t, query.ManyManyNodeType, parentNode.NodeType_())
    }

`); err != nil {
			return
		}

		for _, col := range mm.ReferencedTable.Columns {

			if _, err = io.WriteString(_w, `    assert.True(t, query.NodesMatch(`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, table.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `().`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, mm.IdentifierPlural); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `().`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `(), n2.(`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, mm.ReferencedTable.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `Node).`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `()))
`); err != nil {
				return
			}

		}

		for _, ref := range mm.ReferencedTable.References {

			if _, err = io.WriteString(_w, `    assert.True(t, query.NodesMatch(`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, table.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `().`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, mm.IdentifierPlural); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `().`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ref.ForeignKey.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `(), n2.(`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, mm.ReferencedTable.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `Node).`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ref.ForeignKey.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `()))
    assert.True(t, query.NodesMatch(`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, table.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `().`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, mm.IdentifierPlural); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `().`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ref.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `(), n2.(`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, mm.ReferencedTable.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `Node).`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ref.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `()))
`); err != nil {
				return
			}

		}

		for _, rev2 := range mm.ReferencedTable.ReverseReferences {

			if _, err = io.WriteString(_w, `	assert.True(t, query.NodesMatch(`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, table.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `().`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, mm.IdentifierPlural); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `().`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev2.ReverseIdentifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `(), n2.(`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, mm.ReferencedTable.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `Node).`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev2.ReverseIdentifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `()))
`); err != nil {
				return
			}

		}

		for _, mm2 := range mm.ReferencedTable.ManyManyReferences {

			if _, err = io.WriteString(_w, `	assert.True(t, query.NodesMatch(`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, table.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `().`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, mm.IdentifierPlural); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `().`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, mm2.IdentifierPlural); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `(), n2.(`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, mm.ReferencedTable.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `Node).`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, mm2.IdentifierPlural); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `()))
`); err != nil {
				return
			}

		}

		if _, err = io.WriteString(_w, `
}

`); err != nil {
			return
		}

	}

	if _, err = io.WriteString(_w, `}


`); err != nil {
		return
	}

	return
}

func (n *NodeTestTemplate) Overwrite() bool {
	return true
}
