//** This file was code generated by GoT. DO NOT EDIT. ***

package template

import (
	"fmt"
	"io"
	"path/filepath"
	"strconv"

	"github.com/goradd/orm/pkg/codegen"
	"github.com/goradd/orm/pkg/model"
	"github.com/goradd/orm/pkg/query"
)

func init() {
	t := TableBaseTemplate{}
	codegen.RegisterTemplate(&t)
}

// TableBaseTemplate generates code for the base tables.
type TableBaseTemplate struct {
	Package string
}

func (tmpl *TableBaseTemplate) FileName(table *model.Table) string {
	return filepath.Join("orm", table.DbKey, table.FileName()+"_base.go")
}

func (tmpl *TableBaseTemplate) GenerateTable(table *model.Table, _w io.Writer, importPath string) (err error) {
	tmpl.Package = table.DbKey
	return tmpl.gen(table, _w, importPath)
}

func (tmpl *TableBaseTemplate) Overwrite() bool {
	return true
}

//*** table_base.tmpl

// The master template for the table base classes

func (tmpl *TableBaseTemplate) gen(table *model.Table, _w io.Writer, importPath string) (err error) {
	if err = tmpl.genHeader(table, _w, importPath); err != nil {
		return
	}
	if err = tmpl.genStruct(table, _w); err != nil {
		return
	}
	if err = tmpl.genConst(table, _w); err != nil {
		return
	}
	if err = tmpl.genInit(table, _w); err != nil {
		return
	}
	if err = tmpl.genPK(table, _w); err != nil {
		return
	}
	if err = tmpl.genCopy(table, _w); err != nil {
		return
	}
	if err = tmpl.genAccessors(table, _w); err != nil {
		return
	}
	if err = tmpl.genManyManyAccessors(table, _w); err != nil {
		return
	}
	if err = tmpl.genReverseRefAccessors(table, _w); err != nil {
		return
	}
	if err = tmpl.genQuery(table, _w); err != nil {
		return
	}
	if err = tmpl.genBuilder(table, _w); err != nil {
		return
	}
	if err = tmpl.genCount(table, _w); err != nil {
		return
	}
	if err = tmpl.genLoader(table, _w); err != nil {
		return
	}
	if err = tmpl.genSave(table, _w); err != nil {
		return
	}
	if err = tmpl.genDelete(table, _w); err != nil {
		return
	}
	if err = tmpl.genDirty(table, _w); err != nil {
		return
	}
	if err = tmpl.genGet(table, _w); err != nil {
		return
	}
	if err = tmpl.genBinary(table, _w); err != nil {
		return
	}
	if err = tmpl.genJson(table, _w); err != nil {
		return
	}
	if err = tmpl.genInclude(table, _w); err != nil {
		return
	}
	return
}

func (tmpl *TableBaseTemplate) genHeader(table *model.Table, _w io.Writer, importPath string) (err error) {

	//*** import.tmpl

	if _, err = io.WriteString(_w, `// Code generated by goradd-orm. DO NOT EDIT.

package `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, tmpl.Package); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `

import (
	"github.com/goradd/orm/pkg/db"
	"github.com/goradd/orm/pkg/query"
	"github.com/goradd/orm/pkg/broadcast"
	"context"
	"fmt"
	"github.com/goradd/orm/pkg/op"
	"github.com/goradd/all"
	"bytes"
	"encoding/gob"
    "github.com/goradd/maps"
    "`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, importPath); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `/node"
)

`); err != nil {
		return
	}

	return
}

func (tmpl *TableBaseTemplate) genStruct(table *model.Table, _w io.Writer) (err error) {

	//*** struct.tmpl

	if _, err = io.WriteString(_w, `
// `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `Base is embedded in a `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` object and provides the ORM access to the database.
// The member variables of the structure are private and should not normally be accessed by the `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` embedder.
// Instead, use the accessor functions.
type `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `Base struct {

`); err != nil {
		return
	}

	for _, col := range table.Columns {

		if col.IsAutoId {

			if _, err = io.WriteString(_w, `	`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ` string
`); err != nil {
				return
			}

		} else {

			if _, err = io.WriteString(_w, `	`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ` `); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.GoType()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `
`); err != nil {
				return
			}

		}

		if col.IsNullable {

			if _, err = io.WriteString(_w, `	`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `IsNull bool
`); err != nil {
				return
			}

		}

		if _, err = io.WriteString(_w, `	`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `IsValid bool
	`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `IsDirty bool
`); err != nil {
			return
		}

		if col.IsReference() {

			if _, err = io.WriteString(_w, `	`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.ReferenceVariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ` *`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.ReferenceType()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `
`); err != nil {
				return
			}

		}

		if _, err = io.WriteString(_w, `
`); err != nil {
			return
		}

	}

	if _, err = io.WriteString(_w, `
`); err != nil {
		return
	}

	if len(table.ReverseReferences) > 0 {

		if _, err = io.WriteString(_w, `// Reverse reference objects.
`); err != nil {
			return
		}

		for _, col := range table.ReverseReferences {

			if _, err = io.WriteString(_w, `    `); err != nil {
				return
			}

			if col.IsUnique {

				if _, err = io.WriteString(_w, `
        `); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.ReverseVariableIdentifier()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, ` *`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.Table.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `
        `); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.ReverseVariableIdentifier()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `IsDirty bool
        `); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.ReversePkIdentifier()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, ` *`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.Table.PrimaryKeyGoType()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `                // Primary key to associate at Save time
    `); err != nil {
					return
				}

			} else {

				if _, err = io.WriteString(_w, `
        `); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.ReverseVariableIdentifier()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, ` maps.SliceMap[`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.Table.PrimaryKeyGoType()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `, *`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.Table.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `]  // Objects in the order they were queried
        `); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.ReversePkIdentifier()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, ` []`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.Table.PrimaryKeyGoType()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `                // Primary keys to associate at Save time
        `); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.ReverseVariableIdentifier()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `IsDirty bool
	`); err != nil {
					return
				}

			}

			if _, err = io.WriteString(_w, `
`); err != nil {
				return
			}

		}

	}

	if _, err = io.WriteString(_w, `
`); err != nil {
		return
	}

	if len(table.ManyManyReferences) > 0 {

		if _, err = io.WriteString(_w, `// Many-Many reference objects.
`); err != nil {
			return
		}

		for _, mm := range table.ManyManyReferences {

			if _, err = io.WriteString(_w, `    `); err != nil {
				return
			}

			if _, err = io.WriteString(_w, mm.VariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ` maps.SliceMap[`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, mm.PrimaryKeyType()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `, *`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, mm.ObjectType()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `]
    `); err != nil {
				return
			}

			if _, err = io.WriteString(_w, mm.PkIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ` []`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, mm.PrimaryKeyType()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `                // Primary keys to associate at Save time
    `); err != nil {
				return
			}

			if _, err = io.WriteString(_w, mm.VariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `IsDirty bool
`); err != nil {
				return
			}

		}

	}

	if _, err = io.WriteString(_w, `
	// Custom aliases, if specified
	_aliases map[string]any

	// Indicates whether this is a new object, or one loaded from the database. Used by Save to know whether to Insert or Update.
	_restored bool

    _originalPK `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.PrimaryKeyGoType()); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `
}

`); err != nil {
		return
	}

	return
}

func (tmpl *TableBaseTemplate) genConst(table *model.Table, _w io.Writer) (err error) {

	//*** const.tmpl

	if _, err = io.WriteString(_w, `
// IDs used to access the `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` object fields by name using the Get function.
// doc: type=`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `
const  (

`); err != nil {
		return
	}

	for _, col := range table.Columns {

		if _, err = io.WriteString(_w, `    `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `_`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, col.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, ` = `+"`"+``); err != nil {
			return
		}

		if _, err = io.WriteString(_w, col.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, ``+"`"+`
`); err != nil {
			return
		}

		if col.IsReference() {

			if _, err = io.WriteString(_w, `    `); err != nil {
				return
			}

			if _, err = io.WriteString(_w, table.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `_`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.ReferenceIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ` = `+"`"+``); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.ReferenceIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ``+"`"+`
`); err != nil {
				return
			}

		}

	}

	if _, err = io.WriteString(_w, `
`); err != nil {
		return
	}

	for _, rev := range table.ReverseReferences {

		if _, err = io.WriteString(_w, `    `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, rev.ReverseIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, ` = `+"`"+``); err != nil {
			return
		}

		if _, err = io.WriteString(_w, rev.ReverseIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, ``+"`"+`
`); err != nil {
			return
		}

	}

	if _, err = io.WriteString(_w, `
`); err != nil {
		return
	}

	for _, mm := range table.ManyManyReferences {

		if _, err = io.WriteString(_w, `    `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, ` = `+"`"+``); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, ``+"`"+`
    `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.IdentifierPlural); err != nil {
			return
		}

		if _, err = io.WriteString(_w, ` = `+"`"+``); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.IdentifierPlural); err != nil {
			return
		}

		if _, err = io.WriteString(_w, ``+"`"+`
`); err != nil {
			return
		}

	}

	if _, err = io.WriteString(_w, `
) `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `

`); err != nil {
		return
	}

	for _, col := range table.Columns {

		if col.Size > 0 {

			if col.ReceiverType == query.ColTypeString {

				if _, err = io.WriteString(_w, `    const `); err != nil {
					return
				}

				if _, err = io.WriteString(_w, table.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `MaxLength = `); err != nil {
					return
				}

				if _, err = io.WriteString(_w, strconv.FormatUint(uint64(col.Size), 10)); err != nil {
					return
				}

				if _, err = io.WriteString(_w, ` // The number of runes the column can hold
`); err != nil {
					return
				}

			} else if col.ReceiverType == query.ColTypeBytes || col.ReceiverType == query.ColTypeUnknown {

				if _, err = io.WriteString(_w, `    const `); err != nil {
					return
				}

				if _, err = io.WriteString(_w, table.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `MaxLength = `); err != nil {
					return
				}

				if _, err = io.WriteString(_w, strconv.FormatUint(uint64(col.Size), 10)); err != nil {
					return
				}

				if _, err = io.WriteString(_w, ` // The number of bytes the column can hold
`); err != nil {
					return
				}

			} else if col.ReceiverType == query.ColTypeInteger || col.ReceiverType == query.ColTypeUnsigned {

				if _, err = io.WriteString(_w, `    const `); err != nil {
					return
				}

				if _, err = io.WriteString(_w, table.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `Max = `); err != nil {
					return
				}

				if _, err = io.WriteString(_w, fmt.Sprintf("%#v", col.MaxInt())); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `
    const `); err != nil {
					return
				}

				if _, err = io.WriteString(_w, table.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `Min = `); err != nil {
					return
				}

				if _, err = io.WriteString(_w, fmt.Sprintf("%#v", col.MinInt())); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `
`); err != nil {
					return
				}

			}

		}

	}

	if _, err = io.WriteString(_w, `
`); err != nil {
		return
	}

	return
}

func (tmpl *TableBaseTemplate) genInit(table *model.Table, _w io.Writer) (err error) {

	//*** init.tmpl

	if _, err = io.WriteString(_w, `// Initialize or re-initialize a `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` database object to default values.
`); err != nil {
		return
	}

	if pk := table.PrimaryKeyColumn(); pk != nil && pk.IsAutoId {

		if _, err = io.WriteString(_w, `// The primary key will get a temporary negative number which will be replaced when the object is saved.
// Multiple calls to Initialize are not guaranteed to create sequential values for the primary key.
`); err != nil {
			return
		}

	}

	if _, err = io.WriteString(_w, `func (o *`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `Base) Initialize() {

`); err != nil {
		return
	}

	for _, col := range table.Columns {

		if _, err = io.WriteString(_w, `
`); err != nil {
			return
		}

		if col.IsAutoId {

			if _, err = io.WriteString(_w, `    newObjectPkCounter = newObjectPkCounter - 1
    o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ` = fmt.Sprintf("%d", newObjectPkCounter)
`); err != nil {
				return
			}

		} else {

			if _, err = io.WriteString(_w, `	o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ` = `); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.DefaultValueAsValue()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `
`); err != nil {
				return
			}

		}

		if _, err = io.WriteString(_w, `
`); err != nil {
			return
		}

		if col.IsNullable {

			if col.DefaultValue == nil {

				if _, err = io.WriteString(_w, `	o.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `IsNull = true
	o.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `IsValid = true
	o.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `IsDirty = true
`); err != nil {
					return
				}

			} else {

				if _, err = io.WriteString(_w, `	o.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `IsNull = false
	o.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `IsValid = true
	o.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `IsDirty = true
`); err != nil {
					return
				}

			}

		} else {

			if _, err = io.WriteString(_w, ` `); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `
`); err != nil {
				return
			}

			if col.DefaultValue == nil {

				if _, err = io.WriteString(_w, `	o.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `IsValid = false
	o.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `IsDirty = false
`); err != nil {
					return
				}

			} else {

				if _, err = io.WriteString(_w, `	o.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `IsValid = true
	o.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `IsDirty = true
`); err != nil {
					return
				}

			}

		}

		if _, err = io.WriteString(_w, `
`); err != nil {
			return
		}

	}

	if _, err = io.WriteString(_w, `
	o._restored = false
}

`); err != nil {
		return
	}

	return
}

func (tmpl *TableBaseTemplate) genPK(table *model.Table, _w io.Writer) (err error) {

	//*** pk.tmpl

	if _, err = io.WriteString(_w, `
// PrimaryKey returns the current value of the primary key field.
func (o *`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `Base) PrimaryKey() `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.PrimaryKeyGoType()); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` {
	return o.`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.PrimaryKeyColumn().VariableIdentifier()); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `
}

// OriginalPrimaryKey returns the value of the primary key that was originally loaded into the object when it was
// read from the database.
func (o *`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `Base) OriginalPrimaryKey() `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.PrimaryKeyGoType()); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` {
	return o._originalPK
}

`); err != nil {
		return
	}

	return
}

func (tmpl *TableBaseTemplate) genCopy(table *model.Table, _w io.Writer) (err error) {

	//*** copy.tmpl

	if _, err = io.WriteString(_w, `
// Copy copies all valid fields to a new `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` object.
// Forward reference ids will be copied, but reverse and many-many references will not.
// Attached objects will not be included in the copy.`); err != nil {
		return
	}

	if !table.HasAutoId() {

		if _, err = io.WriteString(_w, `
// You will need to manually set the primary key field before saving.`); err != nil {
			return
		}

	}

	if _, err = io.WriteString(_w, `
// Call Save() on the new object to save it into the database.
// Copy might panic if any fields in the database were set to a size larger than the
// maximum size through a process that accessed the database outside of the ORM.
func (o *`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `Base) Copy() (newObject *`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `) {
    newObject = New`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `()
`); err != nil {
		return
	}

	for _, col := range table.Columns {

		if col.HasSetter() {

			if _, err = io.WriteString(_w, `    if o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `IsValid {
        newObject.Set`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `(o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `)
    }
`); err != nil {
				return
			}

		}

	}

	if _, err = io.WriteString(_w, `    return
}
`); err != nil {
		return
	}

	return
}

//*** accessors.tmpl

func (tmpl *TableBaseTemplate) genAccessors(table *model.Table, _w io.Writer) (err error) {
	for _, col := range table.Columns {
		if col.IsAutoId {
			if err = tmpl.genAutoIdGetter(table, col, _w); err != nil {
				return
			}
			continue
		}

		if err = tmpl.genColGetter(table, col, _w); err != nil {
			return
		}
		if col.IsNullable {
			if err = tmpl.genColNullGetter(table, col, _w); err != nil {
				return
			}
			if err = tmpl.genColNullSetter(table, col, _w); err != nil {
				return
			}
		} else {
			if err = tmpl.genColSetter(table, col, _w); err != nil {
				return
			}
		}
		if col.IsReference() {
			if err = tmpl.genColReferenceGetter(table, col, _w); err != nil {
				return
			}
			if col.IsNullable {
				if err = tmpl.genColNullReferenceSetter(table, col, _w); err != nil {
					return
				}
			} else {
				if err = tmpl.genColNotNullReferenceSetter(table, col, _w); err != nil {
					return
				}
			}
		}
	}

	if err = tmpl.genAliasGetter(table, _w); err != nil {
		return
	}
	if err = tmpl.genIsNew(table, _w); err != nil {
		return
	}

	return
}

func (tmpl *TableBaseTemplate) genAutoIdGetter(table *model.Table, col *model.Column, _w io.Writer) (err error) {

	//*** auto_id_getter.tmpl

	if _, err = io.WriteString(_w, `// `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` returns the loaded value of `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` or
// the zero value if not loaded. Call `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `IsValid() to determine
// if it is loaded.
func (o *`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `Base) `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `() string {
	return fmt.Sprint(o.`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.DecapIdentifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `)
}

// `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `IsValid returns true if the value was loaded from the database or has been set.
func (o *`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `Base) `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `IsValid() bool {
	return o._restored && o.`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.DecapIdentifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `IsValid
}
`); err != nil {
		return
	}

	return
}

func (tmpl *TableBaseTemplate) genColGetter(table *model.Table, col *model.Column, _w io.Writer) (err error) {

	//*** column_getter.tmpl

	if _, err = io.WriteString(_w, `// `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` returns the loaded value of `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `.
func (o *`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `Base) `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `() `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.GoType()); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` {
	if o._restored && !o.`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `IsValid {
		panic ("`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` was not selected in the last query and has not been set, and so is not valid")
	}
	return o.`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `
}

// `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `IsValid returns true if the value was loaded from the database or has been set.
func (o *`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `Base) `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `IsValid() bool {
	return o.`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `IsValid
}

`); err != nil {
		return
	}

	return
}

func (tmpl *TableBaseTemplate) genColSetter(table *model.Table, col *model.Column, _w io.Writer) (err error) {
	if !col.HasSetter() {
		return
	}

	//*** column_not_null_setter.tmpl

	if _, err = io.WriteString(_w, `// Set`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` sets the value of `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` in the object, to be saved later using the Save() function.
func (o *`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `Base) Set`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `(`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.GoType()); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `) {
	o.`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `IsValid = true
`); err != nil {
		return
	}

	if col.ReceiverType == query.ColTypeBytes || col.ReceiverType == query.ColTypeUnknown {

		if col.Size > 0 {

			if _, err = io.WriteString(_w, `    if len(`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `) > `); err != nil {
				return
			}

			if _, err = io.WriteString(_w, table.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `MaxLength {
        panic("attempted to set `); err != nil {
				return
			}

			if _, err = io.WriteString(_w, table.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ` to a value larger than its maximum length")
    }
`); err != nil {
				return
			}

		}

		if _, err = io.WriteString(_w, `	o.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, ` = `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `		// TODO: Copy bytes??
	o.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `IsDirty = true

`); err != nil {
			return
		}

	} else if col.IsManyEnum() {

		if _, err = io.WriteString(_w, `    v := slices.Sort(slices.Clone(`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `))
	if !slices.Equal(o.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `, v) ||
	        !o._restored {
		o.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, ` = v
		o.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `IsDirty = true
    }

`); err != nil {
			return
		}

	} else {

		if col.ReceiverType == query.ColTypeString && col.Size > 0 {

			if _, err = io.WriteString(_w, `    if utf8.RuneCountInString(`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `) > `); err != nil {
				return
			}

			if _, err = io.WriteString(_w, table.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `MaxLength {
        panic("attempted to set `); err != nil {
				return
			}

			if _, err = io.WriteString(_w, table.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ` to a value larger than its maximum length in runes")
    }
`); err != nil {
				return
			}

		}

		if _, err = io.WriteString(_w, `	if o.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, ` != `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, ` || !o._restored {
		o.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, ` = `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `
		o.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `IsDirty = true
`); err != nil {
			return
		}

		if col.IsReference() {

			if _, err = io.WriteString(_w, `		o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.ReferenceVariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ` = nil
`); err != nil {
				return
			}

		}

		if _, err = io.WriteString(_w, `	}

`); err != nil {
			return
		}

	}

	if _, err = io.WriteString(_w, `}

`); err != nil {
		return
	}

	return
}

func (tmpl *TableBaseTemplate) genColNullGetter(table *model.Table, col *model.Column, _w io.Writer) (err error) {

	//*** column_null_getter.tmpl

	if _, err = io.WriteString(_w, `
// `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `IsNull returns true if the related database value is null.
func (o *`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `Base) `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `IsNull() bool {
	return o.`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.DecapIdentifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `IsNull
}

// `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `_I returns the loaded value of `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` as an interface.
// If the value in the database is NULL, a nil interface is returned.
func (o *`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `Base) `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `_I() interface{} {
	if o._restored && !o.`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.DecapIdentifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `IsValid {
		panic ("`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.DecapIdentifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` was not selected in the last query and has not been set, and so is not valid")
	} else if o.`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.DecapIdentifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `IsNull {
	    return nil
	}
	return o.`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.DecapIdentifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `
}

`); err != nil {
		return
	}

	return
}

func (tmpl *TableBaseTemplate) genColReferenceGetter(table *model.Table, col *model.Column, _w io.Writer) (err error) {

	//*** column_reference_getter.tmpl

	if _, err = io.WriteString(_w, `
// `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.ReferenceIdentifier()); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` returns the current value of the loaded `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.ReferenceIdentifier()); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `, and nil if its not loaded.
func (o *`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `Base) `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.ReferenceIdentifier()); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `() *`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.ReferenceType()); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` {
	return o.`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.ReferenceVariableIdentifier()); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `
}

// Load`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.ReferenceIdentifier()); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` returns the related `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.ReferenceIdentifier()); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `. If it is not already loaded,
// it will attempt to load it, provided the `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` column has been loaded first.
func (o *`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `Base) Load`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.ReferenceIdentifier()); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `(ctx context.Context) *`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.ReferenceType()); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` {
	if !o.`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `IsValid  {
		return nil
	}

	if o.`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.ReferenceVariableIdentifier()); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` == nil {
		// Load and cache
		o.`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.ReferenceVariableIdentifier()); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` = Load`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.ReferenceType()); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `(ctx, o.`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `)
	}
	return o.`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.ReferenceVariableIdentifier()); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `
}

`); err != nil {
		return
	}

	return
}

func (tmpl *TableBaseTemplate) genColNullSetter(table *model.Table, col *model.Column, _w io.Writer) (err error) {
	if !col.HasSetter() {
		return
	}

	//*** column_null_setter.tmpl

	if _, err = io.WriteString(_w, `
func (o *`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `Base) Set`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `(i interface{}) {
	o.`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `IsValid = true
	if i == nil {
		if !o.`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `IsNull {
			o.`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `IsNull = true
			o.`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `IsDirty = true
			o.`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` = `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.DefaultValueAsValue()); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `
`); err != nil {
		return
	}

	if col.IsReference() {

		if _, err = io.WriteString(_w, `			o.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, col.ReferenceVariableIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, ` = nil
`); err != nil {
			return
		}

	}

	if _, err = io.WriteString(_w, `		}
	} else {
`); err != nil {
		return
	}

	if col.IsManyEnum() {

		if _, err = io.WriteString(_w, `        v := slices.Sort(slices.Clone(i.(`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, col.GoType()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `))
`); err != nil {
			return
		}

	} else {

		if _, err = io.WriteString(_w, `		v := i.(`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, col.GoType()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `)
`); err != nil {
			return
		}

	}

	if col.Size > 0 {

		if _, err = io.WriteString(_w, `
`); err != nil {
			return
		}

		if col.ReceiverType == query.ColTypeBytes || col.ReceiverType == query.ColTypeUnknown {

			if _, err = io.WriteString(_w, `        if len(v) > `); err != nil {
				return
			}

			if _, err = io.WriteString(_w, table.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `MaxLength {
            panic("attempted to set `); err != nil {
				return
			}

			if _, err = io.WriteString(_w, table.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ` to a value larger than its maximum length")
        }
`); err != nil {
				return
			}

		} else if col.ReceiverType == query.ColTypeString && !col.IsManyEnum() {

			if _, err = io.WriteString(_w, `        if utf8.RuneCountInString(v) > `); err != nil {
				return
			}

			if _, err = io.WriteString(_w, table.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `MaxLength {
            panic("attempted to set `); err != nil {
				return
			}

			if _, err = io.WriteString(_w, table.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ` to a value larger than its maximum length in runes")
        }
`); err != nil {
				return
			}

		}

	}

	if _, err = io.WriteString(_w, `		if o.`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `IsNull ||
		    !o._restored ||
`); err != nil {
		return
	}

	if col.ReceiverType == query.ColTypeBytes || col.ReceiverType == query.ColTypeUnknown {

		if _, err = io.WriteString(_w, `		    !bytes.Equal(o.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `, v)
`); err != nil {
			return
		}

	} else if col.IsManyEnum() {

		if _, err = io.WriteString(_w, `            !slices.Equal(v, o.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `)
`); err != nil {
			return
		}

	} else {

		if _, err = io.WriteString(_w, `            o.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, ` != v
`); err != nil {
			return
		}

	}

	if _, err = io.WriteString(_w, fmt.Sprint(-1)); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `{
			    o.`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `IsNull = false
`); err != nil {
		return
	}

	if col.ReceiverType == query.ColTypeBytes || col.ReceiverType == query.ColTypeUnknown {

		if _, err = io.WriteString(_w, `                o.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, ` = slices.Clone(v)
`); err != nil {
			return
		}

	} else {

		if _, err = io.WriteString(_w, `			    o.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, ` = v
`); err != nil {
			return
		}

	}

	if _, err = io.WriteString(_w, `			    o.`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `IsDirty = true
`); err != nil {
		return
	}

	if col.IsReference() {

		if _, err = io.WriteString(_w, `			    o.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, col.ReferenceVariableIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, ` = nil
`); err != nil {
			return
		}

	}

	if _, err = io.WriteString(_w, `		}
	}
}

`); err != nil {
		return
	}

	return
}

func (tmpl *TableBaseTemplate) genColNullReferenceSetter(table *model.Table, col *model.Column, _w io.Writer) (err error) {

	//*** column_null_reference_setter.tmpl

	if _, err = io.WriteString(_w, `
// Set`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.ReferenceIdentifier()); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` will set the reference to `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.Reference.DecapIdentifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `. The referenced object
// will be saved when `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` is saved. Pass nil to break the connection.
func (o *`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `Base) Set`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.ReferenceIdentifier()); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `(`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.ReferenceVariableIdentifier()); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` *`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.ReferenceType()); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `) {
	o.`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.DecapIdentifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `IsValid = true
	if `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.ReferenceVariableIdentifier()); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` == nil {
		if !o.`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.DecapIdentifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `IsNull || !o._restored {
			o.`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.DecapIdentifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `IsNull = true
			o.`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.DecapIdentifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `IsDirty = true
			o.`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` = `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.DefaultValueAsValue()); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `
			o.`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.ReferenceVariableIdentifier()); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` = nil
		}
	} else {
		o.`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.ReferenceVariableIdentifier()); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `  = `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.ReferenceVariableIdentifier()); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `
		if o.`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.DecapIdentifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `IsNull || !o._restored || o.`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.DecapIdentifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` != `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.ReferenceVariableIdentifier()); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `.PrimaryKey() {
			o.`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.DecapIdentifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `IsNull = false
			o.`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` = `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.ReferenceVariableIdentifier()); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `.PrimaryKey()
			o.`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.DecapIdentifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `IsDirty = true
		}
	}
}

`); err != nil {
		return
	}

	return
}

func (tmpl *TableBaseTemplate) genColNotNullSetter(table *model.Table, col *model.Column, _w io.Writer) (err error) {

	//*** column_not_null_setter.tmpl

	if _, err = io.WriteString(_w, `// Set`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` sets the value of `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` in the object, to be saved later using the Save() function.
func (o *`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `Base) Set`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `(`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.GoType()); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `) {
	o.`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `IsValid = true
`); err != nil {
		return
	}

	if col.ReceiverType == query.ColTypeBytes || col.ReceiverType == query.ColTypeUnknown {

		if col.Size > 0 {

			if _, err = io.WriteString(_w, `    if len(`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `) > `); err != nil {
				return
			}

			if _, err = io.WriteString(_w, table.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `MaxLength {
        panic("attempted to set `); err != nil {
				return
			}

			if _, err = io.WriteString(_w, table.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ` to a value larger than its maximum length")
    }
`); err != nil {
				return
			}

		}

		if _, err = io.WriteString(_w, `	o.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, ` = `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `		// TODO: Copy bytes??
	o.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `IsDirty = true

`); err != nil {
			return
		}

	} else if col.IsManyEnum() {

		if _, err = io.WriteString(_w, `    v := slices.Sort(slices.Clone(`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `))
	if !slices.Equal(o.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `, v) ||
	        !o._restored {
		o.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, ` = v
		o.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `IsDirty = true
    }

`); err != nil {
			return
		}

	} else {

		if col.ReceiverType == query.ColTypeString && col.Size > 0 {

			if _, err = io.WriteString(_w, `    if utf8.RuneCountInString(`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `) > `); err != nil {
				return
			}

			if _, err = io.WriteString(_w, table.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `MaxLength {
        panic("attempted to set `); err != nil {
				return
			}

			if _, err = io.WriteString(_w, table.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ` to a value larger than its maximum length in runes")
    }
`); err != nil {
				return
			}

		}

		if _, err = io.WriteString(_w, `	if o.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, ` != `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, ` || !o._restored {
		o.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, ` = `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `
		o.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `IsDirty = true
`); err != nil {
			return
		}

		if col.IsReference() {

			if _, err = io.WriteString(_w, `		o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.ReferenceVariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ` = nil
`); err != nil {
				return
			}

		}

		if _, err = io.WriteString(_w, `	}

`); err != nil {
			return
		}

	}

	if _, err = io.WriteString(_w, `}

`); err != nil {
		return
	}

	return
}

func (tmpl *TableBaseTemplate) genColNotNullReferenceSetter(table *model.Table, col *model.Column, _w io.Writer) (err error) {

	//*** column_not_null_reference_setter.tmpl

	if _, err = io.WriteString(_w, `// Set`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.ReferenceIdentifier()); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` sets the value of `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.ReferenceIdentifier()); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` in the object, to be saved later using the Save() function.
func (o *`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `Base) Set`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.ReferenceIdentifier()); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `(`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.ReferenceVariableIdentifier()); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` *`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.ReferenceType()); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `)  {
	if `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.ReferenceVariableIdentifier()); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` == nil {
		panic("Cannot set `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.ReferenceIdentifier()); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` to a null value.")
	} else {
		o.`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.ReferenceVariableIdentifier()); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` = `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.ReferenceVariableIdentifier()); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `
		o.`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `IsValid = true
		if o.`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` != `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.ReferenceVariableIdentifier()); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `.PrimaryKey() {
			o.`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` = `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.ReferenceVariableIdentifier()); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `.PrimaryKey()
			o.`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `IsDirty = true
		}
	}
}

`); err != nil {
		return
	}

	return
}

func (tmpl *TableBaseTemplate) genAliasGetter(table *model.Table, _w io.Writer) (err error) {

	//*** alias_getter.tmpl

	if _, err = io.WriteString(_w, `
// GetAlias returns the alias for the given key.
func (o *`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `Base) GetAlias(key string) query.AliasValue {
	if a,ok := o._aliases[key]; ok {
		return query.NewAliasValue(a)
	} else {
		panic ("Alias " + key + " not found.")
	}
}

`); err != nil {
		return
	}

	return
}

func (tmpl *TableBaseTemplate) genIsNew(table *model.Table, _w io.Writer) (err error) {

	//*** is_new.tmpl

	if _, err = io.WriteString(_w, `
// IsNew returns true if the object will create a new record when saved.
func (o *`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `Base) IsNew() bool {
	return !o._restored
}

`); err != nil {
		return
	}

	return
}

func (tmpl *TableBaseTemplate) genManyManyAccessors(table *model.Table, _w io.Writer) (err error) {

	//*** many_many_accessors.tmpl

	for _, mm := range table.ManyManyReferences {

		if _, err = io.WriteString(_w, `    `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `
`); err != nil {
			return
		}

		//*** mm_accessor.tmpl

		if _, err = io.WriteString(_w, `
// `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, ` returns a single `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.ObjectType()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, ` object by primary key pk, if one was loaded.
// Otherwise, it will return nil.
func (o *`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `Base) `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `(pk `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.PrimaryKeyType()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `) *`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.ObjectType()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, ` {
	return o.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.VariableIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `.Get(pk)
}

// `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.IdentifierPlural); err != nil {
			return
		}

		if _, err = io.WriteString(_w, ` returns a slice of `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.ObjectType()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, ` objects if loaded. If not loaded, will return nil.
// The values will be ordered by the latest query or in the order they were assigned.
func (o *`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `Base) `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.IdentifierPlural); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `() []*`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.ObjectType()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, ` {
	return o.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.VariableIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `.Values()
}

// Set`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.IdentifierPlural); err != nil {
			return
		}

		if _, err = io.WriteString(_w, ` sets the associated objects to the given slice of `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.ObjectType()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, ` objects
// in preparation for saving. The associations will not be updated until Save() is called.
// Objects that are modified or are new will be saved before completing the association.
func (o *`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `Base) Set`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.IdentifierPlural); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `(objs []*`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.ObjectType()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `) {
    o.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.VariableIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `.Clear()
	o.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.VariableIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `IsDirty = true
	o.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.PkIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, ` = nil
    for _,obj := range objs {
        o.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.VariableIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `.Set(obj.PrimaryKey(), obj)
    }
}

// Set`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.IdentifierPlural); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `By`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.DestinationTable.PrimaryKeyColumn().Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, ` prepares to associate `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.ObjectType()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, ` objects by
// the primary keys in `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.DestinationTable.PrimaryKeyColumn().VariableIdentifierPlural()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `.
// If objects are currently loaded, they will be unloaded.
// The association does not take place until Save() is called. Calling Load before calling
// Save will load the items that will be associated in the database after the Save call.
// After calling Save, the objects will be unloaded, and you must call Load again if you want
// them loaded.
func (o *`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `Base) Set`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.IdentifierPlural); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `By`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.DestinationTable.PrimaryKeyColumn().Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `(`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.DestinationTable.PrimaryKeyColumn().VariableIdentifierPlural()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, ` []`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.DestinationTable.PrimaryKeyGoType()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `) {
	o.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.VariableIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `.Clear()
	o.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.PkIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, ` = `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.DestinationTable.PrimaryKeyColumn().VariableIdentifierPlural()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `
	o.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.VariableIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `IsDirty = true
}

// Load`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.IdentifierPlural); err != nil {
			return
		}

		if _, err = io.WriteString(_w, ` loads the `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.ObjectType()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, ` objects associated through the `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `-`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.MM.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, ` relationship.
func (o *`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `Base) Load`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.IdentifierPlural); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `(ctx context.Context) []*`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.ObjectType()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, ` {
    if o.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.VariableIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `IsDirty && o.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.PkIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, ` == nil {
        panic("dirty many-many relationships cannot be loaded; call Save() first")
    }
    
    var objs []*`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.ObjectType()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `

    if o.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.PkIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, ` != nil {
        // Load the objects that will be associated after a Save
        objs = Query`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.ObjectTypePlural()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `(ctx).
            Where(op.In(node.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.ObjectType()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `().PrimaryKeyNode(), o.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.PkIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `...)).
            Load()
    } else {
        objs = Query`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.ObjectTypePlural()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `(ctx).
            Where(op.Equal(node.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.ObjectType()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `().`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.MM.IdentifierPlural); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `(), o.PrimaryKey())).
            Load()
    }

    o.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.VariableIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `.Clear()
	for _,obj := range objs {
	    o.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.VariableIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `.Set(obj.PrimaryKey(), obj)
	}
	return o.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.VariableIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `.Values()
}

// Count`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.IdentifierPlural); err != nil {
			return
		}

		if _, err = io.WriteString(_w, ` counts the number of associated `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.VariableIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, ` objects in the database.
// Note that this returns what is reflected by the database at that instant, and not what
// is the count of the loaded objects.
func (o *`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `Base) Count`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.IdentifierPlural); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `(ctx context.Context) int {
	return int(Query`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.ObjectTypePlural()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `(ctx).
		Where(op.Equal(node.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.ObjectType()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `().`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.MM.IdentifierPlural); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `(), o.PrimaryKey())).
		Count(false))

}

`); err != nil {
			return
		}

	}

	if _, err = io.WriteString(_w, `
`); err != nil {
		return
	}

	return
}

func (tmpl *TableBaseTemplate) genReverseRefAccessors(table *model.Table, _w io.Writer) (err error) {

	//*** reverse_ref_accessors.tmpl

	for _, rev := range table.ReverseReferences {
		if rev.IsUnique {

			//*** rev_accessor_unique.tmpl

			if _, err = io.WriteString(_w, `
// `); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.ReverseIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ` returns the connected `); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.Table.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ` object, if one was loaded.
// Otherwise, it will return nil.
func (o *`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `Base) `); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.ReverseIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `() *`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.Table.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ` {
	if o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.ReverseVariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ` == nil {
		return nil
	}
	return o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.ReverseVariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `
}

// Load`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.ReverseIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ` returns the connected `); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.Table.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ` object, if one was loaded.
// Otherwise, it will load a new one and return it.
func (o *`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `Base) Load`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.ReverseIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `(ctx context.Context) *`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.Table.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ` {
    if o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.ReverseVariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ` != nil && o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.ReverseVariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `.IsDirty() {
        panic("The `); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.ReverseIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ` has changed. You must save it first before changing to a different one.")
    }
	if o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.ReverseVariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ` == nil {
	    var pk `); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.Table.PrimaryKeyColumn().GoType()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `
	    if o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.ReversePkIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ` != nil {
	        pk = *o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.ReversePkIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `
	    } else {
	        pk = o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.Table.PrimaryKeyColumn().Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `()
	    }
		o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.ReverseVariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ` = Load`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.Table.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `By`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `(ctx, pk)
	}
	return o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.ReverseVariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `
}

// Set`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.ReverseIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ` associates obj with this `); err != nil {
				return
			}

			if _, err = io.WriteString(_w, table.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `
// through the reverse relationship in `); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.Table.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `.
//
// The association is temporary until you call Save().
`); err != nil {
				return
			}

			if rev.IsNullable {

				if _, err = io.WriteString(_w, `// Since this is a unique relationship, if a different `); err != nil {
					return
				}

				if _, err = io.WriteString(_w, rev.Table.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, ` object is currently pointing to this `); err != nil {
					return
				}

				if _, err = io.WriteString(_w, table.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `,
// that `); err != nil {
					return
				}

				if _, err = io.WriteString(_w, rev.Table.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `'s `); err != nil {
					return
				}

				if _, err = io.WriteString(_w, rev.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, ` value will be set to null when Save is called.
// If you did not use a join to query the attached `); err != nil {
					return
				}

				if _, err = io.WriteString(_w, rev.Table.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, ` in the first place, used a conditional join,
// or joined with an expansion, be particularly careful, since you may be inadvertently  changing an item
// that is not currently attached to this `); err != nil {
					return
				}

				if _, err = io.WriteString(_w, fmt.Sprint(table.Identifier)); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `.
`); err != nil {
					return
				}

			} else {

				if _, err = io.WriteString(_w, `// WARNING! Since this is a non-nullable unique relationship,
// if a different `); err != nil {
					return
				}

				if _, err = io.WriteString(_w, rev.Table.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, ` object is currently pointing to this `); err != nil {
					return
				}

				if _, err = io.WriteString(_w, table.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `,
// Save() will panic. You should delete that object first.
`); err != nil {
					return
				}

			}

			if _, err = io.WriteString(_w, `func (o *`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `Base) Set`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.ReverseIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `(obj *`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.Table.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `) {
    if o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.ReverseVariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ` != nil && o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.ReverseVariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `.IsDirty() {
        panic("The `); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.ReverseIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ` has changed. You must save it first before changing to a different one.")
    }
	o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.ReverseVariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ` = obj
	o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.ReversePkIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ` = nil
	o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.ReverseVariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `IsDirty = true
}

// Set`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.ReverseIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `By`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.Table.PrimaryKeyColumn().Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `
// associates this `); err != nil {
				return
			}

			if _, err = io.WriteString(_w, table.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ` with the `); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.Table.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `
// that has primary key `); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.Table.PrimaryKeyColumn().VariableIdentifierPlural()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `.
//
// The association is temporary until you call Save().
// If a `); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.Table.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ` is loaded, it will be unloaded.
//
`); err != nil {
				return
			}

			if rev.IsNullable {

				if _, err = io.WriteString(_w, `// Since this is a unique relationship, if a different `); err != nil {
					return
				}

				if _, err = io.WriteString(_w, rev.Table.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, ` object is currently pointing to this `); err != nil {
					return
				}

				if _, err = io.WriteString(_w, table.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `,
// that `); err != nil {
					return
				}

				if _, err = io.WriteString(_w, rev.Table.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `'s `); err != nil {
					return
				}

				if _, err = io.WriteString(_w, rev.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, ` value will be set to null when Save is called.
// If you did not use a join to query the attached `); err != nil {
					return
				}

				if _, err = io.WriteString(_w, rev.Table.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, ` in the first place, used a conditional join,
// or joined with an expansion, be particularly careful, since you may be inadvertently  changing an item
// that is not currently loaded in this `); err != nil {
					return
				}

				if _, err = io.WriteString(_w, fmt.Sprint(table.Identifier)); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `.
`); err != nil {
					return
				}

			} else {

				if _, err = io.WriteString(_w, `// WARNING! Since this is a non-nullable unique relationship,
// if a different `); err != nil {
					return
				}

				if _, err = io.WriteString(_w, rev.Table.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, ` object is currently pointing to this `); err != nil {
					return
				}

				if _, err = io.WriteString(_w, table.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `,
// Save() will panic. You should delete that object first.
`); err != nil {
					return
				}

			}

			if _, err = io.WriteString(_w, `func (o *`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `Base) Set`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.ReverseIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `By`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.Table.PrimaryKeyColumn().Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `(`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.Table.PrimaryKeyColumn().VariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ` `); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.Table.PrimaryKeyGoType()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `) {
    if o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.ReverseVariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ` != nil && o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.ReverseVariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `.IsDirty() {
        panic("The `); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ` value has changed. You must save it first before changing to a different one.")
    }
	o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.ReverseVariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ` = nil
	o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.ReverseVariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `IsDirty = true
	o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.ReversePkIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ` = &`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.Table.PrimaryKeyColumn().VariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `
}

`); err != nil {
				return
			}

		} else { // Unique

			//*** rev_accessor.tmpl

			if _, err = io.WriteString(_w, `// `); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.Reference.ReverseIdentifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ` returns a single `); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.Table.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ` object by primary key, if one was loaded.
// Otherwise, it will return nil. It will not return `); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.Table.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ` objects that are not saved.
func (o *`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `Base) `); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.Reference.ReverseIdentifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `(pk `); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.Table.PrimaryKeyGoType()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `) *`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.Table.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ` {
	v := o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.ReverseVariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `.Get(pk)
	return v
}

// `); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.ReverseIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ` returns a slice of `); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.Table.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ` objects if loaded.
func (o *`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `Base) `); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.ReverseIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `() []*`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.Table.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ` {
	return o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.ReverseVariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `.Values()
}

// Load`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.ReverseIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ` loads a new slice of `); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.Table.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ` objects and returns it.
func (o *`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `Base) Load`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.ReverseIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `(ctx context.Context, conditions ...interface{}) []*`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.Table.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ` {
	if o.IsNew() {
		return nil
	}
	for obj := range o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.ReverseVariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `.ValuesIter() {
        if obj.IsDirty() {
            panic("You cannot load over items that have changed but have not been saved.")
        }
    }

	qb := query`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.Table.IdentifierPlural); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `(ctx)
	var cond *query.OperationNode
	if o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.ReversePkIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ` != nil {
	    cond = op.In(node.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.Table.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `().PrimaryKeyNode(), o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.ReversePkIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `...)
	} else {
        cond = op.Equal(node.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.Table.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `().`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `(), o.PrimaryKey())
    }
    if conditions != nil {
        conditions = append(conditions, cond)
        cond = op.And(conditions...)
    }

    objs := qb.Where(cond).Load()
    o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.ReverseVariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `.Clear()

    for _,obj := range objs {
        pk := obj.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.Table.PrimaryKeyColumn().Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `()
        o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.ReverseVariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `.Set(pk, obj)
    }
	o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.ReversePkIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ` = nil

    if o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.ReverseVariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `.Len() == 0 {
        return nil
    }
	return o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.ReverseVariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `.Values()
}

// Count`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.ReverseIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ` returns the number of `); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.Table.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ` objects in the database connected to this object.
func (o *`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `Base) Count`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.ReverseIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `(ctx context.Context) int {
    return Count`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.Table.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `By`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `(ctx, o.PrimaryKey())
}

// Set`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.ReverseIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ` associates the objects in objs with the `); err != nil {
				return
			}

			if _, err = io.WriteString(_w, table.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `.
`); err != nil {
				return
			}

			if rev.IsNullable {

				if _, err = io.WriteString(_w, `// If it has items already associated with it that will not be associated after a save,
// the foreign keys for those items will be set to null.
// If you did not use a join to query the items in the first place, used a conditional join,
// or joined with an expansion, be particularly careful, since you may be changing items
// that are not currently attached to this `); err != nil {
					return
				}

				if _, err = io.WriteString(_w, table.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `.
`); err != nil {
					return
				}

			} else {

				if _, err = io.WriteString(_w, `// WARNING! If it has items already associated with it that will not be associated after a save,
// Save will panic. Be sure to delete those items or otherwise fix those pointers before calling save.
`); err != nil {
					return
				}

			}

			if _, err = io.WriteString(_w, `func (o *`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `Base) Set`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.ReverseIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `(objs []*`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.Table.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `) {
    for obj := range o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.ReverseVariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `.ValuesIter() {
        if obj.IsDirty() {
            panic("You cannot overwrite items that have changed but have not been saved.")
        }
    }

    o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.ReverseVariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `.Clear()
    for _,obj := range objs {
        pk := obj.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.Table.PrimaryKeyColumn().Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `()
        o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.ReverseVariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `.Set(pk, obj)
    }
    o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.ReversePkIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ` = nil
	o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.ReverseVariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `IsDirty = true
}


// Set`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.ReverseIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `By`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.Table.PrimaryKeyColumn().Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ` associates this `); err != nil {
				return
			}

			if _, err = io.WriteString(_w, table.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ` with the `); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.Table.IdentifierPlural); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ` that have primary keys in `); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.Table.PrimaryKeyColumn().VariableIdentifierPlural()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `.
// The association is done through the `); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.Table.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ` reverse relationship.
//
// The association is temporary until you call Save().
//
`); err != nil {
				return
			}

			if rev.IsNullable {

				if _, err = io.WriteString(_w, `// If there are `); err != nil {
					return
				}

				if _, err = io.WriteString(_w, rev.Table.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, ` objects currently associated with this `); err != nil {
					return
				}

				if _, err = io.WriteString(_w, table.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, ` that are not included
// in `); err != nil {
					return
				}

				if _, err = io.WriteString(_w, rev.Table.PrimaryKeyColumn().VariableIdentifierPlural()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `, those objects will have their `); err != nil {
					return
				}

				if _, err = io.WriteString(_w, rev.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, ` value set to null when Save is called.
// If you did not use a join to query the items in the first place, used a conditional join,
// or joined with an expansion, be particularly careful, since you may be inadvertently changing items
// that are not currently loaded in this `); err != nil {
					return
				}

				if _, err = io.WriteString(_w, table.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, ` object.
`); err != nil {
					return
				}

			} else {

				if _, err = io.WriteString(_w, `// WARNING! If it has items already associated with it that will not be associated after a save,
// Save will panic. You should delete those items first.
`); err != nil {
					return
				}

			}

			if _, err = io.WriteString(_w, `func (o *`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `Base) Set`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.ReverseIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `By`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.Table.PrimaryKeyColumn().Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `(`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.Table.PrimaryKeyColumn().VariableIdentifierPlural()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ` []`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.Table.PrimaryKeyGoType()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `) {
    for obj := range o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.ReverseVariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `.ValuesIter() {
        if obj.IsDirty() {
            panic("You cannot overwrite items that have changed but have not been saved.")
        }
    }

    o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.ReverseVariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `.Clear()
	o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.ReversePkIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ` = `); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.Table.PrimaryKeyColumn().VariableIdentifierPlural()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `
	o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.ReverseVariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `IsDirty = true
}

`); err != nil {
				return
			}

		}
	}

	return
}

func (tmpl *TableBaseTemplate) genQuery(table *model.Table, _w io.Writer) (err error) {

	//*** query.tmpl

	if _, err = io.WriteString(_w, `// Load`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` returns a `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` from the database.
// joinOrSelectNodes lets you provide nodes for joining to other tables or selecting specific fields. Table nodes will
// be considered Join nodes, and column nodes will be Select nodes. See [`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.IdentifierPlural); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `Builder.Join] and [`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.IdentifierPlural); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `Builder.Select] for more info.
func Load`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `(ctx context.Context, `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.PrimaryKeyColumn().VariableIdentifier()); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.PrimaryKeyGoType()); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `, joinOrSelectNodes ...query.Node) *`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` {
	return query`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.IdentifierPlural); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `(ctx).
	    Where(op.Equal(node.`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `().`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.PrimaryKeyColumn().Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `(), `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.PrimaryKeyColumn().VariableIdentifier()); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `)).
	    joinOrSelect(joinOrSelectNodes...).
	    Get()
}

// Has`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` returns true if a `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` with the given primaryKey exists in the database.
// doc: type=`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `
func Has`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `(ctx context.Context, `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.PrimaryKeyColumn().VariableIdentifier()); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.PrimaryKeyGoType()); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `) bool {
    return query`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.IdentifierPlural); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `(ctx).
	     Where(op.Equal(node.`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `().`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.PrimaryKeyColumn().Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `(), `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.PrimaryKeyColumn().VariableIdentifier()); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `)).
         Count(false) == 1
}

`); err != nil {
		return
	}

	for _, idx := range table.Indexes {

		if idx.IsUnique {

			if _, err = io.WriteString(_w, `// Load`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, table.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `By`); err != nil {
				return
			}

			for _, col := range idx.Columns {

				if _, err = io.WriteString(_w, col.Identifier); err != nil {
					return
				}

			}

			if _, err = io.WriteString(_w, ` queries for a single `); err != nil {
				return
			}

			if _, err = io.WriteString(_w, table.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ` object by the given unique index values.
// joinOrSelectNodes lets you provide nodes for joining to other tables or selecting specific fields. Table nodes will
// be considered Join nodes, and column nodes will be Select nodes. See [`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, table.IdentifierPlural); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `Builder.Join] and [`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, table.IdentifierPlural); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `Builder.Select] for more info.
// If you need a more elaborate query, use Query`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, table.IdentifierPlural); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `() to start a query builder.
func Load`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, table.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `By`); err != nil {
				return
			}

			for _, col := range idx.Columns {

				if _, err = io.WriteString(_w, col.Identifier); err != nil {
					return
				}

			}

			if _, err = io.WriteString(_w, ` (ctx context.Context`); err != nil {
				return
			}

			for _, col := range idx.Columns {

				if _, err = io.WriteString(_w, `, `); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.DecapIdentifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, ` `); err != nil {
					return
				}

				if col.IsNullable {

					if _, err = io.WriteString(_w, `interface{}`); err != nil {
						return
					}

				} else {

					if _, err = io.WriteString(_w, col.GoType()); err != nil {
						return
					}

				}

				if _, err = io.WriteString(_w, ` `); err != nil {
					return
				}

			}

			if _, err = io.WriteString(_w, `, joinOrSelectNodes ...query.Node) *`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, table.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ` {
    q := query`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, table.IdentifierPlural); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `(ctx)
`); err != nil {
				return
			}

			for _, col := range idx.Columns {

				if col.IsNullable {

					if _, err = io.WriteString(_w, `    if `); err != nil {
						return
					}

					if _, err = io.WriteString(_w, col.DecapIdentifier); err != nil {
						return
					}

					if _, err = io.WriteString(_w, ` == nil {
        q = q.Where(op.IsNull(node.`); err != nil {
						return
					}

					if _, err = io.WriteString(_w, table.Identifier); err != nil {
						return
					}

					if _, err = io.WriteString(_w, `().`); err != nil {
						return
					}

					if _, err = io.WriteString(_w, col.Identifier); err != nil {
						return
					}

					if _, err = io.WriteString(_w, `()))
    } else {
        q = q.Where(op.Equal(node.`); err != nil {
						return
					}

					if _, err = io.WriteString(_w, table.Identifier); err != nil {
						return
					}

					if _, err = io.WriteString(_w, `().`); err != nil {
						return
					}

					if _, err = io.WriteString(_w, col.Identifier); err != nil {
						return
					}

					if _, err = io.WriteString(_w, `(), `); err != nil {
						return
					}

					if _, err = io.WriteString(_w, col.DecapIdentifier); err != nil {
						return
					}

					if _, err = io.WriteString(_w, `))
    }
`); err != nil {
						return
					}

				} else {

					if _, err = io.WriteString(_w, `    q = q.Where(op.Equal(node.`); err != nil {
						return
					}

					if _, err = io.WriteString(_w, table.Identifier); err != nil {
						return
					}

					if _, err = io.WriteString(_w, `().`); err != nil {
						return
					}

					if _, err = io.WriteString(_w, col.Identifier); err != nil {
						return
					}

					if _, err = io.WriteString(_w, `(), `); err != nil {
						return
					}

					if _, err = io.WriteString(_w, col.DecapIdentifier); err != nil {
						return
					}

					if _, err = io.WriteString(_w, `))
`); err != nil {
						return
					}

				}

			}

			if _, err = io.WriteString(_w, `    return q.joinOrSelect(joinOrSelectNodes...).Get()
}

// Has`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, table.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `By`); err != nil {
				return
			}

			for _, col := range idx.Columns {

				if _, err = io.WriteString(_w, col.Identifier); err != nil {
					return
				}

			}

			if _, err = io.WriteString(_w, ` returns true if the
// given unique index values exist in the database.
// doc: type=`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, table.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `
func Has`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, table.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `By`); err != nil {
				return
			}

			for _, col := range idx.Columns {

				if _, err = io.WriteString(_w, col.Identifier); err != nil {
					return
				}

			}

			if _, err = io.WriteString(_w, ` (ctx context.Context`); err != nil {
				return
			}

			for _, col := range idx.Columns {

				if _, err = io.WriteString(_w, `, `); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.DecapIdentifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, ` `); err != nil {
					return
				}

				if col.IsNullable {

					if _, err = io.WriteString(_w, `interface{}`); err != nil {
						return
					}

				} else {

					if _, err = io.WriteString(_w, col.GoType()); err != nil {
						return
					}

				}

				if _, err = io.WriteString(_w, ` `); err != nil {
					return
				}

			}

			if _, err = io.WriteString(_w, `) bool {
    q := query`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, table.IdentifierPlural); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `(ctx)
`); err != nil {
				return
			}

			for _, col := range idx.Columns {

				if col.IsNullable {

					if _, err = io.WriteString(_w, `    if `); err != nil {
						return
					}

					if _, err = io.WriteString(_w, col.DecapIdentifier); err != nil {
						return
					}

					if _, err = io.WriteString(_w, ` == nil {
        q = q.Where(op.IsNull(node.`); err != nil {
						return
					}

					if _, err = io.WriteString(_w, table.Identifier); err != nil {
						return
					}

					if _, err = io.WriteString(_w, `().`); err != nil {
						return
					}

					if _, err = io.WriteString(_w, col.Identifier); err != nil {
						return
					}

					if _, err = io.WriteString(_w, `()))
    } else {
        q = q.Where(op.Equal(node.`); err != nil {
						return
					}

					if _, err = io.WriteString(_w, table.Identifier); err != nil {
						return
					}

					if _, err = io.WriteString(_w, `().`); err != nil {
						return
					}

					if _, err = io.WriteString(_w, col.Identifier); err != nil {
						return
					}

					if _, err = io.WriteString(_w, `(), `); err != nil {
						return
					}

					if _, err = io.WriteString(_w, col.DecapIdentifier); err != nil {
						return
					}

					if _, err = io.WriteString(_w, `))
    }
`); err != nil {
						return
					}

				} else {

					if _, err = io.WriteString(_w, `    q = q.Where(op.Equal(node.`); err != nil {
						return
					}

					if _, err = io.WriteString(_w, table.Identifier); err != nil {
						return
					}

					if _, err = io.WriteString(_w, `().`); err != nil {
						return
					}

					if _, err = io.WriteString(_w, col.Identifier); err != nil {
						return
					}

					if _, err = io.WriteString(_w, `(), `); err != nil {
						return
					}

					if _, err = io.WriteString(_w, col.DecapIdentifier); err != nil {
						return
					}

					if _, err = io.WriteString(_w, `))
`); err != nil {
						return
					}

				}

			}

			if _, err = io.WriteString(_w, `    return q.Count(false) == 1
}
`); err != nil {
				return
			}

		}

		if _, err = io.WriteString(_w, ` `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `
`); err != nil {
			return
		}

	}

	return
}

func (tmpl *TableBaseTemplate) genBuilder(table *model.Table, _w io.Writer) (err error) {

	//*** query_builder.tmpl

	builderName := table.IdentifierPlural + "Builder"

	if _, err = io.WriteString(_w, `
// The `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, builderName); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` uses the QueryBuilderI interface from the database to build a query.
// All query operations go through this query builder.
// End a query by calling either Load, Count, or Delete
type `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, builderName); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` struct {
	builder query.QueryBuilderI
}

func new`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `Builder(ctx context.Context) *`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, builderName); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` {
	b := &`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, builderName); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `{
		builder: db.GetDatabase("`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, fmt.Sprint(table.DbKey)); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `").NewBuilder(ctx),
	}
	return b.Join(node.`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `())
}

// Load terminates the query builder, performs the query, and returns a slice of `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` objects. If there are
// any errors, they are returned in the context object. If no results come back from the query, it will return
// an empty slice
func (b *`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, builderName); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `) Load() (`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.VariableNamePlural()); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `[]*`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `) {
	results := b.builder.Load()
	if results == nil {
		return
	}
	for _,item := range results {
		o := new(`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `)
		o.load(item, o, nil, "")
		`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.VariableNamePlural()); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` = append(`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.VariableNamePlural()); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `, o)
	}
	return
}

// LoadI terminates the query builder, performs the query, and returns a slice of interfaces. If there are
// any errors, they are returned in the context object. If no results come back from the query, it will return
// an empty slice.
func (b *`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, builderName); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `) LoadI() (`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.VariableNamePlural()); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` []interface{}) {
	results := b.builder.Load()
	if results == nil {
		return
	}
	for _,item := range results {
		o := new(`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `)
		o.load(item, o, nil, "")
		`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.VariableNamePlural()); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` = append(`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.VariableNamePlural()); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `, o)
	}
	return
}


// LoadCursor terminates the query builder, performs the query, and returns a cursor to the query.
//
// A query cursor is useful for dealing with large amounts of query results. However, there are some
// limitations to its use. When working with SQL databases, you cannot use a cursor while querying
// many-to-many or reverse relationships that will create an array of values.
//
// Call Next() on the returned cursor object to step through the results. Make sure you call Close
// on the cursor object when you are done. You should use
//   defer cursor.Close()
// to make sure the cursor gets closed.
func (b *`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, builderName); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `) LoadCursor() `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.VariableNamePlural()); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `Cursor {
	cursor := b.builder.LoadCursor()

	return `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.VariableNamePlural()); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `Cursor{cursor}
}

type `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.VariableNamePlural()); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `Cursor struct {
	query.CursorI
}

// Next returns the current `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` object and moves the cursor to the next one.
//
// If there are no more records, it returns nil.
func (c `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.VariableNamePlural()); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `Cursor) Next() *`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` {
	row := c.CursorI.Next()
	if row == nil {
		return nil
	}
	o := new(`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `)
	o.load(row, o, nil, "")
	return o
}

// Get is a convenience method to return only the first item found in a query.
// The entire query is performed, so you should generally use this only if you know
// you are selecting on one or very few items.
func (b *`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, builderName); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `) Get() *`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` {
	results := b.Load()
	if results != nil && len(results) > 0 {
	    obj := results[0]
		return obj
	} else {
		return nil
	}
}

// Join adds node n to the node tree so that its fields will appear in the query.
// Optionally add conditions to filter what gets included.
func (b *`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, builderName); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `) Join(n query.Node, conditions... query.Node) *`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, builderName); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` {
    if !query.NodeIsTableNodeI(n) {
        panic("you can only join Table, Reference, ReverseReference and ManyManyReference nodes")
    }

    if query.NodeTableName(query.RootNode(n)) != `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, fmt.Sprintf("%#v", table.QueryName)); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` {
        panic("you can only join a node that is rooted at node.`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `()")
    }

	var condition query.Node
	if len(conditions) > 1 {
		condition = op.And(conditions)
	} else if len(conditions) == 1 {
		condition = conditions[0]
	}
	b.builder.Join(n, condition)
	return b
}

// Where adds a condition to filter what gets selected.
func (b *`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, builderName); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `)  Where(c query.Node) *`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, builderName); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` {
	b.builder.Condition(c)
	return b
}

// OrderBy specifies how the resulting data should be sorted.
func (b *`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, builderName); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `)  OrderBy(nodes... query.Node) *`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, builderName); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` {
	b.builder.OrderBy(nodes...)
	return b
}

// Limit will return a subset of the data, limited to the offset and number of rows specified
func (b *`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, builderName); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `)  Limit(maxRowCount int, offset int) *`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, builderName); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` {
	b.builder.Limit(maxRowCount, offset)
	return b
}

// Select optimizes the query to only return the specified fields. Once you put a Select in your query, you must
// specify all the fields that you will eventually read out. Be careful when selecting fields in joined tables, as joined
// tables will also contain pointers back to the parent table, and so the parent node should have the same field selected
// as the child node if you are querying those fields.
func (b *`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, builderName); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `)  Select(nodes... query.Node) *`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, builderName); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` {
	b.builder.Select(nodes...)
	return b
}

// Alias lets you add a node with a custom name. After the query, you can read out the data using GetAlias() on a
// returned object. Alias is useful for adding calculations or subqueries to the query.
func (b *`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, builderName); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `)  Alias(name string, n query.Node) *`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, builderName); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` {
	b.builder.Alias(name, n)
	return b
}

// Distinct removes duplicates from the results of the query. Adding a Select() may help you get to the data you want, although
// using Distinct with joined tables is often not effective, since we force joined tables to include primary keys in the query, and this
// often ruins the effect of Distinct.
func (b *`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, builderName); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `)  Distinct() *`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, builderName); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` {
	b.builder.Distinct()
	return b
}

// GroupBy controls how results are grouped when using aggregate functions in an Alias() call.
func (b *`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, builderName); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `)  GroupBy(nodes... query.Node) *`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, builderName); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` {
	b.builder.GroupBy(nodes...)
	return b
}

// Having does additional filtering on the results of the query.
func (b *`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, builderName); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `)  Having(node query.Node)  *`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, builderName); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` {
	 b.builder.Having(node)
	 return b
}

// Count terminates a query and returns just the number of items selected.
//
// distinct wll count the number of distinct items, ignoring duplicates.
//
// nodes will select individual fields, and should be accompanied by a GroupBy.
func (b *`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, builderName); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `)  Count(distinct bool, nodes... query.Node) uint {
	return b.builder.Count(distinct, nodes...)
}

// Delete uses the query builder to delete a group of records that match the criteria
func (b *`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, builderName); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `)  Delete() {
	 b.builder.Delete()
	 broadcast.BulkChange(b.builder.Context(), "`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.DbKey); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `", "`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.QueryName); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `")
}

// Subquery uses the query builder to define a subquery within a larger query. You MUST include what
// you are selecting by adding Alias or Select functions on the subquery builder. Generally you would use
// this as a node to an Alias function on the surrounding query builder.
func (b *`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, builderName); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `)  Subquery() *query.SubqueryNode {
	 return b.builder.Subquery()
}


// joinOrSelect is a private helper function for the Load* functions
func (b *`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, builderName); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `) joinOrSelect(nodes ...query.Node) *`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, builderName); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` {
	for _,n := range nodes {
		switch n.(type) {
		case query.TableNodeI:
			b.builder.Join(n, nil)
		case *query.ColumnNode:
			b.Select(n)
		}
	}
	return b
}


`); err != nil {
		return
	}

	return
}

func (tmpl *TableBaseTemplate) genCount(table *model.Table, _w io.Writer) (err error) {

	//*** count.tmpl

	for _, col := range table.Columns {

		if _, err = io.WriteString(_w, `
// Count`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, fmt.Sprint(table.Identifier)); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `By`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, fmt.Sprint(col.Identifier)); err != nil {
			return
		}

		if _, err = io.WriteString(_w, ` queries the database and returns the number of `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, fmt.Sprint(table.Identifier)); err != nil {
			return
		}

		if _, err = io.WriteString(_w, ` objects that
// have `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, col.DecapIdentifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `.
// doc: type=`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, fmt.Sprint(table.Identifier)); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `
func Count`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, fmt.Sprint(table.Identifier)); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `By`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, fmt.Sprint(col.Identifier)); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `(ctx context.Context, `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, ` `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, col.GoType()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `) int {
`); err != nil {
			return
		}

		if col.IsReference() {

			if _, err = io.WriteString(_w, `    if `); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ` == `); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.DefaultValueAsValue()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ` {
        return 0
    }
`); err != nil {
				return
			}

		}

		if _, err = io.WriteString(_w, `	return int(query`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.IdentifierPlural); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `(ctx).Where(op.Equal(node.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `().`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, col.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `(), `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, col.DecapIdentifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `)).Count(false))
}

`); err != nil {
			return
		}

	}

	return
}

func (tmpl *TableBaseTemplate) genLoader(table *model.Table, _w io.Writer) (err error) {

	//*** loader.tmpl

	if _, err = io.WriteString(_w, `// load is the private loader that transforms data coming from the database into a tree structure reflecting the relationships
// between the object chain requested by the user in the query.
// Care must be taken in the query, as Select clauses might not be honored if the child object has fields selected which the parent object does not have.
func (o *`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `Base) load (m map[string]interface{}, objThis *`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, fmt.Sprint(table.Identifier)); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `, objParent interface{}, parentKey string) {

`); err != nil {
		return
	}

	for _, col := range table.Columns {

		if _, err = io.WriteString(_w, `	`); err != nil {
			return
		}

		if col.IsNullable {

			if _, err = io.WriteString(_w, `
	    `); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `
`); err != nil {
				return
			}

			//*** null_column_loader.tmpl

			if _, err = io.WriteString(_w, `
	if v, ok := m["`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.QueryName); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `"]; ok {
		if v == nil {
			o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ` = `); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.DefaultValueAsValue()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `
			o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `IsNull = true
			o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `IsValid = true
			o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `IsDirty = false
`); err != nil {
				return
			}

			if col.IsEnum() {

				if _, err = io.WriteString(_w, `		} else if i, ok2 := v.(`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.ReceiverType.GoType()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `); ok2 {
`); err != nil {
					return
				}

				if col.IsManyEnum() {

					if _, err = io.WriteString(_w, `            err := json.Unmarshal([]byte(i), &o.`); err != nil {
						return
					}

					if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
						return
					}

					if _, err = io.WriteString(_w, `)
            _ = err
`); err != nil {
						return
					}

				} else {

					if _, err = io.WriteString(_w, `		    o.`); err != nil {
						return
					}

					if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
						return
					}

					if _, err = io.WriteString(_w, ` = `); err != nil {
						return
					}

					if _, err = io.WriteString(_w, col.GoType()); err != nil {
						return
					}

					if _, err = io.WriteString(_w, `(i)
`); err != nil {
						return
					}

				}

			} else {

				if _, err = io.WriteString(_w, `		} else if o.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `, ok = v.(`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.GoType()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `); ok {
`); err != nil {
					return
				}

			}

			if _, err = io.WriteString(_w, `			o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `IsNull = false
			o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `IsValid = true
			o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `IsDirty = false
		} else {
			panic("Wrong type found for `); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.QueryName); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `.")
		}
	} else {
		o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `IsValid = false
		o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `IsNull = true
		o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ` = `); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.DefaultValueAsValue()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `
	}

`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `	`); err != nil {
				return
			}

		} else {

			if _, err = io.WriteString(_w, `
        `); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `
`); err != nil {
				return
			}

			//*** not_null_column_loader.tmpl

			if _, err = io.WriteString(_w, `
	if v, ok := m["`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.QueryName); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `"]; ok && v != nil {
`); err != nil {
				return
			}

			if col.IsEnum() {

				if _, err = io.WriteString(_w, `    	if i, ok2 := v.(`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.ReceiverType.GoType()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `); ok2 {
            o.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, ` = `); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.GoType()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `(i)
`); err != nil {
					return
				}

			} else {

				if _, err = io.WriteString(_w, `    	if o.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `, ok = v.(`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.GoType()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `); ok {
`); err != nil {
					return
				}

			}

			if _, err = io.WriteString(_w, `			o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `IsValid = true
			o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `IsDirty = false
        `); err != nil {
				return
			}

			if col.IsPrimaryKey {

				if _, err = io.WriteString(_w, `
            o._originalPK = o.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `
        `); err != nil {
					return
				}

			}

			if _, err = io.WriteString(_w, `
		} else {
			panic("Wrong type found for `); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.QueryName); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `.")
		}
	} else {
		o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `IsValid = false
		o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ` = `); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.DefaultValueAsValue()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `
	}

`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `    `); err != nil {
				return
			}

		}

		if _, err = io.WriteString(_w, `

	`); err != nil {
			return
		}

		if col.IsReference() {

			if _, err = io.WriteString(_w, `
	    `); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `
`); err != nil {
				return
			}

			//*** reference_loader.tmpl

			if _, err = io.WriteString(_w, `
	if v, ok := m["`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.ReferenceIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `"]; ok {
		if `); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.ReferenceVariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `, ok2 := v.(map[string]interface{}); ok2 {
			o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.ReferenceVariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ` = new(`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.ReferenceType()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `)
			o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.ReferenceVariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `.load(`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.ReferenceVariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `, o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.ReferenceVariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `, objThis, "`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.ReverseIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `")
			o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `IsValid = true
			o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `IsDirty = false
		} else {
			panic("Wrong type found for `); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.ReferenceIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ` object.")
		}
	} else {
		o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.ReferenceVariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ` = nil
	}

`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `    `); err != nil {
				return
			}

		}

		if _, err = io.WriteString(_w, `
`); err != nil {
			return
		}

	}

	if _, err = io.WriteString(_w, `
`); err != nil {
		return
	}

	if len(table.ManyManyReferences) > 0 {

		if _, err = io.WriteString(_w, `// Many-Many references
`); err != nil {
			return
		}

	}

	for _, mm := range table.ManyManyReferences {

		if _, err = io.WriteString(_w, `	`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `
`); err != nil {
			return
		}

		//*** mm.tmpl

		if _, err = io.WriteString(_w, `
	if v, ok := m["`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.IdentifierPlural); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `"]; ok {
		if v2, ok2 := v.([]db.ValueMap); ok2 {
			o.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.VariableIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `.Clear()

			for _,v3 := range v2 {
				obj := new(`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.ObjectType()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `)
				obj.load(v3, obj, objThis, "`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.MM.IdentifierPlural); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `")
				o.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.VariableIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `.Set(obj.PrimaryKey(), obj)
			}
			o.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.PkIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, ` = nil
		} else {
			panic("Wrong type found for `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.VariableIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, ` object.")
		}
	} else {
		o.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.VariableIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `.Clear()
		o.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.PkIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, ` = nil
	}

`); err != nil {
			return
		}

	}

	if _, err = io.WriteString(_w, `
`); err != nil {
		return
	}

	if len(table.ReverseReferences) > 0 {

		if _, err = io.WriteString(_w, `// Reverse references
`); err != nil {
			return
		}

	}

	for _, col := range table.ReverseReferences {

		if _, err = io.WriteString(_w, `	`); err != nil {
			return
		}

		if col.IsUnique {

			if _, err = io.WriteString(_w, `
	    `); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `
`); err != nil {
				return
			}

			//*** reverse_unique.tmpl

			if _, err = io.WriteString(_w, `
	if v, ok := m["`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.ReverseIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `"]; ok {
		if v2, ok2 := v.(db.ValueMap); ok2 {
			o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.ReverseVariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ` = new(`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.Table.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `)
			o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.ReverseVariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `.load(v2, o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.ReverseVariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `, objThis, "`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.ReferenceIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `")
			o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.ReverseVariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `IsDirty = false
		} else {
			panic("Wrong type found for `); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ` object.")
		}
	} else {
		o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.ReverseVariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ` = nil
		o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.ReverseVariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `IsDirty = false
	}

`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `	`); err != nil {
				return
			}

		} else {

			if _, err = io.WriteString(_w, ` `); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `
	    `); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `
`); err != nil {
				return
			}

			//*** reverse.tmpl

			if _, err = io.WriteString(_w, `
`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `
	if v, ok := m["`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.ReverseIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `"]; ok {
		switch v2 := v.(type) {
		case []db.ValueMap: // array expansion
		    o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.ReverseVariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `.Clear()
			o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.ReverseVariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `IsDirty = false
			for _,v3 := range v2 {
				obj := new(`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.Table.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `)
				obj.load(v3, obj, objThis, "`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.ReferenceIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `")
				o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.ReverseVariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `.Set(obj.PrimaryKey(), obj)
			}
		case db.ValueMap:	// single expansion
			obj := new(`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.Table.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `)
			obj.load(v2, obj, objThis, "`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.ReferenceIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `")
		    o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.ReverseVariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `.Clear()
			o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.ReverseVariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `.Set(obj.PrimaryKey(), obj)
			o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.ReverseVariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `IsDirty = false
		default:
			panic("Wrong type found for `); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.ReverseVariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ` object.")
		}
	} else {
		o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.ReverseVariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `.Clear()
		o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.ReverseVariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `IsDirty = false
	}

`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `	`); err != nil {
				return
			}

		}

		if _, err = io.WriteString(_w, `
`); err != nil {
			return
		}

	}

	if _, err = io.WriteString(_w, `
`); err != nil {
		return
	}

	//*** extra.tmpl

	if _, err = io.WriteString(_w, `	if v, ok := m["`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, fmt.Sprint(query.AliasResults)); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `"]; ok {
		o._aliases = map[string]interface{}(v.(db.ValueMap))
	}

	o._restored = true
`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `
}

`); err != nil {
		return
	}

	return
}

func (tmpl *TableBaseTemplate) genSave(table *model.Table, _w io.Writer) (err error) {

	//*** save.tmpl

	// TODO: Make sure dirty related objects are saved first
	// TODO: Make sure id field cannot be set or updated

	if _, err = io.WriteString(_w, `
// Save will update or insert the object, depending on the state of the object.
// If it has any auto-generated ids, those will be updated.
func (o *`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `Base) Save(ctx context.Context)  {
	if o._restored {
		o.update(ctx)
	} else {
		o.insert(ctx)
	}
}

`); err != nil {
		return
	}

	//*** update.tmpl

	if _, err = io.WriteString(_w, `// update will update the values in the database, saving any changed values.
func (o *`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `Base) update(ctx context.Context) {
    if !o._restored {
        panic ("cannot update a record that was not originally read from the database.")
    }

    var modifiedFields map[string]interface{}
    d := Database()
    db.ExecuteTransaction(ctx, d, func() {

    // TODO: Perform all reads and consistency checks before saves
`); err != nil {
		return
	}

	//*** update_ref.tmpl

	if _, err = io.WriteString(_w, `
`); err != nil {
		return
	}

	for _, col := range table.Columns {

		if _, err = io.WriteString(_w, `    `); err != nil {
			return
		}

		if col.IsReference() {

			if _, err = io.WriteString(_w, `
        // Save loaded `); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.ReferenceIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ` object to get its new pk and update it here.
        if o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.ReferenceVariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ` != nil {
            o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.ReferenceVariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `.Save(ctx)
            id := o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.ReferenceVariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `.PrimaryKey()
            o.Set`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `(id)
        }
    `); err != nil {
				return
			}

		}

		if _, err = io.WriteString(_w, `
`); err != nil {
			return
		}

	}

	if _, err = io.WriteString(_w, `
        // Save all modified fields to the database
        modifiedFields = o.getModifiedFields()
        if len(modifiedFields) != 0 {
            d.Update(ctx, "`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.QueryName); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `", modifiedFields, map[string]any{"`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.PrimaryKeyColumn().QueryName); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `": o._originalPK})
        }

`); err != nil {
		return
	}

	//*** update_rev.tmpl

	for _, col := range table.ReverseReferences {

		if _, err = io.WriteString(_w, `        if o.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, col.ReverseVariableIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `IsDirty {
            // relation connection changed
    `); err != nil {
			return
		}

		if col.IsNullable {

			if _, err = io.WriteString(_w, `
        `); err != nil {
				return
			}

			if col.IsUnique {

				if _, err = io.WriteString(_w, `
            `); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `
`); err != nil {
					return
				}

				//*** update_rev_null_unique.tmpl

				if _, err = io.WriteString(_w, `                obj := Query`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.Table.IdentifierPlural); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `(ctx).
                        Where(op.Equal(node.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.Table.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `().`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `(), o.PrimaryKey())).
                        Get()
                if obj != nil  && obj.PrimaryKey() != o.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.ReverseVariableIdentifier()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `.PrimaryKey() {
                   obj.Set`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `(nil)
                   obj.Save(ctx)
                }
                if o.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.ReversePkIdentifier()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, ` != nil {
                    if o.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.ReverseVariableIdentifier()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, ` != nil && o.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.ReverseVariableIdentifier()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `.IsDirty() {
                        // Save detached record
                        o.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.ReverseVariableIdentifier()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `.Save(ctx)
                    }
                    o.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.ReverseVariableIdentifier()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, ` = Load`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.Table.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `(ctx, *o.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.ReversePkIdentifier()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `, node.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.Table.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `().PrimaryKeyNode())
                }
                o.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.ReverseVariableIdentifier()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `IsDirty = true // force a change in case data is stale
                o.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.ReverseVariableIdentifier()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `.Set`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `(o.PrimaryKey())
                o.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.ReverseVariableIdentifier()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `.Save(ctx)

`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `        `); err != nil {
					return
				}

			} else {

				if _, err = io.WriteString(_w, `
            `); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `
`); err != nil {
					return
				}

				//*** update_rev_null.tmpl

				if _, err = io.WriteString(_w, `                if o.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.ReversePkIdentifier()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, ` != nil {
                    // Get objects we are going to associate if not already loaded
                    objs := Query`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.Table.IdentifierPlural); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `(ctx).
                          Where(op.In(node.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.Table.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `().PrimaryKeyNode(), o.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.ReversePkIdentifier()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `...)).
                          Select(node.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.Table.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `().`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `()).
                          Load()
                    _ = objs
                    // TODO: save new group of objects
                }
                objs := Query`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.Table.IdentifierPlural); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `(ctx).
                          Where(op.Equal(node.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.Table.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `().`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `(), o.PrimaryKey())).
                          Select(node.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.Table.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `().`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `()).
                          Load()

                for _,obj := range objs {
                    if !o.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.ReverseVariableIdentifier()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `.Has(obj.PrimaryKey()) {
                        // The old object is not in the group of new objects
                        obj.Set`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `(nil)
                        obj.Save(ctx)
                    }
                }
                for obj := range o.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.ReverseVariableIdentifier()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `.ValuesIter() {
                    obj.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `IsDirty = true // force a change in case data is stale
                    obj.Set`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `(o.PrimaryKey())
                    obj.Save(ctx)
                }
`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `        `); err != nil {
					return
				}

			}

			if _, err = io.WriteString(_w, `
    `); err != nil {
				return
			}

		} else {

			if _, err = io.WriteString(_w, ` `); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `
        `); err != nil {
				return
			}

			if col.IsUnique {

				if _, err = io.WriteString(_w, `
            `); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `
`); err != nil {
					return
				}

				//*** update_rev_not_null_unique.tmpl

				if _, err = io.WriteString(_w, `                    // Since the other side of the relationship cannot be null, if there is an object already attached,
                    // we panic. 
                    // TODO: return an error instead
                    obj := Query`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.Table.IdentifierPlural); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `(ctx).
                              Where(op.Equal(node.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.Table.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `().`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `(), o.PrimaryKey())).
                              Get()
                    if obj != nil  && obj.PrimaryKey() != o.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.ReverseVariableIdentifier()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `.PrimaryKey() {
                        panic("cannot set a unique non-null reference when another object is already set to it. Record " + obj.PrimaryKey() + " is pointing to " + o.PrimaryKey())
                    }
`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `        `); err != nil {
					return
				}

			} else {

				if _, err = io.WriteString(_w, `
            `); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `
`); err != nil {
					return
				}

				//*** update_rev_not_null.tmpl

				if _, err = io.WriteString(_w, `                    // Since the other side of the relationship cannot be null, there cannot be objects that will be detached
                    // TODO: Make this check earlier to lock the rows being changed

                    objs := Query`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.Table.IdentifierPlural); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `(ctx).
                               Where(op.Equal(node.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.Table.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `().`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `(), o.PrimaryKey())).
                               Select(node.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.Table.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `().`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `()).
                               Load()
                    for _,obj := range objs {
                       if !o.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.ReverseVariableIdentifier()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `.Has(obj.PrimaryKey()) {
                           // The old object is not in the group of new objects
                           panic("cannot remove a non-null reference. ")
                       }
                    }

                    for obj := range o.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.ReverseVariableIdentifier()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `.ValuesIter() {
                       obj.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `IsDirty = true // force a change in case data is stale
                       obj.Set`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `(o.PrimaryKey())
                       obj.Save(ctx)
                    }
`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `
        `); err != nil {
					return
				}

			}

			if _, err = io.WriteString(_w, `
    `); err != nil {
				return
			}

		}

		if _, err = io.WriteString(_w, `
        } else {
    `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `
`); err != nil {
			return
		}

		//*** update_rev_save.tmpl

		if _, err = io.WriteString(_w, `
        `); err != nil {
			return
		}

		if col.IsUnique {

			if _, err = io.WriteString(_w, `
            // save related object
            if o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.ReverseVariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ` != nil {
                o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.ReverseVariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `.Save(ctx)
            }
        `); err != nil {
				return
			}

		} else {

			if _, err = io.WriteString(_w, `
            // save related objects
            for obj := range o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.ReverseVariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `.ValuesIter() {
                obj.Save(ctx)
            }
        `); err != nil {
				return
			}

		}

		if _, err = io.WriteString(_w, `
`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `        }
`); err != nil {
			return
		}

	}

	if _, err = io.WriteString(_w, ` `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `
`); err != nil {
		return
	}

	//*** update_mm.tmpl

	if _, err = io.WriteString(_w, `
`); err != nil {
		return
	}

	for _, mm := range table.ManyManyReferences {

		if _, err = io.WriteString(_w, `    `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `
`); err != nil {
			return
		}

		//*** update_mm_col.tmpl

		if _, err = io.WriteString(_w, `
        if o.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.VariableIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `IsDirty {
            for obj := range o.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.VariableIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `.ValuesIter() {
                obj.Save(ctx)
            }
            // TODO: fix associations
        }
`); err != nil {
			return
		}

	}

	if _, err = io.WriteString(_w, `
    }) // transaction

	o.resetDirtyStatus()
	if len(modifiedFields) != 0 {
        broadcast.Update(ctx, "`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.DbKey); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `", "`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.QueryName); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `", o._originalPK, all.SortedKeys(modifiedFields)...)
	}
}

`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `
`); err != nil {
		return
	}

	//*** insert.tmpl

	if _, err = io.WriteString(_w, `// insert will insert the object into the database. Related items will be saved.
func (o *`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `Base) insert(ctx context.Context) {
    d := Database()
	db.ExecuteTransaction(ctx, d, func() {

`); err != nil {
		return
	}

	for _, col := range table.Columns {

		if _, err = io.WriteString(_w, `    `); err != nil {
			return
		}

		if col.IsReference() {

			if _, err = io.WriteString(_w, `
    if o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.ReferenceVariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ` != nil {
        o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.ReferenceVariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `.Save(ctx)
        id := o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.ReferenceVariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `.PrimaryKey()
        o.Set`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `(id)
    }
    `); err != nil {
				return
			}

		}

		if _, err = io.WriteString(_w, `
`); err != nil {
			return
		}

	}

	if _, err = io.WriteString(_w, `
`); err != nil {
		return
	}

	for _, col := range table.Columns {

		if _, err = io.WriteString(_w, `    `); err != nil {
			return
		}

		if !col.IsAutoId && !col.IsNullable && col.DefaultValue == nil {

			if _, err = io.WriteString(_w, `
        `); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `
    if !o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `IsValid {
        panic("a value for `); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ` is required, and there is no default value. Call Set`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `() before inserting the record.")
    }
    `); err != nil {
				return
			}

		}

		if _, err = io.WriteString(_w, `
`); err != nil {
			return
		}

	}

	if _, err = io.WriteString(_w, `
    m := o.getValidFields()

`); err != nil {
		return
	}

	if table.HasAutoId() {

		if _, err = io.WriteString(_w, `	id := d.Insert(ctx, "`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.QueryName); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `", m)
	o.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.PrimaryKeyColumn().VariableIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, ` = id
	o._originalPK = id
`); err != nil {
			return
		}

	} else {

		if _, err = io.WriteString(_w, `	d.Insert(ctx, "`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.QueryName); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `", m)
	id := o.PrimaryKey()
	o._originalPK = id
`); err != nil {
			return
		}

	}

	if _, err = io.WriteString(_w, `
`); err != nil {
		return
	}

	//*** insert_rev.tmpl

	if _, err = io.WriteString(_w, `
`); err != nil {
		return
	}

	for _, col := range table.ReverseReferences {

		if _, err = io.WriteString(_w, `    `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `

    `); err != nil {
			return
		}

		if col.IsUnique {

			if _, err = io.WriteString(_w, `

    if o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.ReverseVariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ` != nil {
        o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.ReverseVariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `.Set`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `(id)
        o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.ReverseVariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `.Save(ctx)
    }

    `); err != nil {
				return
			}

		} else {

			if _, err = io.WriteString(_w, `

    o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.ReverseVariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `.Clear()
    for _,obj := range o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.ReverseVariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `.All() {
        obj.Set`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `(id)
        obj.Save(ctx)
        o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.ReverseVariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `.Set(obj.PrimaryKey(), obj)
    }

    `); err != nil {
				return
			}

		}

		if _, err = io.WriteString(_w, `

`); err != nil {
			return
		}

	}

	if _, err = io.WriteString(_w, `
`); err != nil {
		return
	}

	//*** insert_mm.tmpl

	for _, mm := range table.ManyManyReferences {

		//*** insert_mm_col.tmpl

		if _, err = io.WriteString(_w, `    o.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.VariableIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `.Clear()
    for _,obj := range o.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.VariableIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `.All() {
        obj.Save(ctx)

    }

    // TODO: Fix associations
`); err != nil {
			return
		}

	}

	if _, err = io.WriteString(_w, `

    }) // transaction

	o.resetDirtyStatus()
	o._restored = true
	broadcast.Insert(ctx, "`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.DbKey); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `", "`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.QueryName); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `", o.PrimaryKey())
}

`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `
`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `
`); err != nil {
		return
	}

	//*** get_modified_fields_func.tmpl

	if _, err = io.WriteString(_w, `// getModifiedFields returns the database columns that have been modified. This
// will determine which specific fields are sent to the database to be changed.
func (o *`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `Base) getModifiedFields() (fields map[string]interface{}) {
	fields = map[string]interface{}{}
`); err != nil {
		return
	}

	for _, col := range table.Columns {

		if _, err = io.WriteString(_w, `	if o.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `IsDirty {
`); err != nil {
			return
		}

		if col.IsNullable {

			if _, err = io.WriteString(_w, `        if 	o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `IsNull {
            fields["`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.QueryName); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `"] = nil
        } else {
  		    fields["`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.QueryName); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `"] = o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `
        }
`); err != nil {
				return
			}

		} else {

			if _, err = io.WriteString(_w, `		fields["`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.QueryName); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `"] = o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `
`); err != nil {
				return
			}

		}

		if _, err = io.WriteString(_w, `	}
`); err != nil {
			return
		}

	}

	if _, err = io.WriteString(_w, `	return
}

`); err != nil {
		return
	}

	//*** get_valid_fields_func.tmpl

	if _, err = io.WriteString(_w, `// getValidFields returns the fields that have valid data in them.
func (o *`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `Base) getValidFields() (fields map[string]interface{}) {
	fields = map[string]interface{}{}
`); err != nil {
		return
	}

	for _, col := range table.Columns {
		if col.IsAutoId {
			continue
		}
		if _, err = io.WriteString(_w, `
	if o.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `IsValid {
`); err != nil {
			return
		}

		if col.IsNullable {

			if _, err = io.WriteString(_w, `        if 	o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `IsNull {
            fields["`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.QueryName); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `"] = nil
        } else {

`); err != nil {
				return
			}

			if col.IsManyEnum() {

				if _, err = io.WriteString(_w, `            b,err := json.Marshal(o.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `)
            if err == nil && b != nil {
                fields["`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.QueryName); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `"] = string(b)
            }
`); err != nil {
					return
				}

			} else {

				if _, err = io.WriteString(_w, `  		    fields["`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.QueryName); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `"] = o.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `
`); err != nil {
					return
				}

			}

			if _, err = io.WriteString(_w, `
        }
`); err != nil {
				return
			}

		} else {

			if _, err = io.WriteString(_w, `
`); err != nil {
				return
			}

			if col.IsManyEnum() {

				if _, err = io.WriteString(_w, `        b,err := json.Marshal(o.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `)
        if err == nil && b != nil {
            fields["`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.QueryName); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `"] = string(b)
        }
`); err != nil {
					return
				}

			} else {

				if _, err = io.WriteString(_w, `        fields["`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.QueryName); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `"] = o.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `
`); err != nil {
					return
				}

			}

			if _, err = io.WriteString(_w, `
`); err != nil {
				return
			}

		}

		if _, err = io.WriteString(_w, `	}
`); err != nil {
			return
		}

	}

	if _, err = io.WriteString(_w, `	return
}

`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `
`); err != nil {
		return
	}

	return
}

func (tmpl *TableBaseTemplate) genDelete(table *model.Table, _w io.Writer) (err error) {

	//*** delete.tmpl

	if _, err = io.WriteString(_w, `// Delete deletes the record from the database.
func (o *`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `Base) Delete(ctx context.Context) {
	if !o._restored {
		panic ("Cannot delete a record that has no primary key value.")
	}
	d := Database()
`); err != nil {
		return
	}

	if len(table.ReverseReferences) == 0 && len(table.ManyManyReferences) == 0 {

		if _, err = io.WriteString(_w, `	d.Delete(ctx, "`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, fmt.Sprint(table.QueryName)); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `", map[string]any{"`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.PrimaryKeyColumn().Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `":o.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.PrimaryKeyColumn().DecapIdentifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, ` })
`); err != nil {
			return
		}

	} else {

		if _, err = io.WriteString(_w, `    db.ExecuteTransaction(ctx, d, func() {
	`); err != nil {
			return
		}

		for _, rev := range table.ReverseReferences {

			if _, err = io.WriteString(_w, `
        `); err != nil {
				return
			}

			if rev.IsUnique {

				if _, err = io.WriteString(_w, `
            `); err != nil {
					return
				}

				if rev.IsNullable {

					if _, err = io.WriteString(_w, `
            {
                // Set the related objects pointer to us to NULL in the database
                obj := Query`); err != nil {
						return
					}

					if _, err = io.WriteString(_w, rev.Table.IdentifierPlural); err != nil {
						return
					}

					if _, err = io.WriteString(_w, `(ctx).
                          Where(op.Equal(node.`); err != nil {
						return
					}

					if _, err = io.WriteString(_w, rev.Table.Identifier); err != nil {
						return
					}

					if _, err = io.WriteString(_w, `().`); err != nil {
						return
					}

					if _, err = io.WriteString(_w, rev.Identifier); err != nil {
						return
					}

					if _, err = io.WriteString(_w, `(), o.`); err != nil {
						return
					}

					if _, err = io.WriteString(_w, table.PrimaryKeyColumn().VariableIdentifier()); err != nil {
						return
					}

					if _, err = io.WriteString(_w, `)).
                          Select(node.`); err != nil {
						return
					}

					if _, err = io.WriteString(_w, rev.Table.Identifier); err != nil {
						return
					}

					if _, err = io.WriteString(_w, `().`); err != nil {
						return
					}

					if _, err = io.WriteString(_w, rev.Identifier); err != nil {
						return
					}

					if _, err = io.WriteString(_w, `()).
                          Get()
                if obj != nil {
                   obj.Set`); err != nil {
						return
					}

					if _, err = io.WriteString(_w, rev.Identifier); err != nil {
						return
					}

					if _, err = io.WriteString(_w, `(nil)
                   obj.Save(ctx)
                }
                // Set this object's pointer to the reverse object to nil to mark that we broke the link
                o.`); err != nil {
						return
					}

					if _, err = io.WriteString(_w, rev.ReverseVariableIdentifier()); err != nil {
						return
					}

					if _, err = io.WriteString(_w, ` = nil
            }
            `); err != nil {
						return
					}

				} else {

					if _, err = io.WriteString(_w, `
            {
                 obj := Query`); err != nil {
						return
					}

					if _, err = io.WriteString(_w, rev.Table.IdentifierPlural); err != nil {
						return
					}

					if _, err = io.WriteString(_w, `(ctx).
                           Where(op.Equal(node.`); err != nil {
						return
					}

					if _, err = io.WriteString(_w, rev.Table.Identifier); err != nil {
						return
					}

					if _, err = io.WriteString(_w, `().`); err != nil {
						return
					}

					if _, err = io.WriteString(_w, rev.Identifier); err != nil {
						return
					}

					if _, err = io.WriteString(_w, `(), o.`); err != nil {
						return
					}

					if _, err = io.WriteString(_w, table.PrimaryKeyColumn().VariableIdentifier()); err != nil {
						return
					}

					if _, err = io.WriteString(_w, `)).
                           Get()
                 if obj != nil {
                     obj.Delete(ctx)
                 }
                 // Set this object's pointer to the reverse object to nil to mark that we broke the link
                 o.`); err != nil {
						return
					}

					if _, err = io.WriteString(_w, rev.ReverseVariableIdentifier()); err != nil {
						return
					}

					if _, err = io.WriteString(_w, ` = nil
            }
            `); err != nil {
						return
					}

				}

				if _, err = io.WriteString(_w, `
        `); err != nil {
					return
				}

			} else {

				if _, err = io.WriteString(_w, ` `); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `
            `); err != nil {
					return
				}

				if rev.IsNullable {

					if _, err = io.WriteString(_w, `
            {
                objs := Query`); err != nil {
						return
					}

					if _, err = io.WriteString(_w, rev.Table.IdentifierPlural); err != nil {
						return
					}

					if _, err = io.WriteString(_w, `(ctx).
                          Where(op.Equal(node.`); err != nil {
						return
					}

					if _, err = io.WriteString(_w, rev.Table.Identifier); err != nil {
						return
					}

					if _, err = io.WriteString(_w, `().`); err != nil {
						return
					}

					if _, err = io.WriteString(_w, rev.Identifier); err != nil {
						return
					}

					if _, err = io.WriteString(_w, `(), o.`); err != nil {
						return
					}

					if _, err = io.WriteString(_w, table.PrimaryKeyColumn().VariableIdentifier()); err != nil {
						return
					}

					if _, err = io.WriteString(_w, `)).
                          Select(node.`); err != nil {
						return
					}

					if _, err = io.WriteString(_w, rev.Table.Identifier); err != nil {
						return
					}

					if _, err = io.WriteString(_w, `().`); err != nil {
						return
					}

					if _, err = io.WriteString(_w, rev.Identifier); err != nil {
						return
					}

					if _, err = io.WriteString(_w, `()).
                          Load()
                for _,obj := range objs {
                   obj.Set`); err != nil {
						return
					}

					if _, err = io.WriteString(_w, rev.Identifier); err != nil {
						return
					}

					if _, err = io.WriteString(_w, `(nil)
                   obj.Save(ctx)
                }
                o.`); err != nil {
						return
					}

					if _, err = io.WriteString(_w, rev.ReverseVariableIdentifier()); err != nil {
						return
					}

					if _, err = io.WriteString(_w, `.Clear()
            }
            `); err != nil {
						return
					}

				} else {

					if _, err = io.WriteString(_w, `
            {
                objs := Query`); err != nil {
						return
					}

					if _, err = io.WriteString(_w, rev.Table.IdentifierPlural); err != nil {
						return
					}

					if _, err = io.WriteString(_w, `(ctx).
                          Where(op.Equal(node.`); err != nil {
						return
					}

					if _, err = io.WriteString(_w, rev.Table.Identifier); err != nil {
						return
					}

					if _, err = io.WriteString(_w, `().`); err != nil {
						return
					}

					if _, err = io.WriteString(_w, rev.Identifier); err != nil {
						return
					}

					if _, err = io.WriteString(_w, `(), o.`); err != nil {
						return
					}

					if _, err = io.WriteString(_w, table.PrimaryKeyColumn().VariableIdentifier()); err != nil {
						return
					}

					if _, err = io.WriteString(_w, `)).
                          Load()
                for _,obj := range objs {
                    obj.Delete(ctx)
                }
                o.`); err != nil {
						return
					}

					if _, err = io.WriteString(_w, rev.ReverseVariableIdentifier()); err != nil {
						return
					}

					if _, err = io.WriteString(_w, `.Clear()
            }
            `); err != nil {
						return
					}

				}

				if _, err = io.WriteString(_w, `
        `); err != nil {
					return
				}

			}

			if _, err = io.WriteString(_w, `
    `); err != nil {
				return
			}

		}

		if _, err = io.WriteString(_w, `

    `); err != nil {
			return
		}

		for _, mm := range table.ManyManyReferences {

			if _, err = io.WriteString(_w, `
        db.AssociateOnly(ctx,
            d,
            "`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, mm.AssnTableName); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `",
            "`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, mm.AssnSourceColumnName); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `",
            o.PrimaryKey(),
            "`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, mm.PrimaryKey()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `",
            []`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, mm.ObjectType()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `(nil))

    `); err != nil {
				return
			}

		}

		if _, err = io.WriteString(_w, `

	d.Delete(ctx, "`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.QueryName); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `", map[string]any{"`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.PrimaryKeyColumn().Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `": o.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.PrimaryKeyColumn().VariableIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, ` })
	})
`); err != nil {
			return
		}

	}

	if _, err = io.WriteString(_w, `	broadcast.Delete(ctx, "`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.DbKey); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `", "`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.QueryName); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `", fmt.Sprint(o.`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.PrimaryKeyColumn().VariableIdentifier()); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `))
}

// delete`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` deletes the associated record from the database.
func delete`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `(ctx context.Context, pk `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.PrimaryKeyGoType()); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `) {
`); err != nil {
		return
	}

	if len(table.ReverseReferences) == 0 && len(table.ManyManyReferences) == 0 {

		if _, err = io.WriteString(_w, `	d := db.GetDatabase("`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.DbKey); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `")
	d.Delete(ctx, "`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.QueryName); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `", map[string]any{"`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.PrimaryKeyColumn().Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `": pk} )
	broadcast.Delete(ctx, "`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.DbKey); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `", "`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.QueryName); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `", fmt.Sprint(pk))
`); err != nil {
			return
		}

	} else {

		if _, err = io.WriteString(_w, `    if obj := Load`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `(ctx, pk, node.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `().PrimaryKeyNode()); obj != nil {
        obj.Delete(ctx)
    }
`); err != nil {
			return
		}

	}

	if _, err = io.WriteString(_w, `}
`); err != nil {
		return
	}

	return
}

func (tmpl *TableBaseTemplate) genDirty(table *model.Table, _w io.Writer) (err error) {

	//*** dirty.tmpl

	if _, err = io.WriteString(_w, `// resetDirtyStatus resets the dirty status of every field in the object.
func (o *`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `Base) resetDirtyStatus() {
`); err != nil {
		return
	}

	for _, col := range table.Columns {

		if _, err = io.WriteString(_w, `	o.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `IsDirty = false
`); err != nil {
			return
		}

	}

	for _, ref := range table.ReverseReferences {

		if _, err = io.WriteString(_w, `	o.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, ref.ReverseVariableIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `IsDirty = false
`); err != nil {
			return
		}

	}

	for _, mm := range table.ManyManyReferences {

		if _, err = io.WriteString(_w, `	o.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.VariableIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `IsDirty = false
`); err != nil {
			return
		}

	}

	if _, err = io.WriteString(_w, `
}

// IsDirty returns true if the object has been changed since it was read from the database.
func (o *`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `Base) IsDirty() (dirty bool) {
    dirty = `); err != nil {
		return
	}

	for _i, _j := range table.Columns {
		_ = _j

		if _, err = io.WriteString(_w, `o.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, _j.VariableIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `IsDirty `); err != nil {
			return
		}

		if _j.IsReference() {

			if _, err = io.WriteString(_w, ` ||
	    (o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, _j.ReferenceVariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ` != nil && o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, _j.ReferenceVariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `.IsDirty()) `); err != nil {
				return
			}

		}

		if _i < len(table.Columns)-1 {
			if _, err = io.WriteString(_w, "|| \n"); err != nil {
				return
			}
		}
	}
	if _, err = io.WriteString(_w, `

`); err != nil {
		return
	}

	if len(table.ReverseReferences) > 0 {

		if _, err = io.WriteString(_w, `	dirty = dirty ||
	    `); err != nil {
			return
		}

		for _i, _j := range table.ReverseReferences {
			_ = _j

			if _, err = io.WriteString(_w, `o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, _j.ReverseVariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `IsDirty`); err != nil {
				return
			}

			if _i < len(table.ReverseReferences)-1 {
				if _, err = io.WriteString(_w, "|| \n"); err != nil {
					return
				}
			}
		}
		if _, err = io.WriteString(_w, `

`); err != nil {
			return
		}

		for _, ref := range table.ReverseReferences {

			if ref.IsUnique {

				if _, err = io.WriteString(_w, `    dirty = dirty || (o.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, ref.ReverseVariableIdentifier()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, ` != nil && o.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, ref.ReverseVariableIdentifier()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `.IsDirty())
`); err != nil {
					return
				}

			} else {

				if _, err = io.WriteString(_w, `    for obj := range o.`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, ref.ReverseVariableIdentifier()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `.ValuesIter() {
        dirty = dirty || obj.IsDirty()
    }
`); err != nil {
					return
				}

			}

		}

	}

	if _, err = io.WriteString(_w, `
`); err != nil {
		return
	}

	if len(table.ManyManyReferences) > 0 {

		if _, err = io.WriteString(_w, `	dirty = dirty ||
	    `); err != nil {
			return
		}

		for _i, _j := range table.ManyManyReferences {
			_ = _j

			if _, err = io.WriteString(_w, `o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, _j.VariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `IsDirty`); err != nil {
				return
			}

			if _i < len(table.ManyManyReferences)-1 {
				if _, err = io.WriteString(_w, "|| \n"); err != nil {
					return
				}
			}
		}
		if _, err = io.WriteString(_w, `

    `); err != nil {
			return
		}

		for _, mm := range table.ManyManyReferences {

			if _, err = io.WriteString(_w, `

    for obj := range o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, mm.VariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `.ValuesIter() {
        dirty = dirty || obj.IsDirty()
    }
    `); err != nil {
				return
			}

		}

		if _, err = io.WriteString(_w, `
`); err != nil {
			return
		}

	}

	if _, err = io.WriteString(_w, `
    return
}

`); err != nil {
		return
	}

	return
}

func (tmpl *TableBaseTemplate) genGet(table *model.Table, _w io.Writer) (err error) {

	//*** get.tmpl

	if _, err = io.WriteString(_w, `// Get returns the value of a field in the object based on the field's name.
// It will also get related objects if they are loaded.
// Invalid fields and objects are returned as nil
func (o *`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `Base) Get(key string) interface{} {

    switch key {

`); err != nil {
		return
	}

	for _, col := range table.Columns {

		if _, err = io.WriteString(_w, `    case "`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, col.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `":
        if !o.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, col.DecapIdentifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `IsValid {
            return nil
        }
        return o.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, col.DecapIdentifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `

	`); err != nil {
			return
		}

		if col.IsReference() {

			if _, err = io.WriteString(_w, `
    case "`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.ReferenceIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `":
        return o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.ReferenceIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `()
    `); err != nil {
				return
			}

		}

		if _, err = io.WriteString(_w, `

`); err != nil {
			return
		}

	}

	if _, err = io.WriteString(_w, `
`); err != nil {
		return
	}

	for _, col := range table.ReverseReferences {

		if _, err = io.WriteString(_w, `    case "`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, col.ReverseIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `":
`); err != nil {
			return
		}

		if col.IsUnique {

			if _, err = io.WriteString(_w, `        return o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.ReverseVariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `
`); err != nil {
				return
			}

		} else {

			if _, err = io.WriteString(_w, `        return o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.ReverseVariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `.Values()
`); err != nil {
				return
			}

		}

	}

	if _, err = io.WriteString(_w, `
`); err != nil {
		return
	}

	for _, mm := range table.ManyManyReferences {

		if _, err = io.WriteString(_w, `    case "`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.IdentifierPlural); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `":
        return o.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.VariableIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `.Values()
`); err != nil {
			return
		}

	}

	if _, err = io.WriteString(_w, `
    }
    return nil
}
`); err != nil {
		return
	}

	return
}

func (tmpl *TableBaseTemplate) genBinary(table *model.Table, _w io.Writer) (err error) {

	//*** marshal_binary.tmpl

	if _, err = io.WriteString(_w, `// MarshalBinary serializes the object into a buffer that is deserializable using UnmarshalBinary.
// It should be used for transmitting database objects over the wire, or for temporary storage. It does not send
// a version number, so if the data format changes, its up to you to invalidate the old stored objects.
// The framework uses this to serialize the object when it is stored in a control.
func (o *`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `Base) MarshalBinary() ([]byte, error) {
	buf := new(bytes.Buffer)
	encoder := gob.NewEncoder(buf)
`); err != nil {
		return
	}

	for _, col := range table.Columns {

		//*** marshal_binary_col.tmpl

		if _, err = io.WriteString(_w, `
    if err := encoder.Encode(o.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `); err != nil {
        return nil, fmt.Errorf("error encoding `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `: %w", err)
    }
`); err != nil {
			return
		}

		if col.IsNullable {

			if _, err = io.WriteString(_w, `    if err := encoder.Encode(o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `IsNull); err != nil {
        return nil, fmt.Errorf("error encoding `); err != nil {
				return
			}

			if _, err = io.WriteString(_w, table.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `IsNull: %w", err)
    }
`); err != nil {
				return
			}

		}

		if _, err = io.WriteString(_w, `    if err := encoder.Encode(o.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `IsValid); err != nil {
        return nil, fmt.Errorf("error encoding `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `IsValid: %w", err)
    }
    if err := encoder.Encode(o.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `IsDirty); err != nil {
        return nil, fmt.Errorf("error encoding `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `IsDirty: %w", err)
    }

`); err != nil {
			return
		}

		if col.IsReference() {

			if _, err = io.WriteString(_w, `    if o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.ReferenceVariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ` == nil {
        if err := encoder.Encode(false); err != nil {
            return nil, err
        }
    } else {
        if err := encoder.Encode(true); err != nil {
            return nil, err
        }
        if err := encoder.Encode(o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.ReferenceVariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `); err != nil {
            return nil, fmt.Errorf("error encoding `); err != nil {
				return
			}

			if _, err = io.WriteString(_w, table.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.ReferenceVariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `: %w", err)
        }
    }
`); err != nil {
				return
			}

		}

		if _, err = io.WriteString(_w, `
`); err != nil {
			return
		}

	}

	for _, rev := range table.ReverseReferences {
		if rev.IsUnique {

			//*** marshal_binary_rev_unique.tmpl

			if _, err = io.WriteString(_w, `    if o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.ReverseVariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ` == nil {
        if err := encoder.Encode(false); err != nil {
            return nil, err
        }
    } else {
        if err := encoder.Encode(true); err != nil {
            return nil, err
        }
        if err := encoder.Encode(o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.ReverseVariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `); err != nil {
            return nil, fmt.Errorf("error encoding `); err != nil {
				return
			}

			if _, err = io.WriteString(_w, table.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.ReverseVariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `: %w", err)
        }
    }

    if o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.ReversePkIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ` == nil {
        if err := encoder.Encode(false); err != nil {
            return nil, err
        }
    } else {
        if err := encoder.Encode(true); err != nil {
            return nil, err
        }
        if err := encoder.Encode(*o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.ReversePkIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `); err != nil {
            return nil, fmt.Errorf("error encoding `); err != nil {
				return
			}

			if _, err = io.WriteString(_w, table.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.ReversePkIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `: %w", err)
        }
    }

    if err := encoder.Encode(o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.ReverseVariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `IsDirty); err != nil {
        return nil, fmt.Errorf("error encoding `); err != nil {
				return
			}

			if _, err = io.WriteString(_w, table.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.ReverseVariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `IsDirty: %w", err)
    }
`); err != nil {
				return
			}

		} else {

			//*** marshal_binary_rev.tmpl

			if _, err = io.WriteString(_w, `    if err := encoder.Encode(&o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.ReverseVariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ` ); err != nil {
        return nil, err
    }
    if err := encoder.Encode(len(o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.ReversePkIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `) != 0); err != nil {
        return nil, err
    }
    if len(o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.ReversePkIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `) != 0 {
        if err := encoder.Encode(o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.ReversePkIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ` ); err != nil {
            return nil, err
        }
    }

    if err := encoder.Encode(o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.ReverseVariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `IsDirty); err != nil {
        return nil, err
    }

    `); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `
`); err != nil {
				return
			}

		}
	}

	for _, mm := range table.ManyManyReferences {

		//*** marshal_binary_mm.tmpl

		if _, err = io.WriteString(_w, `    if err := encoder.Encode(&o.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.VariableIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `); err != nil {
        return nil, fmt.Errorf("error encoding `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.VariableIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `: %w", err)
    }
    if err := encoder.Encode(o.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.VariableIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `IsDirty); err != nil {
        return nil, fmt.Errorf("error encoding `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.VariableIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `IsDirty: %w", err)
    }
    if err := encoder.Encode(o.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.PkIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, ` != nil); err != nil {
        return nil, err
    }
    if o.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.PkIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, ` != nil {
        if err := encoder.Encode(o.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.PkIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `); err != nil {
            return nil, fmt.Errorf("error encoding `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.PkIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `: %w", err)
        }
    }

`); err != nil {
			return
		}

	}

	//*** marshal_binary_extra.tmpl

	if _, err = io.WriteString(_w, `
    if o._aliases == nil {
        if err := encoder.Encode(false); err != nil {
            return nil, err
        }
    } else {
        if err := encoder.Encode(true); err != nil {
            return nil, err
        }
        if err := encoder.Encode(o._aliases); err != nil {
            return nil, fmt.Errorf("error encoding `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `._aliases: %w", err)
        }
    }

    if err := encoder.Encode(o._restored); err != nil {
        return nil, fmt.Errorf("error encoding `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `._restored: %w", err)
    }
    if err := encoder.Encode(o._originalPK); err != nil {
        return nil, fmt.Errorf("error encoding `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `._originalPK: %w", err)
    }

    return buf.Bytes(), nil

`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `    return buf.Bytes(), nil
}
`); err != nil {
		return
	}

	//*** unmarshal_binary.tmpl

	if _, err = io.WriteString(_w, `
// UnmarshalBinary converts a structure that was created with MarshalBinary into a `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` object.
func (o *`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `Base) UnmarshalBinary(data []byte) (err error) {

	buf := bytes.NewBuffer(data)
	dec := gob.NewDecoder(buf)
	var isPtr bool

	_ = isPtr
`); err != nil {
		return
	}

	for _, col := range table.Columns {

		//*** unmarshal_binary_col.tmpl

		if _, err = io.WriteString(_w, `    if err = dec.Decode(&o.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `); err != nil {
        return fmt.Errorf("error decoding `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `: %w", err)
    }
`); err != nil {
			return
		}

		if col.IsNullable {

			if _, err = io.WriteString(_w, `    if err = dec.Decode(&o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `IsNull); err != nil {
        return fmt.Errorf("error decoding `); err != nil {
				return
			}

			if _, err = io.WriteString(_w, table.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `IsNull: %w", err)
    }
`); err != nil {
				return
			}

		}

		if _, err = io.WriteString(_w, `    if err = dec.Decode(&o.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `IsValid); err != nil {
        return fmt.Errorf("error decoding `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `IsValid: %w", err)
    }
    if err = dec.Decode(&o.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `IsDirty); err != nil {
        return fmt.Errorf("error decoding `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `IsDirty: %w", err)
    }

`); err != nil {
			return
		}

		if col.IsReference() {

			if _, err = io.WriteString(_w, `    if err = dec.Decode(&isPtr); err != nil {
        return fmt.Errorf("error decoding `); err != nil {
				return
			}

			if _, err = io.WriteString(_w, table.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.ReferenceVariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ` isPtr: %w", err)
    }
    if isPtr {
        if err = dec.Decode(&o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.ReferenceVariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `); err != nil {
            return fmt.Errorf("error decoding `); err != nil {
				return
			}

			if _, err = io.WriteString(_w, table.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.ReferenceVariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `: %w", err)
        }
    }
`); err != nil {
				return
			}

		}

	}

	for _, rev := range table.ReverseReferences {
		if rev.IsUnique {

			//*** unmarshal_binary_rev_unique.tmpl

			if _, err = io.WriteString(_w, `    if err = dec.Decode(&isPtr); err != nil {
        return fmt.Errorf("error decoding `); err != nil {
				return
			}

			if _, err = io.WriteString(_w, table.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.ReverseVariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ` isPtr: %w", err)
    }
    if isPtr {
        if err = dec.Decode(&o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.ReverseVariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `); err != nil {
            return fmt.Errorf("error decoding `); err != nil {
				return
			}

			if _, err = io.WriteString(_w, table.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.ReverseVariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `: %w", err)
        }
    }

    if err = dec.Decode(&isPtr); err != nil {
        return fmt.Errorf("error decoding `); err != nil {
				return
			}

			if _, err = io.WriteString(_w, table.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.ReversePkIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ` isPtr: %w", err)
    }
    if isPtr {
        if err = dec.Decode(&o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.ReversePkIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `); err != nil {
            return fmt.Errorf("error decoding `); err != nil {
				return
			}

			if _, err = io.WriteString(_w, table.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.ReversePkIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `: %w", err)
        }
    }

    if err = dec.Decode(&o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.ReverseVariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `IsDirty); err != nil {
        return fmt.Errorf("error decoding `); err != nil {
				return
			}

			if _, err = io.WriteString(_w, table.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.ReverseVariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `IsDirty: %w", err)
    }
`); err != nil {
				return
			}

		} else {

			//*** unmarshal_binary_rev.tmpl

			if _, err = io.WriteString(_w, `    if err = dec.Decode(&o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.ReverseVariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `); err != nil {
        return fmt.Errorf("error decoding `); err != nil {
				return
			}

			if _, err = io.WriteString(_w, table.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.ReverseVariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `: %w", err)
    }

    if err = dec.Decode(&isPtr); err != nil {
        return fmt.Errorf("error decoding `); err != nil {
				return
			}

			if _, err = io.WriteString(_w, table.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.ReversePkIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ` isPtr: %w", err)
    }
    if isPtr {
        if err = dec.Decode(&o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.ReversePkIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `); err != nil {
            return fmt.Errorf("error decoding `); err != nil {
				return
			}

			if _, err = io.WriteString(_w, table.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.ReversePkIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `: %w", err)
        }
    }

    if err = dec.Decode(&o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.ReverseVariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `IsDirty); err != nil {
        return fmt.Errorf("error decoding `); err != nil {
				return
			}

			if _, err = io.WriteString(_w, table.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.ReverseVariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `IsDirty: %w", err)
    }

    `); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `
`); err != nil {
				return
			}

		}
	}

	for _, mm := range table.ManyManyReferences {

		//*** unmarshal_binary_mm.tmpl

		if _, err = io.WriteString(_w, `
    if err = dec.Decode(&o.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.VariableIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `); err != nil {
        return fmt.Errorf("error decoding `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.PkIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `: %w", err)
    }
    if err = dec.Decode(&o.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.VariableIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `IsDirty); err != nil {
        return fmt.Errorf("error decoding `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.VariableIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `IsDirty: %w", err)
    }
    if err = dec.Decode(&isPtr); err != nil {
        return fmt.Errorf("error decoding `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.PkIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, ` isPtr: %w", err)
    }
    if isPtr {
        if err = dec.Decode(&o.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.PkIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `); err != nil {
            return fmt.Errorf("error decoding `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.PkIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `: %w", err)
        }
    }
`); err != nil {
			return
		}

	}

	if _, err = io.WriteString(_w, `	return
}
`); err != nil {
		return
	}

	return
}

func (tmpl *TableBaseTemplate) genJson(table *model.Table, _w io.Writer) (err error) {

	//*** marshal_json.tmpl

	if _, err = io.WriteString(_w, `// MarshalJSON serializes the object into a JSON object.
// Only valid data will be serialized, meaning, you can control what gets serialized by using Select to
// select only the fields you want when you query for the object. Another way to control the output
// is to call MarshalStringMap, modify the map, then encode the map.
func (o *`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `Base) MarshalJSON() (data []byte, err error) {
    v := o.MarshalStringMap()
    return json.Marshal(v)
}

// MarshalStringMap serializes the object into a string map of interfaces.
// Only valid data will be serialized, meaning, you can control what gets serialized by using Select to
// select only the fields you want when you query for the object. The keys are the same as the json keys.
func (o *`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `Base) MarshalStringMap() (map[string]interface{}) {
    v := make(map[string]interface{})
`); err != nil {
		return
	}

	for _, col := range table.Columns {

		//*** marshal_stringmap_col.tmpl

		if _, err = io.WriteString(_w, `
    if o.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `IsValid {
`); err != nil {
			return
		}

		if col.IsNullable {

			if _, err = io.WriteString(_w, `        if o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `IsNull {
            v["`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.JsonKey()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `"] = nil
        } else {
            v["`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.JsonKey()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `"] = o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `
        }
`); err != nil {
				return
			}

		} else {

			if _, err = io.WriteString(_w, `        v["`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.JsonKey()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `"] = o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.VariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `
`); err != nil {
				return
			}

		}

		if _, err = io.WriteString(_w, `    }

`); err != nil {
			return
		}

		if col.IsReference() {

			if _, err = io.WriteString(_w, `    if val := o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.ReferenceIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `(); val != nil {
        v["`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.ReferenceJsonKey()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `"] = val.MarshalStringMap()
    }
`); err != nil {
				return
			}

		}

	}

	for _, rev := range table.ReverseReferences {

		//*** marshal_stringmap_rev.tmpl

		if rev.IsUnique {

			if _, err = io.WriteString(_w, `    if obj := o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.ReverseVariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `; obj != nil {
        v["`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.ReverseJsonKey()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `"] = obj.MarshalStringMap()
    }
`); err != nil {
				return
			}

		} else {

			if _, err = io.WriteString(_w, `    if o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.ReverseVariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `.Len() != 0 {
        var vals []map[string]interface{}
        for obj := range o.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.ReverseVariableIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `.ValuesIter() {
            vals = append(vals, obj.MarshalStringMap())
        }
        v["`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.ReverseJsonKey()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `"] = vals
    }
`); err != nil {
				return
			}

		}

	}

	for _, mm := range table.ManyManyReferences {

		//*** marshal_stringmap_mm.tmpl

		if _, err = io.WriteString(_w, `    if o.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.VariableIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `.Len() != 0 {
        var vals []map[string]interface{}
        for obj := range o.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.VariableIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `.ValuesIter() {
            vals = append(vals, obj.MarshalStringMap())
        }
        v["`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.JsonKey()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `"] = vals
    }
`); err != nil {
			return
		}

	}

	//*** marshal_stringmap_extra.tmpl

	if _, err = io.WriteString(_w, `    for _k,_v := range o._aliases {
        v[_k] = _v
    }
`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `    return v
}
`); err != nil {
		return
	}

	//*** unmarshal_json.tmpl

	if _, err = io.WriteString(_w, `

// UnmarshalJSON unmarshalls the given json data into the `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `. The `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` can be a
// newly created object, or one loaded from the database.
//
// After unmarshalling, the object is not  saved. You must call Save to insert it into the database
// or update it.
//
// Unmarshalling of sub-objects, as in objects linked via foreign keys, is not currently supported.
//
// The fields it expects are:
`); err != nil {
		return
	}

	for _, col := range table.Columns {

		if _, err = io.WriteString(_w, `//   "`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, col.JsonKey()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `" - `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, col.GoType()); err != nil {
			return
		}

		if col.IsNullable {

			if _, err = io.WriteString(_w, `, nullable`); err != nil {
				return
			}

		}

		if _, err = io.WriteString(_w, `
`); err != nil {
			return
		}

	}

	if _, err = io.WriteString(_w, `func (o *`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `Base) UnmarshalJSON (data []byte) (err error) {
    var v map[string]interface{}
    if err = json.Unmarshal(data, &v); err != nil { return err}
    return o.UnmarshalStringMap(v)
}

// UnmarshalStringMap will load the values from the stringmap into the object.
//
// Override this in `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` to modify the json before sending it here.
func (o *`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `Base) UnmarshalStringMap(m map[string]interface{}) (err error) {
    for k,v := range m {
        switch k {

`); err != nil {
		return
	}

	for _, col := range table.Columns {
		if !col.HasSetter() {
			continue
		}

		//*** unmarshal_stringmap_col.tmpl

		if _, err = io.WriteString(_w, `        case "`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, col.JsonKey()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `":
        {
`); err != nil {
			return
		}

		if !col.IsNullable {

			if _, err = io.WriteString(_w, `            if v == nil {
                return fmt.Errorf("json field %s cannot be null", k)
            }
`); err != nil {
				return
			}

		} else {

			if _, err = io.WriteString(_w, `            if v == nil {
                o.Set`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `(v)
                continue
            }
`); err != nil {
				return
			}

		}

		if _, err = io.WriteString(_w, `
`); err != nil {
			return
		}

		if col.IsReference() {

			if _, err = io.WriteString(_w, `            if s,ok := v.(string); !ok {
                return fmt.Errorf("json field %s must be a string", k)
            } else {
                o.Set`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `(s)
            }

`); err != nil {
				return
			}

		} else if col.IsEnum() {

			if col.IsManyEnum() {

				if _, err = io.WriteString(_w, `           if n,ok := v.([]int); ok {
               var a `); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.GoType()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `
               for _,i := range n {
                   a = append(a,`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.ReferenceType()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `(i))
               }
               o.Set`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `(a)
           } else if n,ok := v.([]float64); ok {
               var a `); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.GoType()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `
               for _,f := range n {
                   a = append(a,`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.ReferenceType()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `(int(f)))
               }
               o.Set`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `(a)
           } else if n,ok := v.([]string); ok {
               var a `); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.GoType()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `
               for _,s := range n {
                   a = append(a, `); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.ReferenceType()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `From`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.Reference.EnumTable.FieldIdentifier(1)); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `(s))
               }
               o.Set`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `(a)
           } else {
               return fmt.Errorf("json field %s must be a number", k)
           }

`); err != nil {
					return
				}

			} else {

				if _, err = io.WriteString(_w, `           if n,ok := v.(int); ok {
               o.Set`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.ReferenceIdentifier()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `(`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.ReferenceType()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `(n))
           } else if n,ok := v.(float64); ok {
               o.Set`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.ReferenceIdentifier()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `(`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.ReferenceType()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `(int(n)))
           } else if n,ok := v.(string); ok {
               o.Set`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.ReferenceIdentifier()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `(`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.ReferenceType()); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `From`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.Reference.EnumTable.FieldIdentifier(1)); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `(n))
           } else {
               return fmt.Errorf("json field %s must be a number", k)
           }
`); err != nil {
					return
				}

			}

		} else {

			if _, err = io.WriteString(_w, `

`); err != nil {
				return
			}

			switch col.ReceiverType {

			case query.ColTypeInteger:

				if _, err = io.WriteString(_w, `            if n,ok := v.(int); ok {
                o.Set`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `(int(n))
            } else if n,ok := v.(float64); ok {
                o.Set`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `(int(n))
            } else {
                return fmt.Errorf("json field %s must be a number", k)
            }
`); err != nil {
					return
				}

			case query.ColTypeUnsigned:

				if _, err = io.WriteString(_w, `            if n,ok := v.(int); ok {
                o.Set`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `(uint(n))
            } else if n,ok := v.(float64); ok {
                o.Set`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `(uint(n))
            } else {
                return fmt.Errorf("json field %s must be a number", k)
            }
`); err != nil {
					return
				}

			case query.ColTypeInteger64:

				if _, err = io.WriteString(_w, `            if n,ok := v.(int); ok {
                o.Set`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `(int64(n))
            } else if n,ok := v.(float64); ok {
                o.Set`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `(int64(n))
            } else {
                return fmt.Errorf("json field %s must be a number", k)
            }
`); err != nil {
					return
				}

			case query.ColTypeUnsigned64:

				if _, err = io.WriteString(_w, `            if n,ok := v.(int); ok {
                o.Set`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `(uint64(n))
            } else if n,ok := v.(float64); ok {
                o.Set`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `(uint64(n))
            } else {
                return fmt.Errorf("json field %s must be a number", k)
            }
`); err != nil {
					return
				}

			case query.ColTypeFloat32:

				if _, err = io.WriteString(_w, `            if n,ok := v.(float64); ok {
                o.Set`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `(float32(n))
            } else {
                return fmt.Errorf("json field %s must be a number", k)
            }
`); err != nil {
					return
				}

			case query.ColTypeFloat64:

				if _, err = io.WriteString(_w, `            if n,ok := v.(float64); ok {
                o.Set`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `(n)
            } else {
                return fmt.Errorf("json field %s must be a number", k)
            }
`); err != nil {
					return
				}

			case query.ColTypeBytes:
				fallthrough
			case query.ColTypeUnknown:

				if _, err = io.WriteString(_w, `            switch d := v.(type) {
            case string:
            {
                // A base 64 encoded string
                if b,err2 := base64.StdEncoding.DecodeString(d); err2 == nil {
                    o.Set`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `(b)
                } else {
                    return fmt.Errorf("json field %s must be either a Base64 encoded string or an array of byte values", k)
                }
            }
            case []interface{}:
            {
                // An array of byte values. Unfortunately, these come through as float64s, and so need to be converted
                b := make([]byte, len(d), len(d))
                for i,b1 := range d {
                    if f,ok := b1.(float64); !ok {
                        return fmt.Errorf("json field %s must be either a Base64 encoded string or an array of byte values", k)
                    } else {
                        b[i] = uint8(f)
                    }
                }
                o.Set`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `(b)
            }
            default:
                return fmt.Errorf("json field %s must be either a Base64 encoded string or an array of byte values", k)
            }

`); err != nil {
					return
				}

			case query.ColTypeString:

				if _, err = io.WriteString(_w, `            if s,ok := v.(string); !ok {
                return fmt.Errorf("json field %s must be a string", k)
            } else {
                o.Set`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `(s)
            }
`); err != nil {
					return
				}

			case query.ColTypeBool:

				if _, err = io.WriteString(_w, `            if b,ok := v.(bool); !ok {
                return fmt.Errorf("json field %s must be a boolean", k)
            } else {
                o.Set`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `(b)
            }
`); err != nil {
					return
				}

			case query.ColTypeTime:

				if _, err = io.WriteString(_w, `             switch d := v.(type) {
             case float64:
                // a numeric value, which for JSON, means milliseconds since epoc
                o.Set`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `(time.UnixMilli(int64(d)).UTC())
             case string:
                // an ISO8601 string (hopefully)
                var t time.Time
                err = t.UnmarshalJSON([]byte(`+"`"+`"`+"`"+` + d + `+"`"+`"`+"`"+`))
                if err != nil {
                    return fmt.Errorf("JSON format error for time field %s: %w", k, err)
                }
                t = t.UTC()
                o.Set`); err != nil {
					return
				}

				if _, err = io.WriteString(_w, col.Identifier); err != nil {
					return
				}

				if _, err = io.WriteString(_w, `(t)
             default:
                return fmt.Errorf("json field %s must be a number or a string", k)
             }
`); err != nil {
					return
				}

			}

		}

		if _, err = io.WriteString(_w, `           }

`); err != nil {
			return
		}

	}

	/*
	   for _,mm := range table.ManyManyReferences {


	   //*** unmarshal_stringmap_mm.tmpl


	   if _,err = io.WriteString(_w, `    // TODO: unmarshall groups of objects
	   `); err != nil {return}


	   }
	*/

	if _, err = io.WriteString(_w, `        }
    }
    return
}

`); err != nil {
		return
	}

	return
}

func (tmpl *TableBaseTemplate) genInclude(table *model.Table, _w io.Writer) (err error) {

	//*** include.tmpl

	// This is an empty template that provides a means to easily add to the base table template.
	return
}
