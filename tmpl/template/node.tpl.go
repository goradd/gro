//** This file was code generated by GoT. DO NOT EDIT. ***

package template

import (
	"fmt"
	"io"
	"path/filepath"
	"strconv"

	"github.com/goradd/orm/pkg/codegen"
	"github.com/goradd/orm/pkg/model"
)

func init() {
	codegen.RegisterTemplate(new(NodeTemplate))
}

// NodeTemplate generates the code for table nodes.
type NodeTemplate struct {
}

func (n *NodeTemplate) FileName(table *model.Table) string {
	return filepath.Join("orm", table.DbKey, "node", table.FileName()+".go")
}

func (n *NodeTemplate) GenerateTable(table *model.Table, _w io.Writer, importPath string) (err error) {
	return n.gen(table, _w)
}

func (n *NodeTemplate) Overwrite() bool {
	return true
}

//*** node.tmpl

var hasReverse bool
var hasReference bool
var hasAssociation bool

func (n *NodeTemplate) gen(table *model.Table, _w io.Writer) (err error) {
	hasReference = false

	for _, col := range table.Columns {
		if col.IsReference() {
			hasReference = true
		}
	}

	hasAssociation = len(table.ManyManyReferences) > 0
	hasReverse = len(table.ReverseReferences) > 0

	if err = n.genHeader(table, _w); err != nil {
		return
	}
	if err = n.genStruct(table, _w); err != nil {
		return
	}
	if err = n.genTableNode(table, _w); err != nil {
		return
	}
	if err = n.genPrivate(table, _w); err != nil {
		return
	}
	if err = n.genPrimaryKey(table, _w); err != nil {
		return
	}
	if err = n.genColumns(table, _w); err != nil {
		return
	}
	if err = n.genAssn(table, _w); err != nil {
		return
	}
	if err = n.genReverse(table, _w); err != nil {
		return
	}
	if err = n.genGob(table, _w); err != nil {
		return
	}
	if err = n.genInit(table, _w); err != nil {
		return
	}
	return
}

func (n *NodeTemplate) genHeader(table *model.Table, _w io.Writer) (err error) {

	if _, err = io.WriteString(_w, `// Code generated by goradd-orm. DO NOT EDIT.

package node


import (
    "bytes"
    "encoding/gob"
	"github.com/goradd/orm/pkg/query"
)
`); err != nil {
		return
	}

	return
}

func (n *NodeTemplate) genStruct(table *model.Table, _w io.Writer) (err error) {

	//*** struct.tmpl

	if _, err = io.WriteString(_w, `
// `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `Node is the builder interface to the `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` nodes.
type `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `Node interface {
    query.TableNodeI
    PrimaryKey() *query.ColumnNode
`); err != nil {
		return
	}

	for _, col := range table.Columns {

		if _, err = io.WriteString(_w, `    // `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, col.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, ` represents the `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, col.QueryName); err != nil {
			return
		}

		if _, err = io.WriteString(_w, ` column in the database.
    `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, col.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `() *query.ColumnNode
`); err != nil {
			return
		}

		if col.IsReference() {

			if _, err = io.WriteString(_w, `    // `); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.ReferenceIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ` represents the `); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.ReferenceIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ` reference to a `); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.ReferenceType()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ` object.
    `); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.ReferenceIdentifier()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `() `); err != nil {
				return
			}

			if _, err = io.WriteString(_w, col.ReferenceType()); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `Node
`); err != nil {
				return
			}

		}

	}

	for _, mm := range table.ManyManyReferences {

		if _, err = io.WriteString(_w, `     // `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.IdentifierPlural); err != nil {
			return
		}

		if _, err = io.WriteString(_w, ` represents the `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.IdentifierPlural); err != nil {
			return
		}

		if _, err = io.WriteString(_w, ` reference to `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.ObjectType()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, ` objects.
   `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.IdentifierPlural); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `() `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.ObjectType()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `Node
`); err != nil {
			return
		}

	}

	for _, rev := range table.ReverseReferences {

		if _, err = io.WriteString(_w, `    // `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, rev.ReverseIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, ` represents the `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, rev.ReverseIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, ` reference to `); err != nil {
			return
		}

		if rev.IsUnique {

			if _, err = io.WriteString(_w, `a `); err != nil {
				return
			}

			if _, err = io.WriteString(_w, rev.Table.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ` object.`); err != nil {
				return
			}

		} else {

			if _, err = io.WriteString(_w, rev.Table.Identifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, ` objects.`); err != nil {
				return
			}

		}

		if _, err = io.WriteString(_w, `
    `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, rev.ReverseIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `() `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, rev.Table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `Node
`); err != nil {
			return
		}

	}

	if _, err = io.WriteString(_w, `}

// `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `Table represents the `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.QueryName); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` table in a query. It uses a builder pattern to chain
// together other tables and columns to form a node chain in a query.
//
// To use the `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `Table, call [`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `()] to start a reference chain when querying the `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.QueryName); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` table.
type `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `Table struct {
}

`); err != nil {
		return
	}

	if hasReverse {

		if _, err = io.WriteString(_w, `type `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `Reference struct {
    `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `Table
    query.ReferenceNode
}
`); err != nil {
			return
		}

	}

	if _, err = io.WriteString(_w, `
`); err != nil {
		return
	}

	if hasReference {

		if _, err = io.WriteString(_w, `type `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `Reverse struct {
    `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `Table
    query.ReverseNode
}
`); err != nil {
			return
		}

	}

	if _, err = io.WriteString(_w, `
`); err != nil {
		return
	}

	if hasAssociation {

		if _, err = io.WriteString(_w, `type `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `Association struct {
    `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `Table
    query.ManyManyNode
}
`); err != nil {
			return
		}

	}

	return
}

func (n *NodeTemplate) genTableNode(table *model.Table, _w io.Writer) (err error) {

	//*** table.tmpl

	if _, err = io.WriteString(_w, `// `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` returns a table node that starts a node chain that begins with the `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.QueryName); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` table.
func `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `() `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `Node {
	return `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `Table{}
}


`); err != nil {
		return
	}

	return
}

func (n *NodeTemplate) genPrivate(table *model.Table, _w io.Writer) (err error) {

	//*** private.tmpl

	if _, err = io.WriteString(_w, `
`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `
// TableName_ returns the query name of the table the node is associated with.
func (n `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `Table) TableName_() string {
    return "`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.QueryName); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `"
}

// NodeType_ returns the query.NodeType of the node.
func (n `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `Table) NodeType_() query.NodeType {
    return query.TableNodeType
}

// DatabaseKey_ returns the database key of the database the node is associated with.
func (n `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `Table) DatabaseKey_() string {
    return "`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.DbKey); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `"
}

// ColumnNodes_ returns a list of all the column nodes in this node.
func (n `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `Table) ColumnNodes_() (nodes []query.Node) {
`); err != nil {
		return
	}

	for _, col := range table.Columns {

		if _, err = io.WriteString(_w, `	nodes = append(nodes, n.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, fmt.Sprint(col.Identifier)); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `())
`); err != nil {
			return
		}

	}

	if _, err = io.WriteString(_w, `	return nodes
}

`); err != nil {
		return
	}

	if hasReverse {

		if _, err = io.WriteString(_w, `func (n *`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `Reference) ColumnNodes_() (nodes []query.Node) {
    nodes = n.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `Table.ColumnNodes_()
    for _,cn := range nodes {
        query.NodeSetParent(cn, n)
    }
    return
}
`); err != nil {
			return
		}

	}

	if _, err = io.WriteString(_w, `
`); err != nil {
		return
	}

	if hasReference {

		if _, err = io.WriteString(_w, `func (n *`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `Reverse) ColumnNodes_() (nodes []query.Node) {
    nodes = n.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `Table.ColumnNodes_()
    for _,cn := range nodes {
        query.NodeSetParent(cn, n)
    }
    return
}
`); err != nil {
			return
		}

	}

	if _, err = io.WriteString(_w, `
`); err != nil {
		return
	}

	if hasAssociation {

		if _, err = io.WriteString(_w, `func (n *`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `Association) ColumnNodes_() (nodes []query.Node) {
    nodes = n.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `Table.ColumnNodes_()
    for _,cn := range nodes {
        query.NodeSetParent(cn, n)
    }
    return
}
`); err != nil {
			return
		}

	}

	if _, err = io.WriteString(_w, `

`); err != nil {
		return
	}

	if hasReverse {

		if _, err = io.WriteString(_w, `func (n *`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `Reference) NodeType_() query.NodeType {
    return query.ReferenceNodeType
}
`); err != nil {
			return
		}

	}

	if _, err = io.WriteString(_w, `
`); err != nil {
		return
	}

	if hasReference {

		if _, err = io.WriteString(_w, `func (n *`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `Reverse) NodeType_() query.NodeType {
    return query.ReverseNodeType
}
`); err != nil {
			return
		}

	}

	if _, err = io.WriteString(_w, `
`); err != nil {
		return
	}

	if hasAssociation {

		if _, err = io.WriteString(_w, `func (n *`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `Association) NodeType_() query.NodeType {
    return query.ManyManyNodeType
}
`); err != nil {
			return
		}

	}

	if _, err = io.WriteString(_w, `
`); err != nil {
		return
	}

	return
}

func (n *NodeTemplate) genPrimaryKey(table *model.Table, _w io.Writer) (err error) {
	if col := table.PrimaryKeyColumn(); col != nil {

		//*** pk.tmpl

		if _, err = io.WriteString(_w, `// PrimaryKey returns a node that points to the primary key column.
func (n `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `Table) PrimaryKey() *query.ColumnNode {
    return n.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, fmt.Sprint(col.Identifier)); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `()
}

`); err != nil {
			return
		}

		if hasReverse {

			if _, err = io.WriteString(_w, `// PrimaryKey returns a node that points to the primary key column.
func (n *`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `Reference) PrimaryKey() *query.ColumnNode {
    return n.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, fmt.Sprint(col.Identifier)); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `()
}

`); err != nil {
				return
			}

		}

		if hasReference {

			if _, err = io.WriteString(_w, `// PrimaryKey returns a node that points to the primary key column.
func (n *`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `Reverse) PrimaryKey() *query.ColumnNode {
    return n.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, fmt.Sprint(col.Identifier)); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `()
}

`); err != nil {
				return
			}

		}

		if hasAssociation {

			if _, err = io.WriteString(_w, `// PrimaryKey returns a node that points to the primary key column.
func (n *`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `Association) PrimaryKey() *query.ColumnNode {
    return n.`); err != nil {
				return
			}

			if _, err = io.WriteString(_w, fmt.Sprint(col.Identifier)); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `()
}

`); err != nil {
				return
			}

		}

	}
	return
}

func (n *NodeTemplate) genColumns(table *model.Table, _w io.Writer) (err error) {
	for _, col := range table.Columns {
		if err = n.genColumn(table, col, _w); err != nil {
			return
		}
	}
	return
}

func (n *NodeTemplate) genGob(table *model.Table, _w io.Writer) (err error) {

	//*** gob.tmpl

	if _, err = io.WriteString(_w, `
func (n `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `Table) GobEncode() (data []byte, err error) {
	return
}

func (n *`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `Table) GobDecode(data []byte) (err error) {
	return
}

`); err != nil {
		return
	}

	if hasReverse {

		if _, err = io.WriteString(_w, `func (n *`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `Reference) GobEncode() (data []byte, err error) {
	var buf bytes.Buffer
	e := gob.NewEncoder(&buf)

	if err = e.Encode(&n.ReferenceNode); err != nil {
		panic(err)
	}
	data = buf.Bytes()
	return
}

func (n *`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `Reference) GobDecode(data []byte) (err error) {
	buf := bytes.NewBuffer(data)
	dec := gob.NewDecoder(buf)

	if err = dec.Decode(&n.ReferenceNode); err != nil {
		panic(err)
	}
	return
}
`); err != nil {
			return
		}

	}

	if _, err = io.WriteString(_w, `
`); err != nil {
		return
	}

	if hasReference {

		if _, err = io.WriteString(_w, `func (n *`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `Reverse) GobEncode() (data []byte, err error) {
	var buf bytes.Buffer
	e := gob.NewEncoder(&buf)

	if err = e.Encode(&n.ReverseNode); err != nil {
		panic(err)
	}
	data = buf.Bytes()
	return
}

func (n *`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `Reverse) GobDecode(data []byte) (err error) {
	buf := bytes.NewBuffer(data)
	dec := gob.NewDecoder(buf)

	if err = dec.Decode(&n.ReverseNode); err != nil {
		panic(err)
	}
	return
}
`); err != nil {
			return
		}

	}

	if _, err = io.WriteString(_w, `
`); err != nil {
		return
	}

	if hasAssociation {

		if _, err = io.WriteString(_w, `func (n *`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `Association) GobEncode() (data []byte, err error) {
	var buf bytes.Buffer
	e := gob.NewEncoder(&buf)

	if err = e.Encode(&n.ManyManyNode); err != nil {
		panic(err)
	}
	data = buf.Bytes()
	return
}

func (n *`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `Association) GobDecode(data []byte) (err error) {
	buf := bytes.NewBuffer(data)
	dec := gob.NewDecoder(buf)

	if err = dec.Decode(&n.ManyManyNode); err != nil {
		panic(err)
	}
	return
}
`); err != nil {
			return
		}

	}

	if _, err = io.WriteString(_w, `
`); err != nil {
		return
	}

	return
}

func (n *NodeTemplate) genInit(table *model.Table, _w io.Writer) (err error) {

	//*** init.tmpl

	if _, err = io.WriteString(_w, `
func init() {
	gob.Register(new(`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `Table))
`); err != nil {
		return
	}

	if hasReverse {

		if _, err = io.WriteString(_w, `	gob.Register(new(`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `Reference))
`); err != nil {
			return
		}

	}

	if hasReference {

		if _, err = io.WriteString(_w, `	gob.Register(new(`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `Reverse))
`); err != nil {
			return
		}

	}

	if hasAssociation {

		if _, err = io.WriteString(_w, `	gob.Register(new(`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `Association))
`); err != nil {
			return
		}

	}

	if _, err = io.WriteString(_w, `}
`); err != nil {
		return
	}

	return
}

//*** column.tmpl

func (n *NodeTemplate) genColumn(table *model.Table, col *model.Column, _w io.Writer) (err error) {
	if err = n.genColumnNode(table, col, _w); err != nil {
		return
	}
	if col.IsReference() {
		err = n.genTableRefNode(table, col, _w)
	}
	return
}

func (n *NodeTemplate) genColumnNode(table *model.Table, col *model.Column, _w io.Writer) (err error) {

	if _, err = io.WriteString(_w, `func (n `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `Table) `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `() *query.ColumnNode {
	cn := &query.ColumnNode{
		QueryName: "`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.QueryName); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `",
		Identifier: "`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `",
		ReceiverType: query.`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.ReceiverType.String()); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `,
		IsPrimaryKey: `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, strconv.FormatBool(col.IsPrimaryKey)); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `,
	}
	query.NodeSetParent(cn, n)
	return cn
}

`); err != nil {
		return
	}

	if hasReverse {

		if _, err = io.WriteString(_w, `func (n *`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `Reference) `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, col.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `() *query.ColumnNode {
    cn := n.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `Table.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, col.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `()
    query.NodeSetParent(cn, n)
    return cn
}

`); err != nil {
			return
		}

	}

	if hasReference {

		if _, err = io.WriteString(_w, `func (n *`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `Reverse) `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, col.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `() *query.ColumnNode {
    cn := n.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `Table.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, col.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `()
    query.NodeSetParent(cn, n)
    return cn
}

`); err != nil {
			return
		}

	}

	if hasAssociation {

		if _, err = io.WriteString(_w, `func (n *`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `Association) `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, col.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `() *query.ColumnNode {
    cn := n.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `Table.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, col.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `()
    query.NodeSetParent(cn, n)
    return cn
}
`); err != nil {
			return
		}

	}

	if _, err = io.WriteString(_w, `
`); err != nil {
		return
	}

	return
}

func (n *NodeTemplate) genTableRefNode(table *model.Table, col *model.Column, _w io.Writer) (err error) {

	if _, err = io.WriteString(_w, `// `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.ReferenceIdentifier()); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` represents the link to a `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.ReferenceType()); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` object.
func (n `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `Table) `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.ReferenceIdentifier()); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `() `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.ReferenceType()); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `Node {
	cn := &`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.Reference.Table.DecapIdentifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `Reference{
		ReferenceNode: query.ReferenceNode {
            ColumnQueryName: "`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.QueryName); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `",
            Identifier:      "`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.ReferenceIdentifier()); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `",
            ReceiverType:    query.`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, col.ReceiverType.String()); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `,
		},
	}
	query.NodeSetParent(cn, n)
	return cn
}

`); err != nil {
		return
	}

	if hasReverse {

		if _, err = io.WriteString(_w, `func (n *`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `Reference) `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, col.ReferenceIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `() `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, col.ReferenceType()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `Node {
    cn := n.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `Table.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, col.ReferenceIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `().(*`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, col.Reference.Table.DecapIdentifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `Reference)
    query.NodeSetParent(cn, n)
    return cn
}

`); err != nil {
			return
		}

	}

	if hasReference {

		if _, err = io.WriteString(_w, `func (n *`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `Reverse) `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, col.ReferenceIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `() `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, col.ReferenceType()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `Node {
    cn := n.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `Table.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, col.ReferenceIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `().(*`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, col.Reference.Table.DecapIdentifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `Reference)
    query.NodeSetParent(cn, n)
    return cn
}

`); err != nil {
			return
		}

	}

	if hasAssociation {

		if _, err = io.WriteString(_w, `func (n *`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `Association) `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, col.ReferenceIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `() `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, col.ReferenceType()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `Node {
    cn := n.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `Table.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, col.ReferenceIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `().(*`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, col.Reference.Table.DecapIdentifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `Reference)
    query.NodeSetParent(cn, n)
    return cn
}

`); err != nil {
			return
		}

	}

	return
}

//*** assn.tmpl

func (n *NodeTemplate) genAssn(table *model.Table, _w io.Writer) (err error) {
	for _, mm := range table.ManyManyReferences {
		if err = n.genAssnTable(table, mm, _w); err != nil {
			return
		}
	}
	return
}

func (n *NodeTemplate) genAssnTable(table *model.Table, mm *model.ManyManyReference, _w io.Writer) (err error) {
	var objectType string
	objectType = mm.DestinationTable.DecapIdentifier + "Association"

	if _, err = io.WriteString(_w, `// `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, mm.IdentifierPlural); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` represents the many-to-many relationship formed by the `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, mm.AssnTableName); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` table.
func (n `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `Table) `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, mm.IdentifierPlural); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `() `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, mm.ObjectType()); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `Node  {
	cn := &`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, objectType); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` {
		ManyManyNode: query.ManyManyNode{
			AssnTableQueryName:      "`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, mm.AssnTableName); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `",
			ParentColumnQueryName:    "`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, mm.AssnSourceColumnName); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `",
			ParentColumnReceiverType: query.`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, mm.AssnSourceColumnType.String()); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `,
			Identifier:               "`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, mm.IdentifierPlural); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `",
			RefColumnQueryName:       "`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, mm.AssnDestColumnName); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `",
			RefColumnReceiverType:    query.`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, mm.AssnDestColumnType.String()); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `,
		},
	}
	query.NodeSetParent(cn, n)
	return cn
}

`); err != nil {
		return
	}

	if hasReverse {

		if _, err = io.WriteString(_w, `func (n *`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `Reference) `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.IdentifierPlural); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `() `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.ObjectType()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `Node  {
    cn := n.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `Table.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.IdentifierPlural); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `().(*`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, objectType); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `)
    query.NodeSetParent(cn, n)
    return cn
}

`); err != nil {
			return
		}

	}

	if hasReference {

		if _, err = io.WriteString(_w, `func (n *`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `Reverse) `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.IdentifierPlural); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `() `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.ObjectType()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `Node  {
    cn := n.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `Table.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.IdentifierPlural); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `().(*`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, objectType); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `)
    query.NodeSetParent(cn, n)
    return cn
}

`); err != nil {
			return
		}

	}

	if hasAssociation {

		if _, err = io.WriteString(_w, `func (n *`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `Association) `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.IdentifierPlural); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `() `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.ObjectType()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `Node  {
    cn := n.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `Table.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, mm.IdentifierPlural); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `().(*`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, objectType); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `)
    query.NodeSetParent(cn, n)
    return cn
}

`); err != nil {
			return
		}

	}

	if _, err = io.WriteString(_w, `
`); err != nil {
		return
	}

	return
}

//*** reverse.tmpl

func (n *NodeTemplate) genReverse(table *model.Table, _w io.Writer) (err error) {
	for _, rev := range table.ReverseReferences {
		if rev.IsUnique {
			if err = n.genReverseOne(table, rev, _w); err != nil {
				return
			}
		} else {
			if err = n.genReverseMany(table, rev, _w); err != nil {
				return
			}
		}
	}
	return
}

func (n *NodeTemplate) genReverseOne(table *model.Table, rev *model.Column, _w io.Writer) (err error) {

	if _, err = io.WriteString(_w, `// `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, rev.ReverseIdentifier()); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` represents the one-to-one relationship formed by the reverse reference from the
// `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, rev.QueryName); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` column in the `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, rev.Table.QueryName); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` table.
func (n `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `Table) `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, rev.ReverseIdentifier()); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `() `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, rev.Table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `Node  {
	cn := &`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, rev.Table.DecapIdentifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `Reverse{
		ReverseNode: query.ReverseNode{
			ColumnQueryName: "`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, rev.QueryName); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `",
			Identifier:      "`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, rev.ReverseIdentifier()); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `",
			ReceiverType:    query.`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, rev.ReceiverType.String()); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `,
			IsUnique:        `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, strconv.FormatBool(rev.IsUnique)); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `,
		},
	}
	query.NodeSetParent(cn, n)
	return cn
}

`); err != nil {
		return
	}

	if hasReverse {

		if _, err = io.WriteString(_w, `func (n *`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `Reference) `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, rev.ReverseIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `() `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, rev.Table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `Node  {
    cn := n.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `Table.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, rev.ReverseIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `().(*`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, rev.Table.DecapIdentifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `Reverse)
    query.NodeSetParent(cn, n)
    return cn
}

`); err != nil {
			return
		}

	}

	if hasReference {

		if _, err = io.WriteString(_w, `func (n *`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `Reverse) `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, rev.ReverseIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `() `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, rev.Table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `Node  {
    cn := n.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `Table.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, rev.ReverseIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `().(*`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, rev.Table.DecapIdentifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `Reverse)
    query.NodeSetParent(cn, n)
    return cn
}

`); err != nil {
			return
		}

	}

	if hasAssociation {

		if _, err = io.WriteString(_w, `func (n *`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `Association) `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, rev.ReverseIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `() `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, rev.Table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `Node  {
    cn := n.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `Table.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, rev.ReverseIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `().(*`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, rev.Table.DecapIdentifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `Reverse)
    query.NodeSetParent(cn, n)
    return cn
}

`); err != nil {
			return
		}

	}

	if _, err = io.WriteString(_w, `
`); err != nil {
		return
	}

	return
}

func (n *NodeTemplate) genReverseMany(table *model.Table, rev *model.Column, _w io.Writer) (err error) {

	if _, err = io.WriteString(_w, `
// `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, rev.ReverseIdentifier()); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` represents the many-to-one relationship formed by the reverse reference from the
// `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, rev.QueryName); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` column in the `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, rev.Table.QueryName); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` table.
func (n `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `Table) `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, rev.ReverseIdentifier()); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `() `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, rev.Table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `Node  {
	cn := &`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, rev.Table.DecapIdentifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `Reverse{
		ReverseNode: query.ReverseNode{
			ColumnQueryName: "`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, rev.QueryName); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `",
			Identifier:      "`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, rev.ReverseIdentifier()); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `",
			ReceiverType:    query.`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, rev.ReceiverType.String()); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `,
			IsUnique:        `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, strconv.FormatBool(rev.IsUnique)); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `,
		},
	}
	query.NodeSetParent(cn, n)
	return cn
}

`); err != nil {
		return
	}

	if hasReverse {

		if _, err = io.WriteString(_w, `func (n *`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `Reference) `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, rev.ReverseIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `() `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, rev.Table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `Node {
    cn := n.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `Table.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, rev.ReverseIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `().(*`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, rev.Table.DecapIdentifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `Reverse)
    query.NodeSetParent(cn, n)
    return cn
}

`); err != nil {
			return
		}

	}

	if hasReference {

		if _, err = io.WriteString(_w, `func (n *`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `Reverse) `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, rev.ReverseIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `() `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, rev.Table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `Node {
    cn := n.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `Table.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, rev.ReverseIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `().(*`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, rev.Table.DecapIdentifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `Reverse)
    query.NodeSetParent(cn, n)
    return cn
}

`); err != nil {
			return
		}

	}

	if hasAssociation {

		if _, err = io.WriteString(_w, `func (n *`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `Association) `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, rev.ReverseIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `() `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, rev.Table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `Node {
    cn := n.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.DecapIdentifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `Table.`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, rev.ReverseIdentifier()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `().(*`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, rev.Table.DecapIdentifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `Reverse)
    query.NodeSetParent(cn, n)
    return cn
}

`); err != nil {
			return
		}

	}

	return
}
