//** This file was code generated by GoT. DO NOT EDIT. ***

package template

import (
	"fmt"
	"io"
	"strconv"

	"github.com/goradd/orm/pkg/codegen"
	"github.com/goradd/orm/pkg/model"
)

func init() {
	t := EnumTemplate{}
	codegen.RegisterTemplate(&t)
}

// EnumTemplate generates code for enumerated types.
type EnumTemplate struct {
	Package string
}

func (tmpl *EnumTemplate) FileName(table *model.Enum) string {
	return table.FileName() + ".go"
}

func (tmpl *EnumTemplate) GenerateEnum(table *model.Enum, _w io.Writer, importPath string) (err error) {
	tmpl.Package = table.DbKey
	return tmpl.gen(table, _w)
}

func (tmpl *EnumTemplate) Overwrite() bool {
	return true
}

//*** enum.tmpl

func (tmpl *EnumTemplate) gen(table *model.Enum, _w io.Writer) (err error) {
	if err = tmpl.genHeader(table, _w); err != nil {
		return
	}
	if err = tmpl.genConstants(table, _w); err != nil {
		return
	}
	if err = tmpl.genUtil(table, _w); err != nil {
		return
	}
	if err = tmpl.genKey(table, _w); err != nil {
		return
	}
	if err = tmpl.genPlurals(table, _w); err != nil {
		return
	}
	if err = tmpl.genInterfaces(table, _w); err != nil {
		return
	}
	if err = tmpl.genFields(table, _w); err != nil {
		return
	}
	if err = tmpl.genMarshal(table, _w); err != nil {
		return
	}
	if err = tmpl.genSet(table, _w); err != nil {
		return
	}
	return
}

func (tmpl *EnumTemplate) genHeader(table *model.Enum, _w io.Writer) (err error) {

	if _, err = io.WriteString(_w, `// Code generated by goradd-orm. DO NOT EDIT.

package `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, tmpl.Package); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `

import (
	"strconv"
	"github.com/goradd/maps"
    "sort"
	"encoding/gob"
)
`); err != nil {
		return
	}

	return
}

func (tmpl *EnumTemplate) genConstants(table *model.Enum, _w io.Writer) (err error) {

	if _, err = io.WriteString(_w, `type `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` int

const (
`); err != nil {
		return
	}

	maxKey := 0
	for _, con := range table.Constants {
		if con.Value > maxKey {
			maxKey = con.Value
		}

		if _, err = io.WriteString(_w, `	`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, con.Const); err != nil {
			return
		}

		if _, err = io.WriteString(_w, ` `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, ` = `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, strconv.Itoa(con.Value)); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `
`); err != nil {
			return
		}

	}

	if _, err = io.WriteString(_w, `)

// `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `MaxValue is the maximum enumerated value of `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `
// doc: type=`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `
const `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `MaxValue = `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, strconv.Itoa(maxKey)); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `

`); err != nil {
		return
	}

	return
}

func (tmpl *EnumTemplate) genUtil(table *model.Enum, _w io.Writer) (err error) {

	if _, err = io.WriteString(_w, `// String returns the name value of the type and satisfies the fmt.Stringer interface
func (e `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `) String() string {
    return e.`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Fields[2].Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `()
}

// IsValid`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` returns true if i can validly be converted to a `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `.
func IsValid`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `(i int) bool {
    switch i {
`); err != nil {
		return
	}

	for _, con := range table.Constants {

		if _, err = io.WriteString(_w, `    case `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, strconv.Itoa(con.Value)); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `: return true
`); err != nil {
			return
		}

	}

	if _, err = io.WriteString(_w, `    default: return false
    }
}

`); err != nil {
		return
	}

	return
}

func (tmpl *EnumTemplate) genKey(table *model.Enum, _w io.Writer) (err error) {

	if _, err = io.WriteString(_w, `// Key returns a string representation of the primary key and satisfies KeyLabeler interface
func (e `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `) Key() string {
	return strconv.Itoa(int(e))
}

// `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `FromKey converts a `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` Key to a `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `
func `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `FromKey (key string) `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` {
	switch key {
`); err != nil {
		return
	}

	for _, con := range table.Constants {

		if _, err = io.WriteString(_w, `    case `+"`"+``); err != nil {
			return
		}

		if _, err = io.WriteString(_w, strconv.Itoa(con.Value)); err != nil {
			return
		}

		if _, err = io.WriteString(_w, ``+"`"+`: return `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, con.Const); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `
`); err != nil {
			return
		}

	}

	if _, err = io.WriteString(_w, `	}
	return `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `(0)
}

// `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.IdentifierPlural); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `FromKeys converts a slice of `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` Keys to a slice of `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `
func `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.IdentifierPlural); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `FromKeys (keys []string) (values []`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `) {
    values = make([]`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `, 0, len(keys))
    for _,key := range keys {
        values = append(values, `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `FromKey(key))
    }
    return
}

`); err != nil {
		return
	}

	return
}

func (tmpl *EnumTemplate) genPlurals(table *model.Enum, _w io.Writer) (err error) {

	if _, err = io.WriteString(_w, `// `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.IdentifierPlural); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` returns a slice of all the `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` values
// in key order.
func `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.IdentifierPlural); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `() ([]`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `) {
    return []`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `{ 
`); err != nil {
		return
	}

	for _, con := range table.Constants {

		if _, err = io.WriteString(_w, `        `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, con.Const); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `,
`); err != nil {
			return
		}

	}

	if _, err = io.WriteString(_w, `    }
}

// `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.IdentifierPlural); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `I returns a slice of all the `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` values as generic interfaces.
// doc: type=`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `
func `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.IdentifierPlural); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `I() (values []any) {
    return []any{ 
`); err != nil {
		return
	}

	for _, con := range table.Constants {

		if _, err = io.WriteString(_w, `        `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, con.Const); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `,
`); err != nil {
			return
		}

	}

	if _, err = io.WriteString(_w, `    }
}

`); err != nil {
		return
	}

	return
}

func (tmpl *EnumTemplate) genInterfaces(table *model.Enum, _w io.Writer) (err error) {

	if _, err = io.WriteString(_w, `
`); err != nil {
		return
	}

	return
}

func (tmpl *EnumTemplate) genFields(table *model.Enum, _w io.Writer) (err error) {

	for i, field := range table.Fields[1:] {
		fieldNum := i + 1

		if _, err = io.WriteString(_w, `func (e `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `) `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, field.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `() `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, field.GoType()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, ` {
	switch e {
	case 0: return `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, field.Type.DefaultValueString()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `
`); err != nil {
			return
		}

		for _, con := range table.Constants {

			if _, err = io.WriteString(_w, `	case `); err != nil {
				return
			}

			if _, err = io.WriteString(_w, con.Const); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `: return `); err != nil {
				return
			}

			if _, err = io.WriteString(_w, fmt.Sprintf("%#v", table.FieldValue(con.Value, fieldNum))); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `
`); err != nil {
				return
			}

		}

		if _, err = io.WriteString(_w, `	default: panic("Index out of range")
	}
}

// `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, field.IdentifierPlural); err != nil {
			return
		}

		if _, err = io.WriteString(_w, ` returns a slice of all the `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, field.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, ` values associated with `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `.
// doc: type=`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `
func `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, table.Identifier); err != nil {
			return
		}

		if _, err = io.WriteString(_w, field.IdentifierPlural); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `() []`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, field.GoType()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, ` {
	return []`); err != nil {
			return
		}

		if _, err = io.WriteString(_w, field.GoType()); err != nil {
			return
		}

		if _, err = io.WriteString(_w, ` {
`); err != nil {
			return
		}

		for _, con := range table.Constants {

			if _, err = io.WriteString(_w, `	    `); err != nil {
				return
			}

			if _, err = io.WriteString(_w, fmt.Sprintf("%#v", table.FieldValue(con.Value, fieldNum))); err != nil {
				return
			}

			if _, err = io.WriteString(_w, `,
`); err != nil {
				return
			}

		}

		if _, err = io.WriteString(_w, `    }
}

`); err != nil {
			return
		}

	}
	return
}

func (tmpl *EnumTemplate) genMarshal(table *model.Enum, _w io.Writer) (err error) {

	if _, err = io.WriteString(_w, `// MarshalJSON converts the type to its identifier for JSON output.
func (e `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `) MarshalJSON() (data []byte, err error) {
	return json.Marshal(e.String()) // wraps it in quotes like "active"
}

// UnmarshalJSON converts a variety of possible JSON inputs to the enum type.
func (e *`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `) UnmarshalJSON(data []byte) error {
	var i any
	var err error

	// Use Decoder or json.Unmarshal directly
	if err = json.Unmarshal(data, &i); err != nil {
		return fmt.Errorf("error unmarshaling `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `: %w", err)
	}
	*e, err = `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `FromInterface(i)
	return err
}

// `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `FromInterface converts a variety of data types to a `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `.
func `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `FromInterface(i any) (`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `, error) {
	switch v := i.(type) {
	case float64:
	    if IsValid`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `(int(v)) {
	        return `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `(int(v)), nil
	    }
	case int:
	    if IsValid`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `(v) {
	        return `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `(v), nil
	    }
	case string:
		// Try to parse as int
		if v2, err := strconv.Atoi(v); err == nil {
	        if IsValid`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `(v2) {
    		    return `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `(v2), nil
    		}
		}
		return `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `FromIdentifier(v)
	case json.Number:
		if v2, err := v.Int64(); err == nil {
	        if IsValid`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `(int(v2)) {
			    return `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `(int(v2)), nil
			}
		}
	default:
		return `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `(0), fmt.Errorf("unsupported type for `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `: %T", v)
	}
	return `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `(0), errors.New("invalid value for `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `")
}

func `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `FromIdentifier(i string) (e `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `, err error) {
    switch i {
`); err != nil {
		return
	}

	for _, con := range table.Constants {

		if _, err = io.WriteString(_w, `        case `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, fmt.Sprintf("%#v", table.FieldValue(con.Value, 2))); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `: return `); err != nil {
			return
		}

		if _, err = io.WriteString(_w, con.Const); err != nil {
			return
		}

		if _, err = io.WriteString(_w, `, nil
`); err != nil {
			return
		}

	}

	if _, err = io.WriteString(_w, `        default: return `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `(0), fmt.Errorf("`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `  for %s not found", i)
    }
}

`); err != nil {
		return
	}

	return
}

func (tmpl *EnumTemplate) genSet(table *model.Enum, _w io.Writer) (err error) {

	if _, err = io.WriteString(_w, `
// `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `Set is a pointer to a group of `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, ` values.
type `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `Set = *maps.OrderedSet[`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `]

func New`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `Set(values ...`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `) `); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `Set {
	return maps.NewOrderedSet[`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `](values...)
}

func init() {
    gob.Register(new(`); err != nil {
		return
	}

	if _, err = io.WriteString(_w, table.Identifier); err != nil {
		return
	}

	if _, err = io.WriteString(_w, `Set))
}

`); err != nil {
		return
	}

	return
}
